{"version":3,"sources":["../src/index.tsx","../src/leptos.tsx"],"sourcesContent":["import * as FTMLT from \"@kwarc/ftml-viewer\"; //\"./ftml-viewer\";//\nimport * as FTML from \"@kwarc/ftml-viewer-base\"; //\"./ftml-viewer/ftml-viewer-base\";//\n\nimport React, { ReactNode, useContext, useEffect, useRef } from \"react\";\nimport { FTMLContext, useLeptosTunnel, useLeptosTunnels } from \"./leptos\";\n\n/**\n * sets the server url. Reexported for **emphasis**.\n */\nexport const setServerUrl = FTMLT.setServerUrl;\n\n/**\n * Injects the given CSS rule into the header of the DOM (if adequate and not duplicate)\n */\nexport const injectCss = FTMLT.injectCss;\n\n/**\n * Get the FLAMS server URL used globally\n */\nexport const getServerUrl = FTMLT.getServerUrl;\n\n/**\n * Get the FLAMS server used globally\n */\nexport const getFlamsServer = FTMLT.getFlamsServer;\n\n/**\n * Turns on debugging messages on the console\n */\nexport const setDebugLog = FTMLT.setDebugLog;\n\n/**\n * Configurables for FTML rendering.\n * Every attribute is inherited from ancestor nodes *unless explicitly overridden*.\n */\nexport interface FTMLConfig {\n  /** may return a react component to *insert* after the title of a section\n   * @param uri the uri of the section\n   * @param lvl the level of the section\n   * @return a react component to insert\n   */\n  onSectionTitle?: (\n    uri: FTML.DocumentElementURI,\n    lvl: FTML.SectionLevel,\n  ) => ReactNode | undefined;\n\n  /**\n   * may return a react component to wrap around a fragment (e.g. Section, Definition, Problem, etc.)\n   * @param uri the uri of the fragment\n   * @param kind the fragment's kind\n   * @return a react component to wrap around its argument\n   */\n  onFragment?: (\n    uri: FTML.DocumentElementURI,\n    kind: FTML.FragmentKind,\n  ) => ((ch: ReactNode) => ReactNode) | undefined;\n  \n  problemStates?: FTML.ProblemStates | undefined;\n  onProblem?: ((response: FTML.ProblemResponse) => void) | undefined;\n}\n\n/**\n * See {@link FTMLConfig}\n */\nexport interface FTMLSetupArgs extends FTMLConfig {\n  children: ReactNode;\n}\n\n/**\n * Sets up Leptos' reactive system\n */\nexport const FTMLSetup: React.FC<FTMLSetupArgs> = (args) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const main = useLeptosTunnel();\n  const { addTunnel, TunnelRenderer } = useLeptosTunnels();\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n    const handle = FTMLT.ftmlSetup(\n      mountRef.current,\n      (e, o) => {\n        main.addTunnel(\n          e,\n          <>\n            {args.children}\n            <TunnelRenderer />\n          </>,\n          o,\n        );\n      },\n      toConfig(args, addTunnel),\n    );\n    return () => {\n      handle.unmount();\n    };\n  }, []);\n\n  return (\n    <>\n      <div ref={mountRef} style={{ display: \"contents\" }} />\n      <main.TunnelRenderer />\n    </>\n  );\n};\n\n/**\n * See {@link FTMLConfig} and {@link FTML.DocumentOptions}\n */\nexport interface FTMLDocumentArgs extends FTMLConfig {\n  document: FTML.DocumentOptions;\n}\n\n/**\n * render an FTML document\n */\nexport const FTMLDocument: React.FC<FTMLDocumentArgs> = (args) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const { addTunnel, TunnelRenderer } = useLeptosTunnels();\n  const context = useContext(FTMLContext);\n\n  useEffect(() => {\n    if (mountRef.current === null) return;\n    const cont = context ? context.wasm_clone() : context;\n    const handle = FTMLT.renderDocument(\n      mountRef.current,\n      args.document,\n      cont,\n      toConfig(args, addTunnel),\n    );\n    return () => {\n      handle.unmount();\n    };\n  }, []);\n  return (\n    <div style={{ textAlign: \"start\" }}>\n      <div ref={mountRef} />\n      <TunnelRenderer />\n    </div>\n  );\n};\n\n/**\n * See {@link FTMLConfig} and {@link FTML.FragmentOptions}\n */\nexport interface FTMLFragmentArgs extends FTMLConfig {\n  fragment: FTML.FragmentOptions;\n}\n\n/**\n * render an FTML fragment\n */\nexport const FTMLFragment: React.FC<FTMLFragmentArgs> = (args) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const { addTunnel, TunnelRenderer } = useLeptosTunnels();\n  const context = useContext(FTMLContext);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n    const cont = context ? context.wasm_clone() : context;\n    const handle = FTMLT.renderFragment(\n      mountRef.current,\n      args.fragment,\n      cont,\n      toConfig(args, addTunnel),\n    );\n    return () => {\n      handle.unmount();\n    };\n  }, []);\n  return (\n    <div style={{ textAlign: \"start\" }}>\n      <div ref={mountRef} />\n      <TunnelRenderer />\n    </div>\n  );\n};\n\nconst ElemToReact: React.FC<{\n  elems: ChildNode[];\n  ctx: FTML.LeptosContext;\n}> = ({ elems, ctx }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.replaceChildren(...elems);\n    }\n  }, []);\n  return (\n    <FTMLContext.Provider value={ctx}>\n      <div ref={ref} style={{ display: \"contents\" }} />\n    </FTMLContext.Provider>\n  );\n};\n\nfunction elemToReact(elem: HTMLDivElement, ctx: FTML.LeptosContext): ReactNode {\n  const chs = Array.from(elem.childNodes);\n  chs.forEach((c) => elem.removeChild(c));\n  return <ElemToReact elems={chs} ctx={ctx} />;\n}\n\nfunction toConfig(\n  config: FTMLConfig,\n  addTunnel: (\n    element: Element,\n    node: ReactNode,\n    context: FTML.LeptosContext,\n  ) => string,\n): FTMLT.FTMLConfig {\n  const otO = config.onSectionTitle;\n  const onSectionTitle = otO\n    ? (uri: FTML.DocumentElementURI, lvl: FTML.SectionLevel) => {\n        const r = otO(uri, lvl);\n        return r\n          ? (elem: HTMLDivElement, ctx: FTML.LeptosContext) => {\n              addTunnel(elem, r, ctx);\n            }\n          : undefined;\n      }\n    : undefined;\n\n  const ofO = config.onFragment;\n  const onFragment = ofO\n    ? (uri: FTML.DocumentElementURI, kind: FTML.FragmentKind) => {\n        const r = ofO(uri, kind);\n        return r\n          ? (elem: HTMLDivElement, ctx: FTML.LeptosContext) => {\n              const ret = r(elemToReact(elem, ctx));\n              return addTunnel(elem, ret, ctx);\n            }\n          : undefined;\n      }\n    : undefined;\n\n  return {\n    onSectionTitle: onSectionTitle,\n    onFragment: onFragment,\n    problemStates: config.problemStates,\n    onProblem: config.onProblem\n  };\n}\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\n\nimport { LeptosContext } from \"@kwarc/ftml-viewer-base\";//\"./ftml-viewer/ftml-viewer-base\";//\n\nexport const FTMLContext = createContext<LeptosContext | undefined>(undefined);\n\ninterface Tunnel {\n  element: Element;\n  node: ReactNode;\n  context:LeptosContext;\n  id: string; // for React keys\n}\n\n\nexport function useLeptosTunnel() {\n  const [tunnel, setTunnel] = useState<Tunnel | undefined>(undefined);\n\n  const addTunnel = (element: Element, node: ReactNode, context:LeptosContext) => {\n    const id = Math.random().toString(36).slice(2);\n    setTunnel({ element, node, id, context });\n    return id; // Return id for later removal\n  };\n\n  const removeTunnel = () => {\n    if (tunnel) {\n      try{tunnel.context.cleanup();} catch (e){console.log(\"Error cleaning up leptos context:\",e)}\n    }\n    setTunnel(undefined);\n  };\n\n  const TunnelRenderer = () => (\n      tunnel? \n        createPortal(<FTMLContext.Provider value={tunnel.context}>{tunnel.node}</FTMLContext.Provider>, tunnel.element, tunnel.id)\n        : <></>\n  );\n\n  useEffect(() => {\n    return () => {\n      if (tunnel) {\n        try{tunnel.context.cleanup();} catch (e){console.log(\"Error cleaning up leptos context:\",e)}\n      }\n    }\n  })\n\n  return {\n    addTunnel,\n    removeTunnel,\n    TunnelRenderer\n  };\n}\n\nexport function useLeptosTunnels() {\n  const [tunnels, setTunnels] = useState<Tunnel[]>([]);\n\n  const addTunnel = (element: Element, node: ReactNode, context:LeptosContext) => {\n    const id = Math.random().toString(36).slice(2);\n    setTunnels(prev => [...prev, { element, node, id, context }]);\n    return id; // Return id for later removal\n  };\n\n  const removeTunnel = (id: string) => {\n    setTunnels(prev => prev.filter(tunnel => {\n      if (tunnel.id === id) {\n        try{tunnel.context.cleanup();} catch (e){console.log(\"Error cleaning up leptos context:\",e)}\n      }\n      return tunnel.id !== id\n    }));\n  };\n\n  const TunnelRenderer = () => (\n    <>\n      {tunnels.map(tunnel => \n        createPortal(<FTMLContext.Provider value={tunnel.context}>{tunnel.node}</FTMLContext.Provider>, tunnel.element, tunnel.id)\n      )}\n    </>\n  );\n\n  useEffect(() => {\n    return () => {\n      tunnels.forEach(tunnel => {\n        try{tunnel.context.cleanup();} catch (e){console.log(\"Error cleaning up leptos context:\",e)}\n      });\n    }\n  })\n\n  return {\n    addTunnel,\n    removeTunnel,\n    TunnelRenderer\n  };\n}"],"mappings":"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","names":["useEffect","Fragment","jsx","setServerUrl","injectCss","getServerUrl","getFlamsServer","setDebugLog","useEffect"]}