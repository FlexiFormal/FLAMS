{"version":3,"file":"vendors-node_modules_codingame_monaco-vscode-theme-service-override_index_js.immt_editor.js","mappings":";;;;;;;;;;;;;AAAqC;;;;;;;;;;;;;;;;;;;;ACA8E;AACvB;AACA;AACT;AACF;;AAEjF,8CAA8C,4HAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,2FAAoB;AAC/B,WAAW,sGAAa,mBAAmB,sGAAc;AACzD;AACA;;AAEyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BgC;AACd;AACM;AACiD;AAC1C;AACM;AACc;AACkC;AACL;AACH;AACmC;AAC1E;AACb;AACE;AACA;AACD;AACD;AACA;AACG;AACH;AACK;AACH;AACqC;AAC9C;AACgC;AACF;AACI;AACO;AAC2B;AACzD;AACc;AACL;AACe;AAC9B;AACmB;AAChB;AACN;AAC8E;AACtC;AACf;AACO;AACH;AACmB;AACnB;AACG;AACzB;AACsC;AACf;AAC7B;AACmC;AACJ;AAC3B;AAC+C;AACzC;AACoB;AACnB;AACV;;AAE/D;AACA,4BAA4B,kGAAY,qCAAqC,2EAAO,SAAS,8DAAQ;AACrG;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wEAAO;AAC1C,oCAAoC,iFAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+FAAuB;AAC9D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,uBAAuB,EAAE,MAAM;AACtE;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA,uDAAuD,gEAAgE,iBAAiB,IAAI,yBAAyB,sDAAsD;AAC3N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yFAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0EAA0E,YAAY;AACtF;AACA;AACA,sEAAsE,uBAAuB,EAAE,gBAAgB;AAC/G;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2CAA2C,gFAAgF;AAC3H;AACA;AACA,+BAA+B,mBAAmB,EAAE,8DAAQ,2CAA2C,EAAE,uBAAuB,oCAAoC;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,0DAA0D,+BAA+B;AACzF;AACA,uBAAuB,8DAAQ;AAC/B;AACA,+CAA+C,EAAE,iBAAiB,EAAE;AACpE;AACA;AACA;AACA,6BAA6B,8DAAQ;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAQ,8BAA8B,EAAE;AACjE,aAAa;AACb;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,kEAAkE,+BAA+B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAU;AACvC,OAAO,2EAAO,IAAI,uIAAwB;AAC1C,OAAO,2EAAO,IAAI,0IAA2B;AAC7C,OAAO,2EAAO,IAAI,+GAAkB;AACpC,OAAO,2EAAO,IAAI,0FAAW;AAC7B,OAAO,2EAAO,IAAI,yGAAgB;AAClC,OAAO,2EAAO,IAAI,gIAA2B;AAC7C,OAAO,2EAAO,IAAI,qGAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6EAAU;AAC3C;AACA;AACA;AACA,oBAAoB,uFAAiB;AACrC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,uCAAuC,oFAAe;AACtD;AACA;AACA;AACA,2FAA2F,qBAAqB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,6BAA6B,EAAE,gBAAgB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,8EAA8E,YAAY;AAC1F;AACA;AACA,0EAA0E,6BAA6B,EAAE,gBAAgB;AACzH;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAU;AACrC,OAAO,2EAAO,IAAI,+GAAkB;AACpC,OAAO,2EAAO,IAAI,uIAAwB;AAC1C,OAAO,2EAAO,IAAI,gIAA2B;AAC7C,OAAO,2EAAO,IAAI,sJAA+B;AACjD,OAAO,2EAAO,IAAI,gHAAqB;AACvC;AACA;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA;AACA;AACA,yBAAyB,+EAAQ;AACjC;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,sFAAW,gBAAgB,8DAAQ;AACpD,iBAAiB,sFAAW,iBAAiB,8DAAQ;AACrD,iBAAiB,sFAAW,8BAA8B,8DAAQ;AAClE,iBAAiB,sFAAW,+BAA+B,8DAAQ;AACnE;AACA,yBAAyB,8DAAQ;AACjC;AACA;AACA;AACA,0CAA0C,mIAAsB;AAChE,gDAAgD,4HAAmB;AACnE;AACA;AACA;AACA,yCAAyC,mFAAM;AAC/C,yBAAyB,8DAAQ;AACjC,sBAAsB,2EAAO;AAC7B;AACA,mBAAmB,uGAAmB;AACtC,aAAa;AACb;AACA;AACA,yCAAyC,mFAAM;AAC/C,yBAAyB,8DAAQ;AACjC,sBAAsB,2EAAO;AAC7B;AACA,mBAAmB,uGAAmB;AACtC,aAAa;AACb;AACA;AACA,8BAA8B,8DAAQ;AACtC,0CAA0C,8DAAQ;AAClD;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO,kHAAa,sBAAsB;AAClG;AACA;AACA;AACA;AACA,kDAAkD,gHAAqB;AACvE;AACA;AACA;AACA,qEAAqE,sFAAW,WAAW,8DAAQ;AACnG,oEAAoE,sFAAW,UAAU,8DAAQ;AACjG,uDAAuD,6FAAc,aAAa,8DAAQ;AAC1F;AACA;AACA,iBAAiB,sFAAW;AAC5B;AACA;AACA,iBAAiB,sFAAW;AAC5B,iBAAiB,sFAAW;AAC5B;AACA;AACA,iBAAiB,sFAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA,SAAS;AACT;AACA;AACA,0CAA0C,mIAAsB;AAChE;AACA,8BAA8B,8DAAQ;AACtC,kCAAkC,8DAAQ;AAC1C;AACA;AACA;AACA;AACA,kDAAkD,gHAAqB;AACvE;AACA;AACA,cAAc,4BAA4B,8DAAQ,6BAA6B;AAC/E,cAAc,eAAe,6FAAiB,uBAAuB,8DAAQ,gCAAgC,8DAAQ,+BAA+B;AACpJ;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA,SAAS;AACT;AACA;AACA,0CAA0C,mIAAsB;AAChE;AACA,8BAA8B,8DAAQ;AACtC,0CAA0C,8DAAQ;AAClD,kCAAkC,8DAAQ;AAC1C;AACA;AACA;AACA;AACA,kDAAkD,gHAAqB;AACvE;AACA;AACA,cAAc,4BAA4B,8DAAQ,gCAAgC;AAClF,cAAc,IAAI,4GAA6B,SAAS,mGAAoB,wBAAwB,8DAAQ,oBAAoB;AAChI;AACA;AACA;AACA;AACA,CAAC;AACD,iGAAgB;AAChB,sCAAsC,mIAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,4BAA4B,eAAe,0DAA0D,sFAAgB,2DAA2D,sFAAgB;AAChM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;AACA,eAAe,8EAAS;AACxB,eAAe,8DAAQ;AACvB;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA,SAAS;AACT;AACA;AACA,0CAA0C,mIAAsB;AAChE;AACA,0BAA0B,wFAAQ,IAAI,0FAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sEAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sEAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4FAAkB;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA,2CAA2C,oHAAc;AACzD,0CAA0C,+DAA+D,gBAAgB;AACzH;AACA,CAAC;AACD;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA,SAAS;AACT;AACA;AACA,0CAA0C,mIAAsB;AAChE,kDAAkD,wHAAqB;AACvE,iDAAiD,qHAAoB;AACrE,gDAAgD,4HAAmB;AACnE,0CAA0C,kHAAa;AACvD,8BAA8B,8DAAQ;AACtC;AACA,oEAAoE,EAAE;AACtE,gBAAgB,kHAAa;AAC7B;AACA,uCAAuC,8EAAU;AACjD;AACA,6BAA6B,8DAAQ;AACrC;AACA,qEAAqE,OAAO,kHAAa,sBAAsB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kHAAa;AACzC;AACA,iBAAiB,sFAAW;AAC5B,gCAAgC,kHAAa;AAC7C;AACA,iBAAiB,sFAAW;AAC5B,gCAAgC,kHAAa;AAC7C;AACA,iBAAiB,sFAAW;AAC5B,gCAAgC,kHAAa;AAC7C;AACA,iBAAiB,sFAAW;AAC5B,gCAAgC,kHAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iGAAe,eAAe,qFAAO;AACrC;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,sBAAsB,sGAAU;AAChC;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,mIAAsB;AAChE,qDAAqD,uIAAwB;AAC7E,4DAA4D,sJAA+B;AAC3F,kDAAkD,gHAAqB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6EAAU;AAC3C;AACA;AACA;AACA,oBAAoB,uFAAiB;AACrC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,kHAAkH,mFAAiB;AACnI;AACA,CAAC;AACD,6BAA6B,oFAAM;AACnC,0FAAY,gBAAgB,oFAAM;AAClC,aAAa,8DAAQ;AACrB;AACA;AACA;AACA,CAAC;AACD,0FAAY,gBAAgB,oFAAM;AAClC,aAAa,8DAAQ;AACrB;AACA;AACA;AACA,CAAC;AACD,0FAAY;AACZ;AACA;AACA,iBAAiB,8DAAQ;AACzB,KAAK;AACL;AACA,CAAC;AACD,0FAAY;AACZ;AACA;AACA,iBAAiB,8DAAQ;AACzB,KAAK;AACL;AACA,CAAC;AACD,0FAAY;AACZ;AACA;AACA,iBAAiB,8DAAQ;AACzB,KAAK;AACL;AACA,CAAC;AACD;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yHAAoB,2CAA2C,yHAAoB;AAC5H;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gFAAgF,sFAAW;AAC3F,gDAAgD,yHAAoB,qBAAqB,yHAAoB;AAC7G;AACA;AACA;AACA;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA,2DAA2D,yHAAoB,yBAAyB,yHAAoB;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8EAAU,SAAS,8DAAQ;AAC9E;AACA,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,wFAAwF,sFAAW,SAAS,yHAAoB,qBAAqB,yHAAoB;AACzK;AACA;AACA;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,8EAAU,SAAS,8DAAQ;AAC9E;AACA,yEAAyE,EAAE;AAC3E;AACA,2BAA2B,gDAAgD;AAC3E;AACA;AACA;AACA;AACA,iBAAiB,yEAAK;AACtB;AACA,SAAS;AACT;AACA;AACA,iGAAiG,8EAAU;AAC3G,OAAO,2EAAO,IAAI,qHAAoB;AACtC,OAAO,2EAAO,IAAI,mIAAsB;AACxC,OAAO,2EAAO,IAAI,sGAAe;AACjC,OAAO,2EAAO,IAAI,wGAAe;AACjC,OAAO,2EAAO,IAAI,4GAAiB;AACnC,OAAO,2EAAO,IAAI,wGAAY;AAC9B;AACA,6BAA6B,wFAAQ,IAAI,wFAAY;AACrD;;AAE+B;;;;;;;;;;;;;;;;;;;;;;;;AC/2BiB;AACa;AACc;AACJ;AACiC;AAClB;AACzB;AACK;;AAElE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2EAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kHAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kHAAa;AACxC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iCAAiC,wEAAK;AACtC;AACA,qDAAqD,8DAAQ;AAC7D;AACA,wDAAwD,EAAE;AAC1D,uCAAuC,oGAAoB;AAC3D;AACA;AACA,qBAAqB,8EAAW;AAChC,qDAAqD,8DAAQ;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAO;AACxD;AACA,mBAAmB,gFAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,mCAAmC,WAAW,EAAE,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,mCAAmC,WAAW,EAAE,UAAU;AAC1D;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D,uCAAuC,WAAW,EAAE,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D,uCAAuC,WAAW,EAAE,UAAU,EAAE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,GAAG,gBAAgB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,EAAE,UAAU,GAAG,gBAAgB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,GAAG,sBAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qBAAqB;AACjE,mDAAmD,uCAAuC;AAC1F;AACA;AACA;AACA,uCAAuC,WAAW,EAAE,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA,4CAA4C,qBAAqB;AACjE,mDAAmD,uCAAuC;AAC1F;AACA;AACA;AACA,uCAAuC,WAAW,EAAE,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,2EAAQ,uBAAuB,UAAU,SAAS;AACtG,4CAA4C,OAAO,MAAM,gBAAgB,QAAQ,GAAG,eAAe,cAAc,cAAc,aAAa,sBAAsB;AAClK;AACA;AACA;AACA,aAAa;AACb,mJAAmJ,gBAAgB,YAAY,GAAG,aAAa,mBAAmB;AAClN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB,YAAY,OAAO,GAAG,oBAAoB,2EAAQ,sCAAsC;AACrJ;AACA;AACA;AACA;AACA,4CAA4C,sBAAsB;AAClE;AACA;AACA,+CAA+C,yBAAyB,EAAE;AAC1E;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA,2DAA2D;AAC3D;AACA,qCAAqC,wBAAwB,EAAE,iBAAiB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sBAAsB;AACpF,yCAAyC,YAAY,YAAY,OAAO,GAAG,oBAAoB,2EAAQ,eAAe;AACtH,6CAA6C,YAAY,YAAY,OAAO,GAAG,oBAAoB,2EAAQ,gBAAgB;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4EAAU;AACrB;;AAEkD;;;;;;;;;;;;;;;;;;;;;;;;;;ACjXF;AACa;AACc;AACJ;AACuD;AACxC;AAC8B;AAC5C;AACkC;AACvC;;AAEnE;AACA;AACA,aAAa;AACb;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,mEAAmE,EAAE,IAAI,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2EAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qIAAqI,8DAAQ,oBAAoB,yHAAoB;AACrL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kHAAa;AAC3D;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D,kDAAkD,4EAAQ;AAC1D;AACA;AACA,4BAA4B,4BAA4B;AACxD,wBAAwB,4EAAQ,QAAQ,4EAAQ;AAChD,4BAA4B,4EAAQ;AACpC,uDAAuD,mGAAkB;AACzE;AACA,kEAAkE,uBAAuB,8CAA8C;AACvI;AACA;AACA;AACA,8DAA8D,eAAe;AAC7E;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uEAAuE;AAC1G;AACA,+CAA+C,mGAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kHAAa;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wEAAK;AAClC;AACA,iDAAiD,8DAAQ;AACzD;AACA,uDAAuD,EAAE;AACzD,wCAAwC,oGAAoB;AAC5D;AACA;AACA,iBAAiB,8EAAW;AAC5B,iDAAiD,8DAAQ;AACzD;AACA;AACA,iDAAiD,8DAAQ;AACzD;AACA;AACA;AACA;AACA,iDAAiD,+EAAO;AACxD;AACA;AACA,gBAAgB,4EAAQ,2BAA2B,0EAAW;AAC9D;AACA;AACA,oBAAoB,4EAAQ,mCAAmC,8EAAe;AAC9E;AACA;AACA;AACA,oCAAoC,8DAAQ,uCAAuC,EAAE;AACrF;AACA;AACA,oBAAoB,4EAAQ,iCAAiC,6EAAc;AAC3E;AACA;AACA;AACA,oCAAoC,8DAAQ,sCAAsC,EAAE;AACpF;AACA;AACA;AACA;AACA,4BAA4B,4EAAQ,YAAY,4EAAQ,6BAA6B,8EAAe;AACpG,qDAAqD,gFAAQ;AAC7D,gDAAgD,8CAA8C;AAC9F;AACA;AACA,4CAA4C,8DAAQ,uCAAuC,EAAE;AAC7F;AACA;AACA;AACA;AACA,iDAAiD,yDAAyD;AAC1G;AACA;AACA,oCAAoC,8DAAQ;AAC5C;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAQ;AACxC;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4EAAQ;AACxB;AACA;AACA;AACA,mCAAmC,UAAU,OAAO;AACpD,kDAAkD,+CAA+C;AACjG;AACA;AACA,oCAAoC,8DAAQ,oCAAoC,EAAE;AAClF;AACA;AACA;AACA,gCAAgC,8DAAQ,oCAAoC,EAAE;AAC9E;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA,qBAAqB,oGAAe;AACpC;AACA;AACA;AACA;AACA,0BAA0B,6EAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6EAAS;AAClB;AACA;AACA;AACA;;AAE+D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5QU;AACzB;AAC2B;AACkC;AACkK;AACzM;AACqB;AACM;AACnB;AACN;AACqC;AACX;AACjB;AACpB;AACmB;AACH;AACG;AACX;AACoE;AACrD;AACT;AACD;AACe;AAC0B;AACwB;AACsC;AACe;AAChG;AACV;AACP;AACjB;AACa;AACgD;AAC1C;AAC0C;AAC9B;AACW;AACtC;AACE;AACA;AACD;AACD;AACA;AACG;AACH;AACK;AACH;AACiB;AACnB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wFAAQ,IAAI,4FAAU;AAChD;AACA;AACA,aAAa,mHAAc,eAAe,wBAAwB;AAClE,aAAa,kHAAa,oBAAoB,wBAAwB;AACtE,aAAa,gHAAW,qBAAqB,wBAAwB;AACrE,aAAa,sHAAiB,qBAAqB,wBAAwB;AAC3E;AACA;AACA;AACA,4BAA4B,kGAAgC;AAC5D,+BAA+B,qGAAmC;AAClE,kCAAkC,wGAAsC;AACxE,gEAAgE,+EAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAkB;AAChD,uDAAuD,2EAAa,sBAAsB,6GAAc;AACxG;AACA,wCAAwC,wEAAO,GAAG,2BAA2B;AAC7E,iCAAiC,6GAAc;AAC/C,yCAAyC,0EAAS;AAClD;AACA;AACA;AACA;AACA;AACA,0DAA0D,2EAAa;AACvE;AACA,YAAY,qEAAiB;AAC7B;AACA,YAAY,qEAAiB;AAC7B;AACA,yCAAyC,uEAAmB;AAC5D,2CAA2C,wEAAO,GAAG,2BAA2B;AAChF,oCAAoC,qEAAiB;AACrD,4CAA4C,0EAAS;AACrD;AACA;AACA;AACA;AACA;AACA,6DAA6D,2EAAa;AAC1E;AACA,YAAY,2EAAoB;AAChC;AACA,YAAY,2EAAoB;AAChC;AACA,8CAA8C,wEAAO;AACrD,uCAAuC,2EAAoB;AAC3D,+CAA+C,0EAAS;AACxD,2DAA2D,oGAAgB;AAC3E,wBAAwB,6GAAc;AACtC;AACA;AACA,8DAA8D,yHAAoB,kDAAkD,yHAAoB;AACxJ;AACA;AACA,sDAAsD,yHAAoB,qBAAqB,qIAAgC,yBAAyB,yHAAoB,oBAAoB,oIAA+B;AAC/N;AACA;AACA;AACA,4BAA4B,6GAAc;AAC1C;AACA;AACA;AACA,wBAAwB,6GAAc,iCAAiC,yEAAK,GAAG,sFAAW,SAAS,sFAAW;AAC9G;AACA;AACA;AACA,6BAA6B,qEAAiB;AAC9C;AACA;AACA;AACA,gCAAgC,2EAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kFAAiB;AACrD,SAAS;AACT,kCAAkC,oFAAgB;AAClD;AACA,+CAA+C,4GAAkB;AACjE;AACA;AACA;AACA,6CAA6C,iFAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,sFAAW,SAAS,yHAAoB,qBAAqB,yHAAoB;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,oFAA6B;AAC5F;AACA;AACA;AACA;AACA;AACA,uCAAuC,kHAAa;AACpD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD,0CAA0C,kHAAa;AACvD;AACA;AACA,uCAAuC,kHAAa;AACpD;AACA;AACA,uCAAuC,kHAAa;AACpD;AACA;AACA;AACA;AACA,2CAA2C,kHAAa;AACxD;AACA;AACA;AACA,2CAA2C,kHAAa;AACxD;AACA;AACA;AACA,2CAA2C,kHAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,oGAAoC;AAChD;AACA,0DAA0D,yHAAoB,sBAAsB,+EAAW;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,yHAAoB;AACvG;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,uGAAuC;AACnD;AACA,oFAAoF,+EAAW;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,0GAA0C;AACtD;AACA,wDAAwD,oFAA6B,KAAK,+EAAW;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oFAA6B;AAC5E;AACA,SAAS;AACT;AACA;AACA,YAAY,oGAAoC;AAChD,YAAY,uGAAuC;AACnD,YAAY,0GAA0C;AACtD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,0BAA0B;AACjI;AACA;AACA,wGAAwG,iFAAQ;AAChH,oHAAoH,kHAAa;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,6GAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAAQ;AACtC;AACA,iCAAiC,EAAE,GAAG,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,EAAE,GAAG,EAAE;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B;AAC/E;AACA;AACA,2BAA2B,oGAAgB;AAC3C;AACA;AACA,uCAAuC,qGAAiB,UAAU,IAAI,qBAAqB;AAC3F;AACA;AACA,mDAAmD,EAAE,4BAA4B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kHAAa,EAAE,mHAAc,EAAE,gHAAW,EAAE,sHAAiB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAQ;AAChC;AACA;AACA,0DAA0D,qEAAiB;AAC3E;AACA;AACA;AACA,+BAA+B,qEAAiB;AAChD;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAkB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,0BAA0B;AACjI;AACA;AACA,wGAAwG,iFAAQ;AAChH,uHAAuH,kHAAa;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAQ;AAChC;AACA;AACA,0DAA0D,2EAAoB;AAC9E;AACA;AACA;AACA,+BAA+B,2EAAoB;AACnD;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAkB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,0BAA0B;AACjI;AACA;AACA,wGAAwG,iFAAQ;AAChH,0HAA0H,kHAAa;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAU;AACpC,MAAM,2EAAO,IAAI,uHAAiB;AAClC,MAAM,2EAAO,IAAI,qGAAe;AAChC,MAAM,2EAAO,IAAI,wHAAqB;AACtC,MAAM,2EAAO,IAAI,2GAAiB;AAClC,MAAM,2EAAO,IAAI,oJAAmC;AACpD,MAAM,2EAAO,IAAI,+FAAY;AAC7B,MAAM,2EAAO,IAAI,sJAA+B;AAChD,MAAM,2EAAO,IAAI,8HAAuB;AACxC,MAAM,2EAAO,IAAI,0FAAW;AAC5B,MAAM,2EAAO,IAAI,sIAAuB;AACxC,MAAM,2EAAO,KAAK,sIAA8B;AAChD,MAAM,2EAAO,KAAK,gGAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gFAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iCAAiC,gFAAO;AACxC,kCAAkC,gFAAO;AACzC;AACA;AACA;AACA;AACA,wBAAwB,6EAAU;AAClC;AACA,wBAAwB,oFAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAyB;AACzB,6FAA4B;AAC5B,mGAA+B;;AAEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5rBe;AAC8B;AACqB;AACP;AAC1B;AACE;AACA;AACD;AACD;AACA;AACG;AACH;AACK;AACH;AACssCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,mCAAmC,8DAAQ;AAC3C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,0CAA0C,8DAAQ;AAClD,iBAAiB;AACjB;AACA;AACA,mCAAmC,8DAAQ;AAC3C;AACA;AACA;AACA;AACA,2CAA2C,8DAAQ;AACnD;AACA;AACA;AACA;AACA,0BAA0B,SAAS,8DAAQ,yDAAyD;AACpG,0BAA0B,gBAAgB;AAC1C,0BAA0B,cAAc;AACxC,0BAA0B,mBAAmB;AAC7C,0BAA0B,uBAAuB;AACjD,0BAA0B,qBAAqB;AAC/C,0BAA0B,0BAA0B;AACpD,0BAA0B,8BAA8B;AACxD,0BAA0B,wBAAwB;AAClD,0BAA0B,4BAA4B;AACtD,0BAA0B,iCAAiC;AAC3D,0BAA0B,+BAA+B;AACzD,0BAA0B,mCAAmC;AAC7D,0BAA0B,wCAAwC;AAClE,0BAA0B,sCAAsC;AAChE,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA,gCAAgC,QAAQ,eAAe,UAAU,iBAAiB,OAAO,KAAK;AAC9F;AACA,KAAK;AACL;AACA;AACA,4BAA4B,QAAQ,UAAU,mBAAmB,eAAe,eAAe,UAAU,OAAO;AAChH;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC,aAAa;AACb;AACA,+BAA+B,8DAAQ;AACvC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC,kBAAkB,sGAAuB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,8DAAQ;AAC3C,iBAAiB;AACjB;AACA,mCAAmC,8DAAQ;AAC3C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC,kBAAkB,qHAAoB;AACtC;AACA;AACA;AACA;AACA,8BAA8B,wFAAQ,IAAI,6GAAU;AACpD;AACA;AACA;;AAE6G;;;;;;;;;;;;;;;;;;;ACxQ7D;AAC8B;AACqB;AACO;;AAE1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAQ;AAC/C,iCAAiC,mEAAW;AAC5C,+CAA+C,8DAAQ;AACvD,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,mDAAmD,8DAAQ;AAC3D,iCAAiC;AACjC;AACA;AACA,mDAAmD,8DAAQ;AAC3D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,iCAAiC,uEAAe;AAChD,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,iCAAiC,sEAAc;AAC/C,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,iCAAiC,qEAAa;AAC9C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAQ;AACvC;AACA;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C,qBAAqB;AACrB;AACA;AACA;AACA,uCAAuC,8DAAQ;AAC/C,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,iCAAiC,qEAAa;AAC9C,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wFAAQ,IAAI,6GAAU;AACpD;AACA;;AAEwC;;;;;;;;;;;;;;;;;;;;;;;;ACvVQ;AAC8B;AACqB;AACf;;AAEpF;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA,+CAA+C,8DAAQ;AACvD,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,mDAAmD,8DAAQ;AAC3D,iCAAiC;AACjC;AACA;AACA,mDAAmD,8DAAQ;AAC3D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA,8BAA8B,+CAA+C;AAC7E,8BAA8B;AAC9B;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA,8BAA8B,uCAAuC;AACrE,8BAA8B;AAC9B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,8DAAQ;AACnC,kBAAkB,8FAAa;AAC/B;AACA;AACA;AACA;AACA,8BAA8B,wFAAQ,IAAI,6GAAU;AACpD;AACA;;AAEyH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFzE;AACiB;AACa;AACoB;AACP;AACC;AAC1B;AACE;AACA;AACD;AACD;AACA;AACG;AACH;AACK;AACH;AACsC;AACoB;AAChE;AACa;;AAE3E,iCAAiC,wFAAQ,IAAI,4GAAU;AACvD;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,+DAA+D,GAAG;AAClE,4BAA4B,mHAAa;AACzC;AACA,aAAa,yEAAK,GAAG,0HAAoB,qBAAqB,0HAAoB;AAClF;AACA;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,uEAAuE,GAAG;AAC1E,4BAA4B,mHAAa;AACzC;AACA,aAAa,0HAAoB;AACjC;AACA;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,wEAAwE,GAAG;AAC3E,4BAA4B,mHAAa;AACzC;AACA,aAAa,0HAAoB;AACjC;AACA;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,wEAAwE,GAAG;AAC3E,4BAA4B,mHAAa;AACzC;AACA,aAAa,0HAAoB;AACjC;AACA;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,yEAAyE,GAAG;AAC5E,4BAA4B,mHAAa;AACzC;AACA,aAAa,0HAAoB;AACjC;AACA;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,gIAAgI,GAAG,eAAe,EAAE;AACpJ,4BAA4B,mHAAa;AACzC,4BAA4B,mHAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAQ;AAC3B,cAAc,MAAM,sGAAuB,EAAE;AAC7C,eAAe;AACf;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa,0HAAoB;AACjC,mBAAmB,8DAAQ;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,8DAAQ;AAC/B,yBAAyB,8DAAQ;AACjC,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA,aAAa,0HAAoB;AACjC,mBAAmB,8DAAQ;AAC3B,WAAW,0HAAoB;AAC/B,uBAAuB,8DAAQ;AAC/B,yBAAyB,8DAAQ;AACjC,oBAAoB,8DAAQ;AAC5B;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA,gKAAgK,GAAG,KAAK,EAAE;AAC1K,4BAA4B,mHAAa;AACzC,4BAA4B,mHAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4EAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAQ;AAC/C,sCAAsC,8DAAQ;AAC9C,uCAAuC,8DAAQ;AAC/C,sCAAsC,8DAAQ;AAC9C,oCAAoC,8DAAQ;AAC5C,wCAAwC,8DAAQ;AAChD;AACA;AACA;AACA,wCAAwC,8DAAQ;AAChD;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC,kBAAkB,wEAAsB;AACxC,SAAS;AACT;AACA,2BAA2B,8DAAQ;AACnC,kCAAkC,8DAAQ;AAC1C;AACA;AACA;AACA,0CAA0C,8DAAQ;AAClD;AACA,mCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,8DAAQ;AAC3B;AACA;AACA;AACA,eAAe;AACf,cAAc,0CAA0C,cAAc;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kBAAkB,qHAAoB;AACtC,2BAA2B,8DAAQ;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,8DAAQ;AAC3B;AACA;AACA;AACA,eAAe;AACf,cAAc,kDAAkD,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mHAAa;AACtB,SAAS,mHAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,uCAAuC;AACvC,+CAA+C;AAC/C,8BAA8B,MAAM,sGAAuB;AAC3D,0BAA0B;AAC1B;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,uDAAuD;AACvD,mDAAmD;AACnD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,sFAAW,QAAQ,mHAAa;AACrC,KAAK,sFAAW,SAAS,mHAAa;AACtC,KAAK,sFAAW,sBAAsB,mHAAa;AACnD,KAAK,sFAAW,uBAAuB,mHAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA,+CAA+C,mHAAa;AAC5D,gDAAgD,sFAAW,sBAAsB,sFAAW;AAC5F;AACA,+CAA+C,mHAAa;AAC5D,gDAAgD,sFAAW,QAAQ,sFAAW;AAC9E;AACA;AACA;AACA;AACA,kDAAkD,mHAAa;AAC/D;AACA;AACA;AACA,2EAA2E,mHAAa;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mHAAa;AACnD;AACA;AACA;AACA,sCAAsC,mHAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+EAAW;AACxB;AACA;AACA,kBAAkB,+EAAW;AAC7B;AACA;AACA,kBAAkB,+EAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+EAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpZtK;AACc;AACqB;AAC2B;AACyD;AAC1G;AACO;AAC0C;AACpC;AACI;AACc;;AAE5F;AACA,WAAW,wHAAkB;AAC7B;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,oCAAoC,QAAQ,UAAU,QAAQ,UAAU,KAAK,YAAY,kHAAa,oBAAoB,KAAK,cAAc;AAC7I;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA,+BAA+B,mHAAc,EAAE,kHAAa,EAAE,gHAAW,EAAE,sHAAiB;AAC5F,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,wHAAkB;AAC7B;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,oCAAoC,QAAQ,OAAO,KAAK,aAAa,QAAQ,wBAAwB,KAAK,qBAAqB;AAC/H;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,wHAAkB;AAC7B;AACA;AACA,2BAA2B,8DAAQ;AACnC;AACA;AACA;AACA,oCAAoC,QAAQ,OAAO,KAAK,aAAa,QAAQ,2BAA2B,KAAK,6BAA6B;AAC1I;AACA;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA,qBAAqB;AACrB;AACA,uCAAuC,8DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA,gCAAgC,8EAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oFAAc;AAC9C;AACA,2CAA2C,EAAE,8DAAQ,wBAAwB;AAC7E;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,2CAA2C,EAAE,8DAAQ,4BAA4B;AACjF;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,2CAA2C,EAAE,8DAAQ,+BAA+B;AACpF;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,wFAAQ,IAAI,wHAAU;AACzB;AACA,aAAa,8DAAQ;AACrB;AACA;AACA,KAAK;AACL,qBAAqB,uGAAc;AACnC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAO;AAChD;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kHAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8CAA8C;AACzF,SAAS;AACT;AACA;AACA;AACA,yBAAyB,8DAAQ,0BAA0B,EAAE;AAC7D;AACA;AACA;AACA,gCAAgC,4EAAQ;AACxC,6BAA6B,8DAAQ;AACrC;AACA,sDAAsD,EAAE,yBAAyB,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA,kDAAkD,4EAAQ;AAC1D,6BAA6B,8DAAQ;AACrC;AACA,sDAAsD,EAAE,uBAAuB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA,kCAAkC,gFAAQ;AAC1C,iBAAiB,uFAAe;AAChC,4BAA4B,8DAAQ;AACpC;AACA,4CAA4C,EAAE,SAAS,EAAE,6CAA6C,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,uFAAe;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrR7E;AACU;AACZ;AAC0I;AACzI;AACZ;AACmC;AACC;AACuB;AACzC;AACE;AAC4C;AAC7C;AACD;AACA;AACG;AACH;AACK;AACH;AACuB;AACb;AACQ;AAChC;AACoH;AAC7G;AACc;AAC0B;AACzB;AAC1E,yBAAyB,4EAAQ,IAAI,4EAAU;AAC/C,oCAAoC,sHAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4FAAgB,qBAAqB,4FAAgB;AAClG,6CAA6C,4FAAgB,qBAAqB,4FAAgB;AAClG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B,kJAAkJ;AACnN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wDAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8FAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B,EAAE,6GAAqB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G;AAC3G,gBAAgB,iBAAiB,EAAE,6GAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,+DAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8FAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wDAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4FAA0B;AACvD,0CAA0C,4FAA0B;AACpE;AACA;AACA,6CAA6C,wDAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6EAAsB,mCAAmC,8EAAuB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,2EAAoB,wBAAwB,2EAAoB;AAC/I,iFAAiF,2EAAoB;AACrG,gFAAgF,2EAAoB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sEAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAK;AACrC;AACA;AACA;AACA;AACA;AACA,oEAAoE,wCAAwC;AAC5G,+DAA+D,qGAAiB;AAChF,2BAA2B,oEAAa;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAc,SAAS,yEAAW;AACnD,iBAAiB,kEAAW,SAAS,yEAAW;AAChD,iBAAiB,wEAAiB,SAAS,yEAAW;AACtD,4BAA4B,yEAAW;AACvC;AACA;AACA;AACA,kDAAkD,6FAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wDAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wDAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qGAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oEAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW,EAAE,cAAc;AACjD,qCAAqC,8DAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY,GAAG,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAO;AACf;AACA;AACA,6BAA6B,2DAAK;AAClC;AACA,iDAAiD,iDAAQ;AACzD;AACA,oDAAoD,EAAE;AACtD,mCAAmC,wFAAoB;AACvD;AACA;AACA,iBAAiB,iEAAW;AAC5B,iDAAiD,iDAAQ;AACzD;AACA;AACA,kEAAkE,mEAAQ,CAAC,kEAAO;AAClF;AACA;AACA,YAAY,uEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iDAAQ;AAC7D;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,iCAAiC,4FAA0B;AAC3D;AACA;AACA;AACA,gDAAgD,wDAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mEAAQ,CAAC,kEAAO;AACxF;AACA;AACA,qDAAqD,iDAAQ;AAC7D;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iDAAQ;AACjE;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAO;AACxC;AACA;AACA,qDAAqD,iDAAQ,uCAAuC,EAAE;AACtG;AACA,YAAY,uEAAe;AAC3B;AACA;AACA;AACA,iDAAiD,iDAAQ,wCAAwC,EAAE;AACnG;AACA,KAAK;AACL,6CAA6C,iDAAQ;AACrD;AACA,4CAA4C,EAAE,GAAG,EAAE;AACnD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,wCAAwC,yBAAyB;AAC3E,UAAU,wCAAwC;AAClD;AACA;AACA,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,wCAAwC,yBAAyB;AAC3E,UAAU,wCAAwC;AAClD;AACA;AACA,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,wCAAwC,yBAAyB;AAC3E,UAAU,wCAAwC;AAClD;AACA;AACA,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,uCAAuC,yBAAyB;AAC1E,UAAU,wCAAwC,yBAAyB;AAC3E,UAAU,wCAAwC;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAc;AAC1B;AACA;AACA;AACA,QAAQ,yEAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8FAAU;AAC1B;AACA;AACA,gBAAgB,8FAAU;AAC1B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB,+DAAQ,sBAAsB,+DAAQ,qBAAqB,gEAAS;AACzF,WAAW,gEAAS,qBAAqB,gEAAS,yBAAyB,gEAAS;AACpF;AACA;AACA;AACA;AACA,sBAAsB,oFAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA,8BAA8B,uGAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;;;;;;;;;;;;;;;ACp6BxuCAAuC;AACvC;AACA,SAAS,0BAA0B;AACnC;AACA,SAAS,gBAAgB,KAAK,KAAK,OAAO,OAAO;AACjD;AACA,2BAA2B;AAC3B,0BAA0B;AAC1B,0BAA0B;AAC1B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;;;AC/YjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvH+B;AACA;AACO;AACE;AACqN;AACtN;AACD;AACA;AACG;AACH;AACK;AACH;AACyI;AAC3M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wDAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2FAAgB;AAChD,gCAAgC,2FAAgB;AAChD,+BAA+B,oGAAyB;AACxD,uCAAuC,kGAAuB;AAC9D,6CAA6C,mGAAwB;AACrE,wCAAwC,mGAAwB;AAChE,+CAA+C,0FAAe;AAC9D,oCAAoC,+FAAoB;AACxD;AACA;AACA,wCAAwC,mGAAwB;AAChE;AACA;AACA,mCAAmC,4FAAmB;AACtD,oCAAoC,6FAAoB;AACxD,2BAA2B,+FAAsB;AACjD,gCAAgC,0FAAiB;AACjD,2BAA2B,2FAAkB;AAC7C,iCAAiC,iGAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3E4C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB,+DAAQ,oBAAoB,gEAAS,2BAA2B,+DAAQ,sBAAsB,+DAAQ;AACvH,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAA+C,UAAU,GAAG,KAAK;AAClF;AACA;AACA,CAAC,sCAAsC;AACiP","sources":["webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/index.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/theme.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/fileIconThemeData.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/productIconThemeData.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/colorThemeSchema.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/fileIconThemeSchema.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/productIconThemeSchema.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeConfiguration.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-theme-service-override/vscode/src/vs/workbench/services/themes/common/themeExtensionPoints.js","webpack://immt-editor/./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/colorThemeData.js","webpack://immt-editor/./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/plistParser.js","webpack://immt-editor/./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/textMateScopeMatcher.js","webpack://immt-editor/./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/themeCompatibility.js","webpack://immt-editor/./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/workbenchThemeService.js"],"sourcesContent":["export { default } from './theme.js';\n","import { WorkbenchThemeService } from './vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.js';\nimport { IThemeService } from 'vscode/vscode/vs/platform/theme/common/themeService.service';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';\nimport './vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.js';\n\nclass StandaloneWorkbenchThemeService extends WorkbenchThemeService {\n    registerEditorContainer() {\n        return {\n            dispose() { }\n        };\n    }\n    setTheme(themeName) {\n        void this.getColorThemes().then((themes) => {\n            setTimeout(() => {\n                void this.setColorTheme(themes.find((theme) => theme.settingsId === themeName) ?? themeName, 8 );\n            });\n        });\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IThemeService.toString())]: new SyncDescriptor(StandaloneWorkbenchThemeService, [], false)\n    };\n}\n\nexport { getServiceOverride as default };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { localize, localize2 } from 'vscode/vscode/vs/nls';\nimport { KeyChord } from 'vscode/vscode/vs/base/common/keyCodes';\nimport { registerAction2, Action2, MenuId, MenuRegistry } from 'vscode/vscode/vs/platform/actions/common/actions';\nimport { equalsIgnoreCase } from 'vscode/vscode/vs/base/common/strings';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Categories } from 'vscode/vscode/vs/platform/action/common/actionCommonCategories';\nimport { ThemeSettings, ThemeSettingDefaults } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { IWorkbenchThemeService } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService.service';\nimport { IExtensionsWorkbenchService } from 'vscode/vscode/vs/workbench/contrib/extensions/common/extensions.service';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vscode/vscode/vs/platform/extensionManagement/common/extensionManagement.service';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { ColorScheme, isHighContrast } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { colorThemeSchemaId } from '../../../services/themes/common/colorThemeSchema.js';\nimport { isCancellationError, onUnexpectedError } from 'vscode/vscode/vs/base/common/errors';\nimport { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';\nimport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData } from '../../../services/themes/browser/productIconThemeData.js';\nimport { ThrottledDelayer } from 'vscode/vscode/vs/base/common/async';\nimport { CancellationTokenSource } from 'vscode/vscode/vs/base/common/cancellation';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';\nimport { IProgressService } from 'vscode/vscode/vs/platform/progress/common/progress.service';\nimport { Codicon } from 'vscode/vscode/vs/base/common/codicons';\nimport { registerIcon } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { CommandsRegistry } from 'vscode/vscode/vs/platform/commands/common/commands';\nimport { ICommandService } from 'vscode/vscode/vs/platform/commands/common/commands.service';\nimport { FileIconThemeData } from '../../../services/themes/browser/fileIconThemeData.js';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs.service';\nimport { Extensions as Extensions$1 } from 'vscode/vscode/vs/workbench/common/contributions';\nimport 'vscode/vscode/vs/platform/notification/common/notification';\nimport { INotificationService } from 'vscode/vscode/vs/platform/notification/common/notification.service';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';\nimport { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { IPreferencesService } from 'vscode/vscode/vs/workbench/services/preferences/common/preferences.service';\nimport { Toggle } from 'vscode/vscode/vs/base/browser/ui/toggle/toggle';\nimport { defaultToggleStyles } from 'vscode/vscode/vs/platform/theme/browser/defaultStyles';\nimport { DisposableStore } from 'vscode/vscode/vs/base/common/lifecycle';\nimport Severity$1 from 'vscode/vscode/vs/base/common/severity';\n\nvar DefaultThemeUpdatedNotificationContribution_1;\nconst manageExtensionIcon = registerIcon('theme-selection-manage-extension', Codicon.gear, ( localize(3034, 'Icon for the \\'Manage\\' action in the theme selection quick pick.')));\nvar ConfigureItem;\n( ((function(ConfigureItem) {\n    ConfigureItem[\"BROWSE_GALLERY\"] = \"marketplace\";\n    ConfigureItem[\"EXTENSIONS_VIEW\"] = \"extensions\";\n    ConfigureItem[\"CUSTOM_TOP_ENTRY\"] = \"customTopEntry\";\n})(ConfigureItem || (ConfigureItem = {}))));\nlet MarketplaceThemesPicker = class MarketplaceThemesPicker {\n    constructor(getMarketplaceColorThemes, marketplaceQuery, extensionGalleryService, extensionManagementService, quickInputService, logService, progressService, extensionsWorkbenchService, dialogService) {\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.marketplaceQuery = marketplaceQuery;\n        this.extensionGalleryService = extensionGalleryService;\n        this.extensionManagementService = extensionManagementService;\n        this.quickInputService = quickInputService;\n        this.logService = logService;\n        this.progressService = progressService;\n        this.extensionsWorkbenchService = extensionsWorkbenchService;\n        this.dialogService = dialogService;\n        this._marketplaceExtensions = ( (new Set()));\n        this._marketplaceThemes = [];\n        this._searchOngoing = false;\n        this._searchError = undefined;\n        this._onDidChange = ( (new Emitter()));\n        this._queryDelayer = ( (new ThrottledDelayer(200)));\n        this._installedExtensions = extensionManagementService.getInstalled().then(installed => {\n            const result = ( (new Set()));\n            for (const ext of installed) {\n                result.add(ext.identifier.id);\n            }\n            return result;\n        });\n    }\n    get themes() {\n        return this._marketplaceThemes;\n    }\n    get onDidChange() {\n        return this._onDidChange.event;\n    }\n    trigger(value) {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.trigger(() => {\n            this._tokenSource = ( (new CancellationTokenSource()));\n            return this.doSearch(value, this._tokenSource.token);\n        });\n    }\n    async doSearch(value, token) {\n        this._searchOngoing = true;\n        this._onDidChange.fire();\n        try {\n            const installedExtensions = await this._installedExtensions;\n            const options = { text: `${this.marketplaceQuery} ${value}`, pageSize: 20 };\n            const pager = await this.extensionGalleryService.query(options, token);\n            for (let i = 0; i < pager.total && i < 1; i++) {\n                if (token.isCancellationRequested) {\n                    break;\n                }\n                const nThemes = this._marketplaceThemes.length;\n                const gallery = i === 0 ? pager.firstPage : await pager.getPage(i, token);\n                const promises = [];\n                const promisesGalleries = [];\n                for (let i = 0; i < gallery.length; i++) {\n                    if (token.isCancellationRequested) {\n                        break;\n                    }\n                    const ext = gallery[i];\n                    if (!( (installedExtensions.has(ext.identifier.id))) && !( (this._marketplaceExtensions.has(ext.identifier.id)))) {\n                        this._marketplaceExtensions.add(ext.identifier.id);\n                        promises.push(this.getMarketplaceColorThemes(ext.publisher, ext.name, ext.version));\n                        promisesGalleries.push(ext);\n                    }\n                }\n                const allThemes = await Promise.all(promises);\n                for (let i = 0; i < allThemes.length; i++) {\n                    const ext = promisesGalleries[i];\n                    for (const theme of allThemes[i]) {\n                        this._marketplaceThemes.push({ id: theme.id, theme: theme, label: theme.label, description: `${ext.displayName} · ${ext.publisherDisplayName}`, galleryExtension: ext, buttons: [configureButton] });\n                    }\n                }\n                if (nThemes !== this._marketplaceThemes.length) {\n                    this._marketplaceThemes.sort((t1, t2) => t1.label.localeCompare(t2.label));\n                    this._onDidChange.fire();\n                }\n            }\n        }\n        catch (e) {\n            if (!isCancellationError(e)) {\n                this.logService.error(`Error while searching for themes:`, e);\n                this._searchError = 'message' in e ? e.message : String(e);\n            }\n        }\n        finally {\n            this._searchOngoing = false;\n            this._onDidChange.fire();\n        }\n    }\n    openQuickPick(value, currentTheme, selectTheme) {\n        let result = undefined;\n        const disposables = ( (new DisposableStore()));\n        return ( (new Promise((s, _) => {\n            const quickpick = disposables.add(this.quickInputService.createQuickPick());\n            quickpick.items = [];\n            quickpick.sortByLabel = false;\n            quickpick.matchOnDescription = true;\n            quickpick.buttons = [this.quickInputService.backButton];\n            quickpick.title = 'Marketplace Themes';\n            quickpick.placeholder = ( localize(3035, \"Type to Search More. Select to Install. Up/Down Keys to Preview\"));\n            quickpick.canSelectMany = false;\n            disposables.add(quickpick.onDidChangeValue(() => this.trigger(quickpick.value)));\n            disposables.add(quickpick.onDidAccept(async (_) => {\n                const themeItem = quickpick.selectedItems[0];\n                if (themeItem?.galleryExtension) {\n                    result = 'selected';\n                    quickpick.hide();\n                    const success = await this.installExtension(themeItem.galleryExtension);\n                    if (success) {\n                        selectTheme(themeItem.theme, true);\n                    }\n                    else {\n                        selectTheme(currentTheme, true);\n                    }\n                }\n            }));\n            disposables.add(quickpick.onDidTriggerItemButton(e => {\n                if (isItem(e.item)) {\n                    const extensionId = e.item.theme?.extensionData?.extensionId;\n                    if (extensionId) {\n                        this.extensionsWorkbenchService.openSearch(`@id:${extensionId}`);\n                    }\n                    else {\n                        this.extensionsWorkbenchService.openSearch(`${this.marketplaceQuery} ${quickpick.value}`);\n                    }\n                }\n            }));\n            disposables.add(quickpick.onDidChangeActive(themes => {\n                if (result === undefined) {\n                    selectTheme(themes[0]?.theme, false);\n                }\n            }));\n            disposables.add(quickpick.onDidHide(() => {\n                if (result === undefined) {\n                    selectTheme(currentTheme, true);\n                    result = 'cancelled';\n                }\n                s(result);\n            }));\n            disposables.add(quickpick.onDidTriggerButton(e => {\n                if (e === this.quickInputService.backButton) {\n                    result = 'back';\n                    quickpick.hide();\n                }\n            }));\n            disposables.add(this.onDidChange(() => {\n                let items = this.themes;\n                if (this._searchOngoing) {\n                    items = items.concat({ label: '$(sync~spin) Searching for themes...', id: undefined, alwaysShow: true });\n                }\n                else if (items.length === 0 && this._searchError) {\n                    items = [{ label: `$(error) ${( localize(3036, 'Error while searching for themes: {0}', this._searchError))}`, id: undefined, alwaysShow: true }];\n                }\n                const activeItemId = quickpick.activeItems[0]?.id;\n                const newActiveItem = activeItemId ? items.find(i => isItem(i) && i.id === activeItemId) : undefined;\n                quickpick.items = items;\n                if (newActiveItem) {\n                    quickpick.activeItems = [newActiveItem];\n                }\n            }));\n            this.trigger(value);\n            quickpick.show();\n        }))).finally(() => {\n            disposables.dispose();\n        });\n    }\n    async installExtension(galleryExtension) {\n        this.extensionsWorkbenchService.openSearch(`@id:${galleryExtension.identifier.id}`);\n        const result = await this.dialogService.confirm({\n            message: ( localize(\n                3037,\n                \"This will install extension '{0}' published by '{1}'. Do you want to continue?\",\n                galleryExtension.displayName,\n                galleryExtension.publisherDisplayName\n            )),\n            primaryButton: ( localize(3038, \"OK\"))\n        });\n        if (!result.confirmed) {\n            return false;\n        }\n        try {\n            await this.progressService.withProgress({\n                location: 15 ,\n                title: ( localize(3039, \"Installing Extension {0}...\", galleryExtension.displayName))\n            }, async () => {\n                await this.extensionManagementService.installFromGallery(galleryExtension, {\n                    isMachineScoped: false,\n                });\n            });\n            return true;\n        }\n        catch (e) {\n            this.logService.error(`Problem installing extension ${galleryExtension.identifier.id}`, e);\n            return false;\n        }\n    }\n    dispose() {\n        if (this._tokenSource) {\n            this._tokenSource.cancel();\n            this._tokenSource = undefined;\n        }\n        this._queryDelayer.dispose();\n        this._marketplaceExtensions.clear();\n        this._marketplaceThemes.length = 0;\n    }\n};\nMarketplaceThemesPicker = ( (__decorate([\n    ( (__param(2, IExtensionGalleryService))),\n    ( (__param(3, IExtensionManagementService))),\n    ( (__param(4, IQuickInputService))),\n    ( (__param(5, ILogService))),\n    ( (__param(6, IProgressService))),\n    ( (__param(7, IExtensionsWorkbenchService))),\n    ( (__param(8, IDialogService)))\n], MarketplaceThemesPicker)));\nlet InstalledThemesPicker = class InstalledThemesPicker {\n    constructor(options, setTheme, getMarketplaceColorThemes, quickInputService, extensionGalleryService, extensionsWorkbenchService, extensionResourceLoaderService, instantiationService) {\n        this.options = options;\n        this.setTheme = setTheme;\n        this.getMarketplaceColorThemes = getMarketplaceColorThemes;\n        this.quickInputService = quickInputService;\n        this.extensionGalleryService = extensionGalleryService;\n        this.extensionsWorkbenchService = extensionsWorkbenchService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.instantiationService = instantiationService;\n    }\n    async openQuickPick(picks, currentTheme) {\n        let marketplaceThemePicker;\n        if (this.extensionGalleryService.isEnabled()) {\n            if (this.extensionResourceLoaderService.supportsExtensionGalleryResources && this.options.browseMessage) {\n                marketplaceThemePicker = this.instantiationService.createInstance(MarketplaceThemesPicker, this.getMarketplaceColorThemes.bind(this), this.options.marketplaceTag);\n                picks = [configurationEntry(this.options.browseMessage, ConfigureItem.BROWSE_GALLERY), ...picks];\n            }\n            else {\n                picks = [...picks, { type: 'separator' }, configurationEntry(this.options.installMessage, ConfigureItem.EXTENSIONS_VIEW)];\n            }\n        }\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                this.setTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    this.setTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const pickInstalledThemes = (activeItemId) => {\n            const disposables = ( (new DisposableStore()));\n            return ( (new Promise((s, _) => {\n                let isCompleted = false;\n                const autoFocusIndex = picks.findIndex(p => isItem(p) && p.id === activeItemId);\n                const quickpick = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n                quickpick.items = picks;\n                quickpick.title = this.options.title;\n                quickpick.description = this.options.description;\n                quickpick.placeholder = this.options.placeholderMessage;\n                quickpick.activeItems = [picks[autoFocusIndex]];\n                quickpick.canSelectMany = false;\n                quickpick.toggles = this.options.toggles;\n                quickpick.toggles?.forEach(toggle => {\n                    disposables.add(toggle.onChange(() => this.options.onToggle?.(toggle, quickpick)));\n                });\n                quickpick.matchOnDescription = true;\n                disposables.add(quickpick.onDidAccept(async (_) => {\n                    isCompleted = true;\n                    const theme = quickpick.selectedItems[0];\n                    if (!theme || theme.configureItem) {\n                        if (!theme || theme.configureItem === ConfigureItem.EXTENSIONS_VIEW) {\n                            this.extensionsWorkbenchService.openSearch(`${this.options.marketplaceTag} ${quickpick.value}`);\n                        }\n                        else if (theme.configureItem === ConfigureItem.BROWSE_GALLERY) {\n                            if (marketplaceThemePicker) {\n                                const res = await marketplaceThemePicker.openQuickPick(quickpick.value, currentTheme, selectTheme);\n                                if (res === 'back') {\n                                    await pickInstalledThemes(undefined);\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        selectTheme(theme.theme, true);\n                    }\n                    quickpick.hide();\n                    s();\n                }));\n                disposables.add(quickpick.onDidChangeActive(themes => selectTheme(themes[0]?.theme, false)));\n                disposables.add(quickpick.onDidHide(() => {\n                    if (!isCompleted) {\n                        selectTheme(currentTheme, true);\n                        s();\n                    }\n                    quickpick.dispose();\n                }));\n                disposables.add(quickpick.onDidTriggerItemButton(e => {\n                    if (isItem(e.item)) {\n                        const extensionId = e.item.theme?.extensionData?.extensionId;\n                        if (extensionId) {\n                            this.extensionsWorkbenchService.openSearch(`@id:${extensionId}`);\n                        }\n                        else {\n                            this.extensionsWorkbenchService.openSearch(`${this.options.marketplaceTag} ${quickpick.value}`);\n                        }\n                    }\n                }));\n                quickpick.show();\n            }))).finally(() => {\n                disposables.dispose();\n            });\n        };\n        await pickInstalledThemes(currentTheme.id);\n        marketplaceThemePicker?.dispose();\n    }\n};\nInstalledThemesPicker = ( (__decorate([\n    ( (__param(3, IQuickInputService))),\n    ( (__param(4, IExtensionGalleryService))),\n    ( (__param(5, IExtensionsWorkbenchService))),\n    ( (__param(6, IExtensionResourceLoaderService))),\n    ( (__param(7, IInstantiationService)))\n], InstalledThemesPicker)));\nconst SelectColorThemeCommandId = 'workbench.action.selectTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectColorThemeCommandId,\n            title: ( localize2(3040, 'Color Theme')),\n            category: Categories.Preferences,\n            f1: true,\n            keybinding: {\n                weight: 200 ,\n                primary: KeyChord(2048  | 41 , 2048  | 50 )\n            }\n        });\n    }\n    getTitle(colorScheme) {\n        switch (colorScheme) {\n            case ColorScheme.DARK: return ( localize(3041, \"Select Color Theme for System Dark Mode\"));\n            case ColorScheme.LIGHT: return ( localize(3042, \"Select Color Theme for System Light Mode\"));\n            case ColorScheme.HIGH_CONTRAST_DARK: return ( localize(3043, \"Select Color Theme for High Contrast Dark Mode\"));\n            case ColorScheme.HIGH_CONTRAST_LIGHT: return ( localize(3044, \"Select Color Theme for High Contrast Light Mode\"));\n            default:\n                return ( localize(3045, \"Select Color Theme (detect system color mode disabled)\"));\n        }\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const preferencesService = accessor.get(IPreferencesService);\n        const preferredColorScheme = themeService.getPreferredColorScheme();\n        let modeConfigureToggle;\n        if (preferredColorScheme) {\n            modeConfigureToggle = ( (new Toggle({\n                title: ( localize(3046, 'Detect system color mode enabled. Click to configure.')),\n                icon: Codicon.colorMode,\n                isChecked: false,\n                ...defaultToggleStyles\n            })));\n        }\n        else {\n            modeConfigureToggle = ( (new Toggle({\n                title: ( localize(3047, 'Detect system color mode disabled. Click to configure.')),\n                icon: Codicon.colorMode,\n                isChecked: false,\n                ...defaultToggleStyles\n            })));\n        }\n        const options = {\n            installMessage: ( localize(3048, \"Install Additional Color Themes...\")),\n            browseMessage: '$(plus) ' + ( localize(3049, \"Browse Additional Color Themes...\")),\n            placeholderMessage: this.getTitle(preferredColorScheme),\n            marketplaceTag: 'category:themes',\n            toggles: [modeConfigureToggle],\n            onToggle: async (toggle, picker) => {\n                picker.hide();\n                await preferencesService.openSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n            }\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setColorTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const themes = await themeService.getColorThemes();\n        const currentTheme = themeService.getColorTheme();\n        const lightEntries = toEntries(themes.filter(t => t.type === ColorScheme.LIGHT), ( localize(3050, \"light themes\")));\n        const darkEntries = toEntries(themes.filter(t => t.type === ColorScheme.DARK), ( localize(3051, \"dark themes\")));\n        const hcEntries = toEntries(themes.filter(t => isHighContrast(t.type)), ( localize(3052, \"high contrast themes\")));\n        let picks;\n        switch (preferredColorScheme) {\n            case ColorScheme.DARK:\n                picks = [...darkEntries, ...lightEntries, ...hcEntries];\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                picks = [...hcEntries, ...lightEntries, ...darkEntries];\n                break;\n            case ColorScheme.LIGHT:\n            default:\n                picks = [...lightEntries, ...darkEntries, ...hcEntries];\n                break;\n        }\n        await picker.openQuickPick(picks, currentTheme);\n    }\n});\nconst SelectFileIconThemeCommandId = 'workbench.action.selectIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectFileIconThemeCommandId,\n            title: ( localize2(3053, 'File Icon Theme')),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const options = {\n            installMessage: ( localize(3054, \"Install Additional File Icon Themes...\")),\n            placeholderMessage: ( localize(3055, \"Select File Icon Theme (Up/Down Keys to Preview)\")),\n            marketplaceTag: 'tag:icon-theme'\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setFileIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceFileIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localize(3056, 'file icon themes')) },\n            { id: '', theme: FileIconThemeData.noIconTheme, label: ( localize(3057, 'None')), description: ( localize(3058, 'Disable File Icons')) },\n            ...toEntries(await themeService.getFileIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getFileIconTheme());\n    }\n});\nconst SelectProductIconThemeCommandId = 'workbench.action.selectProductIconTheme';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: SelectProductIconThemeCommandId,\n            title: ( localize2(3059, 'Product Icon Theme')),\n            category: Categories.Preferences,\n            f1: true\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const options = {\n            installMessage: ( localize(3060, \"Install Additional Product Icon Themes...\")),\n            browseMessage: '$(plus) ' + ( localize(3061, \"Browse Additional Product Icon Themes...\")),\n            placeholderMessage: ( localize(3062, \"Select Product Icon Theme (Up/Down Keys to Preview)\")),\n            marketplaceTag: 'tag:product-icon-theme'\n        };\n        const setTheme = (theme, settingsTarget) => themeService.setProductIconTheme(theme, settingsTarget);\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceProductIconThemes(publisher, name, version);\n        const instantiationService = accessor.get(IInstantiationService);\n        const picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n        const picks = [\n            { type: 'separator', label: ( localize(3063, 'product icon themes')) },\n            { id: DEFAULT_PRODUCT_ICON_THEME_ID, theme: ProductIconThemeData.defaultTheme, label: ( localize(3064, 'Default')) },\n            ...toEntries(await themeService.getProductIconThemes()),\n        ];\n        await picker.openQuickPick(picks, themeService.getProductIconTheme());\n    }\n});\nCommandsRegistry.registerCommand('workbench.action.previewColorTheme', async function (accessor, extension, themeSettingsId) {\n    const themeService = accessor.get(IWorkbenchThemeService);\n    let themes = findBuiltInThemes(await themeService.getColorThemes(), extension);\n    if (themes.length === 0) {\n        themes = await themeService.getMarketplaceColorThemes(extension.publisher, extension.name, extension.version);\n    }\n    for (const theme of themes) {\n        if (!themeSettingsId || theme.settingsId === themeSettingsId) {\n            await themeService.setColorTheme(theme, 'preview');\n            return theme.settingsId;\n        }\n    }\n    return undefined;\n});\nfunction findBuiltInThemes(themes, extension) {\n    return themes.filter(({ extensionData }) => extensionData && extensionData.extensionIsBuiltin && equalsIgnoreCase(extensionData.extensionPublisher, extension.publisher) && equalsIgnoreCase(extensionData.extensionName, extension.name));\n}\nfunction configurationEntry(label, configureItem) {\n    return {\n        id: undefined,\n        label: label,\n        alwaysShow: true,\n        buttons: [configureButton],\n        configureItem: configureItem\n    };\n}\nfunction isItem(i) {\n    return i['type'] !== 'separator';\n}\nfunction toEntry(theme) {\n    const settingId = theme.settingsId ?? undefined;\n    const item = {\n        id: theme.id,\n        theme: theme,\n        label: theme.label,\n        description: theme.description || (theme.label === settingId ? undefined : settingId),\n    };\n    if (theme.extensionData) {\n        item.buttons = [configureButton];\n    }\n    return item;\n}\nfunction toEntries(themes, label) {\n    const sorter = (t1, t2) => t1.label.localeCompare(t2.label);\n    const entries = ( (themes.map(toEntry))).sort(sorter);\n    if (entries.length > 0 && label) {\n        entries.unshift({ type: 'separator', label });\n    }\n    return entries;\n}\nconst configureButton = {\n    iconClass: ThemeIcon.asClassName(manageExtensionIcon),\n    tooltip: ( localize(3065, \"Manage Extension\")),\n};\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: 'workbench.action.generateColorTheme',\n            title: ( localize2(3066, 'Generate Color Theme From Current Settings')),\n            category: Categories.Developer,\n            f1: true\n        });\n    }\n    run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const theme = themeService.getColorTheme();\n        const colors = ( (Registry.as(Extensions.ColorContribution))).getColors();\n        const colorIds = ( (colors.map(c => c.id))).sort();\n        const resultingColors = {};\n        const inherited = [];\n        for (const colorId of colorIds) {\n            const color = theme.getColor(colorId, false);\n            if (color) {\n                resultingColors[colorId] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                inherited.push(colorId);\n            }\n        }\n        const nullDefaults = [];\n        for (const id of inherited) {\n            const color = theme.getColor(id);\n            if (color) {\n                resultingColors['__' + id] = Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                nullDefaults.push(id);\n            }\n        }\n        for (const id of nullDefaults) {\n            resultingColors['__' + id] = null;\n        }\n        let contents = JSON.stringify({\n            '$schema': colorThemeSchemaId,\n            type: theme.type,\n            colors: resultingColors,\n            tokenColors: theme.tokenColors.filter(t => !!t.scope)\n        }, null, '\\t');\n        contents = contents.replace(/\\\"__/g, '//\"');\n        const editorService = accessor.get(IEditorService);\n        return editorService.openEditor({ resource: undefined, contents, languageId: 'jsonc', options: { pinned: true } });\n    }\n});\nconst toggleLightDarkThemesCommandId = 'workbench.action.toggleLightDarkThemes';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: toggleLightDarkThemesCommandId,\n            title: ( localize2(3067, 'Toggle between Light/Dark Themes')),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const configurationService = accessor.get(IConfigurationService);\n        const notificationService = accessor.get(INotificationService);\n        const preferencesService = accessor.get(IPreferencesService);\n        if (configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            const message = ( localize(\n                3068,\n                \"Cannot toggle between light and dark themes when `{0}` is enabled in settings.\",\n                ThemeSettings.DETECT_COLOR_SCHEME\n            ));\n            notificationService.prompt(Severity$1.Info, message, [\n                {\n                    label: ( localize(3069, \"Open Settings\")),\n                    run: () => {\n                        return preferencesService.openUserSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n                    }\n                }\n            ]);\n            return;\n        }\n        const currentTheme = themeService.getColorTheme();\n        let newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n        switch (currentTheme.type) {\n            case ColorScheme.LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n                break;\n            case ColorScheme.DARK:\n                newSettingsId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                newSettingsId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                newSettingsId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n        }\n        const themeSettingId = configurationService.getValue(newSettingsId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = (await themeService.getColorThemes()).find(t => t.settingsId === themeSettingId);\n            if (theme) {\n                themeService.setColorTheme(theme.id, 'auto');\n            }\n        }\n    }\n});\nconst browseColorThemesInMarketplaceCommandId = 'workbench.action.browseColorThemesInMarketplace';\nregisterAction2(class extends Action2 {\n    constructor() {\n        super({\n            id: browseColorThemesInMarketplaceCommandId,\n            title: ( localize2(3070, 'Browse Color Themes in Marketplace')),\n            category: Categories.Preferences,\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const marketplaceTag = 'category:themes';\n        const themeService = accessor.get(IWorkbenchThemeService);\n        const extensionGalleryService = accessor.get(IExtensionGalleryService);\n        const extensionResourceLoaderService = accessor.get(IExtensionResourceLoaderService);\n        const instantiationService = accessor.get(IInstantiationService);\n        if (!extensionGalleryService.isEnabled() || !extensionResourceLoaderService.supportsExtensionGalleryResources) {\n            return;\n        }\n        const currentTheme = themeService.getColorTheme();\n        const getMarketplaceColorThemes = (publisher, name, version) => themeService.getMarketplaceColorThemes(publisher, name, version);\n        let selectThemeTimeout;\n        const selectTheme = (theme, applyTheme) => {\n            if (selectThemeTimeout) {\n                clearTimeout(selectThemeTimeout);\n            }\n            selectThemeTimeout = mainWindow.setTimeout(() => {\n                selectThemeTimeout = undefined;\n                const newTheme = (theme ?? currentTheme);\n                themeService.setColorTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined, err => {\n                    onUnexpectedError(err);\n                    themeService.setColorTheme(currentTheme, undefined);\n                });\n            }, applyTheme ? 0 : 200);\n        };\n        const marketplaceThemePicker = instantiationService.createInstance(MarketplaceThemesPicker, getMarketplaceColorThemes, marketplaceTag);\n        await marketplaceThemePicker.openQuickPick('', themeService.getColorTheme(), selectTheme).then(undefined, onUnexpectedError);\n    }\n});\nconst ThemesSubMenu = ( (new MenuId('ThemesSubMenu')));\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n    title: ( localize(3071, \"Themes\")),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n    title: ( localize(3072, \"&&Theme\")),\n    submenu: ThemesSubMenu,\n    group: '2_configuration',\n    order: 7\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectColorThemeCommandId,\n        title: ( localize(3040, 'Color Theme'))\n    },\n    order: 1\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectFileIconThemeCommandId,\n        title: ( localize(3073, \"File Icon Theme\"))\n    },\n    order: 2\n});\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n    command: {\n        id: SelectProductIconThemeCommandId,\n        title: ( localize(3074, \"Product Icon Theme\"))\n    },\n    order: 3\n});\nlet DefaultThemeUpdatedNotificationContribution = class DefaultThemeUpdatedNotificationContribution {\n    static { DefaultThemeUpdatedNotificationContribution_1 = this; }\n    static { this.STORAGE_KEY = 'themeUpdatedNotificationShown'; }\n    constructor(_notificationService, _workbenchThemeService, _storageService, _commandService, _telemetryService, _hostService) {\n        this._notificationService = _notificationService;\n        this._workbenchThemeService = _workbenchThemeService;\n        this._storageService = _storageService;\n        this._commandService = _commandService;\n        this._telemetryService = _telemetryService;\n        this._hostService = _hostService;\n        if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n            return;\n        }\n        setTimeout(async () => {\n            if (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, -1 )) {\n                return;\n            }\n            if (await this._hostService.hadLastFocus()) {\n                this._storageService.store(DefaultThemeUpdatedNotificationContribution_1.STORAGE_KEY, true, -1 , 0 );\n                if (this._workbenchThemeService.hasUpdatedDefaultThemes()) {\n                    this._showYouGotMigratedNotification();\n                }\n                else {\n                    const currentTheme = this._workbenchThemeService.getColorTheme().settingsId;\n                    if (currentTheme === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD || currentTheme === ThemeSettingDefaults.COLOR_THEME_DARK_OLD) {\n                        this._tryNewThemeNotification();\n                    }\n                }\n            }\n        }, 3000);\n    }\n    async _showYouGotMigratedNotification() {\n        const usingLight = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT;\n        const newThemeSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const newTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (newTheme) {\n            const choices = [\n                {\n                    label: ( localize(3075, \"Keep New Theme\")),\n                    run: () => {\n                        this._writeTelemetry('keepNew');\n                    }\n                },\n                {\n                    label: ( localize(3076, \"Browse Themes\")),\n                    run: () => {\n                        this._writeTelemetry('browse');\n                        this._commandService.executeCommand(SelectColorThemeCommandId);\n                    }\n                },\n                {\n                    label: ( localize(3077, \"Revert\")),\n                    run: async () => {\n                        this._writeTelemetry('keepOld');\n                        const oldSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD : ThemeSettingDefaults.COLOR_THEME_DARK_OLD;\n                        const oldTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === oldSettingsId);\n                        if (oldTheme) {\n                            this._workbenchThemeService.setColorTheme(oldTheme, 'auto');\n                        }\n                    }\n                }\n            ];\n            await this._notificationService.prompt(Severity$1.Info, ( localize(\n                3078,\n                \"Visual Studio Code now ships with a new default theme '{0}'. If you prefer, you can switch back to the old theme or try one of the many other color themes available.\",\n                newTheme.label\n            )), choices, {\n                onCancel: () => this._writeTelemetry('cancel')\n            });\n        }\n    }\n    async _tryNewThemeNotification() {\n        const newThemeSettingsId = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n        const theme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n        if (theme) {\n            const choices = [{\n                    label: ( localize(3079, \"Try New Theme\")),\n                    run: () => {\n                        this._writeTelemetry('tryNew');\n                        this._workbenchThemeService.setColorTheme(theme, 'auto');\n                    }\n                },\n                {\n                    label: ( localize(3080, \"Cancel\")),\n                    run: () => {\n                        this._writeTelemetry('cancel');\n                    }\n                }];\n            await this._notificationService.prompt(Severity$1.Info, ( localize(\n                3081,\n                \"Visual Studio Code now ships with a new default theme '{0}'. Do you want to give it a try?\",\n                theme.label\n            )), choices, { onCancel: () => this._writeTelemetry('cancel') });\n        }\n    }\n    _writeTelemetry(outcome) {\n        this._telemetryService.publicLog2('themeUpdatedNotication', {\n            web: isWeb,\n            reaction: outcome\n        });\n    }\n};\nDefaultThemeUpdatedNotificationContribution = DefaultThemeUpdatedNotificationContribution_1 = ( (__decorate([\n    ( (__param(0, INotificationService))),\n    ( (__param(1, IWorkbenchThemeService))),\n    ( (__param(2, IStorageService))),\n    ( (__param(3, ICommandService))),\n    ( (__param(4, ITelemetryService))),\n    ( (__param(5, IHostService)))\n], DefaultThemeUpdatedNotificationContribution)));\nconst workbenchRegistry = ( (Registry.as(Extensions$1.Workbench)));\nworkbenchRegistry.registerWorkbenchContribution(DefaultThemeUpdatedNotificationContribution, 4 );\n\nexport { manageExtensionIcon };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { asCSSUrl } from 'vscode/vscode/vs/base/browser/dom';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nclass FileIconThemeData {\n    static { this.STORAGE_KEY = 'iconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    ensureLoaded(themeLoader) {\n        return !this.isLoaded ? this.load(themeLoader) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(themeLoader) {\n        return this.load(themeLoader);\n    }\n    load(themeLoader) {\n        return themeLoader.load(this);\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( (new FileIconThemeData(id, label, settingsId)));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static { this._noIconTheme = null; }\n    static get noIconTheme() {\n        let themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = ( (new FileIconThemeData('', '', null)));\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( (new FileIconThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(FileIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new FileIconThemeData('', '', null)));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            watch: this.watch\n        });\n        storageService.store(FileIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nclass FileIconThemeLoader {\n    constructor(fileService, languageService) {\n        this.fileService = fileService;\n        this.languageService = languageService;\n    }\n    load(data) {\n        if (!data.location) {\n            return Promise.resolve(data.styleSheetContent);\n        }\n        return this.loadIconThemeDocument(data.location).then(iconThemeDocument => {\n            const result = this.processIconThemeDocument(data.id, data.location, iconThemeDocument);\n            data.styleSheetContent = result.content;\n            data.hasFileIcons = result.hasFileIcons;\n            data.hasFolderIcons = result.hasFolderIcons;\n            data.hidesExplorerArrows = result.hidesExplorerArrows;\n            data.isLoaded = true;\n            return data.styleSheetContent;\n        });\n    }\n    loadIconThemeDocument(location) {\n        return this.fileService.readExtensionResource(location).then((content) => {\n            const errors = [];\n            const contentValue = parse(content, errors);\n            if (errors.length > 0) {\n                return Promise.reject(( (new Error(( localize(\n                    6975,\n                    \"Problems parsing file icons file: {0}\",\n                    ( (errors.map(e => getParseErrorMessage(e.error)))).join(', ')\n                ))))));\n            }\n            else if (getNodeType(contentValue) !== 'object') {\n                return Promise.reject(( (new Error(( localize(6976, \"Invalid format for file icons theme file: Object expected.\"))))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        let hasSpecificFileIcons = false;\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        const selectorByDefinitionId = {};\n        const coveredLanguages = {};\n        const iconThemeDocumentLocationDirname = dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents';\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                const rootFolder = associations.rootFolder || associations.folder;\n                const rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                const folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (const key in folderNames) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${selectors.join('')}.folder-icon::before`, folderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (const key in folderNamesExpanded) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${expanded} ${selectors.join('')}.folder-icon::before`, folderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNames = associations.rootFolderNames;\n                if (rootFolderNames) {\n                    for (const key in rootFolderNames) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const rootFolderNamesExpanded = associations.rootFolderNamesExpanded;\n                if (rootFolderNamesExpanded) {\n                    for (const key in rootFolderNamesExpanded) {\n                        const name = key.toLowerCase();\n                        addSelector(`${qualifier} ${expanded} .${escapeCSS(name)}-root-name-folder-icon.rootfolder-icon::before`, rootFolderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (const languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                        coveredLanguages[languageId] = true;\n                    }\n                }\n                const fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (const key in fileExtensions) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        const segments = name.split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n                const fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (const key in fileNames) {\n                        const selectors = [];\n                        const fileName = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        selectors.push('.name-file-icon');\n                        const segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-light');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        const showLanguageModeIcons = iconThemeDocument.showLanguageModeIcons === true || (hasSpecificFileIcons && iconThemeDocument.showLanguageModeIcons !== false);\n        const cssRules = [];\n        const fonts = iconThemeDocument.fonts;\n        const fontSizes = ( (new Map()));\n        if (Array.isArray(fonts)) {\n            const defaultFontSize = fonts[0].size || '150%';\n            fonts.forEach(font => {\n                const src = ( (font.src.map(l => `${asCSSUrl(resolvePath(l.path))} format('${l.format}')`))).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; font-display: block; }`);\n                if (font.size !== undefined && font.size !== defaultFontSize) {\n                    fontSizes.set(font.id, font.size);\n                }\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${defaultFontSize}; }`);\n        }\n        const emQuad = '\\\\2001';\n        for (const defId in selectorByDefinitionId) {\n            const selectors = selectorByDefinitionId[defId];\n            const definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: '${emQuad}'; background-image: ${asCSSUrl(resolvePath(definition.iconPath))}; }`);\n                }\n                else if (definition.fontCharacter || definition.fontColor) {\n                    const body = [];\n                    if (definition.fontColor) {\n                        body.push(`color: ${definition.fontColor};`);\n                    }\n                    if (definition.fontCharacter) {\n                        body.push(`content: '${definition.fontCharacter}';`);\n                    }\n                    const fontSize = definition.fontSize ?? (definition.fontId ? fontSizes.get(definition.fontId) : undefined);\n                    if (fontSize) {\n                        body.push(`font-size: ${fontSize};`);\n                    }\n                    if (definition.fontId) {\n                        body.push(`font-family: ${definition.fontId};`);\n                    }\n                    if (showLanguageModeIcons) {\n                        body.push(`background-image: unset;`);\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body.join(' ')} }`);\n                }\n            }\n        }\n        if (showLanguageModeIcons) {\n            for (const languageId of this.languageService.getRegisteredLanguageIds()) {\n                if (!coveredLanguages[languageId]) {\n                    const icon = this.languageService.getIcon(languageId);\n                    if (icon) {\n                        const selector = `.show-file-icons .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`;\n                        cssRules.push(`${selector} { content: '${emQuad}'; background-image: ${asCSSUrl(icon.dark)}; }`);\n                        cssRules.push(`.vs ${selector} { content: '${emQuad}'; background-image: ${asCSSUrl(icon.light)}; }`);\n                    }\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n}\nfunction handleParentFolder(key, selectors) {\n    const lastIndexOfSlash = key.lastIndexOf('/');\n    if (lastIndexOfSlash >= 0) {\n        const parentFolder = key.substring(0, lastIndexOfSlash);\n        selectors.push(`.${escapeCSS(parentFolder)}-name-dir-icon`);\n        return key.substring(lastIndexOfSlash + 1);\n    }\n    return key;\n}\nfunction escapeCSS(str) {\n    str = str.replace(/[\\s]/g, '/');\n    return mainWindow.CSS.escape(str);\n}\n\nexport { FileIconThemeData, FileIconThemeLoader };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { basename } from 'vscode/vscode/vs/base/common/path';\nimport { dirname, joinPath } from 'vscode/vscode/vs/base/common/resources';\nimport { parse, getNodeType } from 'vscode/vscode/vs/base/common/json';\nimport { ThemeSettingDefaults, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { getParseErrorMessage } from 'vscode/vscode/vs/base/common/jsonErrorMessages';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontFormatRegex } from '../common/productIconThemeSchema.js';\nimport { isObject, isString } from 'vscode/vscode/vs/base/common/types';\nimport { IconFontDefinition, getIconRegistry } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\nimport { ThemeIcon } from 'vscode/vscode/vs/base/common/themables';\n\nconst DEFAULT_PRODUCT_ICON_THEME_ID = '';\nclass ProductIconThemeData {\n    static { this.STORAGE_KEY = 'productIconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.iconThemeDocument = { iconDefinitions: ( (new Map())) };\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    getIcon(iconContribution) {\n        return _resolveIconDefinition(iconContribution, this.iconThemeDocument);\n    }\n    ensureLoaded(fileService, logService) {\n        return !this.isLoaded ? this.load(fileService, logService) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(fileService, logService) {\n        return this.load(fileService, logService);\n    }\n    async load(fileService, logService) {\n        const location = this.location;\n        if (!location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        const warnings = [];\n        this.iconThemeDocument = await _loadProductIconThemeDocument(fileService, location, warnings);\n        this.isLoaded = true;\n        if (warnings.length) {\n            logService.error(( localize(\n                7043,\n                \"Problems processing product icons definitions in {0}:\\n{1}\",\n                 (location.toString()),\n                warnings.join('\\n')\n            )));\n        }\n        return this.styleSheetContent;\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( (new ProductIconThemeData(id, label, settingsId)));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( (new ProductIconThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static { this._defaultProductIconTheme = null; }\n    static get defaultTheme() {\n        let themeData = ProductIconThemeData._defaultProductIconTheme;\n        if (!themeData) {\n            themeData = ProductIconThemeData._defaultProductIconTheme = ( (new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, ( localize(7044, 'Default')), ThemeSettingDefaults.PRODUCT_ICON_THEME)));\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ProductIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new ProductIconThemeData('', '', '')));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            const { iconDefinitions, iconFontDefinitions } = data;\n            if (Array.isArray(iconDefinitions) && isObject(iconFontDefinitions)) {\n                const restoredIconDefinitions = ( (new Map()));\n                for (const entry of iconDefinitions) {\n                    const { id, fontCharacter, fontId } = entry;\n                    if (isString(id) && isString(fontCharacter)) {\n                        if (isString(fontId)) {\n                            const iconFontDefinition = IconFontDefinition.fromJSONObject(iconFontDefinitions[fontId]);\n                            if (iconFontDefinition) {\n                                restoredIconDefinitions.set(id, { fontCharacter, font: { id: fontId, definition: iconFontDefinition } });\n                            }\n                        }\n                        else {\n                            restoredIconDefinitions.set(id, { fontCharacter });\n                        }\n                    }\n                }\n                theme.iconThemeDocument = { iconDefinitions: restoredIconDefinitions };\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const iconDefinitions = [];\n        const iconFontDefinitions = {};\n        for (const entry of this.iconThemeDocument.iconDefinitions.entries()) {\n            const font = entry[1].font;\n            iconDefinitions.push({ id: entry[0], fontCharacter: entry[1].fontCharacter, fontId: font?.id });\n            if (font && iconFontDefinitions[font.id] === undefined) {\n                iconFontDefinitions[font.id] = IconFontDefinition.toJSONObject(font.definition);\n            }\n        }\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            watch: this.watch,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            iconDefinitions,\n            iconFontDefinitions\n        });\n        storageService.store(ProductIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nfunction _loadProductIconThemeDocument(fileService, location, warnings) {\n    return fileService.readExtensionResource(location).then((content) => {\n        const parseErrors = [];\n        const contentValue = parse(content, parseErrors);\n        if (parseErrors.length > 0) {\n            return Promise.reject(( (new Error(( localize(\n                7045,\n                \"Problems parsing product icons file: {0}\",\n                ( (parseErrors.map(e => getParseErrorMessage(e.error)))).join(', ')\n            ))))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( (new Error(( localize(7046, \"Invalid format for product icons theme file: Object expected.\"))))));\n        }\n        else if (!contentValue.iconDefinitions || !Array.isArray(contentValue.fonts) || !contentValue.fonts.length) {\n            return Promise.reject(( (new Error(( localize(\n                7047,\n                \"Invalid format for product icons theme file: Must contain iconDefinitions and fonts.\"\n            ))))));\n        }\n        const iconThemeDocumentLocationDirname = dirname(location);\n        const sanitizedFonts = ( (new Map()));\n        for (const font of contentValue.fonts) {\n            if (isString(font.id) && font.id.match(fontIdRegex)) {\n                const fontId = font.id;\n                let fontWeight = undefined;\n                if (isString(font.weight) && font.weight.match(fontWeightRegex)) {\n                    fontWeight = font.weight;\n                }\n                else {\n                    warnings.push(( localize(7048, 'Invalid font weight in font \\'{0}\\'. Ignoring setting.', font.id)));\n                }\n                let fontStyle = undefined;\n                if (isString(font.style) && font.style.match(fontStyleRegex)) {\n                    fontStyle = font.style;\n                }\n                else {\n                    warnings.push(( localize(7049, 'Invalid font style in font \\'{0}\\'. Ignoring setting.', font.id)));\n                }\n                const sanitizedSrc = [];\n                if (Array.isArray(font.src)) {\n                    for (const s of font.src) {\n                        if (isString(s.path) && isString(s.format) && s.format.match(fontFormatRegex)) {\n                            const iconFontLocation = joinPath(iconThemeDocumentLocationDirname, s.path);\n                            sanitizedSrc.push({ location: iconFontLocation, format: s.format });\n                        }\n                        else {\n                            warnings.push(( localize(7050, 'Invalid font source in font \\'{0}\\'. Ignoring source.', font.id)));\n                        }\n                    }\n                }\n                if (sanitizedSrc.length) {\n                    sanitizedFonts.set(fontId, { weight: fontWeight, style: fontStyle, src: sanitizedSrc });\n                }\n                else {\n                    warnings.push(( localize(\n                        7051,\n                        'No valid font source in font \\'{0}\\'. Ignoring font definition.',\n                        font.id\n                    )));\n                }\n            }\n            else {\n                warnings.push(( localize(\n                    7052,\n                    'Missing or invalid font id \\'{0}\\'. Skipping font definition.',\n                    font.id\n                )));\n            }\n        }\n        const iconDefinitions = ( (new Map()));\n        const primaryFontId = contentValue.fonts[0].id;\n        for (const iconId in contentValue.iconDefinitions) {\n            const definition = contentValue.iconDefinitions[iconId];\n            if (isString(definition.fontCharacter)) {\n                const fontId = definition.fontId ?? primaryFontId;\n                const fontDefinition = sanitizedFonts.get(fontId);\n                if (fontDefinition) {\n                    const font = { id: `pi-${fontId}`, definition: fontDefinition };\n                    iconDefinitions.set(iconId, { fontCharacter: definition.fontCharacter, font });\n                }\n                else {\n                    warnings.push(( localize(7053, 'Skipping icon definition \\'{0}\\'. Unknown font.', iconId)));\n                }\n            }\n            else {\n                warnings.push(( localize(7054, 'Skipping icon definition \\'{0}\\'. Unknown fontCharacter.', iconId)));\n            }\n        }\n        return { iconDefinitions };\n    });\n}\nconst iconRegistry = getIconRegistry();\nfunction _resolveIconDefinition(iconContribution, iconThemeDocument) {\n    const iconDefinitions = iconThemeDocument.iconDefinitions;\n    let definition = iconDefinitions.get(iconContribution.id);\n    let defaults = iconContribution.defaults;\n    while (!definition && ThemeIcon.isThemeIcon(defaults)) {\n        const ic = iconRegistry.getIcon(defaults.id);\n        if (ic) {\n            definition = iconDefinitions.get(ic.id);\n            defaults = ic.defaults;\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (definition) {\n        return definition;\n    }\n    if (!ThemeIcon.isThemeIcon(defaults)) {\n        return defaults;\n    }\n    return undefined;\n}\n\nexport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { localize } from 'vscode/vscode/vs/nls';\nimport { isUndefined, isString } from 'vscode/vscode/vs/base/common/types';\nimport { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions.service';\nimport { VS_HC_LIGHT_THEME, VS_HC_THEME, VS_DARK_THEME, VS_LIGHT_THEME, ThemeSettingDefaults, COLOR_THEME_LIGHT_INITIAL_COLORS, COLOR_THEME_DARK_INITIAL_COLORS, ThemeSettings, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { onUnexpectedError } from 'vscode/vscode/vs/base/common/errors';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { ColorThemeData } from 'vscode/vscode/vs/workbench/services/themes/common/colorThemeData';\nimport { Extensions } from 'vscode/vscode/vs/platform/theme/common/themeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { registerFileIconThemeSchemas } from '../common/fileIconThemeSchema.js';\nimport { Disposable, dispose } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { FileIconThemeData, FileIconThemeLoader } from './fileIconThemeData.js';\nimport { createStyleSheet } from 'vscode/vscode/vs/base/browser/dom';\nimport { IBrowserWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/browser/environmentService.service';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';\nimport { joinPath, isEqual } from 'vscode/vscode/vs/base/common/resources';\nimport { registerColorThemeSchemas } from '../common/colorThemeSchema.js';\nimport { getRemoteAuthority } from 'vscode/vscode/vs/platform/remote/common/remoteHosts';\nimport { IWorkbenchLayoutService } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService.service';\nimport { IExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service';\nimport { registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint, ThemeRegistry } from '../common/themeExtensionPoints.js';\nimport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas } from '../common/themeConfiguration.js';\nimport { ProductIconThemeData, DEFAULT_PRODUCT_ICON_THEME_ID } from './productIconThemeData.js';\nimport { registerProductIconThemeSchemas } from '../common/productIconThemeSchema.js';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { IHostColorSchemeService } from 'vscode/vscode/vs/workbench/services/themes/common/hostColorSchemeService.service';\nimport { Sequencer, RunOnceScheduler } from 'vscode/vscode/vs/base/common/async';\nimport { IUserDataInitializationService } from 'vscode/vscode/vs/workbench/services/userData/browser/userDataInit.service';\nimport { getIconsStyleSheet } from 'vscode/vscode/vs/platform/theme/browser/iconsStyleSheet';\nimport { getColorRegistry, asCssVariableName } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { ILanguageService } from 'vscode/vscode/vs/editor/common/languages/language';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\n\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst DEFAULT_FILE_ICON_THEME_ID = 'vscode.vscode-theme-seti-vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst fileIconThemeRulesClassName = 'contributedFileIconTheme';\nconst productIconThemeRulesClassName = 'contributedProductIconTheme';\nconst themingRegistry = ( Registry.as(Extensions.ThemingContribution));\nfunction validateThemeId(theme) {\n    switch (theme) {\n        case VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n        case VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n        case VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n        case VS_HC_LIGHT_THEME: return `hc-light ${defaultThemeExtensionId}-themes-hc_light-json`;\n    }\n    return theme;\n}\nconst colorThemesExtPoint = registerColorThemeExtensionPoint();\nconst fileIconThemesExtPoint = registerFileIconThemeExtensionPoint();\nconst productIconThemesExtPoint = registerProductIconThemeExtensionPoint();\nlet WorkbenchThemeService = class WorkbenchThemeService extends Disposable {\n    constructor(extensionService, storageService, configurationService, telemetryService, environmentService, fileService, extensionResourceLoaderService, layoutService, logService, hostColorService, userDataInitializationService, languageService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.environmentService = environmentService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.logService = logService;\n        this.hostColorService = hostColorService;\n        this.userDataInitializationService = userDataInitializationService;\n        this.languageService = languageService;\n        this.hasDefaultUpdated = false;\n        this.themeExtensionsActivated = ( new Map());\n        this.container = layoutService.mainContainer;\n        this.settings = ( new ThemeConfiguration(configurationService, hostColorService));\n        this.colorThemeRegistry = this._register(( new ThemeRegistry(colorThemesExtPoint, ColorThemeData.fromExtensionTheme)));\n        this.colorThemeWatcher = this._register(( new ThemeFileWatcher(fileService, environmentService, this.reloadCurrentColorTheme.bind(this))));\n        this.onColorThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentColorTheme = ColorThemeData.createUnloadedTheme('');\n        this.colorThemeSequencer = ( new Sequencer());\n        this.fileIconThemeWatcher = this._register(( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentFileIconTheme.bind(this)\n        )));\n        this.fileIconThemeRegistry = this._register(( new ThemeRegistry(\n            fileIconThemesExtPoint,\n            FileIconThemeData.fromExtensionTheme,\n            true,\n            FileIconThemeData.noIconTheme\n        )));\n        this.fileIconThemeLoader = ( new FileIconThemeLoader(extensionResourceLoaderService, languageService));\n        this.onFileIconThemeChange = ( new Emitter({ leakWarningThreshold: 400 }));\n        this.currentFileIconTheme = FileIconThemeData.createUnloadedTheme('');\n        this.fileIconThemeSequencer = ( new Sequencer());\n        this.productIconThemeWatcher = this._register(( new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentProductIconTheme.bind(this)\n        )));\n        this.productIconThemeRegistry = this._register(( new ThemeRegistry(\n            productIconThemesExtPoint,\n            ProductIconThemeData.fromExtensionTheme,\n            true,\n            ProductIconThemeData.defaultTheme\n        )));\n        this.onProductIconThemeChange = ( new Emitter());\n        this.currentProductIconTheme = ProductIconThemeData.createUnloadedTheme('');\n        this.productIconThemeSequencer = ( new Sequencer());\n        this._register(this.onDidColorThemeChange(theme => getColorRegistry().notifyThemeUpdate(theme)));\n        let themeData = ColorThemeData.fromStorageData(this.storageService);\n        const colorThemeSetting = this.settings.colorTheme;\n        if (themeData && colorThemeSetting !== themeData.settingsId && this.settings.isDefaultColorTheme()) {\n            this.hasDefaultUpdated = themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK_OLD || themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD;\n            themeData = undefined;\n        }\n        const defaultColorMap = colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_LIGHT ? COLOR_THEME_LIGHT_INITIAL_COLORS : colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_DARK ? COLOR_THEME_DARK_INITIAL_COLORS : undefined;\n        if (!themeData) {\n            const initialColorTheme = environmentService.options?.initialColorTheme;\n            if (initialColorTheme) {\n                themeData = ColorThemeData.createUnloadedThemeForThemeType(initialColorTheme.themeType, initialColorTheme.colors ?? defaultColorMap);\n            }\n        }\n        if (!themeData) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(isWeb ? ColorScheme.LIGHT : ColorScheme.DARK, defaultColorMap);\n        }\n        themeData.setCustomizations(this.settings);\n        this.applyTheme(themeData, undefined, true);\n        const fileIconData = FileIconThemeData.fromStorageData(this.storageService);\n        if (fileIconData) {\n            this.applyAndSetFileIconTheme(fileIconData, true);\n        }\n        const productIconData = ProductIconThemeData.fromStorageData(this.storageService);\n        if (productIconData) {\n            this.applyAndSetProductIconTheme(productIconData, true);\n        }\n        extensionService.whenInstalledExtensionsRegistered().then(_ => {\n            this.installConfigurationListener();\n            this.installPreferredSchemeListener();\n            this.installRegistryListeners();\n            this.initialize().catch(onUnexpectedError);\n        });\n        const codiconStyleSheet = createStyleSheet();\n        codiconStyleSheet.id = 'codiconStyles';\n        const iconsStyleSheet = this._register(getIconsStyleSheet(this));\n        function updateAll() {\n            codiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n        }\n        const delayer = this._register(( new RunOnceScheduler(updateAll, 0)));\n        this._register(iconsStyleSheet.onDidChange(() => delayer.schedule()));\n        delayer.schedule();\n    }\n    initialize() {\n        const extDevLocs = this.environmentService.extensionDevelopmentLocationURI;\n        const extDevLoc = extDevLocs && extDevLocs.length === 1 ? extDevLocs[0] : undefined;\n        const initializeColorTheme = async () => {\n            const devThemes = this.colorThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                const matchedColorTheme = devThemes.find(theme => theme.type === this.currentColorTheme.type);\n                return this.setColorTheme(matchedColorTheme ? matchedColorTheme.id : devThemes[0].id, undefined);\n            }\n            let theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, undefined);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                const fallbackTheme = this.currentColorTheme.type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n                theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, fallbackTheme);\n            }\n            return this.setColorTheme(theme && theme.id, undefined);\n        };\n        const initializeFileIconTheme = async () => {\n            const devThemes = this.fileIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setFileIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            }\n            return this.setFileIconTheme(theme ? theme.id : DEFAULT_FILE_ICON_THEME_ID, undefined);\n        };\n        const initializeProductIconTheme = async () => {\n            const devThemes = this.productIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setProductIconTheme(devThemes[0].id, 8 );\n            }\n            let theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            if (!theme) {\n                await this.userDataInitializationService.whenInitializationFinished();\n                theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            }\n            return this.setProductIconTheme(theme ? theme.id : DEFAULT_PRODUCT_ICON_THEME_ID, undefined);\n        };\n        return Promise.all([initializeColorTheme(), initializeFileIconTheme(), initializeProductIconTheme()]);\n    }\n    installConfigurationListener() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(ThemeSettings.COLOR_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_DARK_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_LIGHT_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_HC_DARK_THEME)\n                || e.affectsConfiguration(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n                || e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME)\n                || e.affectsConfiguration(ThemeSettings.DETECT_HC)\n                || e.affectsConfiguration(ThemeSettings.SYSTEM_COLOR_THEME)) {\n                this.restoreColorTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.FILE_ICON_THEME)) {\n                this.restoreFileIconTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PRODUCT_ICON_THEME)) {\n                this.restoreProductIconTheme();\n            }\n            if (this.currentColorTheme) {\n                let hasColorChanges = false;\n                if (e.affectsConfiguration(ThemeSettings.COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomColors(this.settings.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomTokenColors(this.settings.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomSemanticTokenColors(this.settings.semanticTokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    this.updateDynamicCSSRules(this.currentColorTheme);\n                    this.onColorThemeChange.fire(this.currentColorTheme);\n                }\n            }\n        }));\n    }\n    installRegistryListeners() {\n        let prevColorId = undefined;\n        this._register(this.colorThemeRegistry.onDidChange(async (event) => {\n            updateColorThemeConfigurationSchemas(event.themes);\n            if (await this.restoreColorTheme()) {\n                if (this.currentColorTheme.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK && !isUndefined(prevColorId) && (await this.colorThemeRegistry.findThemeById(prevColorId))) {\n                    await this.setColorTheme(prevColorId, 'auto');\n                    prevColorId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                    await this.reloadCurrentColorTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentColorTheme.settingsId))) {\n                prevColorId = this.currentColorTheme.id;\n                const defaultTheme = this.colorThemeRegistry.findThemeBySettingsId(ThemeSettingDefaults.COLOR_THEME_DARK);\n                await this.setColorTheme(defaultTheme, 'auto');\n            }\n        }));\n        let prevFileIconId = undefined;\n        this._register(this._register(this.fileIconThemeRegistry.onDidChange(async (event) => {\n            updateFileIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreFileIconTheme()) {\n                if (this.currentFileIconTheme.id === DEFAULT_FILE_ICON_THEME_ID && !isUndefined(prevFileIconId) && this.fileIconThemeRegistry.findThemeById(prevFileIconId)) {\n                    await this.setFileIconTheme(prevFileIconId, 'auto');\n                    prevFileIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                    await this.reloadCurrentFileIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentFileIconTheme.settingsId))) {\n                prevFileIconId = this.currentFileIconTheme.id;\n                await this.setFileIconTheme(DEFAULT_FILE_ICON_THEME_ID, 'auto');\n            }\n        })));\n        let prevProductIconId = undefined;\n        this._register(this.productIconThemeRegistry.onDidChange(async (event) => {\n            updateProductIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreProductIconTheme()) {\n                if (this.currentProductIconTheme.id === DEFAULT_PRODUCT_ICON_THEME_ID && !isUndefined(prevProductIconId) && this.productIconThemeRegistry.findThemeById(prevProductIconId)) {\n                    await this.setProductIconTheme(prevProductIconId, 'auto');\n                    prevProductIconId = undefined;\n                }\n                else if (( event.added.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                    await this.reloadCurrentProductIconTheme();\n                }\n            }\n            else if (( event.removed.some(t => t.settingsId === this.currentProductIconTheme.settingsId))) {\n                prevProductIconId = this.currentProductIconTheme.id;\n                await this.setProductIconTheme(DEFAULT_PRODUCT_ICON_THEME_ID, 'auto');\n            }\n        }));\n        this._register(this.languageService.onDidChange(() => this.reloadCurrentFileIconTheme()));\n        return Promise.all([this.getColorThemes(), this.getFileIconThemes(), this.getProductIconThemes()]).then(([ct, fit, pit]) => {\n            updateColorThemeConfigurationSchemas(ct);\n            updateFileIconThemeConfigurationSchemas(fit);\n            updateProductIconThemeConfigurationSchemas(pit);\n        });\n    }\n    installPreferredSchemeListener() {\n        this._register(this.hostColorService.onDidChangeColorScheme(() => {\n            if (this.settings.isDetectingColorScheme()) {\n                this.restoreColorTheme();\n            }\n        }));\n    }\n    hasUpdatedDefaultThemes() {\n        return this.hasDefaultUpdated;\n    }\n    getColorTheme() {\n        return this.currentColorTheme;\n    }\n    async getColorThemes() {\n        return this.colorThemeRegistry.getThemes();\n    }\n    getPreferredColorScheme() {\n        return this.settings.getPreferredColorScheme();\n    }\n    async getMarketplaceColorThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.colorThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    get onDidColorThemeChange() {\n        return this.onColorThemeChange.event;\n    }\n    setColorTheme(themeIdOrTheme, settingsTarget) {\n        return this.colorThemeSequencer.queue(async () => {\n            return this.internalSetColorTheme(themeIdOrTheme, settingsTarget);\n        });\n    }\n    async internalSetColorTheme(themeIdOrTheme, settingsTarget) {\n        if (!themeIdOrTheme) {\n            return null;\n        }\n        const themeId = isString(themeIdOrTheme) ? validateThemeId(themeIdOrTheme) : themeIdOrTheme.id;\n        if (this.currentColorTheme.isLoaded && themeId === this.currentColorTheme.id) {\n            if (settingsTarget !== 'preview') {\n                this.currentColorTheme.toStorage(this.storageService);\n            }\n            return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n        }\n        let themeData = this.colorThemeRegistry.findThemeById(themeId);\n        if (!themeData) {\n            if (themeIdOrTheme instanceof ColorThemeData) {\n                themeData = themeIdOrTheme;\n            }\n            else {\n                return null;\n            }\n        }\n        try {\n            await themeData.ensureLoaded(this.extensionResourceLoaderService);\n            themeData.setCustomizations(this.settings);\n            return this.applyTheme(themeData, settingsTarget);\n        }\n        catch (error) {\n            throw ( new Error(localize(\n                3033,\n                \"Unable to load {0}: {1}\",\n                themeData.location?.toString(),\n                error.message\n            )));\n        }\n    }\n    reloadCurrentColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            try {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.currentColorTheme.settingsId) || this.currentColorTheme;\n                await theme.reload(this.extensionResourceLoaderService);\n                theme.setCustomizations(this.settings);\n                await this.applyTheme(theme, undefined, false);\n            }\n            catch (error) {\n                this.logService.info('Unable to reload {0}: {1}', this.currentColorTheme.location?.toString());\n            }\n        });\n    }\n    async restoreColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            const settingId = this.settings.colorTheme;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentColorTheme.settingsId) {\n                    await this.internalSetColorTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentColorTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService);\n                    theme.setCustomizations(this.settings);\n                    await this.applyTheme(theme, undefined, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    updateDynamicCSSRules(themeData) {\n        const cssRules = ( new Set());\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!( cssRules.has(rule))) {\n                    cssRules.add(rule);\n                }\n            }\n        };\n        ruleCollector.addRule(`.monaco-workbench { forced-color-adjust: none; }`);\n        themingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n        const colorVariables = [];\n        for (const item of getColorRegistry().getColors()) {\n            const color = themeData.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${( color.toString())};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-workbench { ${colorVariables.join('\\n')} }`);\n        _applyRules([...cssRules].join('\\n'), colorThemeRulesClassName);\n    }\n    applyTheme(newTheme, settingsTarget, silent = false) {\n        this.updateDynamicCSSRules(newTheme);\n        if (this.currentColorTheme.id) {\n            this.container.classList.remove(...this.currentColorTheme.classNames);\n        }\n        else {\n            this.container.classList.remove(VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME);\n        }\n        this.container.classList.add(...newTheme.classNames);\n        this.currentColorTheme.clearCaches();\n        this.currentColorTheme = newTheme;\n        if (!this.colorThemingParticipantChangeListener) {\n            this.colorThemingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n        }\n        this.colorThemeWatcher.update(newTheme);\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        if (newTheme.isLoaded && settingsTarget !== 'preview') {\n            newTheme.toStorage(this.storageService);\n        }\n        return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n    }\n    sendTelemetry(themeId, themeData, themeType) {\n        if (themeData) {\n            const key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                this.telemetryService.publicLog2('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    }\n    async getFileIconThemes() {\n        return this.fileIconThemeRegistry.getThemes();\n    }\n    getFileIconTheme() {\n        return this.currentFileIconTheme;\n    }\n    get onDidFileIconThemeChange() {\n        return this.onFileIconThemeChange.event;\n    }\n    async setFileIconTheme(iconThemeOrId, settingsTarget) {\n        return this.fileIconThemeSequencer.queue(async () => {\n            return this.internalSetFileIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetFileIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentFileIconTheme.id || !this.currentFileIconTheme.isLoaded) {\n            let newThemeData = this.fileIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof FileIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = FileIconThemeData.noIconTheme;\n            }\n            await newThemeData.ensureLoaded(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(newThemeData);\n        }\n        const themeData = this.currentFileIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setFileIconTheme(this.currentFileIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceFileIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.fileIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            await this.currentFileIconTheme.reload(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(this.currentFileIconTheme);\n        });\n    }\n    async restoreFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.fileIconTheme;\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentFileIconTheme.settingsId) {\n                    await this.internalSetFileIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentFileIconTheme) {\n                    await theme.ensureLoaded(this.fileIconThemeLoader);\n                    this.applyAndSetFileIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetFileIconTheme(iconThemeData, silent = false) {\n        this.currentFileIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, fileIconThemeRulesClassName);\n        if (iconThemeData.id) {\n            this.container.classList.add(fileIconsEnabledClass);\n        }\n        else {\n            this.container.classList.remove(fileIconsEnabledClass);\n        }\n        this.fileIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        if (!silent) {\n            this.onFileIconThemeChange.fire(this.currentFileIconTheme);\n        }\n    }\n    async getProductIconThemes() {\n        return this.productIconThemeRegistry.getThemes();\n    }\n    getProductIconTheme() {\n        return this.currentProductIconTheme;\n    }\n    get onDidProductIconThemeChange() {\n        return this.onProductIconThemeChange.event;\n    }\n    async setProductIconTheme(iconThemeOrId, settingsTarget) {\n        return this.productIconThemeSequencer.queue(async () => {\n            return this.internalSetProductIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetProductIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentProductIconTheme.id || !this.currentProductIconTheme.isLoaded) {\n            let newThemeData = this.productIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof ProductIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = ProductIconThemeData.defaultTheme;\n            }\n            await newThemeData.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(newThemeData);\n        }\n        const themeData = this.currentProductIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setProductIconTheme(this.currentProductIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceProductIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(joinPath(extensionLocation, 'package.json'));\n                return this.productIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            await this.currentProductIconTheme.reload(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(this.currentProductIconTheme);\n        });\n    }\n    async restoreProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.productIconTheme;\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentProductIconTheme.settingsId) {\n                    await this.internalSetProductIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentProductIconTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n                    this.applyAndSetProductIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetProductIconTheme(iconThemeData, silent = false) {\n        this.currentProductIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, productIconThemeRulesClassName);\n        this.productIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'productIcon');\n        }\n        if (!silent) {\n            this.onProductIconThemeChange.fire(this.currentProductIconTheme);\n        }\n    }\n};\nWorkbenchThemeService = ( __decorate([\n    ( __param(0, IExtensionService)),\n    ( __param(1, IStorageService)),\n    ( __param(2, IConfigurationService)),\n    ( __param(3, ITelemetryService)),\n    ( __param(4, IBrowserWorkbenchEnvironmentService)),\n    ( __param(5, IFileService)),\n    ( __param(6, IExtensionResourceLoaderService)),\n    ( __param(7, IWorkbenchLayoutService)),\n    ( __param(8, ILogService)),\n    ( __param(9, IHostColorSchemeService)),\n    ( __param(10, IUserDataInitializationService)),\n    ( __param(11, ILanguageService))\n], WorkbenchThemeService));\nclass ThemeFileWatcher {\n    constructor(fileService, environmentService, onUpdate) {\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.onUpdate = onUpdate;\n    }\n    update(theme) {\n        if (!isEqual(theme.location, this.watchedLocation)) {\n            this.dispose();\n            if (theme.location && (theme.watch || this.environmentService.isExtensionDevelopment)) {\n                this.watchedLocation = theme.location;\n                this.watcherDisposable = this.fileService.watch(theme.location);\n                this.fileService.onDidFilesChange(e => {\n                    if (this.watchedLocation && e.contains(this.watchedLocation, 0 )) {\n                        this.onUpdate();\n                    }\n                });\n            }\n        }\n    }\n    dispose() {\n        this.watcherDisposable = dispose(this.watcherDisposable);\n        this.fileChangeListener = dispose(this.fileChangeListener);\n        this.watchedLocation = undefined;\n    }\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    const themeStyles = mainWindow.document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        const elStyle = createStyleSheet();\n        elStyle.className = rulesClassName;\n        elStyle.textContent = styleSheetContent;\n    }\n    else {\n        themeStyles[0].textContent = styleSheetContent;\n    }\n}\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\nregisterProductIconThemeSchemas();\n\nexport { WorkbenchThemeService };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\n\nconst textMateScopes = [\n    'comment',\n    'comment.block',\n    'comment.block.documentation',\n    'comment.line',\n    'constant',\n    'constant.character',\n    'constant.character.escape',\n    'constant.numeric',\n    'constant.numeric.integer',\n    'constant.numeric.float',\n    'constant.numeric.hex',\n    'constant.numeric.octal',\n    'constant.other',\n    'constant.regexp',\n    'constant.rgb-value',\n    'emphasis',\n    'entity',\n    'entity.name',\n    'entity.name.class',\n    'entity.name.function',\n    'entity.name.method',\n    'entity.name.section',\n    'entity.name.selector',\n    'entity.name.tag',\n    'entity.name.type',\n    'entity.other',\n    'entity.other.attribute-name',\n    'entity.other.inherited-class',\n    'invalid',\n    'invalid.deprecated',\n    'invalid.illegal',\n    'keyword',\n    'keyword.control',\n    'keyword.operator',\n    'keyword.operator.new',\n    'keyword.operator.assignment',\n    'keyword.operator.arithmetic',\n    'keyword.operator.logical',\n    'keyword.other',\n    'markup',\n    'markup.bold',\n    'markup.changed',\n    'markup.deleted',\n    'markup.heading',\n    'markup.inline.raw',\n    'markup.inserted',\n    'markup.italic',\n    'markup.list',\n    'markup.list.numbered',\n    'markup.list.unnumbered',\n    'markup.other',\n    'markup.quote',\n    'markup.raw',\n    'markup.underline',\n    'markup.underline.link',\n    'meta',\n    'meta.block',\n    'meta.cast',\n    'meta.class',\n    'meta.function',\n    'meta.function-call',\n    'meta.preprocessor',\n    'meta.return-type',\n    'meta.selector',\n    'meta.tag',\n    'meta.type.annotation',\n    'meta.type',\n    'punctuation.definition.string.begin',\n    'punctuation.definition.string.end',\n    'punctuation.separator',\n    'punctuation.separator.continuation',\n    'punctuation.terminator',\n    'storage',\n    'storage.modifier',\n    'storage.type',\n    'string',\n    'string.interpolated',\n    'string.other',\n    'string.quoted',\n    'string.quoted.double',\n    'string.quoted.other',\n    'string.quoted.single',\n    'string.quoted.triple',\n    'string.regexp',\n    'string.unquoted',\n    'strong',\n    'support',\n    'support.class',\n    'support.constant',\n    'support.function',\n    'support.other',\n    'support.type',\n    'support.type.property-name',\n    'support.variable',\n    'variable',\n    'variable.language',\n    'variable.name',\n    'variable.other',\n    'variable.other.readwrite',\n    'variable.parameter'\n];\nconst textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\nconst textmateColorGroupSchemaId = `${textmateColorsSchemaId}#/definitions/colorGroup`;\nconst textmateColorSchema = {\n    type: 'array',\n    definitions: {\n        colorGroup: {\n            default: '#FF0000',\n            anyOf: [\n                {\n                    type: 'string',\n                    format: 'color-hex'\n                },\n                {\n                    $ref: '#/definitions/settings'\n                }\n            ]\n        },\n        settings: {\n            type: 'object',\n            description: ( localize(6977, 'Colors and styles for the token.')),\n            properties: {\n                foreground: {\n                    type: 'string',\n                    description: ( localize(6978, 'Foreground color for the token.')),\n                    format: 'color-hex',\n                    default: '#ff0000'\n                },\n                background: {\n                    type: 'string',\n                    deprecationMessage: ( localize(6979, 'Token background colors are currently not supported.'))\n                },\n                fontStyle: {\n                    type: 'string',\n                    description: ( localize(\n                        6980,\n                        'Font style of the rule: \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination. The empty string unsets inherited settings.'\n                    )),\n                    pattern: '^(\\\\s*\\\\b(italic|bold|underline|strikethrough))*\\\\s*$',\n                    patternErrorMessage: ( localize(\n                        6981,\n                        'Font style must be \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination or the empty string.'\n                    )),\n                    defaultSnippets: [\n                        { label: ( localize(6982, 'None (clear inherited style)')), bodyText: '\"\"' },\n                        { body: 'italic' },\n                        { body: 'bold' },\n                        { body: 'underline' },\n                        { body: 'strikethrough' },\n                        { body: 'italic bold' },\n                        { body: 'italic underline' },\n                        { body: 'italic strikethrough' },\n                        { body: 'bold underline' },\n                        { body: 'bold strikethrough' },\n                        { body: 'underline strikethrough' },\n                        { body: 'italic bold underline' },\n                        { body: 'italic bold strikethrough' },\n                        { body: 'italic underline strikethrough' },\n                        { body: 'bold underline strikethrough' },\n                        { body: 'italic bold underline strikethrough' }\n                    ]\n                }\n            },\n            additionalProperties: false,\n            defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n        }\n    },\n    items: {\n        type: 'object',\n        defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n        properties: {\n            name: {\n                type: 'string',\n                description: ( localize(6983, 'Description of the rule.'))\n            },\n            scope: {\n                description: ( localize(6984, 'Scope selector against which this rule matches.')),\n                anyOf: [\n                    {\n                        enum: textMateScopes\n                    },\n                    {\n                        type: 'string'\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            enum: textMateScopes\n                        }\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                ]\n            },\n            settings: {\n                $ref: '#/definitions/settings'\n            }\n        },\n        required: [\n            'settings'\n        ],\n        additionalProperties: false\n    }\n};\nconst colorThemeSchemaId = 'vscode://schemas/color-theme';\nconst colorThemeSchema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        colors: {\n            description: ( localize(6985, 'Colors in the workbench')),\n            $ref: workbenchColorsSchemaId,\n            additionalProperties: false\n        },\n        tokenColors: {\n            anyOf: [{\n                    type: 'string',\n                    description: ( localize(6986, 'Path to a tmTheme file (relative to the current file).'))\n                },\n                {\n                    description: ( localize(6987, 'Colors for syntax highlighting')),\n                    $ref: textmateColorsSchemaId\n                }\n            ]\n        },\n        semanticHighlighting: {\n            type: 'boolean',\n            description: ( localize(6988, 'Whether semantic highlighting should be enabled for this theme.'))\n        },\n        semanticTokenColors: {\n            type: 'object',\n            description: ( localize(6989, 'Colors for semantic tokens')),\n            $ref: tokenStylingSchemaId\n        }\n    }\n};\nfunction registerColorThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(colorThemeSchemaId, colorThemeSchema);\n    schemaRegistry.registerSchema(textmateColorsSchemaId, textmateColorSchema);\n}\n\nexport { colorThemeSchemaId, registerColorThemeSchemas, textmateColorGroupSchemaId, textmateColorsSchemaId };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontSizeRegex } from './productIconThemeSchema.js';\n\nconst schemaId = 'vscode://schemas/icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    definitions: {\n        folderExpanded: {\n            type: 'string',\n            description: ( localize(\n                6937,\n                'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'\n            ))\n        },\n        folder: {\n            type: 'string',\n            description: ( localize(\n                6938,\n                'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'\n            ))\n        },\n        file: {\n            type: 'string',\n            description: ( localize(\n                6939,\n                'The default file icon, shown for all files that don\\'t match any extension, filename or language id.'\n            ))\n        },\n        rootFolder: {\n            type: 'string',\n            description: ( localize(\n                6940,\n                'The folder icon for collapsed root folders, and if rootFolderExpanded is not set, also for expanded root folders.'\n            ))\n        },\n        rootFolderExpanded: {\n            type: 'string',\n            description: ( localize(\n                6941,\n                'The folder icon for expanded root folders. The expanded root folder icon is optional. If not set, the icon defined for root folder will be shown.'\n            ))\n        },\n        rootFolderNames: {\n            type: 'object',\n            description: ( localize(\n                6942,\n                'Associates root folder names to icons. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6943, 'The ID of the icon definition for the association.'))\n            }\n        },\n        rootFolderNamesExpanded: {\n            type: 'object',\n            description: ( localize(\n                6944,\n                'Associates root folder names to icons for expanded root folders. The object key is the root folder name. No patterns or wildcards are allowed. Root folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6945, 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNames: {\n            type: 'object',\n            description: ( localize(\n                6946,\n                'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6943, 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNamesExpanded: {\n            type: 'object',\n            description: ( localize(\n                6947,\n                'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6948, 'The ID of the icon definition for the association.'))\n            }\n        },\n        fileExtensions: {\n            type: 'object',\n            description: ( localize(\n                6949,\n                'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6950, 'The ID of the icon definition for the association.'))\n            }\n        },\n        fileNames: {\n            type: 'object',\n            description: ( localize(\n                6951,\n                'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6952, 'The ID of the icon definition for the association.'))\n            }\n        },\n        languageIds: {\n            type: 'object',\n            description: ( localize(\n                6953,\n                'Associates languages to icons. The object key is the language id as defined in the language contribution point.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( localize(6954, 'The ID of the icon definition for the association.'))\n            }\n        },\n        associations: {\n            type: 'object',\n            properties: {\n                folderExpanded: {\n                    $ref: '#/definitions/folderExpanded'\n                },\n                folder: {\n                    $ref: '#/definitions/folder'\n                },\n                file: {\n                    $ref: '#/definitions/file'\n                },\n                folderNames: {\n                    $ref: '#/definitions/folderNames'\n                },\n                folderNamesExpanded: {\n                    $ref: '#/definitions/folderNamesExpanded'\n                },\n                rootFolder: {\n                    $ref: '#/definitions/rootFolder'\n                },\n                rootFolderExpanded: {\n                    $ref: '#/definitions/rootFolderExpanded'\n                },\n                rootFolderNames: {\n                    $ref: '#/definitions/rootFolderNames'\n                },\n                rootFolderNamesExpanded: {\n                    $ref: '#/definitions/rootFolderNamesExpanded'\n                },\n                fileExtensions: {\n                    $ref: '#/definitions/fileExtensions'\n                },\n                fileNames: {\n                    $ref: '#/definitions/fileNames'\n                },\n                languageIds: {\n                    $ref: '#/definitions/languageIds'\n                }\n            }\n        }\n    },\n    properties: {\n        fonts: {\n            type: 'array',\n            description: ( localize(6955, 'Fonts that are used in the icon definitions.')),\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localize(6956, 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localize(6957, 'The ID must only contain letter, numbers, underscore and minus.'))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localize(6958, 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localize(6959, 'The font path, relative to the current file icon theme file.')),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localize(6960, 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localize(\n                            6961,\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        pattern: fontWeightRegex\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localize(\n                            6962,\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        pattern: fontStyleRegex\n                    },\n                    size: {\n                        type: 'string',\n                        description: ( localize(\n                            6963,\n                            'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'\n                        )),\n                        pattern: fontSizeRegex\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            type: 'object',\n            description: ( localize(\n                6964,\n                'Description of all icons that can be used when associating files to icons.'\n            )),\n            additionalProperties: {\n                type: 'object',\n                description: ( localize(6965, 'An icon definition. The object key is the ID of the definition.')),\n                properties: {\n                    iconPath: {\n                        type: 'string',\n                        description: ( localize(\n                            6966,\n                            'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'\n                        ))\n                    },\n                    fontCharacter: {\n                        type: 'string',\n                        description: ( localize(6967, 'When using a glyph font: The character in the font to use.'))\n                    },\n                    fontColor: {\n                        type: 'string',\n                        format: 'color-hex',\n                        description: ( localize(6968, 'When using a glyph font: The color to use.'))\n                    },\n                    fontSize: {\n                        type: 'string',\n                        description: ( localize(\n                            6969,\n                            'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'\n                        )),\n                        pattern: fontSizeRegex\n                    },\n                    fontId: {\n                        type: 'string',\n                        description: ( localize(\n                            6970,\n                            'When using a font: The id of the font. If not set, defaults to the first font definition.'\n                        ))\n                    }\n                }\n            }\n        },\n        folderExpanded: {\n            $ref: '#/definitions/folderExpanded'\n        },\n        folder: {\n            $ref: '#/definitions/folder'\n        },\n        file: {\n            $ref: '#/definitions/file'\n        },\n        folderNames: {\n            $ref: '#/definitions/folderNames'\n        },\n        folderNamesExpanded: {\n            $ref: '#/definitions/folderNamesExpanded'\n        },\n        rootFolder: {\n            $ref: '#/definitions/rootFolder'\n        },\n        rootFolderExpanded: {\n            $ref: '#/definitions/rootFolderExpanded'\n        },\n        rootFolderNames: {\n            $ref: '#/definitions/rootFolderNames'\n        },\n        rootFolderNamesExpanded: {\n            $ref: '#/definitions/rootFolderNamesExpanded'\n        },\n        fileExtensions: {\n            $ref: '#/definitions/fileExtensions'\n        },\n        fileNames: {\n            $ref: '#/definitions/fileNames'\n        },\n        languageIds: {\n            $ref: '#/definitions/languageIds'\n        },\n        light: {\n            $ref: '#/definitions/associations',\n            description: ( localize(6971, 'Optional associations for file icons in light color themes.'))\n        },\n        highContrast: {\n            $ref: '#/definitions/associations',\n            description: ( localize(\n                6972,\n                'Optional associations for file icons in high contrast color themes.'\n            ))\n        },\n        hidesExplorerArrows: {\n            type: 'boolean',\n            description: ( localize(\n                6973,\n                'Configures whether the file explorer\\'s arrows should be hidden when this theme is active.'\n            ))\n        },\n        showLanguageModeIcons: {\n            type: 'boolean',\n            description: ( localize(\n                6974,\n                'Configures whether the default language icons should be used if the theme does not define an icon for a language.'\n            ))\n        }\n    }\n};\nfunction registerFileIconThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { registerFileIconThemeSchemas };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { iconsSchemaId } from 'vscode/vscode/vs/platform/theme/common/iconRegistry';\n\nconst fontIdRegex = '^([\\\\w_-]+)$';\nconst fontStyleRegex = '^(normal|italic|(oblique[ \\\\w\\\\s-]+))$';\nconst fontWeightRegex = '^(normal|bold|lighter|bolder|(\\\\d{0-1000}))$';\nconst fontSizeRegex = '^([\\\\w .%_-]+)$';\nconst fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';\nconst schemaId = 'vscode://schemas/product-icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        fonts: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( localize(7055, 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( localize(7056, 'The ID must only contain letters, numbers, underscore and minus.'))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( localize(7057, 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( localize(7058, 'The font path, relative to the current product icon theme file.')),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( localize(7059, 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( localize(\n                            7060,\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },\n                            { type: 'string', pattern: fontWeightRegex }\n                        ]\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( localize(\n                            7061,\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'italic', 'oblique'] },\n                            { type: 'string', pattern: fontStyleRegex }\n                        ]\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            description: ( localize(7062, 'Association of icon name to a font character.')),\n            $ref: iconsSchemaId\n        }\n    }\n};\nfunction registerProductIconThemeSchemas() {\n    const schemaRegistry = ( (Registry.as(Extensions.JSONContribution)));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\n\nexport { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { isUndefined } from 'vscode/vscode/vs/base/common/types';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { Extensions } from 'vscode/vscode/vs/platform/configuration/common/configurationRegistry';\nimport { textmateColorGroupSchemaId, textmateColorsSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from 'vscode/vscode/vs/platform/theme/common/colorUtils';\nimport 'vscode/vscode/vs/platform/theme/common/colors/baseColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/chartsColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/editorColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/inputColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/listColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/menuColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/minimapColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/miscColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/quickpickColors';\nimport 'vscode/vscode/vs/platform/theme/common/colors/searchColors';\nimport { tokenStylingSchemaId } from 'vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry';\nimport { ThemeSettings, ThemeSettingDefaults } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { ColorScheme } from 'vscode/vscode/vs/platform/theme/common/theme';\n\nconst configurationRegistry = ( (Registry.as(Extensions.Configuration)));\nconst colorThemeSettingEnum = [];\nconst colorThemeSettingEnumItemLabels = [];\nconst colorThemeSettingEnumDescriptions = [];\nfunction formatSettingAsLink(str) {\n    return `\\`#${str}#\\``;\n}\nconst COLOR_THEME_CONFIGURATION_SETTINGS_TAG = 'colorThemeConfiguration';\nconst colorThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localize(\n        7011,\n        \"Specifies the color theme used in the workbench when {0} is not enabled.\",\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localize(7012, \"Theme is unknown or not installed.\")),\n};\nconst preferredDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localize(\n        7013,\n        'Specifies the color theme when system color mode is dark and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localize(7012, \"Theme is unknown or not installed.\")),\n};\nconst preferredLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localize(\n        7014,\n        'Specifies the color theme when system color mode is light and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localize(7012, \"Theme is unknown or not installed.\")),\n};\nconst preferredHCDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localize(\n        7015,\n        'Specifies the color theme when in high contrast dark mode and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localize(7012, \"Theme is unknown or not installed.\")),\n};\nconst preferredHCLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( localize(\n        7016,\n        'Specifies the color theme when in high contrast light mode and {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( localize(7012, \"Theme is unknown or not installed.\")),\n};\nconst detectColorSchemeSettingSchema = {\n    type: 'boolean',\n    markdownDescription: ( localize(\n        7017,\n        'If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, {0} is used, else {1}.',\n        formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)\n    )),\n    default: false,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\nconst colorCustomizationsSchema = {\n    type: 'object',\n    description: ( localize(7018, \"Overrides colors from the currently selected color theme.\")),\n    allOf: [{ $ref: workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nconst fileIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.FILE_ICON_THEME,\n    description: ( localize(\n        7019,\n        \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"\n    )),\n    enum: [null],\n    enumItemLabels: [( localize(7020, 'None'))],\n    enumDescriptions: [( localize(7021, 'No file icons'))],\n    errorMessage: ( localize(7022, \"File icon theme is unknown or not installed.\"))\n};\nconst productIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n    description: ( localize(7023, \"Specifies the product icon theme used.\")),\n    enum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n    enumItemLabels: [( localize(7024, 'Default'))],\n    enumDescriptions: [( localize(7025, 'Default'))],\n    errorMessage: ( localize(7026, \"Product icon theme is unknown or not installed.\"))\n};\nconst detectHCSchemeSettingSchema = {\n    type: 'boolean',\n    default: true,\n    markdownDescription: ( localize(\n        7027,\n        \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.\",\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n    )),\n    scope: 1 ,\n    tags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\nconst themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n        [ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n        [ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n        [ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n        [ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nconst themeSettingsWindowConfiguration = {\n    id: 'window',\n    order: 8.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n        [ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description,\n        $ref: textmateColorGroupSchemaId\n    };\n}\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\nconst tokenColorSchema = {\n    type: 'object',\n    properties: {\n        comments: tokenGroupSettings(( localize(7028, \"Sets the colors and styles for comments\"))),\n        strings: tokenGroupSettings(( localize(7029, \"Sets the colors and styles for strings literals.\"))),\n        keywords: tokenGroupSettings(( localize(7030, \"Sets the colors and styles for keywords.\"))),\n        numbers: tokenGroupSettings(( localize(7031, \"Sets the colors and styles for number literals.\"))),\n        types: tokenGroupSettings(( localize(7032, \"Sets the colors and styles for type declarations and references.\"))),\n        functions: tokenGroupSettings(( localize(\n            7033,\n            \"Sets the colors and styles for functions declarations and references.\"\n        ))),\n        variables: tokenGroupSettings(( localize(\n            7034,\n            \"Sets the colors and styles for variables declarations and references.\"\n        ))),\n        textMateRules: {\n            description: ( localize(7035, 'Sets colors and styles using textmate theming rules (advanced).')),\n            $ref: textmateColorsSchemaId\n        },\n        semanticHighlighting: {\n            description: ( localize(7036, 'Whether semantic highlighting should be enabled for this theme.')),\n            deprecationMessage: ( localize(\n                7037,\n                'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'\n            )),\n            markdownDeprecationMessage: ( localize(\n                7038,\n                'Use `enabled` in {0} setting instead.',\n                formatSettingAsLink('editor.semanticTokenColorCustomizations')\n            )),\n            type: 'boolean'\n        }\n    },\n    additionalProperties: false\n};\nconst tokenColorCustomizationSchema = {\n    description: ( localize(\n        7039,\n        \"Overrides editor syntax colors and font style from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst semanticTokenColorSchema = {\n    type: 'object',\n    properties: {\n        enabled: {\n            type: 'boolean',\n            description: ( localize(\n                7040,\n                'Whether semantic highlighting is enabled or disabled for this theme'\n            )),\n            suggestSortText: '0_enabled'\n        },\n        rules: {\n            $ref: tokenStylingSchemaId,\n            description: ( localize(7041, 'Semantic token styling rules for this theme.')),\n            suggestSortText: '0_rules'\n        }\n    },\n    additionalProperties: false\n};\nconst semanticTokenColorCustomizationSchema = {\n    description: ( localize(\n        7042,\n        \"Overrides editor semantic token color and styles from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: {\n        [ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n        [ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nfunction updateColorThemeConfigurationSchemas(themes) {\n    themes.sort((a, b) => a.label.localeCompare(b.label));\n    colorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...( (themes.map(t => t.settingsId))));\n    colorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...( (themes.map(t => t.description || ''))));\n    colorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...( (themes.map(t => t.label || ''))));\n    const themeSpecificWorkbenchColors = { properties: {} };\n    const themeSpecificTokenColors = { properties: {} };\n    const themeSpecificSemanticTokenColors = { properties: {} };\n    const workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n    const tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n    for (const t of themes) {\n        const themeId = `[${t.settingsId}]`;\n        themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n        themeSpecificTokenColors.properties[themeId] = tokenColors;\n        themeSpecificSemanticTokenColors.properties[themeId] = semanticTokenColorSchema;\n    }\n    themeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n    themeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n    themeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n    colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n    tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n    semanticTokenColorCustomizationSchema.allOf[1] = themeSpecificSemanticTokenColors;\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\nfunction updateFileIconThemeConfigurationSchemas(themes) {\n    fileIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.settingsId))));\n    fileIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.label))));\n    fileIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.description || ''))));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nfunction updateProductIconThemeConfigurationSchemas(themes) {\n    productIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.settingsId))));\n    productIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.label))));\n    productIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( (themes.map(t => t.description || ''))));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nconst colorSchemeToPreferred = {\n    [ColorScheme.DARK]: ThemeSettings.PREFERRED_DARK_THEME,\n    [ColorScheme.LIGHT]: ThemeSettings.PREFERRED_LIGHT_THEME,\n    [ColorScheme.HIGH_CONTRAST_DARK]: ThemeSettings.PREFERRED_HC_DARK_THEME,\n    [ColorScheme.HIGH_CONTRAST_LIGHT]: ThemeSettings.PREFERRED_HC_LIGHT_THEME\n};\nclass ThemeConfiguration {\n    constructor(configurationService, hostColorService) {\n        this.configurationService = configurationService;\n        this.hostColorService = hostColorService;\n    }\n    get colorTheme() {\n        return this.configurationService.getValue(this.getColorThemeSettingId());\n    }\n    get fileIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.FILE_ICON_THEME);\n    }\n    get productIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.PRODUCT_ICON_THEME);\n    }\n    get colorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n    }\n    get tokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n    }\n    get semanticTokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n    }\n    getPreferredColorScheme() {\n        if (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n            return this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n        }\n        if (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            return this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n        }\n        return undefined;\n    }\n    isDetectingColorScheme() {\n        return this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME);\n    }\n    getColorThemeSettingId() {\n        const preferredScheme = this.getPreferredColorScheme();\n        return preferredScheme ? colorSchemeToPreferred[preferredScheme] : ThemeSettings.COLOR_THEME;\n    }\n    async setColorTheme(theme, settingsTarget) {\n        await this.writeConfiguration(this.getColorThemeSettingId(), theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setFileIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setProductIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    isDefaultColorTheme() {\n        const settings = this.configurationService.inspect(this.getColorThemeSettingId());\n        return settings && settings.default?.value === settings.value;\n    }\n    findAutoConfigurationTarget(key) {\n        const settings = this.configurationService.inspect(key);\n        if (!isUndefined(settings.workspaceFolderValue)) {\n            return 6 ;\n        }\n        else if (!isUndefined(settings.workspaceValue)) {\n            return 5 ;\n        }\n        else if (!isUndefined(settings.userRemote)) {\n            return 4 ;\n        }\n        return 2 ;\n    }\n    async writeConfiguration(key, value, settingsTarget) {\n        if (settingsTarget === undefined || settingsTarget === 'preview') {\n            return;\n        }\n        const settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            return this.configurationService.updateValue(key, value);\n        }\n        if (settingsTarget === 2 ) {\n            if (value === settings.userValue) {\n                return Promise.resolve(undefined);\n            }\n            else if (value === settings.defaultValue) {\n                if (isUndefined(settings.userValue)) {\n                    return Promise.resolve(undefined);\n                }\n                value = undefined;\n            }\n        }\n        else if (settingsTarget === 5  || settingsTarget === 6  || settingsTarget === 4 ) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined);\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    }\n}\n\nexport { COLOR_THEME_CONFIGURATION_SETTINGS_TAG, ThemeConfiguration, formatSettingAsLink, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas };\n","import { localize } from 'vscode/vscode/vs/nls';\nimport { isString } from 'vscode/vscode/vs/base/common/types';\nimport { joinPath, isEqualOrParent } from 'vscode/vscode/vs/base/common/resources';\nimport { ExtensionsRegistry } from 'vscode/vscode/vs/workbench/services/extensions/common/extensionsRegistry';\nimport { VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME, ExtensionData } from 'vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService';\nimport { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { Extensions } from 'vscode/vscode/vs/workbench/services/extensionManagement/common/extensionFeatures';\nimport { MarkdownString } from 'vscode/vscode/vs/base/common/htmlContent';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\n\nfunction registerColorThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'themes',\n        jsonSchema: {\n            description: ( localize(6990, 'Contributes textmate color themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n                properties: {\n                    id: {\n                        description: ( localize(6991, 'Id of the color theme as used in the user settings.')),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localize(6992, 'Label of the color theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    uiTheme: {\n                        description: ( localize(\n                            6993,\n                            'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme, \\'hc-light\\' is the light high contrast theme.'\n                        )),\n                        enum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME]\n                    },\n                    path: {\n                        description: ( localize(\n                            6994,\n                            'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./colorthemes/awesome-color-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'uiTheme']\n            }\n        }\n    });\n}\nfunction registerFileIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'iconThemes',\n        jsonSchema: {\n            description: ( localize(6995, 'Contributes file icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localize(6996, 'Id of the file icon theme as used in the user settings.')),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localize(6997, 'Label of the file icon theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localize(\n                            6998,\n                            'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \\'./fileicons/awesome-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nfunction registerProductIconThemeExtensionPoint() {\n    return ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'productIconThemes',\n        jsonSchema: {\n            description: ( localize(6999, 'Contributes product icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './producticons/${3:id}-product-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( localize(7000, 'Id of the product icon theme as used in the user settings.')),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( localize(7001, 'Label of the product icon theme as shown in the UI.')),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( localize(\n                            7002,\n                            'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \\'./producticons/awesome-product-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    });\n}\nclass ThemeDataRenderer extends Disposable {\n    constructor() {\n        super(...arguments);\n        this.type = 'markdown';\n    }\n    shouldRender(manifest) {\n        return !!manifest.contributes?.themes || !!manifest.contributes?.iconThemes || !!manifest.contributes?.productIconThemes;\n    }\n    render(manifest) {\n        const markdown = ( (new MarkdownString()));\n        if (manifest.contributes?.themes) {\n            markdown.appendMarkdown(`### ${( localize(7003, \"Color Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.themes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.iconThemes) {\n            markdown.appendMarkdown(`### ${( localize(7004, \"File Icon Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.iconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        if (manifest.contributes?.productIconThemes) {\n            markdown.appendMarkdown(`### ${( localize(7005, \"Product Icon Themes\"))}\\n\\n`);\n            for (const theme of manifest.contributes.productIconThemes) {\n                markdown.appendMarkdown(`- ${theme.label}\\n`);\n            }\n        }\n        return {\n            data: markdown,\n            dispose: () => { }\n        };\n    }\n}\n( (Registry.as(Extensions.ExtensionFeaturesRegistry))).registerExtensionFeature({\n    id: 'themes',\n    label: ( localize(7006, \"Themes\")),\n    access: {\n        canToggle: false\n    },\n    renderer: ( (new SyncDescriptor(ThemeDataRenderer))),\n});\nclass ThemeRegistry {\n    constructor(themesExtPoint, create, idRequired = false, builtInTheme = undefined) {\n        this.themesExtPoint = themesExtPoint;\n        this.create = create;\n        this.idRequired = idRequired;\n        this.builtInTheme = builtInTheme;\n        this.onDidChangeEmitter = ( (new Emitter()));\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.extensionThemes = [];\n        this.initialize();\n    }\n    dispose() {\n        this.themesExtPoint.setHandler(() => { });\n    }\n    initialize() {\n        this.themesExtPoint.setHandler((extensions, delta) => {\n            const previousIds = {};\n            const added = [];\n            for (const theme of this.extensionThemes) {\n                previousIds[theme.id] = theme;\n            }\n            this.extensionThemes.length = 0;\n            for (const ext of extensions) {\n                const extensionData = ExtensionData.fromName(ext.description.publisher, ext.description.name, ext.description.isBuiltin);\n                this.onThemes(extensionData, ext.description.extensionLocation, ext.value, this.extensionThemes, ext.collector);\n            }\n            for (const theme of this.extensionThemes) {\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n                else {\n                    delete previousIds[theme.id];\n                }\n            }\n            const removed = ( (Object.values(previousIds)));\n            this.onDidChangeEmitter.fire({ themes: this.extensionThemes, added, removed });\n        });\n    }\n    onThemes(extensionData, extensionLocation, themeContributions, resultingThemes = [], log) {\n        if (!Array.isArray(themeContributions)) {\n            log?.error(( localize(7007, \"Extension point `{0}` must be an array.\", this.themesExtPoint.name)));\n            return resultingThemes;\n        }\n        themeContributions.forEach(theme => {\n            if (!theme.path || !isString(theme.path)) {\n                log?.error(( localize(\n                    7008,\n                    \"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.path)\n                )));\n                return;\n            }\n            if (this.idRequired && (!theme.id || !isString(theme.id))) {\n                log?.error(( localize(\n                    7009,\n                    \"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.id)\n                )));\n                return;\n            }\n            const themeLocation = joinPath(extensionLocation, theme.path);\n            if (!isEqualOrParent(themeLocation, extensionLocation)) {\n                log?.warn(( localize(\n                    7010,\n                    \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n                    this.themesExtPoint.name,\n                    themeLocation.path,\n                    extensionLocation.path\n                )));\n            }\n            const themeData = this.create(theme, themeLocation, extensionData);\n            resultingThemes.push(themeData);\n        });\n        return resultingThemes;\n    }\n    findThemeById(themeId) {\n        if (this.builtInTheme && this.builtInTheme.id === themeId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        for (const t of allThemes) {\n            if (t.id === themeId) {\n                return t;\n            }\n        }\n        return undefined;\n    }\n    findThemeBySettingsId(settingsId, defaultSettingsId) {\n        if (this.builtInTheme && this.builtInTheme.settingsId === settingsId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        let defaultTheme = undefined;\n        for (const t of allThemes) {\n            if (t.settingsId === settingsId) {\n                return t;\n            }\n            if (t.settingsId === defaultSettingsId) {\n                defaultTheme = t;\n            }\n        }\n        return defaultTheme;\n    }\n    findThemeByExtensionLocation(extLocation) {\n        if (extLocation) {\n            return this.getThemes().filter(t => t.location && isEqualOrParent(t.location, extLocation));\n        }\n        return [];\n    }\n    getThemes() {\n        return this.extensionThemes;\n    }\n    getMarketplaceThemes(manifest, extensionLocation, extensionData) {\n        const themes = manifest?.contributes?.[this.themesExtPoint.name];\n        if (Array.isArray(themes)) {\n            return this.onThemes(extensionData, extensionLocation, themes);\n        }\n        return [];\n    }\n}\n\nexport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint };\n","import { basename } from '../../../../base/common/path.js';\nimport { parse, getNodeType } from '../../../../base/common/json.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_WILDCARD, themeScopeRegex, ExtensionData, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME } from './workbenchThemeService.js';\nimport { convertSettings } from './themeCompatibility.js';\nimport { localize } from '../../../../nls.js';\nimport { isObject, isString, isBoolean } from '../../../../base/common/types.js';\nimport { extname, joinPath, dirname } from '../../../../base/common/resources.js';\nimport { DEFAULT_COLOR_CONFIG_VALUE, Extensions } from '../../../../platform/theme/common/colorUtils.js';\nimport '../../../../platform/theme/common/colors/baseColors.js';\nimport '../../../../platform/theme/common/colors/chartsColors.js';\nimport { editorForeground, editorBackground } from '../../../../platform/theme/common/colors/editorColors.js';\nimport '../../../../platform/theme/common/colors/inputColors.js';\nimport '../../../../platform/theme/common/colors/listColors.js';\nimport '../../../../platform/theme/common/colors/menuColors.js';\nimport '../../../../platform/theme/common/colors/minimapColors.js';\nimport '../../../../platform/theme/common/colors/miscColors.js';\nimport '../../../../platform/theme/common/colors/quickpickColors.js';\nimport '../../../../platform/theme/common/colors/searchColors.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { parse as parse$1 } from './plistParser.js';\nimport { TokenStyle, parseClassifierString, SemanticTokenRule, getTokenClassificationRegistry } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { createMatchers } from './textMateScopeMatcher.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { toStandardTokenType } from '../../../../editor/common/languages/supports/tokenization.js';\nimport { findMatchingThemeRule } from '../../textMate/common/TMHelper.js';\nconst colorRegistry = ( (Registry.as(Extensions.ColorContribution)));\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\nconst tokenGroupToScopesMap = {\n    comments: ['comment', 'punctuation.definition.comment'],\n    strings: ['string', 'meta.embedded.assembly'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nclass ColorThemeData {\n    static { this.STORAGE_KEY = 'colorThemeData'; }\n    constructor(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.semanticTokenRules = [];\n        this.customSemanticTokenRules = [];\n        this.textMateThemingRules = undefined;\n        this.tokenColorIndex = undefined;\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    get semanticHighlighting() {\n        if (this.customSemanticHighlighting !== undefined) {\n            return this.customSemanticHighlighting;\n        }\n        if (this.customSemanticHighlightingDeprecated !== undefined) {\n            return this.customSemanticHighlightingDeprecated;\n        }\n        return !!this.themeSemanticHighlighting;\n    }\n    get tokenColors() {\n        if (!this.textMateThemingRules) {\n            const result = [];\n            const foreground = this.getColor(editorForeground) || this.getDefault(editorForeground);\n            const background = this.getColor(editorBackground) || this.getDefault(editorBackground);\n            result.push({\n                settings: {\n                    foreground: normalizeColor(foreground),\n                    background: normalizeColor(background)\n                }\n            });\n            let hasDefaultTokens = false;\n            function addRule(rule) {\n                if (rule.scope && rule.settings) {\n                    if (rule.scope === 'token.info-token') {\n                        hasDefaultTokens = true;\n                    }\n                    result.push({ scope: rule.scope, settings: { foreground: normalizeColor(rule.settings.foreground), background: normalizeColor(rule.settings.background), fontStyle: rule.settings.fontStyle } });\n                }\n            }\n            this.themeTokenColors.forEach(addRule);\n            this.customTokenColors.forEach(addRule);\n            if (!hasDefaultTokens) {\n                defaultThemeColors[this.type].forEach(addRule);\n            }\n            this.textMateThemingRules = result;\n        }\n        return this.textMateThemingRules;\n    }\n    getColor(colorId, useDefault) {\n        const customColor = this.customColorMap[colorId];\n        if (customColor instanceof Color) {\n            return customColor;\n        }\n        if (customColor === undefined) {\n            const color = this.colorMap[colorId];\n            if (color !== undefined) {\n                return color;\n            }\n        }\n        if (useDefault !== false) {\n            return this.getDefault(colorId);\n        }\n        return undefined;\n    }\n    getTokenStyle(type, modifiers, language, useDefault = true, definitions = {}) {\n        const result = {\n            foreground: undefined,\n            bold: undefined,\n            underline: undefined,\n            strikethrough: undefined,\n            italic: undefined\n        };\n        const score = {\n            foreground: -1,\n            bold: -1,\n            underline: -1,\n            strikethrough: -1,\n            italic: -1\n        };\n        function _processStyle(matchScore, style, definition) {\n            if (style.foreground && score.foreground <= matchScore) {\n                score.foreground = matchScore;\n                result.foreground = style.foreground;\n                definitions.foreground = definition;\n            }\n            for (const p of ['bold', 'underline', 'strikethrough', 'italic']) {\n                const property = p;\n                const info = style[property];\n                if (info !== undefined) {\n                    if (score[property] <= matchScore) {\n                        score[property] = matchScore;\n                        result[property] = info;\n                        definitions[property] = definition;\n                    }\n                }\n            }\n        }\n        function _processSemanticTokenRule(rule) {\n            const matchScore = rule.selector.match(type, modifiers, language);\n            if (matchScore >= 0) {\n                _processStyle(matchScore, rule.style, rule);\n            }\n        }\n        this.semanticTokenRules.forEach(_processSemanticTokenRule);\n        this.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n        let hasUndefinedStyleProperty = false;\n        for (const k in score) {\n            const key = k;\n            if (score[key] === -1) {\n                hasUndefinedStyleProperty = true;\n            }\n            else {\n                score[key] = Number.MAX_VALUE;\n            }\n        }\n        if (hasUndefinedStyleProperty) {\n            for (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n                const matchScore = rule.selector.match(type, modifiers, language);\n                if (matchScore >= 0) {\n                    let style;\n                    if (rule.defaults.scopesToProbe) {\n                        style = this.resolveScopes(rule.defaults.scopesToProbe);\n                        if (style) {\n                            _processStyle(matchScore, style, rule.defaults.scopesToProbe);\n                        }\n                    }\n                    if (!style && useDefault !== false) {\n                        const tokenStyleValue = rule.defaults[this.type];\n                        style = this.resolveTokenStyleValue(tokenStyleValue);\n                        if (style) {\n                            _processStyle(matchScore, style, tokenStyleValue);\n                        }\n                    }\n                }\n            }\n        }\n        return TokenStyle.fromData(result);\n    }\n    resolveTokenStyleValue(tokenStyleValue) {\n        if (tokenStyleValue === undefined) {\n            return undefined;\n        }\n        else if (typeof tokenStyleValue === 'string') {\n            const { type, modifiers, language } = parseClassifierString(tokenStyleValue, '');\n            return this.getTokenStyle(type, modifiers, language);\n        }\n        else if (typeof tokenStyleValue === 'object') {\n            return tokenStyleValue;\n        }\n        return undefined;\n    }\n    getTokenColorIndex() {\n        if (!this.tokenColorIndex) {\n            const index = ( (new TokenColorIndex()));\n            this.tokenColors.forEach(rule => {\n                index.add(rule.settings.foreground);\n                index.add(rule.settings.background);\n            });\n            this.semanticTokenRules.forEach(r => index.add(r.style.foreground));\n            tokenClassificationRegistry.getTokenStylingDefaultRules().forEach(r => {\n                const defaultColor = r.defaults[this.type];\n                if (defaultColor && typeof defaultColor === 'object') {\n                    index.add(defaultColor.foreground);\n                }\n            });\n            this.customSemanticTokenRules.forEach(r => index.add(r.style.foreground));\n            this.tokenColorIndex = index;\n        }\n        return this.tokenColorIndex;\n    }\n    get tokenColorMap() {\n        return this.getTokenColorIndex().asArray();\n    }\n    getTokenStyleMetadata(typeWithLanguage, modifiers, defaultLanguage, useDefault = true, definitions = {}) {\n        const { type, language } = parseClassifierString(typeWithLanguage, defaultLanguage);\n        const style = this.getTokenStyle(type, modifiers, language, useDefault, definitions);\n        if (!style) {\n            return undefined;\n        }\n        return {\n            foreground: this.getTokenColorIndex().get(style.foreground),\n            bold: style.bold,\n            underline: style.underline,\n            strikethrough: style.strikethrough,\n            italic: style.italic,\n        };\n    }\n    getTokenStylingRuleScope(rule) {\n        if (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n            return 'setting';\n        }\n        if (this.semanticTokenRules.indexOf(rule) !== -1) {\n            return 'theme';\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    }\n    resolveScopes(scopes, definitions) {\n        if (!this.themeTokenScopeMatchers) {\n            this.themeTokenScopeMatchers = ( (this.themeTokenColors.map(getScopeMatcher)));\n        }\n        if (!this.customTokenScopeMatchers) {\n            this.customTokenScopeMatchers = ( (this.customTokenColors.map(getScopeMatcher)));\n        }\n        for (const scope of scopes) {\n            let foreground = undefined;\n            let fontStyle = undefined;\n            let foregroundScore = -1;\n            let fontStyleScore = -1;\n            let fontStyleThemingRule = undefined;\n            let foregroundThemingRule = undefined;\n            function findTokenStyleForScopeInScopes(scopeMatchers, themingRules) {\n                for (let i = 0; i < scopeMatchers.length; i++) {\n                    const score = scopeMatchers[i](scope);\n                    if (score >= 0) {\n                        const themingRule = themingRules[i];\n                        const settings = themingRules[i].settings;\n                        if (score >= foregroundScore && settings.foreground) {\n                            foreground = settings.foreground;\n                            foregroundScore = score;\n                            foregroundThemingRule = themingRule;\n                        }\n                        if (score >= fontStyleScore && isString(settings.fontStyle)) {\n                            fontStyle = settings.fontStyle;\n                            fontStyleScore = score;\n                            fontStyleThemingRule = themingRule;\n                        }\n                    }\n                }\n            }\n            findTokenStyleForScopeInScopes(this.themeTokenScopeMatchers, this.themeTokenColors);\n            findTokenStyleForScopeInScopes(this.customTokenScopeMatchers, this.customTokenColors);\n            if (foreground !== undefined || fontStyle !== undefined) {\n                if (definitions) {\n                    definitions.foreground = foregroundThemingRule;\n                    definitions.bold = definitions.italic = definitions.underline = definitions.strikethrough = fontStyleThemingRule;\n                    definitions.scope = scope;\n                }\n                return TokenStyle.fromSettings(foreground, fontStyle);\n            }\n        }\n        return undefined;\n    }\n    defines(colorId) {\n        const customColor = this.customColorMap[colorId];\n        if (customColor instanceof Color) {\n            return true;\n        }\n        return customColor === undefined  && this.colorMap.hasOwnProperty(colorId);\n    }\n    setCustomizations(settings) {\n        this.setCustomColors(settings.colorCustomizations);\n        this.setCustomTokenColors(settings.tokenColorCustomizations);\n        this.setCustomSemanticTokenColors(settings.semanticTokenColorCustomizations);\n    }\n    setCustomColors(colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        const themeSpecificColors = this.getThemeSpecificColors(colors);\n        if (isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    overwriteCustomColors(colors) {\n        for (const id in colors) {\n            const colorVal = colors[id];\n            if (colorVal === DEFAULT_COLOR_CONFIG_VALUE) {\n                this.customColorMap[id] = DEFAULT_COLOR_CONFIG_VALUE;\n            }\n            else if (typeof colorVal === 'string') {\n                this.customColorMap[id] = ( (Color.fromHex(colorVal)));\n            }\n        }\n    }\n    setCustomTokenColors(customTokenColors) {\n        this.customTokenColors = [];\n        this.customSemanticHighlightingDeprecated = undefined;\n        this.addCustomTokenColors(customTokenColors);\n        const themeSpecificTokenColors = this.getThemeSpecificColors(customTokenColors);\n        if (isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    setCustomSemanticTokenColors(semanticTokenColors) {\n        this.customSemanticTokenRules = [];\n        this.customSemanticHighlighting = undefined;\n        if (semanticTokenColors) {\n            this.customSemanticHighlighting = semanticTokenColors.enabled;\n            if (semanticTokenColors.rules) {\n                this.readSemanticTokenRules(semanticTokenColors.rules);\n            }\n            const themeSpecificColors = this.getThemeSpecificColors(semanticTokenColors);\n            if (isObject(themeSpecificColors)) {\n                if (themeSpecificColors.enabled !== undefined) {\n                    this.customSemanticHighlighting = themeSpecificColors.enabled;\n                }\n                if (themeSpecificColors.rules) {\n                    this.readSemanticTokenRules(themeSpecificColors.rules);\n                }\n            }\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n    }\n    isThemeScope(key) {\n        return key.charAt(0) === THEME_SCOPE_OPEN_PAREN && key.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN;\n    }\n    isThemeScopeMatch(themeId) {\n        const themeIdFirstChar = themeId.charAt(0);\n        const themeIdLastChar = themeId.charAt(themeId.length - 1);\n        const themeIdPrefix = themeId.slice(0, -1);\n        const themeIdInfix = themeId.slice(1, -1);\n        const themeIdSuffix = themeId.slice(1);\n        return themeId === this.settingsId\n            || (this.settingsId.includes(themeIdInfix) && themeIdFirstChar === THEME_SCOPE_WILDCARD && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.startsWith(themeIdPrefix) && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.endsWith(themeIdSuffix) && themeIdFirstChar === THEME_SCOPE_WILDCARD);\n    }\n    getThemeSpecificColors(colors) {\n        let themeSpecificColors;\n        for (const key in colors) {\n            const scopedColors = colors[key];\n            if (this.isThemeScope(key) && scopedColors instanceof Object && !Array.isArray(scopedColors)) {\n                const themeScopeList = key.match(themeScopeRegex) || [];\n                for (const themeScope of themeScopeList) {\n                    const themeId = themeScope.substring(1, themeScope.length - 1);\n                    if (this.isThemeScopeMatch(themeId)) {\n                        if (!themeSpecificColors) {\n                            themeSpecificColors = {};\n                        }\n                        const scopedThemeSpecificColors = scopedColors;\n                        for (const subkey in scopedThemeSpecificColors) {\n                            const originalColors = themeSpecificColors[subkey];\n                            const overrideColors = scopedThemeSpecificColors[subkey];\n                            if (Array.isArray(originalColors) && Array.isArray(overrideColors)) {\n                                themeSpecificColors[subkey] = originalColors.concat(overrideColors);\n                            }\n                            else if (overrideColors) {\n                                themeSpecificColors[subkey] = overrideColors;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return themeSpecificColors;\n    }\n    readSemanticTokenRules(tokenStylingRuleSection) {\n        for (const key in tokenStylingRuleSection) {\n            if (!this.isThemeScope(key)) {\n                try {\n                    const rule = readSemanticTokenRule(key, tokenStylingRuleSection[key]);\n                    if (rule) {\n                        this.customSemanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                }\n            }\n        }\n    }\n    addCustomTokenColors(customTokenColors) {\n        for (const tokenGroup in tokenGroupToScopesMap) {\n            const group = tokenGroup;\n            const value = customTokenColors[group];\n            if (value) {\n                const settings = typeof value === 'string' ? { foreground: value } : value;\n                const scopes = tokenGroupToScopesMap[group];\n                for (const scope of scopes) {\n                    this.customTokenColors.push({ scope, settings });\n                }\n            }\n        }\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (const rule of customTokenColors.textMateRules) {\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n        if (customTokenColors.semanticHighlighting !== undefined) {\n            this.customSemanticHighlightingDeprecated = customTokenColors.semanticHighlighting;\n        }\n    }\n    ensureLoaded(extensionResourceLoaderService) {\n        return !this.isLoaded ? this.load(extensionResourceLoaderService) : Promise.resolve(undefined);\n    }\n    reload(extensionResourceLoaderService) {\n        return this.load(extensionResourceLoaderService);\n    }\n    load(extensionResourceLoaderService) {\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        this.themeTokenColors = [];\n        this.clearCaches();\n        const result = {\n            colors: {},\n            textMateRules: [],\n            semanticTokenRules: [],\n            semanticHighlighting: false\n        };\n        return _loadColorTheme(extensionResourceLoaderService, this.location, result).then(_ => {\n            this.isLoaded = true;\n            this.semanticTokenRules = result.semanticTokenRules;\n            this.colorMap = result.colors;\n            this.themeTokenColors = result.textMateRules;\n            this.themeSemanticHighlighting = result.semanticHighlighting;\n        });\n    }\n    clearCaches() {\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.themeTokenScopeMatchers = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    toStorage(storageService) {\n        const colorMapData = {};\n        for (const key in this.colorMap) {\n            colorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        const value = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            themeTokenColors: ( (this.themeTokenColors.map(tc => ({ settings: tc.settings, scope: tc.scope })))),\n            semanticTokenRules: ( (this.semanticTokenRules.map(SemanticTokenRule.toJSONObject))),\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            themeSemanticHighlighting: this.themeSemanticHighlighting,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n        storageService.store(ColorThemeData.STORAGE_KEY, value, 0 , 0 );\n    }\n    get baseTheme() {\n        return this.classNames[0];\n    }\n    get classNames() {\n        return this.id.split(' ');\n    }\n    get type() {\n        switch (this.baseTheme) {\n            case VS_LIGHT_THEME: return ColorScheme.LIGHT;\n            case VS_HC_THEME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case VS_HC_LIGHT_THEME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    static createUnloadedThemeForThemeType(themeType, colorMap) {\n        return ColorThemeData.createUnloadedTheme(getThemeTypeSelector(themeType), colorMap);\n    }\n    static createUnloadedTheme(id, colorMap) {\n        const themeData = ( (new ColorThemeData(id, '', '__' + id)));\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        if (colorMap) {\n            for (const id in colorMap) {\n                themeData.colorMap[id] = ( (Color.fromHex(colorMap[id])));\n            }\n        }\n        return themeData;\n    }\n    static createLoadedEmptyTheme(id, settingsId) {\n        const themeData = ( (new ColorThemeData(id, '', settingsId)));\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ColorThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( (new ColorThemeData('', '', '')));\n            for (const key in data) {\n                switch (key) {\n                    case 'colorMap': {\n                        const colorMapData = data[key];\n                        for (const id in colorMapData) {\n                            theme.colorMap[id] = ( (Color.fromHex(colorMapData[id])));\n                        }\n                        break;\n                    }\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'watch':\n                    case 'themeSemanticHighlighting':\n                        theme[key] = data[key];\n                        break;\n                    case 'semanticTokenRules': {\n                        const rulesData = data[key];\n                        if (Array.isArray(rulesData)) {\n                            for (const d of rulesData) {\n                                const rule = SemanticTokenRule.fromJSONObject(tokenClassificationRegistry, d);\n                                if (rule) {\n                                    theme.semanticTokenRules.push(rule);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    static fromExtensionTheme(theme, colorThemeLocation, extensionData) {\n        const baseTheme = theme['uiTheme'] || 'vs-dark';\n        const themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        const id = `${baseTheme} ${themeSelector}`;\n        const label = theme.label || basename(theme.path);\n        const settingsId = theme.id || label;\n        const themeData = ( (new ColorThemeData(id, label, settingsId)));\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n}\nfunction toCSSSelector(extensionId, path) {\n    if (path.startsWith('./')) {\n        path = path.substr(2);\n    }\n    let str = `${extensionId}-${path}`;\n    str = str.replace(/[^_a-zA-Z0-9-]/g, '-');\n    if (str.charAt(0).match(/[0-9-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nasync function _loadColorTheme(extensionResourceLoaderService, themeLocation, result) {\n    if (extname(themeLocation) === '.json') {\n        const content = await extensionResourceLoaderService.readExtensionResource(themeLocation);\n        const errors = [];\n        const contentValue = parse(content, errors);\n        if (errors.length > 0) {\n            return Promise.reject(( (new Error(( localize(\n                6929,\n                \"Problems parsing JSON theme file: {0}\",\n                ( (errors.map(e => getParseErrorMessage(e.error)))).join(', ')\n            ))))));\n        }\n        else if (getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( (new Error(( localize(6930, \"Invalid format for JSON theme file: Object expected.\"))))));\n        }\n        if (contentValue.include) {\n            await _loadColorTheme(extensionResourceLoaderService, joinPath(dirname(themeLocation), contentValue.include), result);\n        }\n        if (Array.isArray(contentValue.settings)) {\n            convertSettings(contentValue.settings, result);\n            return null;\n        }\n        result.semanticHighlighting = result.semanticHighlighting || contentValue.semanticHighlighting;\n        const colors = contentValue.colors;\n        if (colors) {\n            if (typeof colors !== 'object') {\n                return Promise.reject(( (new Error(( localize(\n                    6931,\n                    \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n                     (themeLocation.toString())\n                ))))));\n            }\n            for (const colorId in colors) {\n                const colorVal = colors[colorId];\n                if (colorVal === DEFAULT_COLOR_CONFIG_VALUE) {\n                    delete result.colors[colorId];\n                }\n                else if (typeof colorVal === 'string') {\n                    result.colors[colorId] = ( (Color.fromHex(colors[colorId])));\n                }\n            }\n        }\n        const tokenColors = contentValue.tokenColors;\n        if (tokenColors) {\n            if (Array.isArray(tokenColors)) {\n                result.textMateRules.push(...tokenColors);\n            }\n            else if (typeof tokenColors === 'string') {\n                await _loadSyntaxTokens(extensionResourceLoaderService, joinPath(dirname(themeLocation), tokenColors), result);\n            }\n            else {\n                return Promise.reject(( (new Error(( localize(\n                    6932,\n                    \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n                     (themeLocation.toString())\n                ))))));\n            }\n        }\n        const semanticTokenColors = contentValue.semanticTokenColors;\n        if (semanticTokenColors && typeof semanticTokenColors === 'object') {\n            for (const key in semanticTokenColors) {\n                try {\n                    const rule = readSemanticTokenRule(key, semanticTokenColors[key]);\n                    if (rule) {\n                        result.semanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                    return Promise.reject(( (new Error(( localize(\n                        6933,\n                        \"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n                         (themeLocation.toString())\n                    ))))));\n                }\n            }\n        }\n    }\n    else {\n        return _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result);\n    }\n}\nfunction _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result) {\n    return extensionResourceLoaderService.readExtensionResource(themeLocation).then(content => {\n        try {\n            const contentValue = parse$1(content);\n            const settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(( (new Error(( localize(6934, \"Problem parsing tmTheme file: {0}. 'settings' is not array.\"))))));\n            }\n            convertSettings(settings, result);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(( (new Error(( localize(6935, \"Problems parsing tmTheme file: {0}\", e.message))))));\n        }\n    }, error => {\n        return Promise.reject(( (new Error(( localize(\n            6936,\n            \"Problems loading tmTheme file {0}: {1}\",\n             (themeLocation.toString()),\n            error.message\n        ))))));\n    });\n}\nconst defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hcLight': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'hcDark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ]\n};\nconst noMatch = (_scope) => -1;\nfunction nameMatcher(identifers, scope) {\n    function findInIdents(s, lastIndent) {\n        for (let i = lastIndent - 1; i >= 0; i--) {\n            if (scopesAreMatching(s, identifers[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    if (scope.length < identifers.length) {\n        return -1;\n    }\n    let lastScopeIndex = scope.length - 1;\n    let lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], identifers.length);\n    if (lastIdentifierIndex >= 0) {\n        const score = (lastIdentifierIndex + 1) * 0x10000 + identifers[lastIdentifierIndex].length;\n        while (lastScopeIndex >= 0) {\n            lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], lastIdentifierIndex);\n            if (lastIdentifierIndex === -1) {\n                return -1;\n            }\n        }\n        return score;\n    }\n    return -1;\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction getScopeMatcher(rule) {\n    const ruleScope = rule.scope;\n    if (!ruleScope || !rule.settings) {\n        return noMatch;\n    }\n    const matchers = [];\n    if (Array.isArray(ruleScope)) {\n        for (const rs of ruleScope) {\n            createMatchers(rs, nameMatcher, matchers);\n        }\n    }\n    else {\n        createMatchers(ruleScope, nameMatcher, matchers);\n    }\n    if (matchers.length === 0) {\n        return noMatch;\n    }\n    return (scope) => {\n        let max = matchers[0].matcher(scope);\n        for (let i = 1; i < matchers.length; i++) {\n            max = Math.max(max, matchers[i].matcher(scope));\n        }\n        return max;\n    };\n}\nfunction readSemanticTokenRule(selectorString, settings) {\n    const selector = tokenClassificationRegistry.parseTokenSelector(selectorString);\n    let style;\n    if (typeof settings === 'string') {\n        style = TokenStyle.fromSettings(settings, undefined);\n    }\n    else if (isSemanticTokenColorizationSetting(settings)) {\n        style = TokenStyle.fromSettings(settings.foreground, settings.fontStyle, settings.bold, settings.underline, settings.strikethrough, settings.italic);\n    }\n    if (style) {\n        return { selector, style };\n    }\n    return undefined;\n}\nfunction isSemanticTokenColorizationSetting(style) {\n    return style && (isString(style.foreground) || isString(style.fontStyle) || isBoolean(style.italic)\n        || isBoolean(style.underline) || isBoolean(style.strikethrough) || isBoolean(style.bold));\n}\nfunction findMetadata(colorThemeData, captureNames, languageId) {\n    let metadata = 0;\n    metadata |= ((languageId << 0) );\n    const themeRule = findMatchingThemeRule(colorThemeData, captureNames);\n    let tokenStyle;\n    if (!themeRule) {\n        tokenStyle = colorThemeData.resolveScopes(( (captureNames.map(name => [name]))).reverse());\n    }\n    if (captureNames.length > 0) {\n        const standardToken = toStandardTokenType(captureNames[captureNames.length - 1]);\n        metadata |= ((standardToken << 8) );\n    }\n    switch (themeRule?.settings.fontStyle) {\n        case 'italic':\n            metadata |= 1  | 2048 ;\n            break;\n        case 'bold':\n            metadata |= 2  | 4096 ;\n            break;\n        case 'underline':\n            metadata |= 4  | 8192 ;\n            break;\n        case 'strikethrough':\n            metadata |= 8  | 16384 ;\n            break;\n        default:\n            if (typeof tokenStyle?.italic !== 'undefined') {\n                const italicbit = (tokenStyle?.italic ? 1  : 0);\n                metadata |= italicbit | 2048 ;\n            }\n            if (typeof tokenStyle?.bold !== 'undefined') {\n                const boldBit = (tokenStyle?.bold ? 2  : 0);\n                metadata |= boldBit | 4096 ;\n            }\n            if (typeof tokenStyle?.underline !== 'undefined') {\n                const underlineBit = (tokenStyle?.underline ? 4  : 0);\n                metadata |= underlineBit | 8192 ;\n            }\n            if (typeof tokenStyle?.strikethrough !== 'undefined') {\n                const strikethroughBit = (tokenStyle?.strikethrough ? 8  : 0);\n                metadata |= strikethroughBit | 16384 ;\n            }\n    }\n    const foreground = themeRule ? themeRule.settings.foreground : tokenStyle?.foreground;\n    const tokenStyleForeground = foreground ? colorThemeData.getTokenColorIndex().get(foreground) : 1 ;\n    metadata |= tokenStyleForeground << 15 ;\n    return metadata;\n}\nclass TokenColorIndex {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n    }\n    add(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    get(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        const value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        console.log(`Color ${color} not in index.`);\n        return 0;\n    }\n    asArray() {\n        return this._id2color.slice(0);\n    }\n}\nfunction normalizeColor(color) {\n    if (!color) {\n        return undefined;\n    }\n    if (typeof color !== 'string') {\n        color = Color.Format.CSS.formatHexA(color, true);\n    }\n    const len = color.length;\n    if (color.charCodeAt(0) !== 35  || (len !== 4 && len !== 5 && len !== 7 && len !== 9)) {\n        return undefined;\n    }\n    const result = [35 ];\n    for (let i = 1; i < len; i++) {\n        const upper = hexUpper(color.charCodeAt(i));\n        if (!upper) {\n            return undefined;\n        }\n        result.push(upper);\n        if (len === 4 || len === 5) {\n            result.push(upper);\n        }\n    }\n    if (result.length === 9 && result[7] === 70  && result[8] === 70 ) {\n        result.length = 7;\n    }\n    return String.fromCharCode(...result);\n}\nfunction hexUpper(charCode) {\n    if (charCode >= 48  && charCode <= 57  || charCode >= 65  && charCode <= 70 ) {\n        return charCode;\n    }\n    else if (charCode >= 97  && charCode <= 102 ) {\n        return charCode - 97  + 65 ;\n    }\n    return 0;\n}\nexport { ColorThemeData, findMetadata };\n","function parse(content) {\n    return _parse(content);\n}\nfunction _parse(content, filename, locationKeyName) {\n    const len = content.length;\n    let pos = 0;\n    if (len > 0 && content.charCodeAt(0) === 65279 ) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        {\n            pos = pos + by;\n        }\n    }\n    function advancePosTo(to) {\n        {\n            pos = to;\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            const chCode = content.charCodeAt(pos);\n            if (chCode !== 32  && chCode !== 9  && chCode !== 13  && chCode !== 10 ) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            const r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            const r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    let state = 0 ;\n    let cur = null;\n    const stateStack = [];\n    const objStack = [];\n    let curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw ( new Error(\n            'Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~'\n        ));\n    }\n    const dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newDict = {};\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 , newArr);\n        }\n    };\n    const arrState = {\n        enterDict: function () {\n            const newDict = {};\n            cur.push(newDict);\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            const newArr = [];\n            cur.push(newArr);\n            pushState(2 , newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 ) {\n            dictState.enterDict();\n        }\n        else if (state === 2 ) {\n            arrState.enterDict();\n        }\n        else {\n            cur = {};\n            pushState(1 , cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 ) {\n            popState();\n        }\n        else if (state === 2 ) {\n            return fail('unexpected </dict>');\n        }\n        else {\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 ) {\n            dictState.enterArray();\n        }\n        else if (state === 2 ) {\n            arrState.enterArray();\n        }\n        else {\n            cur = [];\n            pushState(2 , cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 ) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 ) {\n            popState();\n        }\n        else {\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 ) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 ) {\n            return fail('unexpected <key>');\n        }\n        else {\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        let r = captureUntil('>');\n        let isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 ) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        const val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        const chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 ) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        const peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 ) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 ) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 ) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        const tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(( new Date(parseTagValue(tag))));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\nexport { parse };\n","function createMatchers(selector, matchesName, results) {\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        const matcher = parseConjunction();\n        if (matcher) {\n            results.push({ matcher, priority });\n        }\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            if (!expressionToNegate) {\n                return null;\n            }\n            return matcherInput => {\n                const score = expressionToNegate(matcherInput);\n                return score < 0 ? 0 : -1;\n            };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        let matcher = parseOperand();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => {\n            let min = matchers[0](matcherInput);\n            for (let i = 1; min >= 0 && i < matchers.length; i++) {\n                min = Math.min(min, matchers[i](matcherInput));\n            }\n            return min;\n        };\n    }\n    function parseInnerExpression() {\n        let matcher = parseConjunction();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ',');\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => {\n            let max = matchers[0](matcherInput);\n            for (let i = 1; i < matchers.length; i++) {\n                max = Math.max(max, matchers[i](matcherInput));\n            }\n            return max;\n        };\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    const regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\nexport { createMatchers };\n","import { Color } from '../../../../base/common/color.js';\nimport '../../../../platform/theme/common/colorUtils.js';\nimport '../../../../platform/theme/common/colors/baseColors.js';\nimport '../../../../platform/theme/common/colors/chartsColors.js';\nimport { editorBackground, editorForeground, editorSelectionBackground, editorInactiveSelection, editorSelectionHighlight, editorFindMatchHighlight, editorFindMatch, editorHoverHighlight, editorFindRangeHighlight } from '../../../../platform/theme/common/colors/editorColors.js';\nimport '../../../../platform/theme/common/colors/inputColors.js';\nimport '../../../../platform/theme/common/colors/listColors.js';\nimport '../../../../platform/theme/common/colors/menuColors.js';\nimport '../../../../platform/theme/common/colors/minimapColors.js';\nimport '../../../../platform/theme/common/colors/miscColors.js';\nimport '../../../../platform/theme/common/colors/quickpickColors.js';\nimport '../../../../platform/theme/common/colors/searchColors.js';\nimport { editorLineHighlight, editorRangeHighlight, editorCursorForeground, editorWhitespaces, editorIndentGuide1, editorActiveIndentGuide1 } from '../../../../editor/common/core/editorColorRegistry.js';\nconst settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    let colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, result) {\n    for (const rule of oldSettings) {\n        result.textMateRules.push(rule);\n        if (!rule.scope) {\n            const settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (const settingKey in settings) {\n                    const key = settingKey;\n                    const mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        const colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            const color = ( Color.fromHex(colorHex));\n                            for (const colorId of mappings) {\n                                result.colors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\naddSettingMapping('background', editorBackground);\naddSettingMapping('foreground', editorForeground);\naddSettingMapping('selection', editorSelectionBackground);\naddSettingMapping('inactiveSelection', editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', editorFindMatch);\naddSettingMapping('hoverHighlight', editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground');\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorLineHighlight);\naddSettingMapping('rangeHighlight', editorRangeHighlight);\naddSettingMapping('caret', editorCursorForeground);\naddSettingMapping('invisibles', editorWhitespaces);\naddSettingMapping('guide', editorIndentGuide1);\naddSettingMapping('activeGuide', editorActiveIndentGuide1);\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (const color of ansiColorMap) {\n    addSettingMapping(color, 'terminal.' + color);\n}\nexport { convertSettings };\n","import { isString, isBoolean } from '../../../../base/common/types.js';\nconst VS_LIGHT_THEME = 'vs';\nconst VS_DARK_THEME = 'vs-dark';\nconst VS_HC_THEME = 'hc-black';\nconst VS_HC_LIGHT_THEME = 'hc-light';\nconst THEME_SCOPE_OPEN_PAREN = '[';\nconst THEME_SCOPE_CLOSE_PAREN = ']';\nconst THEME_SCOPE_WILDCARD = '*';\nconst themeScopeRegex = /\\[(.+?)\\]/g;\nvar ThemeSettings;\n( (function(ThemeSettings) {\n    ThemeSettings[\"COLOR_THEME\"] = \"workbench.colorTheme\";\n    ThemeSettings[\"FILE_ICON_THEME\"] = \"workbench.iconTheme\";\n    ThemeSettings[\"PRODUCT_ICON_THEME\"] = \"workbench.productIconTheme\";\n    ThemeSettings[\"COLOR_CUSTOMIZATIONS\"] = \"workbench.colorCustomizations\";\n    ThemeSettings[\"TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.tokenColorCustomizations\";\n    ThemeSettings[\"SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.semanticTokenColorCustomizations\";\n    ThemeSettings[\"PREFERRED_DARK_THEME\"] = \"workbench.preferredDarkColorTheme\";\n    ThemeSettings[\"PREFERRED_LIGHT_THEME\"] = \"workbench.preferredLightColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_DARK_THEME\"] = \"workbench.preferredHighContrastColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_LIGHT_THEME\"] = \"workbench.preferredHighContrastLightColorTheme\";\n    ThemeSettings[\"DETECT_COLOR_SCHEME\"] = \"window.autoDetectColorScheme\";\n    ThemeSettings[\"DETECT_HC\"] = \"window.autoDetectHighContrast\";\n    ThemeSettings[\"SYSTEM_COLOR_THEME\"] = \"window.systemColorTheme\";\n})(ThemeSettings || (ThemeSettings = {})));\nvar ThemeSettingDefaults;\n( (function(ThemeSettingDefaults) {\n    ThemeSettingDefaults[\"COLOR_THEME_DARK\"] = \"Default Dark Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT\"] = \"Default Light Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_DARK\"] = \"Default High Contrast\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_LIGHT\"] = \"Default High Contrast Light\";\n    ThemeSettingDefaults[\"COLOR_THEME_DARK_OLD\"] = \"Default Dark+\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT_OLD\"] = \"Default Light+\";\n    ThemeSettingDefaults[\"FILE_ICON_THEME\"] = \"vs-seti\";\n    ThemeSettingDefaults[\"PRODUCT_ICON_THEME\"] = \"Default\";\n})(ThemeSettingDefaults || (ThemeSettingDefaults = {})));\nconst COLOR_THEME_DARK_INITIAL_COLORS = {\n    'activityBar.activeBorder': '#0078d4',\n    'activityBar.background': '#181818',\n    'activityBar.border': '#2b2b2b',\n    'activityBar.foreground': '#d7d7d7',\n    'activityBar.inactiveForeground': '#868686',\n    'editorGroup.border': '#ffffff17',\n    'editorGroupHeader.tabsBackground': '#181818',\n    'editorGroupHeader.tabsBorder': '#2b2b2b',\n    'statusBar.background': '#181818',\n    'statusBar.border': '#2b2b2b',\n    'statusBar.foreground': '#cccccc',\n    'statusBar.noFolderBackground': '#1f1f1f',\n    'tab.activeBackground': '#1f1f1f',\n    'tab.activeBorder': '#1f1f1f',\n    'tab.activeBorderTop': '#0078d4',\n    'tab.activeForeground': '#ffffff',\n    'tab.border': '#2b2b2b',\n    'textLink.foreground': '#4daafc',\n    'titleBar.activeBackground': '#181818',\n    'titleBar.activeForeground': '#cccccc',\n    'titleBar.border': '#2b2b2b',\n    'titleBar.inactiveBackground': '#1f1f1f',\n    'titleBar.inactiveForeground': '#9d9d9d',\n    'welcomePage.tileBackground': '#2b2b2b'\n};\nconst COLOR_THEME_LIGHT_INITIAL_COLORS = {\n    'activityBar.activeBorder': '#005FB8',\n    'activityBar.background': '#f8f8f8',\n    'activityBar.border': '#e5e5e5',\n    'activityBar.foreground': '#1f1f1f',\n    'activityBar.inactiveForeground': '#616161',\n    'editorGroup.border': '#e5e5e5',\n    'editorGroupHeader.tabsBackground': '#f8f8f8',\n    'editorGroupHeader.tabsBorder': '#e5e5e5',\n    'statusBar.background': '#f8f8f8',\n    'statusBar.border': '#e5e5e5',\n    'statusBar.foreground': '#3b3b3b',\n    'statusBar.noFolderBackground': '#f8f8f8',\n    'tab.activeBackground': '#ffffff',\n    'tab.activeBorder': '#f8f8f8',\n    'tab.activeBorderTop': '#005fb8',\n    'tab.activeForeground': '#3b3b3b',\n    'tab.border': '#e5e5e5',\n    'textLink.foreground': '#005fb8',\n    'titleBar.activeBackground': '#f8f8f8',\n    'titleBar.activeForeground': '#1e1e1e',\n    'titleBar.border': '#E5E5E5',\n    'titleBar.inactiveBackground': '#f8f8f8',\n    'titleBar.inactiveForeground': '#8b949e',\n    'welcomePage.tileBackground': '#f3f3f3'\n};\nvar ExtensionData;\n( (function(ExtensionData) {\n    function toJSONObject(d) {\n        return d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n    }\n    ExtensionData.toJSONObject = toJSONObject;\n    function fromJSONObject(o) {\n        if (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n            return { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n        }\n        return undefined;\n    }\n    ExtensionData.fromJSONObject = fromJSONObject;\n    function fromName(publisher, name, isBuiltin = false) {\n        return { extensionPublisher: publisher, extensionId: `${publisher}.${name}`, extensionName: name, extensionIsBuiltin: isBuiltin };\n    }\n    ExtensionData.fromName = fromName;\n})(ExtensionData || (ExtensionData = {})));\nexport { COLOR_THEME_DARK_INITIAL_COLORS, COLOR_THEME_LIGHT_INITIAL_COLORS, ExtensionData, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_WILDCARD, ThemeSettingDefaults, ThemeSettings, VS_DARK_THEME, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME, themeScopeRegex };\n"],"names":[],"sourceRoot":""}