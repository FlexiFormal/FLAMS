(self["webpackChunkimmt_editor"] = self["webpackChunkimmt_editor"] || []).push([["vendors-node_modules_codingame_monaco-vscode-textmate-service-override_index_js"],{

/***/ "./node_modules/vscode-oniguruma/release/onig.wasm":
/*!*********************************************************!*\
  !*** ./node_modules/vscode-oniguruma/release/onig.wasm ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "874a968008f3c6125b20.wasm";

/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ITextMateTokenizationService: () => (/* reexport safe */ vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__.ITextMateTokenizationService),
/* harmony export */   "default": () => (/* reexport safe */ _textmate_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _textmate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textmate.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/textmate.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service */ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service.js");




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/textmate.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/textmate.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ITextMateTokenizationService: () => (/* reexport safe */ vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__.ITextMateTokenizationService),
/* harmony export */   "default": () => (/* binding */ getServiceOverride)
/* harmony export */ });
/* harmony import */ var vscode_vscode_vs_editor_standalone_browser_standaloneServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/vscode/vs/editor/standalone/browser/standaloneServices */ "./node_modules/vscode/vscode/src/vs/editor/standalone/browser/standaloneServices.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service */ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service.js");
/* harmony import */ var vscode_vscode_vs_platform_instantiation_common_descriptors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/platform/instantiation/common/descriptors */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js");
/* harmony import */ var _vscode_src_vs_workbench_services_textMate_browser_textMateTokenizationFeatureImpl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_lifecycle_common_lifecycle_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/lifecycle/common/lifecycle.service */ "./node_modules/vscode/vscode/src/vs/workbench/services/lifecycle/common/lifecycle.service.js");
/* harmony import */ var _codingame_monaco_vscode_files_service_override__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codingame/monaco-vscode-files-service-override */ "./node_modules/@codingame/monaco-vscode-files-service-override/index.js");
/* harmony import */ var vscode_lifecycle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vscode/lifecycle */ "./node_modules/vscode/lifecycle.js");
/* harmony import */ var vscode_assets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vscode/assets */ "./node_modules/vscode/assets.js");
/* harmony import */ var _vscode_src_vs_workbench_services_themes_common_tokenClassificationExtensionPoint_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vscode/src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.js");
/* harmony import */ var vscode_vscode_vs_workbench_contrib_codeEditor_browser_inspectEditorTokens_inspectEditorTokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vscode/vscode/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.js");












const _onigWasm = new URL(/* asset import */ __webpack_require__(/*! vscode-oniguruma/release/onig.wasm */ "./node_modules/vscode-oniguruma/release/onig.wasm"), __webpack_require__.b).href;
(0,vscode_assets__WEBPACK_IMPORTED_MODULE_7__.registerAssets)({
    'vscode-oniguruma/../onig.wasm': _onigWasm,
    'vs/../../node_modules/vscode-oniguruma/release/onig.wasm': _onigWasm
});
(0,vscode_lifecycle__WEBPACK_IMPORTED_MODULE_6__.registerServiceInitializeParticipant)(async (accessor) => {
    void accessor
        .get(vscode_vscode_vs_workbench_services_lifecycle_common_lifecycle_service__WEBPACK_IMPORTED_MODULE_4__.ILifecycleService)
        .when(2 )
        .then(() => {
        vscode_vscode_vs_editor_standalone_browser_standaloneServices__WEBPACK_IMPORTED_MODULE_0__.StandaloneServices.get(vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__.ITextMateTokenizationService);
    });
});
function getServiceOverride() {
    return {
        ...(0,_codingame_monaco_vscode_files_service_override__WEBPACK_IMPORTED_MODULE_5__["default"])(),
        [( vscode_vscode_vs_workbench_services_textMate_browser_textMateTokenizationFeature_service__WEBPACK_IMPORTED_MODULE_1__.ITextMateTokenizationService.toString())]: new vscode_vscode_vs_platform_instantiation_common_descriptors__WEBPACK_IMPORTED_MODULE_2__.SyncDescriptor(_vscode_src_vs_workbench_services_textMate_browser_textMateTokenizationFeatureImpl_js__WEBPACK_IMPORTED_MODULE_3__.TextMateTokenizationFeature, [], false)
    };
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/amdX.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/amdX.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   resolveAmdNodeModulePath: () => (/* binding */ resolveAmdNodeModulePath)
/* harmony export */ });
/* harmony import */ var vscode_vscode_vs_base_common_amd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/vscode/vs/base/common/amd */ "./node_modules/vscode/vscode/src/vs/base/common/amd.js");
/* harmony import */ var vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/base/common/network */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var vscode_vscode_vs_base_common_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/base/common/platform */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var vscode_vscode_vs_base_common_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode/vscode/vs/base/common/types */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var vscode_vscode_vs_base_common_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/base/common/path */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");






function resolveAmdNodeModulePath(nodeModuleName, pathInsideNodeModule) {
    (0,vscode_vscode_vs_base_common_types__WEBPACK_IMPORTED_MODULE_3__.assertType)(vscode_vscode_vs_base_common_amd__WEBPACK_IMPORTED_MODULE_0__.isESM);
    const product = globalThis._VSCODE_PRODUCT_JSON;
    Boolean((product ?? globalThis.vscode?.context?.configuration()?.product)?.commit);
    const nodeModulePath = `${nodeModuleName}/${pathInsideNodeModule}`;
    const actualNodeModulesPath = (vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_1__.nodeModulesPath);
    const resourcePath = `${actualNodeModulesPath}/${nodeModulePath}`;
    return ( ( vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_1__.FileAccess.asBrowserUri(resourcePath)).toString(true));
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/arrayOperation.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/arrayOperation.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrayEdit: () => (/* binding */ ArrayEdit),
/* harmony export */   CombinedIndexTransformer: () => (/* binding */ CombinedIndexTransformer),
/* harmony export */   MonotonousIndexTransformer: () => (/* binding */ MonotonousIndexTransformer),
/* harmony export */   SingleArrayEdit: () => (/* binding */ SingleArrayEdit)
/* harmony export */ });
/* harmony import */ var vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/vscode/vs/base/common/arrays */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");


class ArrayEdit {
    constructor(
    edits) {
        this.edits = edits.slice().sort((0,vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_0__.compareBy)(c => c.offset, vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_0__.numberComparator));
    }
    applyToArray(array) {
        for (let i = this.edits.length - 1; i >= 0; i--) {
            const c = this.edits[i];
            array.splice(c.offset, c.length, ...( new Array(c.newLength)));
        }
    }
}
class SingleArrayEdit {
    constructor(offset, length, newLength) {
        this.offset = offset;
        this.length = length;
        this.newLength = newLength;
    }
    toString() {
        return `[${this.offset}, +${this.length}) -> +${this.newLength}}`;
    }
}
class MonotonousIndexTransformer {
    static fromMany(transformations) {
        const transformers = ( transformations.map(t => ( new MonotonousIndexTransformer(t))));
        return ( new CombinedIndexTransformer(transformers));
    }
    constructor(transformation) {
        this.transformation = transformation;
        this.idx = 0;
        this.offset = 0;
    }
    transform(index) {
        let nextChange = this.transformation.edits[this.idx];
        while (nextChange && nextChange.offset + nextChange.length <= index) {
            this.offset += nextChange.newLength - nextChange.length;
            this.idx++;
            nextChange = this.transformation.edits[this.idx];
        }
        if (nextChange && nextChange.offset <= index) {
            return undefined;
        }
        return index + this.offset;
    }
}
class CombinedIndexTransformer {
    constructor(transformers) {
        this.transformers = transformers;
    }
    transform(index) {
        for (const transformer of this.transformers) {
            const result = transformer.transform(index);
            if (result === undefined) {
                return undefined;
            }
            index = result;
        }
        return index;
    }
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextMateWorkerTokenizerController: () => (/* binding */ TextMateWorkerTokenizerController)
/* harmony export */ });
/* harmony import */ var vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/vscode/vs/base/common/lifecycle */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/base/common/arrays */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var vscode_vscode_vs_base_common_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/base/common/event */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_autorun__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/autorun */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/autorun.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_derived__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/derived */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/derived.js");
/* harmony import */ var vscode_vscode_vs_base_common_cancellation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vscode/vscode/vs/base/common/cancellation */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/utils */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/utils.js");
/* harmony import */ var vscode_vscode_vs_editor_common_core_eolCounter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/core/eolCounter */ "./node_modules/vscode/vscode/src/vs/editor/common/core/eolCounter.js");
/* harmony import */ var vscode_vscode_vs_editor_common_core_lineRange__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/core/lineRange */ "./node_modules/vscode/vscode/src/vs/editor/common/core/lineRange.js");
/* harmony import */ var vscode_vscode_vs_editor_common_core_range__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/core/range */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var vscode_vscode_vs_editor_common_model_textModelTokens__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/model/textModelTokens */ "./node_modules/vscode/vscode/src/vs/editor/common/model/textModelTokens.js");
/* harmony import */ var vscode_vscode_vs_editor_common_tokens_contiguousMultilineTokensBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/tokens/contiguousMultilineTokensBuilder */ "./node_modules/vscode/vscode/src/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js");
/* harmony import */ var vscode_vscode_vs_platform_observable_common_platformObservableUtils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! vscode/vscode/vs/platform/observable/common/platformObservableUtils */ "./node_modules/vscode/vscode/src/vs/platform/observable/common/platformObservableUtils.js");
/* harmony import */ var _arrayOperation_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../arrayOperation.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/arrayOperation.js");















class TextMateWorkerTokenizerController extends vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__.Disposable {
    static { this._id = 0; }
    constructor(_model, _worker, _languageIdCodec, _backgroundTokenizationStore, _configurationService, _maxTokenizationLineLength) {
        super();
        this._model = _model;
        this._worker = _worker;
        this._languageIdCodec = _languageIdCodec;
        this._backgroundTokenizationStore = _backgroundTokenizationStore;
        this._configurationService = _configurationService;
        this._maxTokenizationLineLength = _maxTokenizationLineLength;
        this.controllerId = TextMateWorkerTokenizerController._id++;
        this._pendingChanges = [];
        this._states = ( new vscode_vscode_vs_editor_common_model_textModelTokens__WEBPACK_IMPORTED_MODULE_10__.TokenizationStateStore());
        this._loggingEnabled = (0,vscode_vscode_vs_platform_observable_common_platformObservableUtils__WEBPACK_IMPORTED_MODULE_12__.observableConfigValue)('editor.experimental.asyncTokenizationLogging', false, this._configurationService);
        this._register((0,vscode_vscode_vs_base_common_observableInternal_utils__WEBPACK_IMPORTED_MODULE_6__.keepObserved)(this._loggingEnabled));
        this._register(this._model.onDidChangeContent((e) => {
            if (this._shouldLog) {
                console.log('model change', {
                    fileName: this._model.uri.fsPath.split('\\').pop(),
                    changes: changesToString(e.changes),
                });
            }
            this._worker.$acceptModelChanged(this.controllerId, e);
            this._pendingChanges.push(e);
        }));
        this._register(this._model.onDidChangeLanguage((e) => {
            const languageId = this._model.getLanguageId();
            const encodedLanguageId = this._languageIdCodec.encodeLanguageId(languageId);
            this._worker.$acceptModelLanguageChanged(this.controllerId, languageId, encodedLanguageId);
        }));
        const languageId = this._model.getLanguageId();
        const encodedLanguageId = this._languageIdCodec.encodeLanguageId(languageId);
        this._worker.$acceptNewModel({
            uri: this._model.uri,
            versionId: this._model.getVersionId(),
            lines: this._model.getLinesContent(),
            EOL: this._model.getEOL(),
            languageId,
            encodedLanguageId,
            maxTokenizationLineLength: this._maxTokenizationLineLength.get(),
            controllerId: this.controllerId,
        });
        this._register((0,vscode_vscode_vs_base_common_observableInternal_autorun__WEBPACK_IMPORTED_MODULE_3__.autorun)(reader => {
            const maxTokenizationLineLength = this._maxTokenizationLineLength.read(reader);
            this._worker.$acceptMaxTokenizationLineLength(this.controllerId, maxTokenizationLineLength);
        }));
    }
    dispose() {
        super.dispose();
        this._worker.$acceptRemovedModel(this.controllerId);
    }
    requestTokens(startLineNumber, endLineNumberExclusive) {
        this._worker.$retokenize(this.controllerId, startLineNumber, endLineNumberExclusive);
    }
    async setTokensAndStates(controllerId, versionId, rawTokens, stateDeltas) {
        if (this.controllerId !== controllerId) {
            return;
        }
        let tokens = vscode_vscode_vs_editor_common_tokens_contiguousMultilineTokensBuilder__WEBPACK_IMPORTED_MODULE_11__.ContiguousMultilineTokensBuilder.deserialize(( new Uint8Array(rawTokens)));
        if (this._shouldLog) {
            console.log('received background tokenization result', {
                fileName: this._model.uri.fsPath.split('\\').pop(),
                updatedTokenLines: ( tokens.map((t) => t.getLineRange())).join(' & '),
                updatedStateLines: ( stateDeltas.map((s) => ( ( new vscode_vscode_vs_editor_common_core_lineRange__WEBPACK_IMPORTED_MODULE_8__.LineRange(s.startLineNumber, s.startLineNumber + s.stateDeltas.length)).toString()))).join(' & '),
            });
        }
        if (this._shouldLog) {
            const changes = ( ( this._pendingChanges.filter(c => c.versionId <= versionId).map(c => c.changes)).map(c => changesToString(c))).join(' then ');
            console.log('Applying changes to local states', changes);
        }
        while (this._pendingChanges.length > 0 &&
            this._pendingChanges[0].versionId <= versionId) {
            const change = this._pendingChanges.shift();
            this._states.acceptChanges(change.changes);
        }
        if (this._pendingChanges.length > 0) {
            if (this._shouldLog) {
                const changes = ( ( this._pendingChanges.map(c => c.changes)).map(c => changesToString(c))).join(' then ');
                console.log('Considering non-processed changes', changes);
            }
            const curToFutureTransformerTokens = _arrayOperation_js__WEBPACK_IMPORTED_MODULE_13__.MonotonousIndexTransformer.fromMany(( this._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))));
            const b = ( new vscode_vscode_vs_editor_common_tokens_contiguousMultilineTokensBuilder__WEBPACK_IMPORTED_MODULE_11__.ContiguousMultilineTokensBuilder());
            for (const t of tokens) {
                for (let i = t.startLineNumber; i <= t.endLineNumber; i++) {
                    const result = curToFutureTransformerTokens.transform(i - 1);
                    if (result !== undefined) {
                        b.add(i, t.getLineTokens(i));
                    }
                }
            }
            tokens = b.finalize();
            for (const change of this._pendingChanges) {
                for (const innerChanges of change.changes) {
                    for (let j = 0; j < tokens.length; j++) {
                        tokens[j].applyEdit(innerChanges.range, innerChanges.text);
                    }
                }
            }
        }
        const curToFutureTransformerStates = _arrayOperation_js__WEBPACK_IMPORTED_MODULE_13__.MonotonousIndexTransformer.fromMany(( this._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))));
        if (!this._applyStateStackDiffFn || !this._initialState) {
            const { applyStateStackDiff, INITIAL } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_vscode-textmate_release_main_js").then(__webpack_require__.t.bind(__webpack_require__, /*! vscode-textmate */ "./node_modules/vscode-textmate/release/main.js", 19)).then(module => module.default ?? module);
            this._applyStateStackDiffFn = applyStateStackDiff;
            this._initialState = INITIAL;
        }
        for (const d of stateDeltas) {
            let prevState = d.startLineNumber <= 1 ? this._initialState : this._states.getEndState(d.startLineNumber - 1);
            for (let i = 0; i < d.stateDeltas.length; i++) {
                const delta = d.stateDeltas[i];
                let state;
                if (delta) {
                    state = this._applyStateStackDiffFn(prevState, delta);
                    this._states.setEndState(d.startLineNumber + i, state);
                }
                else {
                    state = this._states.getEndState(d.startLineNumber + i);
                }
                const offset = curToFutureTransformerStates.transform(d.startLineNumber + i - 1);
                if (offset !== undefined) {
                    this._backgroundTokenizationStore.setEndState(offset + 1, state);
                }
                if (d.startLineNumber + i >= this._model.getLineCount() - 1) {
                    this._backgroundTokenizationStore.backgroundTokenizationFinished();
                }
                prevState = state;
            }
        }
        this._backgroundTokenizationStore.setTokens(tokens);
    }
    get _shouldLog() { return this._loggingEnabled.get(); }
}
function fullLineArrayEditFromModelContentChange(c) {
    return ( new _arrayOperation_js__WEBPACK_IMPORTED_MODULE_13__.ArrayEdit(( c.map((c) => ( new _arrayOperation_js__WEBPACK_IMPORTED_MODULE_13__.SingleArrayEdit(
        c.range.startLineNumber - 1,
        c.range.endLineNumber - c.range.startLineNumber + 1,
        (0,vscode_vscode_vs_editor_common_core_eolCounter__WEBPACK_IMPORTED_MODULE_7__.countEOL)(c.text)[0] + 1
    ))))));
}
function changesToString(changes) {
    return ( changes.map(c => ( vscode_vscode_vs_editor_common_core_range__WEBPACK_IMPORTED_MODULE_9__.Range.lift(c.range).toString()) + ' => ' + c.text)).join(' & ');
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ThreadedBackgroundTokenizerFactory: () => (/* binding */ ThreadedBackgroundTokenizerFactory)
/* harmony export */ });
/* harmony import */ var vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/base/common/lifecycle */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/base/common/network */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var vscode_vscode_vs_base_common_platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode/vscode/vs/base/common/platform */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var vscode_vscode_vs_base_common_uri__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/base/common/uri */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var vscode_vscode_vs_editor_common_languages_language__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/languages/language */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/language.js");
/* harmony import */ var vscode_vscode_vs_platform_configuration_common_configuration_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vscode/vscode/vs/platform/configuration/common/configuration.service */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var vscode_vscode_vs_platform_environment_common_environment_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vscode/vscode/vs/platform/environment/common/environment.service */ "./node_modules/vscode/vscode/src/vs/platform/environment/common/environment.service.js");
/* harmony import */ var vscode_vscode_vs_platform_extensionResourceLoader_common_extensionResourceLoader_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service */ "./node_modules/vscode/vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service.js");
/* harmony import */ var vscode_vscode_vs_platform_notification_common_notification_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vscode/vscode/vs/platform/notification/common/notification.service */ "./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.service.js");
/* harmony import */ var vscode_vscode_vs_platform_telemetry_common_telemetry_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! vscode/vscode/vs/platform/telemetry/common/telemetry.service */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.service.js");
/* harmony import */ var _worker_textMateWorkerHost_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./worker/textMateWorkerHost.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerHost.js");
/* harmony import */ var _textMateWorkerTokenizerController_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./textMateWorkerTokenizerController.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.js");
/* harmony import */ var vscode_vscode_vs_base_browser_defaultWorkerFactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! vscode/vscode/vs/base/browser/defaultWorkerFactory */ "./node_modules/vscode/vscode/src/vs/base/browser/defaultWorkerFactory.js");















var ThreadedBackgroundTokenizerFactory_1;
let ThreadedBackgroundTokenizerFactory = class ThreadedBackgroundTokenizerFactory {
    static { ThreadedBackgroundTokenizerFactory_1 = this; }
    static { this._reportedMismatchingTokens = false; }
    constructor(_reportTokenizationTime, _shouldTokenizeAsync, _extensionResourceLoaderService, _configurationService, _languageService, _environmentService, _notificationService, _telemetryService) {
        this._reportTokenizationTime = _reportTokenizationTime;
        this._shouldTokenizeAsync = _shouldTokenizeAsync;
        this._extensionResourceLoaderService = _extensionResourceLoaderService;
        this._configurationService = _configurationService;
        this._languageService = _languageService;
        this._environmentService = _environmentService;
        this._notificationService = _notificationService;
        this._telemetryService = _telemetryService;
        this._workerProxyPromise = null;
        this._worker = null;
        this._workerProxy = null;
        this._workerTokenizerControllers = ( new Map());
        this._currentTheme = null;
        this._currentTokenColorMap = null;
        this._grammarDefinitions = [];
    }
    dispose() {
        this._disposeWorker();
    }
    createBackgroundTokenizer(textModel, tokenStore, maxTokenizationLineLength) {
        if (!this._shouldTokenizeAsync() || textModel.isTooLargeForSyncing()) {
            return undefined;
        }
        const store = ( new vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        const controllerContainer = this._getWorkerProxy().then((workerProxy) => {
            if (store.isDisposed || !workerProxy) {
                return undefined;
            }
            const controllerContainer = { controller: undefined, worker: this._worker };
            store.add(keepAliveWhenAttached(textModel, () => {
                const controller = ( new _textMateWorkerTokenizerController_js__WEBPACK_IMPORTED_MODULE_12__.TextMateWorkerTokenizerController(
                    textModel,
                    workerProxy,
                    this._languageService.languageIdCodec,
                    tokenStore,
                    this._configurationService,
                    maxTokenizationLineLength
                ));
                controllerContainer.controller = controller;
                this._workerTokenizerControllers.set(controller.controllerId, controller);
                return (0,vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
                    controllerContainer.controller = undefined;
                    this._workerTokenizerControllers.delete(controller.controllerId);
                    controller.dispose();
                });
            }));
            return controllerContainer;
        });
        return {
            dispose() {
                store.dispose();
            },
            requestTokens: async (startLineNumber, endLineNumberExclusive) => {
                const container = await controllerContainer;
                if (container?.controller && container.worker === this._worker) {
                    container.controller.requestTokens(startLineNumber, endLineNumberExclusive);
                }
            },
            reportMismatchingTokens: (lineNumber) => {
                if (ThreadedBackgroundTokenizerFactory_1._reportedMismatchingTokens) {
                    return;
                }
                ThreadedBackgroundTokenizerFactory_1._reportedMismatchingTokens = true;
                this._notificationService.error({
                    message: 'Async Tokenization Token Mismatch in line ' + lineNumber,
                    name: 'Async Tokenization Token Mismatch',
                });
                this._telemetryService.publicLog2('asyncTokenizationMismatchingTokens', {});
            },
        };
    }
    setGrammarDefinitions(grammarDefinitions) {
        this._grammarDefinitions = grammarDefinitions;
        this._disposeWorker();
    }
    acceptTheme(theme, colorMap) {
        this._currentTheme = theme;
        this._currentTokenColorMap = colorMap;
        if (this._currentTheme && this._currentTokenColorMap && this._workerProxy) {
            this._workerProxy.$acceptTheme(this._currentTheme, this._currentTokenColorMap);
        }
    }
    _getWorkerProxy() {
        if (!this._workerProxyPromise) {
            this._workerProxyPromise = this._createWorkerProxy();
        }
        return this._workerProxyPromise;
    }
    async _createWorkerProxy() {
        const onigurumaModuleLocation = `${vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_2__.nodeModulesPath}/vscode-oniguruma`;
        const onigurumaLocation = onigurumaModuleLocation;
        const onigurumaWASM = `${onigurumaLocation}/release/onig.wasm`;
        const createData = {
            grammarDefinitions: this._grammarDefinitions,
            onigurumaWASMUri: ( ( vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_2__.FileAccess.asBrowserUri(onigurumaWASM)).toString(true)),
        };
        const worker = this._worker = (0,vscode_vscode_vs_base_browser_defaultWorkerFactory__WEBPACK_IMPORTED_MODULE_13__.createWebWorker)('vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker', 'TextMateWorker');
        _worker_textMateWorkerHost_js__WEBPACK_IMPORTED_MODULE_11__.TextMateWorkerHost.setChannel(worker, {
            $readFile: async (_resource) => {
                const resource = vscode_vscode_vs_base_common_uri__WEBPACK_IMPORTED_MODULE_4__.URI.revive(_resource);
                return this._extensionResourceLoaderService.readExtensionResource(resource);
            },
            $setTokensAndStates: async (controllerId, versionId, tokens, lineEndStateDeltas) => {
                const controller = this._workerTokenizerControllers.get(controllerId);
                if (controller) {
                    controller.setTokensAndStates(controllerId, versionId, tokens, lineEndStateDeltas);
                }
            },
            $reportTokenizationTime: (timeMs, languageId, sourceExtensionId, lineLength, isRandomSample) => {
                this._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);
            }
        });
        await worker.proxy.$init(createData);
        if (this._worker !== worker) {
            return null;
        }
        this._workerProxy = worker.proxy;
        if (this._currentTheme && this._currentTokenColorMap) {
            this._workerProxy.$acceptTheme(this._currentTheme, this._currentTokenColorMap);
        }
        return worker.proxy;
    }
    _disposeWorker() {
        for (const controller of ( this._workerTokenizerControllers.values())) {
            controller.dispose();
        }
        this._workerTokenizerControllers.clear();
        if (this._worker) {
            this._worker.dispose();
            this._worker = null;
        }
        this._workerProxy = null;
        this._workerProxyPromise = null;
    }
};
ThreadedBackgroundTokenizerFactory = ThreadedBackgroundTokenizerFactory_1 = ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, vscode_vscode_vs_platform_extensionResourceLoader_common_extensionResourceLoader_service__WEBPACK_IMPORTED_MODULE_8__.IExtensionResourceLoaderService)),
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, vscode_vscode_vs_platform_configuration_common_configuration_service__WEBPACK_IMPORTED_MODULE_6__.IConfigurationService)),
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, vscode_vscode_vs_editor_common_languages_language__WEBPACK_IMPORTED_MODULE_5__.ILanguageService)),
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, vscode_vscode_vs_platform_environment_common_environment_service__WEBPACK_IMPORTED_MODULE_7__.IEnvironmentService)),
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, vscode_vscode_vs_platform_notification_common_notification_service__WEBPACK_IMPORTED_MODULE_9__.INotificationService)),
    ( (0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, vscode_vscode_vs_platform_telemetry_common_telemetry_service__WEBPACK_IMPORTED_MODULE_10__.ITelemetryService))
], ThreadedBackgroundTokenizerFactory));
function keepAliveWhenAttached(textModel, factory) {
    const disposableStore = ( new vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
    const subStore = disposableStore.add(( new vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.DisposableStore()));
    function checkAttached() {
        if (textModel.isAttachedToEditor()) {
            subStore.add(factory());
        }
        else {
            subStore.clear();
        }
    }
    checkAttached();
    disposableStore.add(textModel.onDidChangeAttached(() => {
        checkAttached();
    }));
    return disposableStore;
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextMateTokenizationFeature: () => (/* binding */ TextMateTokenizationFeature)
/* harmony export */ });
/* harmony import */ var vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _amdX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../amdX.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/amdX.js");
/* harmony import */ var vscode_vscode_vs_base_browser_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/base/browser/dom */ "./node_modules/vscode/vscode/src/vs/base/browser/dom.js");
/* harmony import */ var vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode/vscode/vs/base/common/arrays */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var vscode_vscode_vs_base_common_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/base/common/color */ "./node_modules/vscode/vscode/src/vs/base/common/color.js");
/* harmony import */ var vscode_vscode_vs_base_common_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vscode/vscode/vs/base/common/errors */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vscode/vscode/vs/base/common/lifecycle */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vscode/vscode/vs/base/common/network */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var vscode_vscode_vs_base_common_event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vscode/vscode/vs/base/common/event */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_autorun__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/autorun */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/autorun.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_derived__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/derived */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/derived.js");
/* harmony import */ var vscode_vscode_vs_base_common_cancellation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! vscode/vscode/vs/base/common/cancellation */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var vscode_vscode_vs_base_common_observableInternal_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! vscode/vscode/vs/base/common/observableInternal/utils */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/utils.js");
/* harmony import */ var vscode_vscode_vs_base_common_platform__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! vscode/vscode/vs/base/common/platform */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var vscode_vscode_vs_base_common_resources__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! vscode/vscode/vs/base/common/resources */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var vscode_vscode_vs_base_common_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! vscode/vscode/vs/base/common/types */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var vscode_vscode_vs_editor_common_languages__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/languages */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var vscode_vscode_vs_editor_common_languages_language__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/languages/language */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/language.js");
/* harmony import */ var vscode_vscode_vs_editor_common_languages_supports_tokenization__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! vscode/vscode/vs/editor/common/languages/supports/tokenization */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/supports/tokenization.js");
/* harmony import */ var vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! vscode/vscode/vs/nls */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var vscode_vscode_vs_platform_configuration_common_configuration_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! vscode/vscode/vs/platform/configuration/common/configuration.service */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var vscode_vscode_vs_platform_extensionResourceLoader_common_extensionResourceLoader_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service */ "./node_modules/vscode/vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service.js");
/* harmony import */ var vscode_vscode_vs_platform_instantiation_common_instantiation__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! vscode/vscode/vs/platform/instantiation/common/instantiation */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var vscode_vscode_vs_platform_log_common_log_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! vscode/vscode/vs/platform/log/common/log.service */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var vscode_vscode_vs_platform_notification_common_notification_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! vscode/vscode/vs/platform/notification/common/notification.service */ "./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.service.js");
/* harmony import */ var vscode_vscode_vs_platform_progress_common_progress_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! vscode/vscode/vs/platform/progress/common/progress.service */ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.service.js");
/* harmony import */ var vscode_vscode_vs_platform_telemetry_common_telemetry_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! vscode/vscode/vs/platform/telemetry/common/telemetry.service */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.service.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_environment_common_environmentService_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/environment/common/environmentService.service */ "./node_modules/vscode/vscode/src/vs/workbench/services/environment/common/environmentService.service.js");
/* harmony import */ var _tokenizationSupport_textMateTokenizationSupport_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./tokenizationSupport/textMateTokenizationSupport.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport.js");
/* harmony import */ var _tokenizationSupport_tokenizationSupportWithLineLimit_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./tokenizationSupport/tokenizationSupportWithLineLimit.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit.js");
/* harmony import */ var _backgroundTokenization_threadedBackgroundTokenizerFactory_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./backgroundTokenization/threadedBackgroundTokenizerFactory.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.js");
/* harmony import */ var _common_TMGrammarFactory_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../common/TMGrammarFactory.js */ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/common/TMGrammarFactory.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/textMate/common/TMGrammars */ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/common/TMGrammars.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_themes_common_workbenchThemeService_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/themes/common/workbenchThemeService.service */ "./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/workbenchThemeService.service.js");



































var TextMateTokenizationFeature_1;
let TextMateTokenizationFeature = class TextMateTokenizationFeature extends vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    static { TextMateTokenizationFeature_1 = this; }
    static { this.reportTokenizationTimeCounter = { sync: 0, async: 0 }; }
    constructor(_languageService, _themeService, _extensionResourceLoaderService, _notificationService, _logService, _configurationService, _progressService, _environmentService, _instantiationService, _telemetryService) {
        super();
        this._languageService = _languageService;
        this._themeService = _themeService;
        this._extensionResourceLoaderService = _extensionResourceLoaderService;
        this._notificationService = _notificationService;
        this._logService = _logService;
        this._configurationService = _configurationService;
        this._progressService = _progressService;
        this._environmentService = _environmentService;
        this._instantiationService = _instantiationService;
        this._telemetryService = _telemetryService;
        this._createdModes = [];
        this._encounteredLanguages = [];
        this._debugMode = false;
        this._debugModePrintFunc = () => { };
        this._grammarDefinitions = null;
        this._grammarFactory = null;
        this._tokenizersRegistrations = ( (new vscode_vscode_vs_base_common_lifecycle__WEBPACK_IMPORTED_MODULE_6__.DisposableStore()));
        this._currentTheme = null;
        this._currentTokenColorMap = null;
        this._threadedBackgroundTokenizerFactory = this._instantiationService.createInstance(_backgroundTokenization_threadedBackgroundTokenizerFactory_js__WEBPACK_IMPORTED_MODULE_30__.ThreadedBackgroundTokenizerFactory, (timeMs, languageId, sourceExtensionId, lineLength, isRandomSample) => this._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, true, isRandomSample), () => this.getAsyncTokenizationEnabled());
        this._vscodeOniguruma = null;
        this._styleElement = (0,vscode_vscode_vs_base_browser_dom__WEBPACK_IMPORTED_MODULE_2__.createStyleSheet)();
        this._styleElement.className = 'vscode-tokens-styles';
        vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.setHandler((extensions) => this._handleGrammarsExtPoint(extensions));
        this._updateTheme(this._themeService.getColorTheme(), true);
        this._register(this._themeService.onDidColorThemeChange(() => {
            this._updateTheme(this._themeService.getColorTheme(), false);
        }));
        this._register(this._languageService.onDidRequestRichLanguageFeatures((languageId) => {
            this._createdModes.push(languageId);
        }));
    }
    getAsyncTokenizationEnabled() {
        return !!this._configurationService.getValue('editor.experimental.asyncTokenization');
    }
    getAsyncTokenizationVerification() {
        return !!this._configurationService.getValue('editor.experimental.asyncTokenizationVerification');
    }
    _handleGrammarsExtPoint(extensions) {
        this._grammarDefinitions = null;
        if (this._grammarFactory) {
            this._grammarFactory.dispose();
            this._grammarFactory = null;
        }
        this._tokenizersRegistrations.clear();
        this._grammarDefinitions = [];
        for (const extension of extensions) {
            const grammars = extension.value;
            for (const grammar of grammars) {
                const validatedGrammar = this._validateGrammarDefinition(extension, grammar);
                if (validatedGrammar) {
                    this._grammarDefinitions.push(validatedGrammar);
                    if (validatedGrammar.language) {
                        const lazyTokenizationSupport = ( (new vscode_vscode_vs_editor_common_languages__WEBPACK_IMPORTED_MODULE_16__.LazyTokenizationSupport(() => this._createTokenizationSupport(validatedGrammar.language))));
                        this._tokenizersRegistrations.add(lazyTokenizationSupport);
                        this._tokenizersRegistrations.add(vscode_vscode_vs_editor_common_languages__WEBPACK_IMPORTED_MODULE_16__.TokenizationRegistry.registerFactory(validatedGrammar.language, lazyTokenizationSupport));
                    }
                }
            }
        }
        this._threadedBackgroundTokenizerFactory.setGrammarDefinitions(this._grammarDefinitions);
        for (const createdMode of this._createdModes) {
            vscode_vscode_vs_editor_common_languages__WEBPACK_IMPORTED_MODULE_16__.TokenizationRegistry.getOrCreate(createdMode);
        }
    }
    _validateGrammarDefinition(extension, grammar) {
        if (!validateGrammarExtensionPoint(extension.description.extensionLocation, grammar, extension.collector, this._languageService)) {
            return null;
        }
        const grammarLocation = (0,vscode_vscode_vs_base_common_resources__WEBPACK_IMPORTED_MODULE_14__.joinPath)(extension.description.extensionLocation, grammar.path);
        const embeddedLanguages = Object.create(null);
        if (grammar.embeddedLanguages) {
            const scopes = ( (Object.keys(grammar.embeddedLanguages)));
            for (let i = 0, len = scopes.length; i < len; i++) {
                const scope = scopes[i];
                const language = grammar.embeddedLanguages[scope];
                if (typeof language !== 'string') {
                    continue;
                }
                if (this._languageService.isRegisteredLanguageId(language)) {
                    embeddedLanguages[scope] = this._languageService.languageIdCodec.encodeLanguageId(language);
                }
            }
        }
        const tokenTypes = Object.create(null);
        if (grammar.tokenTypes) {
            const scopes = ( (Object.keys(grammar.tokenTypes)));
            for (const scope of scopes) {
                const tokenType = grammar.tokenTypes[scope];
                switch (tokenType) {
                    case 'string':
                        tokenTypes[scope] = 2 ;
                        break;
                    case 'other':
                        tokenTypes[scope] = 0 ;
                        break;
                    case 'comment':
                        tokenTypes[scope] = 1 ;
                        break;
                }
            }
        }
        const validLanguageId = grammar.language && this._languageService.isRegisteredLanguageId(grammar.language) ? grammar.language : undefined;
        function asStringArray(array, defaultValue) {
            if (!Array.isArray(array)) {
                return defaultValue;
            }
            if (!array.every(e => typeof e === 'string')) {
                return defaultValue;
            }
            return array;
        }
        return {
            location: grammarLocation,
            language: validLanguageId,
            scopeName: grammar.scopeName,
            embeddedLanguages: embeddedLanguages,
            tokenTypes: tokenTypes,
            injectTo: grammar.injectTo,
            balancedBracketSelectors: asStringArray(grammar.balancedBracketScopes, ['*']),
            unbalancedBracketSelectors: asStringArray(grammar.unbalancedBracketScopes, []),
            sourceExtensionId: extension.description.id,
        };
    }
    startDebugMode(printFn, onStop) {
        if (this._debugMode) {
            this._notificationService.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(3082, "Already Logging.")));
            return;
        }
        this._debugModePrintFunc = printFn;
        this._debugMode = true;
        if (this._debugMode) {
            this._progressService.withProgress({
                location: 15 ,
                buttons: [( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(3083, "Stop"))]
            }, (progress) => {
                progress.report({
                    message: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(3084, "Preparing to log TM Grammar parsing. Press Stop when finished."))
                });
                return this._getVSCodeOniguruma().then((vscodeOniguruma) => {
                    vscodeOniguruma.setDefaultDebugCall(true);
                    progress.report({
                        message: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(3085, "Now logging TM Grammar parsing. Press Stop when finished."))
                    });
                    return (
                         (new Promise((resolve, reject) => { }))
                    );
                });
            }, (choice) => {
                this._getVSCodeOniguruma().then((vscodeOniguruma) => {
                    this._debugModePrintFunc = () => { };
                    this._debugMode = false;
                    vscodeOniguruma.setDefaultDebugCall(false);
                    onStop();
                });
            });
        }
    }
    _canCreateGrammarFactory() {
        return !!this._grammarDefinitions;
    }
    async _getOrCreateGrammarFactory() {
        if (this._grammarFactory) {
            return this._grammarFactory;
        }
        const [vscodeTextmate, vscodeOniguruma] = await Promise.all([__webpack_require__.e(/*! import() */ "vendors-node_modules_vscode-textmate_release_main_js").then(__webpack_require__.t.bind(__webpack_require__, /*! vscode-textmate */ "./node_modules/vscode-textmate/release/main.js", 19)).then(module => module.default ?? module), this._getVSCodeOniguruma()]);
        const onigLib = Promise.resolve({
            createOnigScanner: (sources) => vscodeOniguruma.createOnigScanner(sources),
            createOnigString: (str) => vscodeOniguruma.createOnigString(str)
        });
        if (this._grammarFactory) {
            return this._grammarFactory;
        }
        this._grammarFactory = ( (new _common_TMGrammarFactory_js__WEBPACK_IMPORTED_MODULE_31__.TMGrammarFactory({
            logTrace: (msg) => this._logService.trace(msg),
            logError: (msg, err) => this._logService.error(msg, err),
            readFile: (resource) => this._extensionResourceLoaderService.readExtensionResource(resource)
        }, this._grammarDefinitions || [], vscodeTextmate, onigLib)));
        this._updateTheme(this._themeService.getColorTheme(), true);
        return this._grammarFactory;
    }
    async _createTokenizationSupport(languageId) {
        if (!this._languageService.isRegisteredLanguageId(languageId)) {
            return null;
        }
        if (!this._canCreateGrammarFactory()) {
            return null;
        }
        try {
            const grammarFactory = await this._getOrCreateGrammarFactory();
            if (!( (grammarFactory.has(languageId)))) {
                return null;
            }
            const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);
            const r = await grammarFactory.createGrammar(languageId, encodedLanguageId);
            if (!r.grammar) {
                return null;
            }
            const maxTokenizationLineLength = observableConfigValue('editor.maxTokenizationLineLength', languageId, -1, this._configurationService);
            const tokenization = ( (new _tokenizationSupport_textMateTokenizationSupport_js__WEBPACK_IMPORTED_MODULE_28__.TextMateTokenizationSupport(
                r.grammar,
                r.initialState,
                r.containsEmbeddedLanguages,
                (textModel, tokenStore) => this._threadedBackgroundTokenizerFactory.createBackgroundTokenizer(textModel, tokenStore, maxTokenizationLineLength),
                () => this.getAsyncTokenizationVerification(),
                (timeMs, lineLength, isRandomSample) => {
                    this._reportTokenizationTime(timeMs, languageId, r.sourceExtensionId, lineLength, false, isRandomSample);
                },
                true
            )));
            const disposable = tokenization.onDidEncounterLanguage((encodedLanguageId) => {
                if (!this._encounteredLanguages[encodedLanguageId]) {
                    const languageId = this._languageService.languageIdCodec.decodeLanguageId(encodedLanguageId);
                    this._encounteredLanguages[encodedLanguageId] = true;
                    this._languageService.requestBasicLanguageFeatures(languageId);
                }
            });
            return (
                 (new _tokenizationSupport_tokenizationSupportWithLineLimit_js__WEBPACK_IMPORTED_MODULE_29__.TokenizationSupportWithLineLimit(encodedLanguageId, tokenization, disposable, maxTokenizationLineLength))
            );
        }
        catch (err) {
            if (err.message && err.message === _common_TMGrammarFactory_js__WEBPACK_IMPORTED_MODULE_31__.missingTMGrammarErrorMessage) {
                return null;
            }
            (0,vscode_vscode_vs_base_common_errors__WEBPACK_IMPORTED_MODULE_5__.onUnexpectedError)(err);
            return null;
        }
    }
    _updateTheme(colorTheme, forceUpdate) {
        if (!forceUpdate && this._currentTheme && this._currentTokenColorMap && equalsTokenRules(this._currentTheme.settings, colorTheme.tokenColors)
            && (0,vscode_vscode_vs_base_common_arrays__WEBPACK_IMPORTED_MODULE_3__.equals)(this._currentTokenColorMap, colorTheme.tokenColorMap)) {
            return;
        }
        this._currentTheme = { name: colorTheme.label, settings: colorTheme.tokenColors };
        this._currentTokenColorMap = colorTheme.tokenColorMap;
        this._grammarFactory?.setTheme(this._currentTheme, this._currentTokenColorMap);
        const colorMap = toColorMap(this._currentTokenColorMap);
        const cssRules = (0,vscode_vscode_vs_editor_common_languages_supports_tokenization__WEBPACK_IMPORTED_MODULE_18__.generateTokensCSSForColorMap)(colorMap);
        this._styleElement.textContent = cssRules;
        vscode_vscode_vs_editor_common_languages__WEBPACK_IMPORTED_MODULE_16__.TokenizationRegistry.setColorMap(colorMap);
        if (this._currentTheme && this._currentTokenColorMap) {
            this._threadedBackgroundTokenizerFactory.acceptTheme(this._currentTheme, this._currentTokenColorMap);
        }
    }
    async createTokenizer(languageId) {
        if (!this._languageService.isRegisteredLanguageId(languageId)) {
            return null;
        }
        const grammarFactory = await this._getOrCreateGrammarFactory();
        if (!( (grammarFactory.has(languageId)))) {
            return null;
        }
        const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);
        const { grammar } = await grammarFactory.createGrammar(languageId, encodedLanguageId);
        return grammar;
    }
    _getVSCodeOniguruma() {
        if (!this._vscodeOniguruma) {
            this._vscodeOniguruma = (async () => {
                const [vscodeOniguruma, wasm] = await Promise.all([__webpack_require__.e(/*! import() */ "vendors-node_modules_vscode-oniguruma_release_main_js").then(__webpack_require__.t.bind(__webpack_require__, /*! vscode-oniguruma */ "./node_modules/vscode-oniguruma/release/main.js", 19)).then(module => module.default ?? module), this._loadVSCodeOnigurumaWASM()]);
                await vscodeOniguruma.loadWASM({
                    data: wasm,
                    print: (str) => {
                        this._debugModePrintFunc(str);
                    }
                });
                return vscodeOniguruma;
            })();
        }
        return this._vscodeOniguruma;
    }
    async _loadVSCodeOnigurumaWASM() {
        if (vscode_vscode_vs_base_common_platform__WEBPACK_IMPORTED_MODULE_13__.isWeb) {
            const response = await fetch((0,_amdX_js__WEBPACK_IMPORTED_MODULE_1__.resolveAmdNodeModulePath)('vscode-oniguruma', 'release/onig.wasm')
                );
            return await response.arrayBuffer();
        }
        else {
            const response = await fetch(( (( (vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_7__.FileAccess.asBrowserUri(`${vscode_vscode_vs_base_common_network__WEBPACK_IMPORTED_MODULE_7__.nodeModulesPath}/vscode-oniguruma/release/onig.wasm`))).toString(true))));
            return response;
        }
    }
    _reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, fromWorker, isRandomSample) {
        const key = fromWorker ? 'async' : 'sync';
        if (TextMateTokenizationFeature_1.reportTokenizationTimeCounter[key] > 50) {
            return;
        }
        if (TextMateTokenizationFeature_1.reportTokenizationTimeCounter[key] === 0) {
            setTimeout(() => {
                TextMateTokenizationFeature_1.reportTokenizationTimeCounter[key] = 0;
            }, 1000 * 60 * 60);
        }
        TextMateTokenizationFeature_1.reportTokenizationTimeCounter[key]++;
        this._telemetryService.publicLog2('editor.tokenizedLine', {
            timeMs,
            languageId,
            lineLength,
            fromWorker,
            sourceExtensionId,
            isRandomSample,
            tokenizationSetting: this.getAsyncTokenizationEnabled() ? (this.getAsyncTokenizationVerification() ? 2 : 1) : 0,
        });
    }
};
TextMateTokenizationFeature = TextMateTokenizationFeature_1 = ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, vscode_vscode_vs_editor_common_languages_language__WEBPACK_IMPORTED_MODULE_17__.ILanguageService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, vscode_vscode_vs_workbench_services_themes_common_workbenchThemeService_service__WEBPACK_IMPORTED_MODULE_33__.IWorkbenchThemeService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, vscode_vscode_vs_platform_extensionResourceLoader_common_extensionResourceLoader_service__WEBPACK_IMPORTED_MODULE_21__.IExtensionResourceLoaderService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, vscode_vscode_vs_platform_notification_common_notification_service__WEBPACK_IMPORTED_MODULE_24__.INotificationService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, vscode_vscode_vs_platform_log_common_log_service__WEBPACK_IMPORTED_MODULE_23__.ILogService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, vscode_vscode_vs_platform_configuration_common_configuration_service__WEBPACK_IMPORTED_MODULE_20__.IConfigurationService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, vscode_vscode_vs_platform_progress_common_progress_service__WEBPACK_IMPORTED_MODULE_25__.IProgressService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, vscode_vscode_vs_workbench_services_environment_common_environmentService_service__WEBPACK_IMPORTED_MODULE_27__.IWorkbenchEnvironmentService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(8, vscode_vscode_vs_platform_instantiation_common_instantiation__WEBPACK_IMPORTED_MODULE_22__.IInstantiationService))),
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(9, vscode_vscode_vs_platform_telemetry_common_telemetry_service__WEBPACK_IMPORTED_MODULE_26__.ITelemetryService)))
], TextMateTokenizationFeature)));
function toColorMap(colorMap) {
    const result = [null];
    for (let i = 1, len = colorMap.length; i < len; i++) {
        result[i] = ( (vscode_vscode_vs_base_common_color__WEBPACK_IMPORTED_MODULE_4__.Color.fromHex(colorMap[i])));
    }
    return result;
}
function equalsTokenRules(a, b) {
    if (!b || !a || b.length !== a.length) {
        return false;
    }
    for (let i = b.length - 1; i >= 0; i--) {
        const r1 = b[i];
        const r2 = a[i];
        if (r1.scope !== r2.scope) {
            return false;
        }
        const s1 = r1.settings;
        const s2 = r2.settings;
        if (s1 && s2) {
            if (s1.fontStyle !== s2.fontStyle || s1.foreground !== s2.foreground || s1.background !== s2.background) {
                return false;
            }
        }
        else if (!s1 || !s2) {
            return false;
        }
    }
    return true;
}
function validateGrammarExtensionPoint(extensionLocation, syntax, collector, _languageService) {
    if (syntax.language && ((typeof syntax.language !== 'string') || !_languageService.isRegisteredLanguageId(syntax.language))) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3086,
            "Unknown language in `contributes.{0}.language`. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            String(syntax.language)
        )));
        return false;
    }
    if (!syntax.scopeName || (typeof syntax.scopeName !== 'string')) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3087,
            "Expected string in `contributes.{0}.scopeName`. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            String(syntax.scopeName)
        )));
        return false;
    }
    if (!syntax.path || (typeof syntax.path !== 'string')) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3088,
            "Expected string in `contributes.{0}.path`. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            String(syntax.path)
        )));
        return false;
    }
    if (syntax.injectTo && (!Array.isArray(syntax.injectTo) || ( (syntax.injectTo.some(scope => typeof scope !== 'string'))))) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3089,
            "Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            JSON.stringify(syntax.injectTo)
        )));
        return false;
    }
    if (syntax.embeddedLanguages && !(0,vscode_vscode_vs_base_common_types__WEBPACK_IMPORTED_MODULE_15__.isObject)(syntax.embeddedLanguages)) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3090,
            "Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            JSON.stringify(syntax.embeddedLanguages)
        )));
        return false;
    }
    if (syntax.tokenTypes && !(0,vscode_vscode_vs_base_common_types__WEBPACK_IMPORTED_MODULE_15__.isObject)(syntax.tokenTypes)) {
        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3091,
            "Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            JSON.stringify(syntax.tokenTypes)
        )));
        return false;
    }
    const grammarLocation = (0,vscode_vscode_vs_base_common_resources__WEBPACK_IMPORTED_MODULE_14__.joinPath)(extensionLocation, syntax.path);
    if (!(0,vscode_vscode_vs_base_common_resources__WEBPACK_IMPORTED_MODULE_14__.isEqualOrParent)(grammarLocation, extensionLocation)) {
        collector.warn(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_19__.localize)(
            3092,
            "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.",
            vscode_vscode_vs_workbench_services_textMate_common_TMGrammars__WEBPACK_IMPORTED_MODULE_32__.grammarsExtPoint.name,
            grammarLocation.path,
            extensionLocation.path
        )));
    }
    return true;
}
function observableConfigValue(key, languageId, defaultValue, configurationService) {
    return (0,vscode_vscode_vs_base_common_observableInternal_utils__WEBPACK_IMPORTED_MODULE_12__.observableFromEvent)((handleChange) => configurationService.onDidChangeConfiguration(e => {
        if (e.affectsConfiguration(key, { overrideIdentifier: languageId })) {
            handleChange(e);
        }
    }), () => configurationService.getValue(key, { overrideIdentifier: languageId }) ?? defaultValue);
}




/***/ }),

/***/ "./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TokenClassificationExtensionPoints: () => (/* binding */ TokenClassificationExtensionPoints)
/* harmony export */ });
/* harmony import */ var vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode/external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode/vscode/vs/nls */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var vscode_vscode_vs_workbench_services_extensions_common_extensionsRegistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode/vscode/vs/workbench/services/extensions/common/extensionsRegistry */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js");
/* harmony import */ var vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode/vscode/vs/platform/theme/common/tokenClassificationRegistry */ "./node_modules/vscode/vscode/src/vs/platform/theme/common/tokenClassificationRegistry.js");
/* harmony import */ var vscode_vscode_vs_workbench_common_contributions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode/vscode/vs/workbench/common/contributions */ "./node_modules/vscode/vscode/src/vs/workbench/common/contributions.js");
/* harmony import */ var vscode_vscode_vs_platform_instantiation_common_instantiation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vscode/vscode/vs/platform/instantiation/common/instantiation */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");







const tokenClassificationRegistry = (0,vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.getTokenClassificationRegistry)();
const tokenTypeExtPoint = vscode_vscode_vs_workbench_services_extensions_common_extensionsRegistry__WEBPACK_IMPORTED_MODULE_2__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'semanticTokenTypes',
    jsonSchema: {
        description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3093, 'Contributes semantic token types.')),
        type: 'array',
        items: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3094, 'The identifier of the semantic token type')),
                    pattern: vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.typeAndModifierIdPattern,
                    patternErrorMessage: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3095, 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*')),
                },
                superType: {
                    type: 'string',
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3096, 'The super type of the semantic token type')),
                    pattern: vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.typeAndModifierIdPattern,
                    patternErrorMessage: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3097, 'Super types should be in the form letterOrDigit[_-letterOrDigit]*')),
                },
                description: {
                    type: 'string',
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3098, 'The description of the semantic token type')),
                }
            }
        }
    }
});
const tokenModifierExtPoint = vscode_vscode_vs_workbench_services_extensions_common_extensionsRegistry__WEBPACK_IMPORTED_MODULE_2__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'semanticTokenModifiers',
    jsonSchema: {
        description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3099, 'Contributes semantic token modifiers.')),
        type: 'array',
        items: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3100, 'The identifier of the semantic token modifier')),
                    pattern: vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.typeAndModifierIdPattern,
                    patternErrorMessage: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3101, 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*'))
                },
                description: {
                    type: 'string',
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3102, 'The description of the semantic token modifier'))
                }
            }
        }
    }
});
const tokenStyleDefaultsExtPoint = vscode_vscode_vs_workbench_services_extensions_common_extensionsRegistry__WEBPACK_IMPORTED_MODULE_2__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'semanticTokenScopes',
    jsonSchema: {
        description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3103, 'Contributes semantic token scope maps.')),
        type: 'array',
        items: {
            type: 'object',
            properties: {
                language: {
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3104, 'Lists the languge for which the defaults are.')),
                    type: 'string'
                },
                scopes: {
                    description: ( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                        3105,
                        'Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.'
                    )),
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    }
});
class TokenClassificationExtensionPoints {
    constructor() {
        function validateTypeOrModifier(contribution, extensionPoint, collector) {
            if (typeof contribution.id !== 'string' || contribution.id.length === 0) {
                collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                    3106,
                    "'configuration.{0}.id' must be defined and can not be empty",
                    extensionPoint
                )));
                return false;
            }
            if (!contribution.id.match(vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.typeAndModifierIdPattern)) {
                collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                    3107,
                    "'configuration.{0}.id' must follow the pattern letterOrDigit[-_letterOrDigit]*",
                    extensionPoint
                )));
                return false;
            }
            const superType = contribution.superType;
            if (superType && !superType.match(vscode_vscode_vs_platform_theme_common_tokenClassificationRegistry__WEBPACK_IMPORTED_MODULE_3__.typeAndModifierIdPattern)) {
                collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                    3108,
                    "'configuration.{0}.superType' must follow the pattern letterOrDigit[-_letterOrDigit]*",
                    extensionPoint
                )));
                return false;
            }
            if (typeof contribution.description !== 'string' || contribution.id.length === 0) {
                collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                    3109,
                    "'configuration.{0}.description' must be defined and can not be empty",
                    extensionPoint
                )));
                return false;
            }
            return true;
        }
        tokenTypeExtPoint.setHandler((extensions, delta) => {
            for (const extension of delta.added) {
                const extensionValue = extension.value;
                const collector = extension.collector;
                if (!extensionValue || !Array.isArray(extensionValue)) {
                    collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3110, "'configuration.semanticTokenType' must be an array")));
                    return;
                }
                for (const contribution of extensionValue) {
                    if (validateTypeOrModifier(contribution, 'semanticTokenType', collector)) {
                        tokenClassificationRegistry.registerTokenType(contribution.id, contribution.description, contribution.superType);
                    }
                }
            }
            for (const extension of delta.removed) {
                const extensionValue = extension.value;
                for (const contribution of extensionValue) {
                    tokenClassificationRegistry.deregisterTokenType(contribution.id);
                }
            }
        });
        tokenModifierExtPoint.setHandler((extensions, delta) => {
            for (const extension of delta.added) {
                const extensionValue = extension.value;
                const collector = extension.collector;
                if (!extensionValue || !Array.isArray(extensionValue)) {
                    collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3111, "'configuration.semanticTokenModifier' must be an array")));
                    return;
                }
                for (const contribution of extensionValue) {
                    if (validateTypeOrModifier(contribution, 'semanticTokenModifier', collector)) {
                        tokenClassificationRegistry.registerTokenModifier(contribution.id, contribution.description);
                    }
                }
            }
            for (const extension of delta.removed) {
                const extensionValue = extension.value;
                for (const contribution of extensionValue) {
                    tokenClassificationRegistry.deregisterTokenModifier(contribution.id);
                }
            }
        });
        tokenStyleDefaultsExtPoint.setHandler((extensions, delta) => {
            for (const extension of delta.added) {
                const extensionValue = extension.value;
                const collector = extension.collector;
                if (!extensionValue || !Array.isArray(extensionValue)) {
                    collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3112, "'configuration.semanticTokenScopes' must be an array")));
                    return;
                }
                for (const contribution of extensionValue) {
                    if (contribution.language && typeof contribution.language !== 'string') {
                        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(3113, "'configuration.semanticTokenScopes.language' must be a string")));
                        continue;
                    }
                    if (!contribution.scopes || typeof contribution.scopes !== 'object') {
                        collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                            3114,
                            "'configuration.semanticTokenScopes.scopes' must be defined as an object"
                        )));
                        continue;
                    }
                    for (const selectorString in contribution.scopes) {
                        const tmScopes = contribution.scopes[selectorString];
                        if (!Array.isArray(tmScopes) || ( (tmScopes.some(l => typeof l !== 'string')))) {
                            collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                                3115,
                                "'configuration.semanticTokenScopes.scopes' values must be an array of strings"
                            )));
                            continue;
                        }
                        try {
                            const selector = tokenClassificationRegistry.parseTokenSelector(selectorString, contribution.language);
                            tokenClassificationRegistry.registerTokenStyleDefault(selector, { scopesToProbe: ( (tmScopes.map(s => s.split(' ')))) });
                        }
                        catch (e) {
                            collector.error(( (0,vscode_vscode_vs_nls__WEBPACK_IMPORTED_MODULE_1__.localize)(
                                3116,
                                "configuration.semanticTokenScopes.scopes': Problems parsing selector {0}.",
                                selectorString
                            )));
                        }
                    }
                }
            }
            for (const extension of delta.removed) {
                const extensionValue = extension.value;
                for (const contribution of extensionValue) {
                    for (const selectorString in contribution.scopes) {
                        const tmScopes = contribution.scopes[selectorString];
                        try {
                            const selector = tokenClassificationRegistry.parseTokenSelector(selectorString, contribution.language);
                            tokenClassificationRegistry.registerTokenStyleDefault(selector, { scopesToProbe: ( (tmScopes.map(s => s.split(' ')))) });
                        }
                        catch (e) {
                        }
                    }
                }
            }
        });
    }
}
let TokenClassificationExtensionPointWorkbenchContribution = class TokenClassificationExtensionPointWorkbenchContribution {
    static { this.ID = 'workbench.contrib.tokenClassificationExtensionPoint'; }
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.instantiationService.createInstance(TokenClassificationExtensionPoints);
    }
};
TokenClassificationExtensionPointWorkbenchContribution = ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,vscode_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, vscode_vscode_vs_platform_instantiation_common_instantiation__WEBPACK_IMPORTED_MODULE_5__.IInstantiationService)))
], TokenClassificationExtensionPointWorkbenchContribution)));
(0,vscode_vscode_vs_workbench_common_contributions__WEBPACK_IMPORTED_MODULE_4__.registerWorkbenchContribution2)(TokenClassificationExtensionPointWorkbenchContribution.ID, TokenClassificationExtensionPointWorkbenchContribution, 1 );




/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/amd.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/amd.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoaderStats: () => (/* binding */ LoaderStats),
/* harmony export */   isESM: () => (/* binding */ isESM)
/* harmony export */ });
const isESM = true;
class LoaderStats {
    static get() {
        const amdLoadScript = ( new Map());
        const amdInvokeFactory = ( new Map());
        const nodeRequire = ( new Map());
        const nodeEval = ( new Map());
        function mark(map, stat) {
            if (( map.has(stat.detail))) {
                return;
            }
            map.set(stat.detail, -stat.timestamp);
        }
        function diff(map, stat) {
            const duration = map.get(stat.detail);
            if (!duration) {
                return;
            }
            if (duration >= 0) {
                return;
            }
            map.set(stat.detail, duration + stat.timestamp);
        }
        let stats = [];
        if (typeof require === 'function' && typeof require.getStats === 'function') {
            stats = require.getStats().slice(0).sort((a, b) => a.timestamp - b.timestamp);
        }
        for (const stat of stats) {
            switch (stat.type) {
                case 10 :
                    mark(amdLoadScript, stat);
                    break;
                case 11 :
                case 12 :
                    diff(amdLoadScript, stat);
                    break;
                case 21 :
                    mark(amdInvokeFactory, stat);
                    break;
                case 22 :
                    diff(amdInvokeFactory, stat);
                    break;
                case 33 :
                    mark(nodeRequire, stat);
                    break;
                case 34 :
                    diff(nodeRequire, stat);
                    break;
                case 31 :
                    mark(nodeEval, stat);
                    break;
                case 32 :
                    diff(nodeEval, stat);
                    break;
            }
        }
        let nodeRequireTotal = 0;
        nodeRequire.forEach(value => nodeRequireTotal += value);
        function to2dArray(map) {
            const res = [];
            map.forEach((value, index) => res.push([index, value]));
            return res;
        }
        return {
            amdLoad: to2dArray(amdLoadScript),
            amdInvoke: to2dArray(amdInvokeFactory),
            nodeRequire: to2dArray(nodeRequire),
            nodeEval: to2dArray(nodeEval),
            nodeRequireTotal
        };
    }
    static toMarkdownTable(header, rows) {
        let result = '';
        const lengths = [];
        header.forEach((cell, ci) => {
            lengths[ci] = cell.length;
        });
        rows.forEach(row => {
            row.forEach((cell, ci) => {
                if (typeof cell === 'undefined') {
                    cell = row[ci] = '-';
                }
                const len = ( cell.toString()).length;
                lengths[ci] = Math.max(len, lengths[ci]);
            });
        });
        header.forEach((cell, ci) => { result += `| ${cell + ' '.repeat(lengths[ci] - ( cell.toString()).length)} `; });
        result += '|\n';
        header.forEach((_cell, ci) => { result += `| ${'-'.repeat(lengths[ci])} `; });
        result += '|\n';
        rows.forEach(row => {
            row.forEach((cell, ci) => {
                if (typeof cell !== 'undefined') {
                    result += `| ${cell + ' '.repeat(lengths[ci] - ( cell.toString()).length)} `;
                }
            });
            result += '|\n';
        });
        return result;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.css.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.css.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   "default": () => (/* binding */ css)
/* harmony export */ });
/* harmony import */ var _external_rollup_plugin_styles_dist_runtime_inject_css_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../../external/rollup-plugin-styles/dist/runtime/inject-css.js */ "./node_modules/vscode/external/rollup-plugin-styles/dist/runtime/inject-css.js");

var css = ".token-inspect-widget{border:1px solid var(--vscode-editorHoverWidget-border);padding:10px;user-select:text;-webkit-user-select:text;z-index:50}.hc-black .tokens-inspect-widget,.hc-light .tokens-inspect-widget{border-width:2px}.monaco-editor .token-inspect-widget{background-color:var(--vscode-editorHoverWidget-background)}.monaco-editor .token-inspect-widget .tiw-metadata-separator{background-color:var(--vscode-editorHoverWidget-border)}.tiw-token{font-family:var(--monaco-monospace-font)}.tiw-metadata-separator{border:0;height:1px}.tiw-token-length{float:right;font-size:60%;font-weight:400}.tiw-metadata-table{width:100%}.tiw-metadata-value{font-family:var(--monaco-monospace-font);word-break:break-word}.tiw-metadata-values{list-style:none;margin-right:-10px;max-height:300px;overflow-y:auto;padding-left:0}.tiw-metadata-values>.tiw-metadata-value{margin-right:10px}.tiw-metadata-key{min-width:150px;padding-right:10px;vertical-align:top;white-space:nowrap;width:1px}.tiw-metadata-semantic{font-style:italic}.tiw-metadata-scopes{line-height:normal}.tiw-theme-selector{font-family:var(--monaco-monospace-font)}";
(0,_external_rollup_plugin_styles_dist_runtime_inject_css_js__WEBPACK_IMPORTED_MODULE_0__["default"])(css,{});



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InspectEditorTokensController: () => (/* binding */ InspectEditorTokensController)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _inspectEditorTokens_css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inspectEditorTokens.css.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.css.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../base/browser/dom.js */ "./node_modules/vscode/vscode/src/vs/base/browser/dom.js");
/* harmony import */ var _base_common_color_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../base/common/color.js */ "./node_modules/vscode/vscode/src/vs/base/common/color.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _editor_browser_editorExtensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../editor/browser/editorExtensions.js */ "./node_modules/vscode/vscode/src/vs/editor/browser/editorExtensions.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../editor/common/languages.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../editor/common/encodedTokenAttributes.js */ "./node_modules/vscode/vscode/src/vs/editor/common/encodedTokenAttributes.js");
/* harmony import */ var _editor_common_languages_language_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../editor/common/languages/language.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/language.js");
/* harmony import */ var _platform_notification_common_notification_service_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../platform/notification/common/notification.service.js */ "./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.service.js");
/* harmony import */ var _services_textMate_common_TMHelper_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../services/textMate/common/TMHelper.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/common/TMHelper.js");
/* harmony import */ var _services_textMate_browser_textMateTokenizationFeature_service_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../services/textMate/browser/textMateTokenizationFeature.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service.js");
/* harmony import */ var _services_themes_common_workbenchThemeService_service_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../services/themes/common/workbenchThemeService.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/themes/common/workbenchThemeService.service.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _platform_theme_common_tokenClassificationRegistry_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../platform/theme/common/tokenClassificationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/theme/common/tokenClassificationRegistry.js");
/* harmony import */ var _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../platform/configuration/common/configuration.service.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var _editor_contrib_semanticTokens_common_semanticTokensConfig_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../editor/contrib/semanticTokens/common/semanticTokensConfig.js */ "./node_modules/vscode/vscode/src/vs/editor/contrib/semanticTokens/common/semanticTokensConfig.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _editor_common_services_languageFeatures_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../editor/common/services/languageFeatures.js */ "./node_modules/vscode/vscode/src/vs/editor/common/services/languageFeatures.js");
/* harmony import */ var _editor_common_services_treeSitterParserService_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../editor/common/services/treeSitterParserService.js */ "./node_modules/vscode/vscode/src/vs/editor/common/services/treeSitterParserService.js");






















var InspectEditorTokensController_1;
const $ = _base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.$;
let InspectEditorTokensController = class InspectEditorTokensController extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.Disposable {
    static { InspectEditorTokensController_1 = this; }
    static { this.ID = 'editor.contrib.inspectEditorTokens'; }
    static get(editor) {
        return editor.getContribution(InspectEditorTokensController_1.ID);
    }
    constructor(editor, textMateService, treeSitterService, languageService, themeService, notificationService, configurationService, languageFeaturesService) {
        super();
        this._editor = editor;
        this._textMateService = textMateService;
        this._treeSitterService = treeSitterService;
        this._themeService = themeService;
        this._languageService = languageService;
        this._notificationService = notificationService;
        this._configurationService = configurationService;
        this._languageFeaturesService = languageFeaturesService;
        this._widget = null;
        this._register(this._editor.onDidChangeModel((e) => this.stop()));
        this._register(this._editor.onDidChangeModelLanguage((e) => this.stop()));
        this._register(this._editor.onKeyUp((e) => e.keyCode === 9  && this.stop()));
    }
    dispose() {
        this.stop();
        super.dispose();
    }
    launch() {
        if (this._widget) {
            return;
        }
        if (!this._editor.hasModel()) {
            return;
        }
        if (this._editor.getModel().uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_19__.Schemas.vscodeNotebookCell) {
            return;
        }
        this._widget = ( (new InspectEditorTokensWidget(
            this._editor,
            this._textMateService,
            this._treeSitterService,
            this._languageService,
            this._themeService,
            this._notificationService,
            this._configurationService,
            this._languageFeaturesService
        )));
    }
    stop() {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
    }
    toggle() {
        if (!this._widget) {
            this.launch();
        }
        else {
            this.stop();
        }
    }
};
InspectEditorTokensController = InspectEditorTokensController_1 = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _services_textMate_browser_textMateTokenizationFeature_service_js__WEBPACK_IMPORTED_MODULE_13__.ITextMateTokenizationService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _editor_common_services_treeSitterParserService_js__WEBPACK_IMPORTED_MODULE_21__.ITreeSitterParserService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _editor_common_languages_language_js__WEBPACK_IMPORTED_MODULE_10__.ILanguageService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _services_themes_common_workbenchThemeService_service_js__WEBPACK_IMPORTED_MODULE_14__.IWorkbenchThemeService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _platform_notification_common_notification_service_js__WEBPACK_IMPORTED_MODULE_11__.INotificationService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_17__.IConfigurationService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _editor_common_services_languageFeatures_js__WEBPACK_IMPORTED_MODULE_20__.ILanguageFeaturesService)))
], InspectEditorTokensController)));
class InspectEditorTokens extends _editor_browser_editorExtensions_js__WEBPACK_IMPORTED_MODULE_6__.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inspectTMScopes',
            label: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localize)(3117, "Developer: Inspect Editor Tokens and Scopes")),
            alias: 'Developer: Inspect Editor Tokens and Scopes',
            precondition: undefined
        });
    }
    run(accessor, editor) {
        const controller = InspectEditorTokensController.get(editor);
        controller?.toggle();
    }
}
function renderTokenText(tokenText) {
    if (tokenText.length > 40) {
        tokenText = tokenText.substr(0, 20) + '…' + tokenText.substr(tokenText.length - 20);
    }
    let result = '';
    for (let charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {
        const charCode = tokenText.charCodeAt(charIndex);
        switch (charCode) {
            case 9 :
                result += '\u2192';
                break;
            case 32 :
                result += '\u00B7';
                break;
            default:
                result += String.fromCharCode(charCode);
        }
    }
    return result;
}
class InspectEditorTokensWidget extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.Disposable {
    static { this._ID = 'editor.contrib.inspectEditorTokensWidget'; }
    constructor(editor, textMateService, treeSitterService, languageService, themeService, notificationService, configurationService, languageFeaturesService) {
        super();
        this.allowEditorOverflow = true;
        this._isDisposed = false;
        this._editor = editor;
        this._languageService = languageService;
        this._themeService = themeService;
        this._textMateService = textMateService;
        this._treeSitterService = treeSitterService;
        this._notificationService = notificationService;
        this._configurationService = configurationService;
        this._languageFeaturesService = languageFeaturesService;
        this._model = this._editor.getModel();
        this._domNode = document.createElement('div');
        this._domNode.className = 'token-inspect-widget';
        this._currentRequestCancellationTokenSource = ( (new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_15__.CancellationTokenSource()));
        this._beginCompute(this._editor.getPosition());
        this._register(this._editor.onDidChangeCursorPosition((e) => this._beginCompute(this._editor.getPosition())));
        this._register(themeService.onDidColorThemeChange(_ => this._beginCompute(this._editor.getPosition())));
        this._register(configurationService.onDidChangeConfiguration(e => e.affectsConfiguration('editor.semanticHighlighting.enabled') && this._beginCompute(this._editor.getPosition())));
        this._editor.addContentWidget(this);
    }
    dispose() {
        this._isDisposed = true;
        this._editor.removeContentWidget(this);
        this._currentRequestCancellationTokenSource.cancel();
        super.dispose();
    }
    getId() {
        return InspectEditorTokensWidget._ID;
    }
    _beginCompute(position) {
        const grammar = this._textMateService.createTokenizer(this._model.getLanguageId());
        const semanticTokens = this._computeSemanticTokens(position);
        const tree = this._treeSitterService.getParseResult(this._model);
        (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.clearNode)(this._domNode);
        this._domNode.appendChild(document.createTextNode(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localize)(3118, "Loading..."))));
        Promise.all([grammar, semanticTokens]).then(([grammar, semanticTokens]) => {
            if (this._isDisposed) {
                return;
            }
            this._compute(grammar, semanticTokens, tree?.tree, position);
            this._domNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;
            this._editor.layoutContentWidget(this);
        }, (err) => {
            this._notificationService.warn(err);
            setTimeout(() => {
                InspectEditorTokensController.get(this._editor)?.stop();
            });
        });
    }
    _isSemanticColoringEnabled() {
        const setting = this._configurationService.getValue(_editor_contrib_semanticTokens_common_semanticTokensConfig_js__WEBPACK_IMPORTED_MODULE_18__.SEMANTIC_HIGHLIGHTING_SETTING_ID, { overrideIdentifier: this._model.getLanguageId(), resource: this._model.uri })?.enabled;
        if (typeof setting === 'boolean') {
            return setting;
        }
        return this._themeService.getColorTheme().semanticHighlighting;
    }
    _compute(grammar, semanticTokens, tree, position) {
        const textMateTokenInfo = grammar && this._getTokensAtPosition(grammar, position);
        const semanticTokenInfo = semanticTokens && this._getSemanticTokenAtPosition(semanticTokens, position);
        const treeSitterTokenInfo = tree && this._getTreeSitterTokenAtPosition(tree, position);
        if (!textMateTokenInfo && !semanticTokenInfo && !treeSitterTokenInfo) {
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.reset)(this._domNode, 'No grammar or semantic tokens available.');
            return;
        }
        const tmMetadata = textMateTokenInfo?.metadata;
        const semMetadata = semanticTokenInfo?.metadata;
        const semTokenText = semanticTokenInfo && renderTokenText(this._model.getValueInRange(semanticTokenInfo.range));
        const tmTokenText = textMateTokenInfo && renderTokenText(this._model.getLineContent(position.lineNumber).substring(textMateTokenInfo.token.startIndex, textMateTokenInfo.token.endIndex));
        const tokenText = semTokenText || tmTokenText || '';
        (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.reset)(this._domNode, $('h2.tiw-token', undefined, tokenText, $('span.tiw-token-length', undefined, `${tokenText.length} ${tokenText.length === 1 ? 'char' : 'chars'}`)));
        (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('hr.tiw-metadata-separator', { 'style': 'clear:both' }));
        (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('table.tiw-metadata-table', undefined, $('tbody', undefined, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'language'), $('td.tiw-metadata-value', undefined, tmMetadata?.languageId || '')), $('tr', undefined, $('td.tiw-metadata-key', undefined, 'standard token type'), $('td.tiw-metadata-value', undefined, this._tokenTypeToString(tmMetadata?.tokenType || 0 ))), ...this._formatMetadata(semMetadata, tmMetadata))));
        if (semanticTokenInfo) {
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('hr.tiw-metadata-separator'));
            const table = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('table.tiw-metadata-table', undefined));
            const tbody = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(table, $('tbody', undefined, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'semantic token type'), $('td.tiw-metadata-value', undefined, semanticTokenInfo.type))));
            if (semanticTokenInfo.modifiers.length) {
                (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'modifiers'), $('td.tiw-metadata-value', undefined, semanticTokenInfo.modifiers.join(' '))));
            }
            if (semanticTokenInfo.metadata) {
                const properties = ['foreground', 'bold', 'italic', 'underline', 'strikethrough'];
                const propertiesByDefValue = {};
                const allDefValues = ( (new Array()));
                for (const property of properties) {
                    if (semanticTokenInfo.metadata[property] !== undefined) {
                        const definition = semanticTokenInfo.definitions[property];
                        const defValue = this._renderTokenStyleDefinition(definition, property);
                        const defValueStr = ( (defValue.map(el => (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(el) ? el.outerHTML : el))).join();
                        let properties = propertiesByDefValue[defValueStr];
                        if (!properties) {
                            propertiesByDefValue[defValueStr] = properties = [];
                            allDefValues.push([defValue, defValueStr]);
                        }
                        properties.push(property);
                    }
                }
                for (const [defValue, defValueStr] of allDefValues) {
                    (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, propertiesByDefValue[defValueStr].join(', ')), $('td.tiw-metadata-value', undefined, ...defValue)));
                }
            }
        }
        if (textMateTokenInfo) {
            const theme = this._themeService.getColorTheme();
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('hr.tiw-metadata-separator'));
            const table = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('table.tiw-metadata-table'));
            const tbody = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(table, $('tbody'));
            if (tmTokenText && tmTokenText !== tokenText) {
                (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'textmate token'), $('td.tiw-metadata-value', undefined, `${tmTokenText} (${tmTokenText.length})`)));
            }
            const scopes = ( (new Array()));
            for (let i = textMateTokenInfo.token.scopes.length - 1; i >= 0; i--) {
                scopes.push(textMateTokenInfo.token.scopes[i]);
                if (i > 0) {
                    scopes.push($('br'));
                }
            }
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'textmate scopes'), $('td.tiw-metadata-value.tiw-metadata-scopes', undefined, ...scopes)));
            const matchingRule = (0,_services_textMate_common_TMHelper_js__WEBPACK_IMPORTED_MODULE_12__.findMatchingThemeRule)(theme, textMateTokenInfo.token.scopes, false);
            const semForeground = semanticTokenInfo?.metadata?.foreground;
            if (matchingRule) {
                if (semForeground !== textMateTokenInfo.metadata.foreground) {
                    let defValue = $('code.tiw-theme-selector', undefined, matchingRule.rawSelector, $('br'), JSON.stringify(matchingRule.settings, null, '\t'));
                    if (semForeground) {
                        defValue = $('s', undefined, defValue);
                    }
                    (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'foreground'), $('td.tiw-metadata-value', undefined, defValue)));
                }
            }
            else if (!semForeground) {
                (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'foreground'), $('td.tiw-metadata-value', undefined, 'No theme selector')));
            }
        }
        if (treeSitterTokenInfo) {
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('hr.tiw-metadata-separator'));
            const table = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(this._domNode, $('table.tiw-metadata-table'));
            const tbody = (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(table, $('tbody'));
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'tree-sitter token'), $('td.tiw-metadata-value', undefined, `${treeSitterTokenInfo.text}`)));
            const scopes = ( (new Array()));
            let node = treeSitterTokenInfo;
            while (node.parent) {
                scopes.push(node.type);
                node = node.parent;
                if (node) {
                    scopes.push($('br'));
                }
            }
            (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'tree-sitter scopes'), $('td.tiw-metadata-value.tiw-metadata-scopes', undefined, ...scopes)));
            const tokenizationSupport = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_8__.TreeSitterTokenizationRegistry.get(this._model.getLanguageId());
            const captures = tokenizationSupport?.captureAtPosition(position.lineNumber, position.column, this._model);
            if (captures && captures.length > 0) {
                (0,_base_browser_dom_js__WEBPACK_IMPORTED_MODULE_3__.append)(tbody, $('tr', undefined, $('td.tiw-metadata-key', undefined, 'foreground'), $('td.tiw-metadata-value', undefined, captures[captures.length - 1].name)));
            }
        }
    }
    _formatMetadata(semantic, tm) {
        const elements = ( (new Array()));
        function render(property) {
            const value = semantic?.[property] || tm?.[property];
            if (value !== undefined) {
                const semanticStyle = semantic?.[property] ? 'tiw-metadata-semantic' : '';
                elements.push($('tr', undefined, $('td.tiw-metadata-key', undefined, property), $(`td.tiw-metadata-value.${semanticStyle}`, undefined, value)));
            }
            return value;
        }
        const foreground = render('foreground');
        const background = render('background');
        if (foreground && background) {
            const backgroundColor = ( (_base_common_color_js__WEBPACK_IMPORTED_MODULE_4__.Color.fromHex(background))), foregroundColor = ( (_base_common_color_js__WEBPACK_IMPORTED_MODULE_4__.Color.fromHex(foreground)));
            if (backgroundColor.isOpaque()) {
                elements.push($('tr', undefined, $('td.tiw-metadata-key', undefined, 'contrast ratio'), $('td.tiw-metadata-value', undefined, backgroundColor.getContrastRatio(foregroundColor.makeOpaque(backgroundColor)).toFixed(2))));
            }
            else {
                elements.push($('tr', undefined, $('td.tiw-metadata-key', undefined, 'Contrast ratio cannot be precise for background colors that use transparency'), $('td.tiw-metadata-value')));
            }
        }
        const fontStyleLabels = ( (new Array()));
        function addStyle(key) {
            let label;
            if (semantic && semantic[key]) {
                label = $('span.tiw-metadata-semantic', undefined, key);
            }
            else if (tm && tm[key]) {
                label = key;
            }
            if (label) {
                if (fontStyleLabels.length) {
                    fontStyleLabels.push(' ');
                }
                fontStyleLabels.push(label);
            }
        }
        addStyle('bold');
        addStyle('italic');
        addStyle('underline');
        addStyle('strikethrough');
        if (fontStyleLabels.length) {
            elements.push($('tr', undefined, $('td.tiw-metadata-key', undefined, 'font style'), $('td.tiw-metadata-value', undefined, ...fontStyleLabels)));
        }
        return elements;
    }
    _decodeMetadata(metadata) {
        const colorMap = this._themeService.getColorTheme().tokenColorMap;
        const languageId = _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__.TokenMetadata.getLanguageId(metadata);
        const tokenType = _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__.TokenMetadata.getTokenType(metadata);
        const fontStyle = _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__.TokenMetadata.getFontStyle(metadata);
        const foreground = _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__.TokenMetadata.getForeground(metadata);
        const background = _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_9__.TokenMetadata.getBackground(metadata);
        return {
            languageId: this._languageService.languageIdCodec.decodeLanguageId(languageId),
            tokenType: tokenType,
            bold: ((fontStyle & 2) ) ? true : undefined,
            italic: ((fontStyle & 1) ) ? true : undefined,
            underline: ((fontStyle & 4) ) ? true : undefined,
            strikethrough: ((fontStyle & 8) ) ? true : undefined,
            foreground: colorMap[foreground],
            background: colorMap[background]
        };
    }
    _tokenTypeToString(tokenType) {
        switch (tokenType) {
            case 0 : return 'Other';
            case 1 : return 'Comment';
            case 2 : return 'String';
            case 3 : return 'RegEx';
            default: return '??';
        }
    }
    _getTokensAtPosition(grammar, position) {
        const lineNumber = position.lineNumber;
        const stateBeforeLine = this._getStateBeforeLine(grammar, lineNumber);
        const tokenizationResult1 = grammar.tokenizeLine(this._model.getLineContent(lineNumber), stateBeforeLine);
        const tokenizationResult2 = grammar.tokenizeLine2(this._model.getLineContent(lineNumber), stateBeforeLine);
        let token1Index = 0;
        for (let i = tokenizationResult1.tokens.length - 1; i >= 0; i--) {
            const t = tokenizationResult1.tokens[i];
            if (position.column - 1 >= t.startIndex) {
                token1Index = i;
                break;
            }
        }
        let token2Index = 0;
        for (let i = (tokenizationResult2.tokens.length >>> 1); i >= 0; i--) {
            if (position.column - 1 >= tokenizationResult2.tokens[(i << 1)]) {
                token2Index = i;
                break;
            }
        }
        return {
            token: tokenizationResult1.tokens[token1Index],
            metadata: this._decodeMetadata(tokenizationResult2.tokens[(token2Index << 1) + 1])
        };
    }
    _getStateBeforeLine(grammar, lineNumber) {
        let state = null;
        for (let i = 1; i < lineNumber; i++) {
            const tokenizationResult = grammar.tokenizeLine(this._model.getLineContent(i), state);
            state = tokenizationResult.ruleStack;
        }
        return state;
    }
    isSemanticTokens(token) {
        return token && token.data;
    }
    async _computeSemanticTokens(position) {
        if (!this._isSemanticColoringEnabled()) {
            return null;
        }
        const tokenProviders = this._languageFeaturesService.documentSemanticTokensProvider.ordered(this._model);
        if (tokenProviders.length) {
            const provider = tokenProviders[0];
            const tokens = await Promise.resolve(provider.provideDocumentSemanticTokens(this._model, null, this._currentRequestCancellationTokenSource.token));
            if (this.isSemanticTokens(tokens)) {
                return { tokens, legend: provider.getLegend() };
            }
        }
        const rangeTokenProviders = this._languageFeaturesService.documentRangeSemanticTokensProvider.ordered(this._model);
        if (rangeTokenProviders.length) {
            const provider = rangeTokenProviders[0];
            const lineNumber = position.lineNumber;
            const range = ( (new _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_7__.Range(lineNumber, 1, lineNumber, this._model.getLineMaxColumn(lineNumber))));
            const tokens = await Promise.resolve(provider.provideDocumentRangeSemanticTokens(this._model, range, this._currentRequestCancellationTokenSource.token));
            if (this.isSemanticTokens(tokens)) {
                return { tokens, legend: provider.getLegend() };
            }
        }
        return null;
    }
    _getSemanticTokenAtPosition(semanticTokens, pos) {
        const tokenData = semanticTokens.tokens.data;
        const defaultLanguage = this._model.getLanguageId();
        let lastLine = 0;
        let lastCharacter = 0;
        const posLine = pos.lineNumber - 1, posCharacter = pos.column - 1;
        for (let i = 0; i < tokenData.length; i += 5) {
            const lineDelta = tokenData[i], charDelta = tokenData[i + 1], len = tokenData[i + 2], typeIdx = tokenData[i + 3], modSet = tokenData[i + 4];
            const line = lastLine + lineDelta;
            const character = lineDelta === 0 ? lastCharacter + charDelta : charDelta;
            if (posLine === line && character <= posCharacter && posCharacter < character + len) {
                const type = semanticTokens.legend.tokenTypes[typeIdx] || 'not in legend (ignored)';
                const modifiers = [];
                let modifierSet = modSet;
                for (let modifierIndex = 0; modifierSet > 0 && modifierIndex < semanticTokens.legend.tokenModifiers.length; modifierIndex++) {
                    if (modifierSet & 1) {
                        modifiers.push(semanticTokens.legend.tokenModifiers[modifierIndex]);
                    }
                    modifierSet = modifierSet >> 1;
                }
                if (modifierSet > 0) {
                    modifiers.push('not in legend (ignored)');
                }
                const range = ( (new _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_7__.Range(line + 1, character + 1, line + 1, character + 1 + len)));
                const definitions = {};
                const colorMap = this._themeService.getColorTheme().tokenColorMap;
                const theme = this._themeService.getColorTheme();
                const tokenStyle = theme.getTokenStyleMetadata(type, modifiers, defaultLanguage, true, definitions);
                let metadata = undefined;
                if (tokenStyle) {
                    metadata = {
                        languageId: undefined,
                        tokenType: 0 ,
                        bold: tokenStyle?.bold,
                        italic: tokenStyle?.italic,
                        underline: tokenStyle?.underline,
                        strikethrough: tokenStyle?.strikethrough,
                        foreground: colorMap[tokenStyle?.foreground || 0 ],
                        background: undefined
                    };
                }
                return { type, modifiers, range, metadata, definitions };
            }
            lastLine = line;
            lastCharacter = character;
        }
        return null;
    }
    _walkTreeforPosition(cursor, pos) {
        const offset = this._model.getOffsetAt(pos);
        cursor.gotoFirstChild();
        let goChild = false;
        let lastGoodNode = null;
        do {
            if (cursor.currentNode.startIndex <= offset && offset < cursor.currentNode.endIndex) {
                goChild = true;
                lastGoodNode = cursor.currentNode;
            }
            else {
                goChild = false;
            }
        } while (goChild ? cursor.gotoFirstChild() : cursor.gotoNextSibling());
        return lastGoodNode;
    }
    _getTreeSitterTokenAtPosition(tree, pos) {
        const cursor = tree.walk();
        return this._walkTreeforPosition(cursor, pos);
    }
    _renderTokenStyleDefinition(definition, property) {
        const elements = ( (new Array()));
        if (definition === undefined) {
            return elements;
        }
        const theme = this._themeService.getColorTheme();
        if (Array.isArray(definition)) {
            const scopesDefinition = {};
            theme.resolveScopes(definition, scopesDefinition);
            const matchingRule = scopesDefinition[property];
            if (matchingRule && scopesDefinition.scope) {
                const scopes = $('ul.tiw-metadata-values');
                const strScopes = Array.isArray(matchingRule.scope) ? matchingRule.scope : [String(matchingRule.scope)];
                for (const strScope of strScopes) {
                    scopes.appendChild($('li.tiw-metadata-value.tiw-metadata-scopes', undefined, strScope));
                }
                elements.push(scopesDefinition.scope.join(' '), scopes, $('code.tiw-theme-selector', undefined, JSON.stringify(matchingRule.settings, null, '\t')));
                return elements;
            }
            return elements;
        }
        else if (_platform_theme_common_tokenClassificationRegistry_js__WEBPACK_IMPORTED_MODULE_16__.SemanticTokenRule.is(definition)) {
            const scope = theme.getTokenStylingRuleScope(definition);
            if (scope === 'setting') {
                elements.push(`User settings: ${definition.selector.id} - ${this._renderStyleProperty(definition.style, property)}`);
                return elements;
            }
            else if (scope === 'theme') {
                elements.push(`Color theme: ${definition.selector.id} - ${this._renderStyleProperty(definition.style, property)}`);
                return elements;
            }
            return elements;
        }
        else {
            const style = theme.resolveTokenStyleValue(definition);
            elements.push(`Default: ${style ? this._renderStyleProperty(style, property) : ''}`);
            return elements;
        }
    }
    _renderStyleProperty(style, property) {
        switch (property) {
            case 'foreground': return style.foreground ? _base_common_color_js__WEBPACK_IMPORTED_MODULE_4__.Color.Format.CSS.formatHexA(style.foreground, true) : '';
            default: return style[property] !== undefined ? String(style[property]) : '';
        }
    }
    getDomNode() {
        return this._domNode;
    }
    getPosition() {
        return {
            position: this._editor.getPosition(),
            preference: [2 , 1 ]
        };
    }
}
(0,_editor_browser_editorExtensions_js__WEBPACK_IMPORTED_MODULE_6__.registerEditorContribution)(InspectEditorTokensController.ID, InspectEditorTokensController, 4 );
(0,_editor_browser_editorExtensions_js__WEBPACK_IMPORTED_MODULE_6__.registerEditorAction)(InspectEditorTokens);



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/textMate/common/TMGrammars.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/textMate/common/TMGrammars.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   grammarsExtPoint: () => (/* binding */ grammarsExtPoint)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../extensions/common/extensionsRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js");
/* harmony import */ var _language_common_languageService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../language/common/languageService.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/language/common/languageService.js");



const grammarsExtPoint = _extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_1__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'grammars',
    deps: [_language_common_languageService_js__WEBPACK_IMPORTED_MODULE_2__.languagesExtPoint],
    jsonSchema: {
        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7063, 'Contributes textmate tokenizers.')),
        type: 'array',
        defaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],
        items: {
            type: 'object',
            defaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],
            properties: {
                language: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7064, 'Language identifier for which this syntax is contributed to.')),
                    type: 'string'
                },
                scopeName: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7065, 'Textmate scope name used by the tmLanguage file.')),
                    type: 'string'
                },
                path: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(
                        7066,
                        'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \'./syntaxes/\'.'
                    )),
                    type: 'string'
                },
                embeddedLanguages: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(
                        7067,
                        'A map of scope name to language id if this grammar contains embedded languages.'
                    )),
                    type: 'object'
                },
                tokenTypes: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7068, 'A map of scope name to token types.')),
                    type: 'object',
                    additionalProperties: {
                        enum: ['string', 'comment', 'other']
                    }
                },
                injectTo: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7069, 'List of language scope names to which this grammar is injected to.')),
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                balancedBracketScopes: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7070, 'Defines which scope names contain balanced brackets.')),
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    default: ['*'],
                },
                unbalancedBracketScopes: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize)(7071, 'Defines which scope names do not contain balanced brackets.')),
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    default: [],
                },
            },
            required: ['scopeName', 'path']
        }
    }
});



/***/ })

}])
//# sourceMappingURL=vendors-node_modules_codingame_monaco-vscode-textmate-service-override_index_js.immt_editor.js.map