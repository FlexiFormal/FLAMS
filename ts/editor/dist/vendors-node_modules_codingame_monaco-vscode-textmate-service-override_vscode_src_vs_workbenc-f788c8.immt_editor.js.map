{"version":3,"file":"vendors-node_modules_codingame_monaco-vscode-textmate-service-override_vscode_src_vs_workbenc-f788c8.immt_editor.js","mappings":";;;;;;;;;;;;AAAA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;;ACV+B;AACO;AACD;AACmB;AACD;;AAErF,0CAA0C,8EAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uEAAO;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6EAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB;AAC5F,yBAAyB,+FAAyB;AAClD;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA,mCAAmC,gGAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+FAAyB;AAC9C;AACA;;AAEuC;;;;;;;;;;;;;;;;;;;;;;;ACzEqD;AACxB;AACvB;AACD;AACqB;AACA;AACd;AACkC;;AAErF,+CAA+C,8EAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mGAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0GAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4C;;;;;;;;;;;;;;;;;;AC3CwB;AACb;;AAEvD;AACA,+BAA+B,8EAAU;AACzC;AACA;AACA;AACA;AACA,oCAAoC,gEAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,WAAW,OAAO,SAAS;AACjH;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0D;;;;;;;;;;;;;;;ACvH1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE2B","sources":["webpack://immt-editor/./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerHost.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/common/TMGrammarFactory.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-textmate-service-override/vscode/src/vs/workbench/services/textMate/common/TMScopeRegistry.js"],"sourcesContent":["class TextMateWorkerHost {\n    static { this.CHANNEL_NAME = 'textMateWorkerHost'; }\n    static getChannel(workerServer) {\n        return workerServer.getChannel(TextMateWorkerHost.CHANNEL_NAME);\n    }\n    static setChannel(workerClient, obj) {\n        workerClient.setChannel(TextMateWorkerHost.CHANNEL_NAME, obj);\n    }\n}\n\nexport { TextMateWorkerHost };\n","import { Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { StopWatch } from 'vscode/vscode/vs/base/common/stopwatch';\nimport { TokenMetadata } from 'vscode/vscode/vs/editor/common/encodedTokenAttributes';\nimport { EncodedTokenizationResult } from 'vscode/vscode/vs/editor/common/languages';\n\nclass TextMateTokenizationSupport extends Disposable {\n    constructor(_grammar, _initialState, _containsEmbeddedLanguages, _createBackgroundTokenizer, _backgroundTokenizerShouldOnlyVerifyTokens, _reportTokenizationTime, _reportSlowTokenization) {\n        super();\n        this._grammar = _grammar;\n        this._initialState = _initialState;\n        this._containsEmbeddedLanguages = _containsEmbeddedLanguages;\n        this._createBackgroundTokenizer = _createBackgroundTokenizer;\n        this._backgroundTokenizerShouldOnlyVerifyTokens = _backgroundTokenizerShouldOnlyVerifyTokens;\n        this._reportTokenizationTime = _reportTokenizationTime;\n        this._reportSlowTokenization = _reportSlowTokenization;\n        this._seenLanguages = [];\n        this._onDidEncounterLanguage = this._register(( new Emitter()));\n        this.onDidEncounterLanguage = this._onDidEncounterLanguage.event;\n    }\n    get backgroundTokenizerShouldOnlyVerifyTokens() {\n        return this._backgroundTokenizerShouldOnlyVerifyTokens();\n    }\n    getInitialState() {\n        return this._initialState;\n    }\n    tokenize(line, hasEOL, state) {\n        throw ( new Error('Not supported!'));\n    }\n    createBackgroundTokenizer(textModel, store) {\n        if (this._createBackgroundTokenizer) {\n            return this._createBackgroundTokenizer(textModel, store);\n        }\n        return undefined;\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const isRandomSample = Math.random() * 10_000 < 1;\n        const shouldMeasure = this._reportSlowTokenization || isRandomSample;\n        const sw = shouldMeasure ? ( new StopWatch(true)) : undefined;\n        const textMateResult = this._grammar.tokenizeLine2(line, state, 500);\n        if (shouldMeasure) {\n            const timeMS = sw.elapsed();\n            if (isRandomSample || timeMS > 32) {\n                this._reportTokenizationTime(timeMS, line.length, isRandomSample);\n            }\n        }\n        if (textMateResult.stoppedEarly) {\n            console.warn(`Time limit reached when tokenizing line: ${line.substring(0, 100)}`);\n            return ( new EncodedTokenizationResult(textMateResult.tokens, state));\n        }\n        if (this._containsEmbeddedLanguages) {\n            const seenLanguages = this._seenLanguages;\n            const tokens = textMateResult.tokens;\n            for (let i = 0, len = (tokens.length >>> 1); i < len; i++) {\n                const metadata = tokens[(i << 1) + 1];\n                const languageId = TokenMetadata.getLanguageId(metadata);\n                if (!seenLanguages[languageId]) {\n                    seenLanguages[languageId] = true;\n                    this._onDidEncounterLanguage.fire(languageId);\n                }\n            }\n        }\n        let endState;\n        if (state.equals(textMateResult.ruleStack)) {\n            endState = state;\n        }\n        else {\n            endState = textMateResult.ruleStack;\n        }\n        return ( new EncodedTokenizationResult(textMateResult.tokens, endState));\n    }\n}\n\nexport { TextMateTokenizationSupport };\n","import { nullTokenizeEncoded } from 'vscode/vscode/vs/editor/common/languages/nullTokenize';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport 'vscode/vscode/vs/base/common/arrays';\nimport 'vscode/vscode/vs/base/common/event';\nimport 'vscode/vscode/vs/base/common/observableInternal/autorun';\nimport 'vscode/vscode/vs/base/common/observableInternal/derived';\nimport 'vscode/vscode/vs/base/common/cancellation';\nimport { keepObserved } from 'vscode/vscode/vs/base/common/observableInternal/utils';\n\nclass TokenizationSupportWithLineLimit extends Disposable {\n    get backgroundTokenizerShouldOnlyVerifyTokens() {\n        return this._actual.backgroundTokenizerShouldOnlyVerifyTokens;\n    }\n    constructor(_encodedLanguageId, _actual, disposable, _maxTokenizationLineLength) {\n        super();\n        this._encodedLanguageId = _encodedLanguageId;\n        this._actual = _actual;\n        this._maxTokenizationLineLength = _maxTokenizationLineLength;\n        this._register(keepObserved(this._maxTokenizationLineLength));\n        this._register(disposable);\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state) {\n        throw ( new Error('Not supported!'));\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        if (line.length >= this._maxTokenizationLineLength.get()) {\n            return nullTokenizeEncoded(this._encodedLanguageId, state);\n        }\n        return this._actual.tokenizeEncoded(line, hasEOL, state);\n    }\n    createBackgroundTokenizer(textModel, store) {\n        if (this._actual.createBackgroundTokenizer) {\n            return this._actual.createBackgroundTokenizer(textModel, store);\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n\nexport { TokenizationSupportWithLineLimit };\n","import { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { TMScopeRegistry } from './TMScopeRegistry.js';\n\nconst missingTMGrammarErrorMessage = 'No TM Grammar registered for this language.';\nclass TMGrammarFactory extends Disposable {\n    constructor(host, grammarDefinitions, vscodeTextmate, onigLib) {\n        super();\n        this._host = host;\n        this._initialState = vscodeTextmate.INITIAL;\n        this._scopeRegistry = ( new TMScopeRegistry());\n        this._injections = {};\n        this._injectedEmbeddedLanguages = {};\n        this._languageToScope = ( new Map());\n        this._grammarRegistry = this._register(new vscodeTextmate.Registry({\n            onigLib: onigLib,\n            loadGrammar: async (scopeName) => {\n                const grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n                if (!grammarDefinition) {\n                    this._host.logTrace(`No grammar found for scope ${scopeName}`);\n                    return null;\n                }\n                const location = grammarDefinition.location;\n                try {\n                    const content = await this._host.readFile(location);\n                    return vscodeTextmate.parseRawGrammar(content, location.path);\n                }\n                catch (e) {\n                    this._host.logError(`Unable to load and parse grammar for scope ${scopeName} from ${location}`, e);\n                    return null;\n                }\n            },\n            getInjections: (scopeName) => {\n                const scopeParts = scopeName.split('.');\n                let injections = [];\n                for (let i = 1; i <= scopeParts.length; i++) {\n                    const subScopeName = scopeParts.slice(0, i).join('.');\n                    injections = [...injections, ...(this._injections[subScopeName] || [])];\n                }\n                return injections;\n            }\n        }));\n        for (const validGrammar of grammarDefinitions) {\n            this._scopeRegistry.register(validGrammar);\n            if (validGrammar.injectTo) {\n                for (const injectScope of validGrammar.injectTo) {\n                    let injections = this._injections[injectScope];\n                    if (!injections) {\n                        this._injections[injectScope] = injections = [];\n                    }\n                    injections.push(validGrammar.scopeName);\n                }\n                if (validGrammar.embeddedLanguages) {\n                    for (const injectScope of validGrammar.injectTo) {\n                        let injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[injectScope];\n                        if (!injectedEmbeddedLanguages) {\n                            this._injectedEmbeddedLanguages[injectScope] = injectedEmbeddedLanguages = [];\n                        }\n                        injectedEmbeddedLanguages.push(validGrammar.embeddedLanguages);\n                    }\n                }\n            }\n            if (validGrammar.language) {\n                this._languageToScope.set(validGrammar.language, validGrammar.scopeName);\n            }\n        }\n    }\n    has(languageId) {\n        return ( this._languageToScope.has(languageId));\n    }\n    setTheme(theme, colorMap) {\n        this._grammarRegistry.setTheme(theme, colorMap);\n    }\n    getColorMap() {\n        return this._grammarRegistry.getColorMap();\n    }\n    async createGrammar(languageId, encodedLanguageId) {\n        const scopeName = this._languageToScope.get(languageId);\n        if (typeof scopeName !== 'string') {\n            throw ( new Error(missingTMGrammarErrorMessage));\n        }\n        const grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n        if (!grammarDefinition) {\n            throw ( new Error(missingTMGrammarErrorMessage));\n        }\n        const embeddedLanguages = grammarDefinition.embeddedLanguages;\n        if (this._injectedEmbeddedLanguages[scopeName]) {\n            const injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[scopeName];\n            for (const injected of injectedEmbeddedLanguages) {\n                for (const scope of ( Object.keys(injected))) {\n                    embeddedLanguages[scope] = injected[scope];\n                }\n            }\n        }\n        const containsEmbeddedLanguages = (( Object.keys(embeddedLanguages)).length > 0);\n        let grammar;\n        try {\n            grammar = await this._grammarRegistry.loadGrammarWithConfiguration(scopeName, encodedLanguageId, {\n                embeddedLanguages,\n                tokenTypes: grammarDefinition.tokenTypes,\n                balancedBracketSelectors: grammarDefinition.balancedBracketSelectors,\n                unbalancedBracketSelectors: grammarDefinition.unbalancedBracketSelectors,\n            });\n        }\n        catch (err) {\n            if (err.message && err.message.startsWith('No grammar provided for')) {\n                throw ( new Error(missingTMGrammarErrorMessage));\n            }\n            throw err;\n        }\n        return {\n            languageId: languageId,\n            grammar: grammar,\n            initialState: this._initialState,\n            containsEmbeddedLanguages: containsEmbeddedLanguages,\n            sourceExtensionId: grammarDefinition.sourceExtensionId,\n        };\n    }\n}\n\nexport { TMGrammarFactory, missingTMGrammarErrorMessage };\n","class TMScopeRegistry {\n    constructor() {\n        this._scopeNameToLanguageRegistration = Object.create(null);\n    }\n    reset() {\n        this._scopeNameToLanguageRegistration = Object.create(null);\n    }\n    register(def) {\n        this._scopeNameToLanguageRegistration[def.scopeName] = def;\n    }\n    getGrammarDefinition(scopeName) {\n        return this._scopeNameToLanguageRegistration[scopeName] || null;\n    }\n}\n\nexport { TMScopeRegistry };\n"],"names":[],"sourceRoot":""}