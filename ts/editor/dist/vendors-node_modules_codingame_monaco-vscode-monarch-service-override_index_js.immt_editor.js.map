{"version":3,"file":"vendors-node_modules_codingame_monaco-vscode-monarch-service-override_index_js.immt_editor.js","mappings":";;;;;;;;;;;;;AAAuC;;;;;;;;;;;;;;;;;ACA2C;AACU;;AAE5F;AACA;AACA;;AAEyC;;;;;;;;;;;;;;;;;ACPuC;;AAEhF,iDAAiD,4DAA4D,wDAAwD,iDAAiD,aAAa,iBAAiB,yBAAyB,WAAW,8FAA8F,iBAAiB,gEAAgE,wDAAwD,SAAS,WAAW,gDAAgD,yCAAyC,uDAAuD,YAAY,cAAc,gBAAgB,yDAAyD,WAAW,yDAAyD,yCAAyC,iBAAiB,qDAAqD,yCAAyC;AACl+B,2GAAC,OAAO;;AAEuB;;;;;;;;;;;;;;;;;;;;;;;;ACL0C;AACzC;AACqC;AACV;AACS;AAC8D;AAClD;AACM;AAC+B;AAChC;AACe;AAChB;;AAEpF;AACA,oEAAoE,8EAAU;AAC9E,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0FAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8EAAU;AAClE,MAAM,2EAAO,IAAI,+GAAuB;AACxC,MAAM,2EAAO,IAAI,+FAAgB;AACjC;AACA,4BAA4B,0FAAY;AACxC;AACA;AACA;AACA,mBAAmB,+FAAgB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0FAAoB;AACpD;AACA;AACA;AACA;AACA;AACA,+BAA+B,4FAAS;AACxC,2CAA2C,mGAAY;AACvD,kDAAkD,0GAAmB;AACrE;AACA;AACA,kCAAkC,8EAAU;AAC5C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAK,gBAAgB,oEAAC,uDAAuD,oEAAC,uCAAuC,kBAAkB,EAAE,0CAA0C;AAC3L,QAAQ,yEAAM,gBAAgB,oEAAC,kCAAkC,uBAAuB;AACxF;AACA,QAAQ,yEAAM,gBAAgB,oEAAC,uCAAuC,oEAAC,qBAAqB,oEAAC,kBAAkB,oEAAC,+CAA+C,oEAAC,uCAAuC,uCAAuC,KAAK,oEAAC,kBAAkB,oEAAC,iDAAiD,oEAAC,uCAAuC,+DAA+D,KAAK,oEAAC,kBAAkB,oEAAC,iDAAiD,oEAAC,uCAAuC,+DAA+D,KAAK,oEAAC,kBAAkB,oEAAC,iDAAiD,oEAAC,uCAAuC,WAAW,qEAAK,mDAAmD,KAAK,oEAAC,kBAAkB,oEAAC,iDAAiD,oEAAC,uCAAuC,WAAW,qEAAK,mDAAmD;AAC17B,QAAQ,yEAAM,gBAAgB,oEAAC;AAC/B;AACA,YAAY,yEAAM,gBAAgB,oEAAC;AACnC;AACA;AACA;AACA;AACA,yBAAyB,0FAAoB;AAC7C,2BAA2B,gGAAa;AACxC,0BAA0B,gGAAa;AACvC,0BAA0B,gGAAa;AACvC,2BAA2B,gGAAa;AACxC,2BAA2B,gGAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA0B;AAC1B,sGAAoB;;;;;;;;;;;;;;;;;AClOkF;AACF;AACX;AACH;AACgF;;AAEtK,iCAAiC,0FAAY;AAC7C;AACA;AACA;AACA,mBAAmB,mGAAqB;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oDAAoD,8GAAuB;AAC3E;AACA,YAAY,4FAAc;AAC1B,wEAAwE,oFAAM,sBAAsB,iHAAkB,GAAG,kHAAmB;AAC5I;AACA;AACA;AACA,4CAA4C,oFAAM,sBAAsB,kHAAmB,GAAG,kHAAmB;AACjH;AACA;AACA;AACA;AACA,sGAAoB","sources":["webpack://immt-editor/./node_modules/@codingame/monaco-vscode-monarch-service-override/index.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-monarch-service-override/monarch.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-monarch-service-override/vscode/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.css.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-monarch-service-override/vscode/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-monarch-service-override/vscode/src/vs/editor/standalone/browser/toggleHighContrast/toggleHighContrast.js"],"sourcesContent":["export { default } from './monarch.js';\n","import './vscode/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.js';\nimport './vscode/src/vs/editor/standalone/browser/toggleHighContrast/toggleHighContrast.js';\n\nfunction getServiceOverride() {\n    return {};\n}\n\nexport { getServiceOverride as default };\n","import n from 'vscode/external/rollup-plugin-styles/dist/runtime/inject-css.js';\n\nvar css = \".monaco-editor .tokens-inspect-widget{background-color:var(--vscode-editorHoverWidget-background);border:1px solid var(--vscode-editorHoverWidget-border);color:var(--vscode-editorHoverWidget-foreground);padding:10px;user-select:text;-webkit-user-select:text;z-index:50}.monaco-editor.hc-black .tokens-inspect-widget,.monaco-editor.hc-light .tokens-inspect-widget{border-width:2px}.monaco-editor .tokens-inspect-widget .tokens-inspect-separator{background-color:var(--vscode-editorHoverWidget-border);border:0;height:1px}.monaco-editor .tokens-inspect-widget .tm-token{font-family:var(--monaco-monospace-font)}.monaco-editor .tokens-inspect-widget .tm-token-length{float:right;font-size:60%;font-weight:400}.monaco-editor .tokens-inspect-widget .tm-metadata-table{width:100%}.monaco-editor .tokens-inspect-widget .tm-metadata-value{font-family:var(--monaco-monospace-font);text-align:right}.monaco-editor .tokens-inspect-widget .tm-token-type{font-family:var(--monaco-monospace-font)}\";\nn(css,{});\n\nexport { css, css as default };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport './inspectTokens.css.js';\nimport { reset, $, append } from 'vscode/vscode/vs/base/browser/dom';\nimport { Color } from 'vscode/vscode/vs/base/common/color';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { EditorAction, registerEditorContribution, registerEditorAction } from 'vscode/vscode/vs/editor/browser/editorExtensions';\nimport { TokenizationRegistry } from 'vscode/vscode/vs/editor/common/languages';\nimport { TokenMetadata } from 'vscode/vscode/vs/editor/common/encodedTokenAttributes';\nimport { NullState, nullTokenize, nullTokenizeEncoded } from 'vscode/vscode/vs/editor/common/languages/nullTokenize';\nimport { ILanguageService } from 'vscode/vscode/vs/editor/common/languages/language';\nimport { IStandaloneThemeService } from 'vscode/vscode/vs/editor/standalone/common/standaloneTheme';\nimport { InspectTokensNLS } from 'vscode/vscode/vs/editor/common/standaloneStrings';\n\nvar InspectTokensController_1;\nlet InspectTokensController = class InspectTokensController extends Disposable {\n    static { InspectTokensController_1 = this; }\n    static { this.ID = 'editor.contrib.inspectTokens'; }\n    static get(editor) {\n        return editor.getContribution(InspectTokensController_1.ID);\n    }\n    constructor(editor, standaloneColorService, languageService) {\n        super();\n        this._editor = editor;\n        this._languageService = languageService;\n        this._widget = null;\n        this._register(this._editor.onDidChangeModel((e) => this.stop()));\n        this._register(this._editor.onDidChangeModelLanguage((e) => this.stop()));\n        this._register(TokenizationRegistry.onDidChange((e) => this.stop()));\n        this._register(this._editor.onKeyUp((e) => e.keyCode === 9  && this.stop()));\n    }\n    dispose() {\n        this.stop();\n        super.dispose();\n    }\n    launch() {\n        if (this._widget) {\n            return;\n        }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        this._widget = ( new InspectTokensWidget(this._editor, this._languageService));\n    }\n    stop() {\n        if (this._widget) {\n            this._widget.dispose();\n            this._widget = null;\n        }\n    }\n};\nInspectTokensController = InspectTokensController_1 = ( __decorate([\n    ( __param(1, IStandaloneThemeService)),\n    ( __param(2, ILanguageService))\n], InspectTokensController));\nclass InspectTokens extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inspectTokens',\n            label: InspectTokensNLS.inspectTokensAction,\n            alias: 'Developer: Inspect Tokens',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        const controller = InspectTokensController.get(editor);\n        controller?.launch();\n    }\n}\nfunction renderTokenText(tokenText) {\n    let result = '';\n    for (let charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {\n        const charCode = tokenText.charCodeAt(charIndex);\n        switch (charCode) {\n            case 9 :\n                result += '\\u2192';\n                break;\n            case 32 :\n                result += '\\u00B7';\n                break;\n            default:\n                result += String.fromCharCode(charCode);\n        }\n    }\n    return result;\n}\nfunction getSafeTokenizationSupport(languageIdCodec, languageId) {\n    const tokenizationSupport = TokenizationRegistry.get(languageId);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    const encodedLanguageId = languageIdCodec.encodeLanguageId(languageId);\n    return {\n        getInitialState: () => NullState,\n        tokenize: (line, hasEOL, state) => nullTokenize(languageId, state),\n        tokenizeEncoded: (line, hasEOL, state) => nullTokenizeEncoded(encodedLanguageId, state)\n    };\n}\nclass InspectTokensWidget extends Disposable {\n    static { this._ID = 'editor.contrib.inspectTokensWidget'; }\n    constructor(editor, languageService) {\n        super();\n        this.allowEditorOverflow = true;\n        this._editor = editor;\n        this._languageService = languageService;\n        this._model = this._editor.getModel();\n        this._domNode = document.createElement('div');\n        this._domNode.className = 'tokens-inspect-widget';\n        this._tokenizationSupport = getSafeTokenizationSupport(this._languageService.languageIdCodec, this._model.getLanguageId());\n        this._compute(this._editor.getPosition());\n        this._register(this._editor.onDidChangeCursorPosition((e) => this._compute(this._editor.getPosition())));\n        this._editor.addContentWidget(this);\n    }\n    dispose() {\n        this._editor.removeContentWidget(this);\n        super.dispose();\n    }\n    getId() {\n        return InspectTokensWidget._ID;\n    }\n    _compute(position) {\n        const data = this._getTokensAtLine(position.lineNumber);\n        let token1Index = 0;\n        for (let i = data.tokens1.length - 1; i >= 0; i--) {\n            const t = data.tokens1[i];\n            if (position.column - 1 >= t.offset) {\n                token1Index = i;\n                break;\n            }\n        }\n        let token2Index = 0;\n        for (let i = (data.tokens2.length >>> 1); i >= 0; i--) {\n            if (position.column - 1 >= data.tokens2[(i << 1)]) {\n                token2Index = i;\n                break;\n            }\n        }\n        const lineContent = this._model.getLineContent(position.lineNumber);\n        let tokenText = '';\n        if (token1Index < data.tokens1.length) {\n            const tokenStartIndex = data.tokens1[token1Index].offset;\n            const tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;\n            tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);\n        }\n        reset(this._domNode, $('h2.tm-token', undefined, renderTokenText(tokenText), $('span.tm-token-length', undefined, `${tokenText.length} ${tokenText.length === 1 ? 'char' : 'chars'}`)));\n        append(this._domNode, $('hr.tokens-inspect-separator', { 'style': 'clear:both' }));\n        const metadata = (token2Index << 1) + 1 < data.tokens2.length ? this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]) : null;\n        append(this._domNode, $('table.tm-metadata-table', undefined, $('tbody', undefined, $('tr', undefined, $('td.tm-metadata-key', undefined, 'language'), $('td.tm-metadata-value', undefined, `${metadata ? metadata.languageId : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'token type'), $('td.tm-metadata-value', undefined, `${metadata ? this._tokenTypeToString(metadata.tokenType) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'font style'), $('td.tm-metadata-value', undefined, `${metadata ? this._fontStyleToString(metadata.fontStyle) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'foreground'), $('td.tm-metadata-value', undefined, `${metadata ? Color.Format.CSS.formatHex(metadata.foreground) : '-?-'}`)), $('tr', undefined, $('td.tm-metadata-key', undefined, 'background'), $('td.tm-metadata-value', undefined, `${metadata ? Color.Format.CSS.formatHex(metadata.background) : '-?-'}`)))));\n        append(this._domNode, $('hr.tokens-inspect-separator'));\n        if (token1Index < data.tokens1.length) {\n            append(this._domNode, $('span.tm-token-type', undefined, data.tokens1[token1Index].type));\n        }\n        this._editor.layoutContentWidget(this);\n    }\n    _decodeMetadata(metadata) {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        const tokenType = TokenMetadata.getTokenType(metadata);\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\n        const foreground = TokenMetadata.getForeground(metadata);\n        const background = TokenMetadata.getBackground(metadata);\n        return {\n            languageId: this._languageService.languageIdCodec.decodeLanguageId(languageId),\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: colorMap[foreground],\n            background: colorMap[background]\n        };\n    }\n    _tokenTypeToString(tokenType) {\n        switch (tokenType) {\n            case 0 : return 'Other';\n            case 1 : return 'Comment';\n            case 2 : return 'String';\n            case 3 : return 'RegEx';\n            default: return '??';\n        }\n    }\n    _fontStyleToString(fontStyle) {\n        let r = '';\n        if (fontStyle & 1 ) {\n            r += 'italic ';\n        }\n        if (fontStyle & 2 ) {\n            r += 'bold ';\n        }\n        if (fontStyle & 4 ) {\n            r += 'underline ';\n        }\n        if (fontStyle & 8 ) {\n            r += 'strikethrough ';\n        }\n        if (r.length === 0) {\n            r = '---';\n        }\n        return r;\n    }\n    _getTokensAtLine(lineNumber) {\n        const stateBeforeLine = this._getStateBeforeLine(lineNumber);\n        const tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), true, stateBeforeLine);\n        const tokenizationResult2 = this._tokenizationSupport.tokenizeEncoded(this._model.getLineContent(lineNumber), true, stateBeforeLine);\n        return {\n            startState: stateBeforeLine,\n            tokens1: tokenizationResult1.tokens,\n            tokens2: tokenizationResult2.tokens,\n            endState: tokenizationResult1.endState\n        };\n    }\n    _getStateBeforeLine(lineNumber) {\n        let state = this._tokenizationSupport.getInitialState();\n        for (let i = 1; i < lineNumber; i++) {\n            const tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), true, state);\n            state = tokenizationResult.endState;\n        }\n        return state;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return {\n            position: this._editor.getPosition(),\n            preference: [2 , 1 ]\n        };\n    }\n}\nregisterEditorContribution(InspectTokensController.ID, InspectTokensController, 4 );\nregisterEditorAction(InspectTokens);\n","import { EditorAction, registerEditorAction } from 'vscode/vscode/vs/editor/browser/editorExtensions';\nimport { IStandaloneThemeService } from 'vscode/vscode/vs/editor/standalone/common/standaloneTheme';\nimport { ToggleHighContrastNLS } from 'vscode/vscode/vs/editor/common/standaloneStrings';\nimport { isHighContrast, isDark } from 'vscode/vscode/vs/platform/theme/common/theme';\nimport { VS_DARK_THEME_NAME, VS_LIGHT_THEME_NAME, HC_BLACK_THEME_NAME, HC_LIGHT_THEME_NAME } from 'vscode/vscode/vs/editor/standalone/browser/standaloneThemeService';\n\nclass ToggleHighContrast extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.toggleHighContrast',\n            label: ToggleHighContrastNLS.toggleHighContrast,\n            alias: 'Toggle High Contrast Theme',\n            precondition: undefined\n        });\n        this._originalThemeName = null;\n    }\n    run(accessor, editor) {\n        const standaloneThemeService = accessor.get(IStandaloneThemeService);\n        const currentTheme = standaloneThemeService.getColorTheme();\n        if (isHighContrast(currentTheme.type)) {\n            standaloneThemeService.setTheme(this._originalThemeName || (isDark(currentTheme.type) ? VS_DARK_THEME_NAME : VS_LIGHT_THEME_NAME));\n            this._originalThemeName = null;\n        }\n        else {\n            standaloneThemeService.setTheme(isDark(currentTheme.type) ? HC_BLACK_THEME_NAME : HC_LIGHT_THEME_NAME);\n            this._originalThemeName = currentTheme.themeName;\n        }\n    }\n}\nregisterEditorAction(ToggleHighContrast);\n"],"names":[],"sourceRoot":""}