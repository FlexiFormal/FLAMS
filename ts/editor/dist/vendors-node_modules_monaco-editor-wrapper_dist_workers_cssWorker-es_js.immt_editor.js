/******/ // The require scope
/******/ var __webpack_require__ = {};
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
/*!*************************************************************************!*\
  !*** ./node_modules/monaco-editor-wrapper/dist/workers/cssWorker-es.js ***!
  \*************************************************************************/
__webpack_require__.r(__webpack_exports__);
var wa = Object.defineProperty;
var La = (e, t, n) => t in e ? wa(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;
var qe = (e, t, n) => La(e, typeof t != "symbol" ? t + "" : t, n);
class Ca {
  constructor() {
    this.listeners = [], this.unexpectedErrorHandler = function(t) {
      setTimeout(() => {
        throw t.stack ? xt.isErrorNoTelemetry(t) ? new xt(t.message + `

` + t.stack) : new Error(t.message + `

` + t.stack) : t;
      }, 0);
    };
  }
  addListener(t) {
    return this.listeners.push(t), () => {
      this._removeListener(t);
    };
  }
  emit(t) {
    this.listeners.forEach((n) => {
      n(t);
    });
  }
  _removeListener(t) {
    this.listeners.splice(this.listeners.indexOf(t), 1);
  }
  setUnexpectedErrorHandler(t) {
    this.unexpectedErrorHandler = t;
  }
  getUnexpectedErrorHandler() {
    return this.unexpectedErrorHandler;
  }
  onUnexpectedError(t) {
    this.unexpectedErrorHandler(t), this.emit(t);
  }
  onUnexpectedExternalError(t) {
    this.unexpectedErrorHandler(t);
  }
}
const Sa = new Ca();
function Pt(e) {
  Aa(e) || Sa.onUnexpectedError(e);
}
function Pr(e) {
  if (e instanceof Error) {
    const { name: t, message: n } = e, r = e.stacktrace || e.stack;
    return {
      $isError: !0,
      name: t,
      message: n,
      stack: r,
      noTelemetry: xt.isErrorNoTelemetry(e)
    };
  }
  return e;
}
const Vn = "Canceled";
function Aa(e) {
  return e instanceof Na ? !0 : e instanceof Error && e.name === Vn && e.message === Vn;
}
class Na extends Error {
  constructor() {
    super(Vn), this.name = this.message;
  }
}
class xt extends Error {
  constructor(t) {
    super(t), this.name = "CodeExpectedError";
  }
  static fromError(t) {
    if (t instanceof xt)
      return t;
    const n = new xt();
    return n.message = t.message, n.stack = t.stack, n;
  }
  static isErrorNoTelemetry(t) {
    return t.name === "CodeExpectedError";
  }
}
class he extends Error {
  constructor(t) {
    super(t || "An unexpected bug occurred."), Object.setPrototypeOf(this, he.prototype);
  }
}
function Ra(e, t) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r of e) {
    const i = t(r);
    let s = n[i];
    s || (s = n[i] = []), s.push(r);
  }
  return n;
}
function ya(e, t) {
  const n = this;
  let r = !1, i;
  return function() {
    return r || (r = !0, i = e.apply(n, arguments)), i;
  };
}
function vt(e, t) {
  const n = wt(e, t);
  return n === -1 ? void 0 : e[n];
}
function wt(e, t, n = 0, r = e.length) {
  let i = n, s = r;
  for (; i < s; ) {
    const a = Math.floor((i + s) / 2);
    t(e[a]) ? i = a + 1 : s = a;
  }
  return i - 1;
}
function Ea(e, t) {
  const n = Un(e, t);
  return n === e.length ? void 0 : e[n];
}
function Un(e, t, n = 0, r = e.length) {
  let i = n, s = r;
  for (; i < s; ) {
    const a = Math.floor((i + s) / 2);
    t(e[a]) ? s = a : i = a + 1;
  }
  return i;
}
const vn = class vn {
  constructor(t) {
    this._array = t, this._findLastMonotonousLastIdx = 0;
  }
  findLastMonotonous(t) {
    if (vn.assertInvariants) {
      if (this._prevFindLastPredicate) {
        for (const r of this._array)
          if (this._prevFindLastPredicate(r) && !t(r))
            throw new Error(
              "MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate."
            );
      }
      this._prevFindLastPredicate = t;
    }
    const n = wt(this._array, t, this._findLastMonotonousLastIdx);
    return this._findLastMonotonousLastIdx = n + 1, n === -1 ? void 0 : this._array[n];
  }
};
vn.assertInvariants = !1;
let rn = vn;
function ka(e, t, n = (r, i) => r === i) {
  if (e === t)
    return !0;
  if (!e || !t || e.length !== t.length)
    return !1;
  for (let r = 0, i = e.length; r < i; r++)
    if (!n(e[r], t[r]))
      return !1;
  return !0;
}
function* Ma(e, t) {
  let n, r;
  for (const i of e)
    r !== void 0 && t(r, i) ? n.push(i) : (n && (yield n), n = [i]), r = i;
  n && (yield n);
}
function Pa(e, t) {
  for (let n = 0; n <= e.length; n++)
    t(n === 0 ? void 0 : e[n - 1], n === e.length ? void 0 : e[n]);
}
function $a(e, t) {
  for (let n = 0; n < e.length; n++)
    t(n === 0 ? void 0 : e[n - 1], e[n], n + 1 === e.length ? void 0 : e[n + 1]);
}
function Da(e, t) {
  for (const n of t)
    e.push(n);
}
var Bn;
(function(e) {
  function t(s) {
    return s < 0;
  }
  e.isLessThan = t;
  function n(s) {
    return s <= 0;
  }
  e.isLessThanOrEqual = n;
  function r(s) {
    return s > 0;
  }
  e.isGreaterThan = r;
  function i(s) {
    return s === 0;
  }
  e.isNeitherLessOrGreaterThan = i, e.greaterThan = 1, e.lessThan = -1, e.neitherLessOrGreaterThan = 0;
})(Bn || (Bn = {}));
function $t(e, t) {
  return (n, r) => t(e(n), e(r));
}
const Dt = (e, t) => e - t;
function Fa(e) {
  return (t, n) => -e(t, n);
}
const dt = class dt {
  constructor(t) {
    this.iterate = t;
  }
  forEach(t) {
    this.iterate((n) => (t(n), !0));
  }
  toArray() {
    const t = [];
    return this.iterate((n) => (t.push(n), !0)), t;
  }
  filter(t) {
    return new dt((n) => this.iterate((r) => t(r) ? n(r) : !0));
  }
  map(t) {
    return new dt((n) => this.iterate((r) => n(t(r))));
  }
  some(t) {
    let n = !1;
    return this.iterate((r) => (n = t(r), !n)), n;
  }
  findFirst(t) {
    let n;
    return this.iterate((r) => t(r) ? (n = r, !1) : !0), n;
  }
  findLast(t) {
    let n;
    return this.iterate((r) => (t(r) && (n = r), !0)), n;
  }
  findLastMaxBy(t) {
    let n, r = !0;
    return this.iterate((i) => ((r || Bn.isGreaterThan(t(i, n))) && (r = !1, n = i), !0)), n;
  }
};
dt.empty = new dt((t) => {
});
let $r = dt;
var Dr, Fr;
class Ia {
  constructor(t, n) {
    this.uri = t, this.value = n;
  }
}
function Va(e) {
  return Array.isArray(e);
}
const Je = class Je {
  constructor(t, n) {
    if (this[Dr] = "ResourceMap", t instanceof Je)
      this.map = new Map(t.map), this.toKey = n ?? Je.defaultToKey;
    else if (Va(t)) {
      this.map = /* @__PURE__ */ new Map(), this.toKey = n ?? Je.defaultToKey;
      for (const [r, i] of t)
        this.set(r, i);
    } else
      this.map = /* @__PURE__ */ new Map(), this.toKey = t ?? Je.defaultToKey;
  }
  set(t, n) {
    return this.map.set(this.toKey(t), new Ia(t, n)), this;
  }
  get(t) {
    var n;
    return (n = this.map.get(this.toKey(t))) == null ? void 0 : n.value;
  }
  has(t) {
    return this.map.has(this.toKey(t));
  }
  get size() {
    return this.map.size;
  }
  clear() {
    this.map.clear();
  }
  delete(t) {
    return this.map.delete(this.toKey(t));
  }
  forEach(t, n) {
    typeof n < "u" && (t = t.bind(n));
    for (const [r, i] of this.map)
      t(i.value, i.uri, this);
  }
  *values() {
    for (const t of this.map.values())
      yield t.value;
  }
  *keys() {
    for (const t of this.map.values())
      yield t.uri;
  }
  *entries() {
    for (const t of this.map.values())
      yield [t.uri, t.value];
  }
  *[(Dr = Symbol.toStringTag, Symbol.iterator)]() {
    for (const [, t] of this.map)
      yield [t.uri, t.value];
  }
};
Je.defaultToKey = (t) => t.toString();
let qn = Je;
class Ua {
  constructor() {
    this[Fr] = "LinkedMap", this._map = /* @__PURE__ */ new Map(), this._head = void 0, this._tail = void 0, this._size = 0, this._state = 0;
  }
  clear() {
    this._map.clear(), this._head = void 0, this._tail = void 0, this._size = 0, this._state++;
  }
  isEmpty() {
    return !this._head && !this._tail;
  }
  get size() {
    return this._size;
  }
  get first() {
    var t;
    return (t = this._head) == null ? void 0 : t.value;
  }
  get last() {
    var t;
    return (t = this._tail) == null ? void 0 : t.value;
  }
  has(t) {
    return this._map.has(t);
  }
  get(t, n = 0) {
    const r = this._map.get(t);
    if (r)
      return n !== 0 && this.touch(r, n), r.value;
  }
  set(t, n, r = 0) {
    let i = this._map.get(t);
    if (i)
      i.value = n, r !== 0 && this.touch(i, r);
    else {
      switch (i = { key: t, value: n, next: void 0, previous: void 0 }, r) {
        case 0:
          this.addItemLast(i);
          break;
        case 1:
          this.addItemFirst(i);
          break;
        case 2:
          this.addItemLast(i);
          break;
        default:
          this.addItemLast(i);
          break;
      }
      this._map.set(t, i), this._size++;
    }
    return this;
  }
  delete(t) {
    return !!this.remove(t);
  }
  remove(t) {
    const n = this._map.get(t);
    if (n)
      return this._map.delete(t), this.removeItem(n), this._size--, n.value;
  }
  shift() {
    if (!this._head && !this._tail)
      return;
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    const t = this._head;
    return this._map.delete(t.key), this.removeItem(t), this._size--, t.value;
  }
  forEach(t, n) {
    const r = this._state;
    let i = this._head;
    for (; i; ) {
      if (n ? t.bind(n)(i.value, i.key, this) : t(i.value, i.key, this), this._state !== r)
        throw new Error("LinkedMap got modified during iteration.");
      i = i.next;
    }
  }
  keys() {
    const t = this, n = this._state;
    let r = this._head;
    const i = {
      [Symbol.iterator]() {
        return i;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (r) {
          const s = { value: r.key, done: !1 };
          return r = r.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return i;
  }
  values() {
    const t = this, n = this._state;
    let r = this._head;
    const i = {
      [Symbol.iterator]() {
        return i;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (r) {
          const s = { value: r.value, done: !1 };
          return r = r.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return i;
  }
  entries() {
    const t = this, n = this._state;
    let r = this._head;
    const i = {
      [Symbol.iterator]() {
        return i;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (r) {
          const s = { value: [r.key, r.value], done: !1 };
          return r = r.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return i;
  }
  [(Fr = Symbol.toStringTag, Symbol.iterator)]() {
    return this.entries();
  }
  trimOld(t) {
    if (t >= this.size)
      return;
    if (t === 0) {
      this.clear();
      return;
    }
    let n = this._head, r = this.size;
    for (; n && r > t; )
      this._map.delete(n.key), n = n.next, r--;
    this._head = n, this._size = r, n && (n.previous = void 0), this._state++;
  }
  trimNew(t) {
    if (t >= this.size)
      return;
    if (t === 0) {
      this.clear();
      return;
    }
    let n = this._tail, r = this.size;
    for (; n && r > t; )
      this._map.delete(n.key), n = n.previous, r--;
    this._tail = n, this._size = r, n && (n.next = void 0), this._state++;
  }
  addItemFirst(t) {
    if (!this._head && !this._tail)
      this._tail = t;
    else if (this._head)
      t.next = this._head, this._head.previous = t;
    else
      throw new Error("Invalid list");
    this._head = t, this._state++;
  }
  addItemLast(t) {
    if (!this._head && !this._tail)
      this._head = t;
    else if (this._tail)
      t.previous = this._tail, this._tail.next = t;
    else
      throw new Error("Invalid list");
    this._tail = t, this._state++;
  }
  removeItem(t) {
    if (t === this._head && t === this._tail)
      this._head = void 0, this._tail = void 0;
    else if (t === this._head) {
      if (!t.next)
        throw new Error("Invalid list");
      t.next.previous = void 0, this._head = t.next;
    } else if (t === this._tail) {
      if (!t.previous)
        throw new Error("Invalid list");
      t.previous.next = void 0, this._tail = t.previous;
    } else {
      const n = t.next, r = t.previous;
      if (!n || !r)
        throw new Error("Invalid list");
      n.previous = r, r.next = n;
    }
    t.next = void 0, t.previous = void 0, this._state++;
  }
  touch(t, n) {
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    if (!(n !== 1 && n !== 2)) {
      if (n === 1) {
        if (t === this._head)
          return;
        const r = t.next, i = t.previous;
        t === this._tail ? (i.next = void 0, this._tail = i) : (r.previous = i, i.next = r), t.previous = void 0, t.next = this._head, this._head.previous = t, this._head = t, this._state++;
      } else if (n === 2) {
        if (t === this._tail)
          return;
        const r = t.next, i = t.previous;
        t === this._head ? (r.previous = void 0, this._head = r) : (r.previous = i, i.next = r), t.next = void 0, t.previous = this._tail, this._tail.next = t, this._tail = t, this._state++;
      }
    }
  }
  toJSON() {
    const t = [];
    return this.forEach((n, r) => {
      t.push([r, n]);
    }), t;
  }
  fromJSON(t) {
    this.clear();
    for (const [n, r] of t)
      this.set(n, r);
  }
}
class Ba extends Ua {
  constructor(t, n = 1) {
    super(), this._limit = t, this._ratio = Math.min(Math.max(0, n), 1);
  }
  get limit() {
    return this._limit;
  }
  set limit(t) {
    this._limit = t, this.checkTrim();
  }
  get ratio() {
    return this._ratio;
  }
  set ratio(t) {
    this._ratio = Math.min(Math.max(0, t), 1), this.checkTrim();
  }
  get(t, n = 2) {
    return super.get(t, n);
  }
  peek(t) {
    return super.get(t, 0);
  }
  set(t, n) {
    return super.set(t, n, 2), this;
  }
  checkTrim() {
    this.size > this._limit && this.trim(Math.round(this._limit * this._ratio));
  }
}
class qa extends Ba {
  constructor(t, n = 1) {
    super(t, n);
  }
  trim(t) {
    this.trimOld(t);
  }
  set(t, n) {
    return super.set(t, n), this.checkTrim(), this;
  }
}
class j1 {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  add(t, n) {
    let r = this.map.get(t);
    r || (r = /* @__PURE__ */ new Set(), this.map.set(t, r)), r.add(n);
  }
  delete(t, n) {
    const r = this.map.get(t);
    r && (r.delete(n), r.size === 0 && this.map.delete(t));
  }
  forEach(t, n) {
    const r = this.map.get(t);
    r && r.forEach(n);
  }
  get(t) {
    const n = this.map.get(t);
    return n || /* @__PURE__ */ new Set();
  }
}
var sn;
(function(e) {
  function t(S) {
    return S && typeof S == "object" && typeof S[Symbol.iterator] == "function";
  }
  e.is = t;
  const n = Object.freeze([]);
  function r() {
    return n;
  }
  e.empty = r;
  function* i(S) {
    yield S;
  }
  e.single = i;
  function s(S) {
    return t(S) ? S : i(S);
  }
  e.wrap = s;
  function a(S) {
    return S || n;
  }
  e.from = a;
  function* o(S) {
    for (let A = S.length - 1; A >= 0; A--)
      yield S[A];
  }
  e.reverse = o;
  function l(S) {
    return !S || S[Symbol.iterator]().next().done === !0;
  }
  e.isEmpty = l;
  function u(S) {
    return S[Symbol.iterator]().next().value;
  }
  e.first = u;
  function h(S, A) {
    let P = 0;
    for (const $ of S)
      if (A($, P++))
        return !0;
    return !1;
  }
  e.some = h;
  function f(S, A) {
    for (const P of S)
      if (A(P))
        return P;
  }
  e.find = f;
  function* m(S, A) {
    for (const P of S)
      A(P) && (yield P);
  }
  e.filter = m;
  function* d(S, A) {
    let P = 0;
    for (const $ of S)
      yield A($, P++);
  }
  e.map = d;
  function* p(S, A) {
    let P = 0;
    for (const $ of S)
      yield* A($, P++);
  }
  e.flatMap = p;
  function* b(...S) {
    for (const A of S)
      yield* A;
  }
  e.concat = b;
  function N(S, A, P) {
    let $ = P;
    for (const D of S)
      $ = A($, D);
    return $;
  }
  e.reduce = N;
  function* L(S, A, P = S.length) {
    for (A < 0 && (A += S.length), P < 0 ? P += S.length : P > S.length && (P = S.length); A < P; A++)
      yield S[A];
  }
  e.slice = L;
  function C(S, A = Number.POSITIVE_INFINITY) {
    const P = [];
    if (A === 0)
      return [P, S];
    const $ = S[Symbol.iterator]();
    for (let D = 0; D < A; D++) {
      const q = $.next();
      if (q.done)
        return [P, e.empty()];
      P.push(q.value);
    }
    return [P, { [Symbol.iterator]() {
      return $;
    } }];
  }
  e.consume = C;
  async function R(S) {
    const A = [];
    for await (const P of S)
      A.push(P);
    return Promise.resolve(A);
  }
  e.asyncToArray = R;
})(sn || (sn = {}));
const wn = class wn {
  constructor() {
    this.livingDisposables = /* @__PURE__ */ new Map();
  }
  getDisposableData(t) {
    let n = this.livingDisposables.get(t);
    return n || (n = { parent: null, source: null, isSingleton: !1, value: t, idx: wn.idx++ }, this.livingDisposables.set(t, n)), n;
  }
  trackDisposable(t) {
    const n = this.getDisposableData(t);
    n.source || (n.source = new Error().stack);
  }
  setParent(t, n) {
    const r = this.getDisposableData(t);
    r.parent = n;
  }
  markAsDisposed(t) {
    this.livingDisposables.delete(t);
  }
  markAsSingleton(t) {
    this.getDisposableData(t).isSingleton = !0;
  }
  getRootParent(t, n) {
    const r = n.get(t);
    if (r)
      return r;
    const i = t.parent ? this.getRootParent(this.getDisposableData(t.parent), n) : t;
    return n.set(t, i), i;
  }
  getTrackedDisposables() {
    const t = /* @__PURE__ */ new Map();
    return [...this.livingDisposables.entries()].filter(([, r]) => r.source !== null && !this.getRootParent(r, t).isSingleton).flatMap(([r]) => r);
  }
  computeLeakingDisposables(t = 10, n) {
    let r;
    if (n)
      r = n;
    else {
      const l = /* @__PURE__ */ new Map(), u = [...this.livingDisposables.values()].filter((f) => f.source !== null && !this.getRootParent(f, l).isSingleton);
      if (u.length === 0)
        return;
      const h = new Set(u.map((f) => f.value));
      if (r = u.filter((f) => !(f.parent && h.has(f.parent))), r.length === 0)
        throw new Error("There are cyclic diposable chains!");
    }
    if (!r)
      return;
    function i(l) {
      function u(f, m) {
        for (; f.length > 0 && m.some(
          (d) => typeof d == "string" ? d === f[0] : f[0].match(d)
        ); )
          f.shift();
      }
      const h = l.source.split(`
`).map((f) => f.trim().replace("at ", "")).filter((f) => f !== "");
      return u(h, ["Error", /^trackDisposable \(.*\)$/, /^DisposableTracker.trackDisposable \(.*\)$/]), h.reverse();
    }
    const s = new j1();
    for (const l of r) {
      const u = i(l);
      for (let h = 0; h <= u.length; h++)
        s.add(u.slice(0, h).join(`
`), l);
    }
    r.sort($t((l) => l.idx, Dt));
    let a = "", o = 0;
    for (const l of r.slice(0, t)) {
      o++;
      const u = i(l), h = [];
      for (let f = 0; f < u.length; f++) {
        let m = u[f];
        m = `(shared with ${s.get(u.slice(0, f + 1).join(`
`)).size}/${r.length} leaks) at ${m}`;
        const p = s.get(u.slice(0, f).join(`
`)), b = Ra([...p].map((N) => i(N)[f]), (N) => N);
        delete b[u[f]];
        for (const [N, L] of Object.entries(b))
          h.unshift(`    - stacktraces of ${L.length} other leaks continue with ${N}`);
        h.unshift(m);
      }
      a += `


==================== Leaking disposable ${o}/${r.length}: ${l.value.constructor.name} ====================
${h.join(`
`)}
============================================================

`;
    }
    return r.length > t && (a += `


... and ${r.length - t} more leaking disposables

`), { leaks: r, details: a };
  }
};
wn.idx = 0;
let Ir = wn;
function G1(e) {
  if (sn.is(e)) {
    const t = [];
    for (const n of e)
      if (n)
        try {
          n.dispose();
        } catch (r) {
          t.push(r);
        }
    if (t.length === 1)
      throw t[0];
    if (t.length > 1)
      throw new AggregateError(t, "Encountered errors while disposing of store");
    return Array.isArray(e) ? [] : e;
  } else if (e)
    return e.dispose(), e;
}
function Oa(...e) {
  return Bt(() => G1(e));
}
function Bt(e) {
  return {
    dispose: ya(() => {
      e();
    })
  };
}
const Ln = class Ln {
  constructor() {
    this._toDispose = /* @__PURE__ */ new Set(), this._isDisposed = !1;
  }
  dispose() {
    this._isDisposed || (this._isDisposed = !0, this.clear());
  }
  get isDisposed() {
    return this._isDisposed;
  }
  clear() {
    if (this._toDispose.size !== 0)
      try {
        G1(this._toDispose);
      } finally {
        this._toDispose.clear();
      }
  }
  add(t) {
    if (!t)
      return t;
    if (t === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._isDisposed ? Ln.DISABLE_DISPOSED_WARNING || console.warn(new Error(
      "Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!"
    ).stack) : this._toDispose.add(t), t;
  }
  delete(t) {
    if (t) {
      if (t === this)
        throw new Error("Cannot dispose a disposable on itself!");
      this._toDispose.delete(t), t.dispose();
    }
  }
  deleteAndLeak(t) {
    t && this._toDispose.has(t) && this._toDispose.delete(t);
  }
};
Ln.DISABLE_DISPOSED_WARNING = !1;
let qt = Ln;
const Mr = class Mr {
  constructor() {
    this._store = new qt(), this._store;
  }
  dispose() {
    this._store.dispose();
  }
  _register(t) {
    if (t === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._store.add(t);
  }
};
Mr.None = Object.freeze({ dispose() {
} });
let Lt = Mr;
const mt = class mt {
  constructor(t) {
    this.element = t, this.next = mt.Undefined, this.prev = mt.Undefined;
  }
};
mt.Undefined = new mt(void 0);
let K = mt;
class Wa {
  constructor() {
    this._first = K.Undefined, this._last = K.Undefined, this._size = 0;
  }
  get size() {
    return this._size;
  }
  isEmpty() {
    return this._first === K.Undefined;
  }
  clear() {
    let t = this._first;
    for (; t !== K.Undefined; ) {
      const n = t.next;
      t.prev = K.Undefined, t.next = K.Undefined, t = n;
    }
    this._first = K.Undefined, this._last = K.Undefined, this._size = 0;
  }
  unshift(t) {
    return this._insert(t, !1);
  }
  push(t) {
    return this._insert(t, !0);
  }
  _insert(t, n) {
    const r = new K(t);
    if (this._first === K.Undefined)
      this._first = r, this._last = r;
    else if (n) {
      const s = this._last;
      this._last = r, r.prev = s, s.next = r;
    } else {
      const s = this._first;
      this._first = r, r.next = s, s.prev = r;
    }
    this._size += 1;
    let i = !1;
    return () => {
      i || (i = !0, this._remove(r));
    };
  }
  shift() {
    if (this._first !== K.Undefined) {
      const t = this._first.element;
      return this._remove(this._first), t;
    }
  }
  pop() {
    if (this._last !== K.Undefined) {
      const t = this._last.element;
      return this._remove(this._last), t;
    }
  }
  _remove(t) {
    if (t.prev !== K.Undefined && t.next !== K.Undefined) {
      const n = t.prev;
      n.next = t.next, t.next.prev = n;
    } else t.prev === K.Undefined && t.next === K.Undefined ? (this._first = K.Undefined, this._last = K.Undefined) : t.next === K.Undefined ? (this._last = this._last.prev, this._last.next = K.Undefined) : t.prev === K.Undefined && (this._first = this._first.next, this._first.prev = K.Undefined);
    this._size -= 1;
  }
  *[Symbol.iterator]() {
    let t = this._first;
    for (; t !== K.Undefined; )
      yield t.element, t = t.next;
  }
}
const za = globalThis.performance && typeof globalThis.performance.now == "function";
class Rn {
  static create(t) {
    return new Rn(t);
  }
  constructor(t) {
    this._now = za && t === !1 ? Date.now : globalThis.performance.now.bind(globalThis.performance), this._startTime = this._now(), this._stopTime = -1;
  }
  stop() {
    this._stopTime = this._now();
  }
  reset() {
    this._startTime = this._now(), this._stopTime = -1;
  }
  elapsed() {
    return this._stopTime !== -1 ? this._stopTime - this._startTime : this._now() - this._startTime;
  }
}
var an;
(function(e) {
  e.None = () => Lt.None;
  function t(w, x) {
    return m(w, () => {
    }, 0, void 0, !0, void 0, x);
  }
  e.defer = t;
  function n(w) {
    return (x, E = null, y) => {
      let M = !1, I;
      return I = w((V) => {
        if (!M)
          return I ? I.dispose() : M = !0, x.call(E, V);
      }, null, y), M && I.dispose(), I;
    };
  }
  e.once = n;
  function r(w, x) {
    return e.once(e.filter(w, x));
  }
  e.onceIf = r;
  function i(w, x, E) {
    return h((y, M = null, I) => w((V) => y.call(M, x(V)), null, I), E);
  }
  e.map = i;
  function s(w, x, E) {
    return h((y, M = null, I) => w((V) => {
      x(V), y.call(M, V);
    }, null, I), E);
  }
  e.forEach = s;
  function a(w, x, E) {
    return h((y, M = null, I) => w((V) => x(V) && y.call(M, V), null, I), E);
  }
  e.filter = a;
  function o(w) {
    return w;
  }
  e.signal = o;
  function l(...w) {
    return (x, E = null, y) => {
      const M = Oa(...w.map((I) => I((V) => x.call(E, V))));
      return f(M, y);
    };
  }
  e.any = l;
  function u(w, x, E, y) {
    let M = E;
    return i(w, (I) => (M = x(M, I), M), y);
  }
  e.reduce = u;
  function h(w, x) {
    let E;
    const y = {
      onWillAddFirstListener() {
        E = w(M.fire, M);
      },
      onDidRemoveLastListener() {
        E == null || E.dispose();
      }
    }, M = new ve(y);
    return x == null || x.add(M), M.event;
  }
  function f(w, x) {
    return x instanceof Array ? x.push(w) : x && x.add(w), w;
  }
  function m(w, x, E = 100, y = !1, M = !1, I, V) {
    let O, te, Pe, it = 0, $e;
    const _a = {
      leakWarningThreshold: I,
      onWillAddFirstListener() {
        O = w((xa) => {
          it++, te = x(te, xa), y && !Pe && (Gt.fire(te), te = void 0), $e = () => {
            const va = te;
            te = void 0, Pe = void 0, (!y || it > 1) && Gt.fire(va), it = 0;
          }, typeof E == "number" ? (clearTimeout(Pe), Pe = setTimeout($e, E)) : Pe === void 0 && (Pe = 0, queueMicrotask($e));
        });
      },
      onWillRemoveListener() {
        M && it > 0 && ($e == null || $e());
      },
      onDidRemoveLastListener() {
        $e = void 0, O.dispose();
      }
    }, Gt = new ve(_a);
    return V == null || V.add(Gt), Gt.event;
  }
  e.debounce = m;
  function d(w, x = 0, E) {
    return e.debounce(w, (y, M) => y ? (y.push(M), y) : [M], x, void 0, !0, void 0, E);
  }
  e.accumulate = d;
  function p(w, x = (y, M) => y === M, E) {
    let y = !0, M;
    return a(w, (I) => {
      const V = y || !x(I, M);
      return y = !1, M = I, V;
    }, E);
  }
  e.latch = p;
  function b(w, x, E) {
    return [
      e.filter(w, x, E),
      e.filter(w, (y) => !x(y), E)
    ];
  }
  e.split = b;
  function N(w, x = !1, E = [], y) {
    let M = E.slice(), I = w((te) => {
      M ? M.push(te) : O.fire(te);
    });
    y && y.add(I);
    const V = () => {
      M == null || M.forEach((te) => O.fire(te)), M = null;
    }, O = new ve({
      onWillAddFirstListener() {
        I || (I = w((te) => O.fire(te)), y && y.add(I));
      },
      onDidAddFirstListener() {
        M && (x ? setTimeout(V) : V());
      },
      onDidRemoveLastListener() {
        I && I.dispose(), I = null;
      }
    });
    return y && y.add(O), O.event;
  }
  e.buffer = N;
  function L(w, x) {
    return (y, M, I) => {
      const V = x(new R());
      return w(function(O) {
        const te = V.evaluate(O);
        te !== C && y.call(M, te);
      }, void 0, I);
    };
  }
  e.chain = L;
  const C = Symbol("HaltChainable");
  class R {
    constructor() {
      this.steps = [];
    }
    map(x) {
      return this.steps.push(x), this;
    }
    forEach(x) {
      return this.steps.push((E) => (x(E), E)), this;
    }
    filter(x) {
      return this.steps.push((E) => x(E) ? E : C), this;
    }
    reduce(x, E) {
      let y = E;
      return this.steps.push((M) => (y = x(y, M), y)), this;
    }
    latch(x = (E, y) => E === y) {
      let E = !0, y;
      return this.steps.push((M) => {
        const I = E || !x(M, y);
        return E = !1, y = M, I ? M : C;
      }), this;
    }
    evaluate(x) {
      for (const E of this.steps)
        if (x = E(x), x === C)
          break;
      return x;
    }
  }
  function S(w, x, E = (y) => y) {
    const y = (...O) => V.fire(E(...O)), M = () => w.on(x, y), I = () => w.removeListener(x, y), V = new ve(
      { onWillAddFirstListener: M, onDidRemoveLastListener: I }
    );
    return V.event;
  }
  e.fromNodeEventEmitter = S;
  function A(w, x, E = (y) => y) {
    const y = (...O) => V.fire(E(...O)), M = () => w.addEventListener(x, y), I = () => w.removeEventListener(x, y), V = new ve(
      { onWillAddFirstListener: M, onDidRemoveLastListener: I }
    );
    return V.event;
  }
  e.fromDOMEventEmitter = A;
  function P(w) {
    return new Promise((x) => n(w)(x));
  }
  e.toPromise = P;
  function $(w) {
    const x = new ve();
    return w.then((E) => {
      x.fire(E);
    }, () => {
      x.fire(void 0);
    }).finally(() => {
      x.dispose();
    }), x.event;
  }
  e.fromPromise = $;
  function D(w, x) {
    return w((E) => x.fire(E));
  }
  e.forward = D;
  function q(w, x, E) {
    return x(E), w((y) => x(y));
  }
  e.runAndSubscribe = q;
  class Q {
    constructor(x, E) {
      this._observable = x, this._counter = 0, this._hasChanged = !1;
      const y = {
        onWillAddFirstListener: () => {
          x.addObserver(this), this._observable.reportChanges();
        },
        onDidRemoveLastListener: () => {
          x.removeObserver(this);
        }
      };
      this.emitter = new ve(y), E && E.add(this.emitter);
    }
    beginUpdate(x) {
      this._counter++;
    }
    handlePossibleChange(x) {
    }
    handleChange(x, E) {
      this._hasChanged = !0;
    }
    endUpdate(x) {
      this._counter--, this._counter === 0 && (this._observable.reportChanges(), this._hasChanged && (this._hasChanged = !1, this.emitter.fire(this._observable.get())));
    }
  }
  function k(w, x) {
    return new Q(w, x).emitter.event;
  }
  e.fromObservable = k;
  function v(w) {
    return (x, E, y) => {
      let M = 0, I = !1;
      const V = {
        beginUpdate() {
          M++;
        },
        endUpdate() {
          M--, M === 0 && (w.reportChanges(), I && (I = !1, x.call(E)));
        },
        handlePossibleChange() {
        },
        handleChange() {
          I = !0;
        }
      };
      w.addObserver(V), w.reportChanges();
      const O = {
        dispose() {
          w.removeObserver(V);
        }
      };
      return y instanceof qt ? y.add(O) : Array.isArray(y) && y.push(O), O;
    };
  }
  e.fromObservableLight = v;
})(an || (an = {}));
const gt = class gt {
  constructor(t) {
    this.listenerCount = 0, this.invocationCount = 0, this.elapsedOverall = 0, this.durations = [], this.name = `${t}_${gt._idPool++}`, gt.all.add(this);
  }
  start(t) {
    this._stopWatch = new Rn(), this.listenerCount = t;
  }
  stop() {
    if (this._stopWatch) {
      const t = this._stopWatch.elapsed();
      this.durations.push(t), this.elapsedOverall += t, this.invocationCount += 1, this._stopWatch = void 0;
    }
  }
};
gt.all = /* @__PURE__ */ new Set(), gt._idPool = 0;
let On = gt, Ha = -1;
const Cn = class Cn {
  constructor(t, n, r = (Cn._idPool++).toString(16).padStart(3, "0")) {
    this._errorHandler = t, this.threshold = n, this.name = r, this._warnCountdown = 0;
  }
  dispose() {
    var t;
    (t = this._stacks) == null || t.clear();
  }
  check(t, n) {
    const r = this.threshold;
    if (r <= 0 || n < r)
      return;
    this._stacks || (this._stacks = /* @__PURE__ */ new Map());
    const i = this._stacks.get(t.value) || 0;
    if (this._stacks.set(t.value, i + 1), this._warnCountdown -= 1, this._warnCountdown <= 0) {
      this._warnCountdown = r * 0.5;
      const [s, a] = this.getMostFrequentStack(), o = `[${this.name}] potential listener LEAK detected, having ${n} listeners already. MOST frequent listener (${a}):`;
      console.warn(o), console.warn(s);
      const l = new ja(o, s);
      this._errorHandler(l);
    }
    return () => {
      const s = this._stacks.get(t.value) || 0;
      this._stacks.set(t.value, s - 1);
    };
  }
  getMostFrequentStack() {
    if (!this._stacks)
      return;
    let t, n = 0;
    for (const [r, i] of this._stacks)
      (!t || n < i) && (t = [r, i], n = i);
    return t;
  }
};
Cn._idPool = 1;
let Wn = Cn;
class Cr {
  static create() {
    const t = new Error();
    return new Cr(t.stack ?? "");
  }
  constructor(t) {
    this.value = t;
  }
  print() {
    console.warn(this.value.split(`
`).slice(2).join(`
`));
  }
}
class ja extends Error {
  constructor(t, n) {
    super(t), this.name = "ListenerLeakError", this.stack = n;
  }
}
class Ga extends Error {
  constructor(t, n) {
    super(t), this.name = "ListenerRefusalError", this.stack = n;
  }
}
let Ta = 0;
class yn {
  constructor(t) {
    this.value = t, this.id = Ta++;
  }
}
const Xa = 2;
class ve {
  constructor(t) {
    var n, r, i, s;
    this._size = 0, this._options = t, this._leakageMon = (n = this._options) != null && n.leakWarningThreshold ? new Wn(
      (t == null ? void 0 : t.onListenerError) ?? Pt,
      ((r = this._options) == null ? void 0 : r.leakWarningThreshold) ?? Ha
    ) : void 0, this._perfMon = (i = this._options) != null && i._profName ? new On(this._options._profName) : void 0, this._deliveryQueue = (s = this._options) == null ? void 0 : s.deliveryQueue;
  }
  dispose() {
    var t, n, r, i;
    this._disposed || (this._disposed = !0, ((t = this._deliveryQueue) == null ? void 0 : t.current) === this && this._deliveryQueue.reset(), this._listeners && (this._listeners = void 0, this._size = 0), (r = (n = this._options) == null ? void 0 : n.onDidRemoveLastListener) == null || r.call(n), (i = this._leakageMon) == null || i.dispose());
  }
  get event() {
    return this._event ?? (this._event = (t, n, r) => {
      var o, l, u, h, f;
      if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
        const m = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
        console.warn(m);
        const d = this._leakageMon.getMostFrequentStack() ?? ["UNKNOWN stack", -1], p = new Ga(
          `${m}. HINT: Stack shows most frequent listener (${d[1]}-times)`,
          d[0]
        );
        return (((o = this._options) == null ? void 0 : o.onListenerError) || Pt)(p), Lt.None;
      }
      if (this._disposed)
        return Lt.None;
      n && (t = t.bind(n));
      const i = new yn(t);
      let s;
      this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2) && (i.stack = Cr.create(), s = this._leakageMon.check(i.stack, this._size + 1)), this._listeners ? this._listeners instanceof yn ? (this._deliveryQueue ?? (this._deliveryQueue = new Qa()), this._listeners = [this._listeners, i]) : this._listeners.push(i) : ((u = (l = this._options) == null ? void 0 : l.onWillAddFirstListener) == null || u.call(l, this), this._listeners = i, (f = (h = this._options) == null ? void 0 : h.onDidAddFirstListener) == null || f.call(h, this)), this._size++;
      const a = Bt(() => {
        s == null || s(), this._removeListener(i);
      });
      return r instanceof qt ? r.add(a) : Array.isArray(r) && r.push(a), a;
    }), this._event;
  }
  _removeListener(t) {
    var s, a, o, l;
    if ((a = (s = this._options) == null ? void 0 : s.onWillRemoveListener) == null || a.call(s, this), !this._listeners)
      return;
    if (this._size === 1) {
      this._listeners = void 0, (l = (o = this._options) == null ? void 0 : o.onDidRemoveLastListener) == null || l.call(o, this), this._size = 0;
      return;
    }
    const n = this._listeners, r = n.indexOf(t);
    if (r === -1)
      throw console.log("disposed?", this._disposed), console.log("size?", this._size), console.log("arr?", JSON.stringify(this._listeners)), new Error("Attempted to dispose unknown listener");
    this._size--, n[r] = void 0;
    const i = this._deliveryQueue.current === this;
    if (this._size * Xa <= n.length) {
      let u = 0;
      for (let h = 0; h < n.length; h++)
        n[h] ? n[u++] = n[h] : i && (this._deliveryQueue.end--, u < this._deliveryQueue.i && this._deliveryQueue.i--);
      n.length = u;
    }
  }
  _deliver(t, n) {
    var i;
    if (!t)
      return;
    const r = ((i = this._options) == null ? void 0 : i.onListenerError) || Pt;
    if (!r) {
      t.value(n);
      return;
    }
    try {
      t.value(n);
    } catch (s) {
      r(s);
    }
  }
  _deliverQueue(t) {
    const n = t.current._listeners;
    for (; t.i < t.end; )
      this._deliver(n[t.i++], t.value);
    t.reset();
  }
  fire(t) {
    var n, r, i, s;
    if ((n = this._deliveryQueue) != null && n.current && (this._deliverQueue(this._deliveryQueue), (r = this._perfMon) == null || r.stop()), (i = this._perfMon) == null || i.start(this._size), this._listeners) if (this._listeners instanceof yn)
      this._deliver(this._listeners, t);
    else {
      const a = this._deliveryQueue;
      a.enqueue(this, t, this._listeners.length), this._deliverQueue(a);
    }
    (s = this._perfMon) == null || s.stop();
  }
  hasListeners() {
    return this._size > 0;
  }
}
class Qa {
  constructor() {
    this.i = -1, this.end = 0;
  }
  enqueue(t, n, r) {
    this.i = 0, this.end = r, this.current = t, this.value = n;
  }
  reset() {
    this.i = this.end, this.current = void 0, this.value = void 0;
  }
}
function Ja() {
  return globalThis._VSCODE_NLS_MESSAGES;
}
function T1() {
  return globalThis._VSCODE_NLS_LANGUAGE;
}
const Ya = T1() === "pseudo" || typeof document < "u" && document.location && typeof document.location.hash == "string" && document.location.hash.indexOf("pseudo=true") >= 0;
function Vr(e, t) {
  let n;
  return t.length === 0 ? n = e : n = e.replace(/\{(\d+)\}/g, (r, i) => {
    const s = i[0], a = t[s];
    let o = r;
    return typeof a == "string" ? o = a : (typeof a == "number" || typeof a == "boolean" || a === void 0 || a === null) && (o = String(a)), o;
  }), Ya && (n = "［" + n.replace(/[aouei]/g, "$&$&") + "］"), n;
}
function Z(e, t, ...n) {
  return Vr(typeof e == "number" ? Za(e, t) : t, n);
}
function Za(e, t) {
  var r;
  const n = (r = Ja()) == null ? void 0 : r[e];
  if (typeof n != "string") {
    if (typeof t == "string")
      return t;
    throw new Error(`!!! NLS MISSING: ${e} !!!`);
  }
  return n;
}
const ht = "en";
let zn = !1, Hn = !1, En = !1, X1 = !1, Sr = !1, Tt, Yt = ht, Ur = ht, Ka, Ae;
const Ve = globalThis;
let ue;
var O1;
typeof Ve.vscode < "u" && typeof Ve.vscode.process < "u" ? ue = Ve.vscode.process : typeof process < "u" && typeof ((O1 = process == null ? void 0 : process.versions) == null ? void 0 : O1.node) == "string" && (ue = process);
var W1;
const eo = typeof ((W1 = ue == null ? void 0 : ue.versions) == null ? void 0 : W1.electron) == "string", to = eo && (ue == null ? void 0 : ue.type) === "renderer";
var z1;
if (typeof ue == "object") {
  zn = ue.platform === "win32", Hn = ue.platform === "darwin", En = ue.platform === "linux", En && ue.env.SNAP && ue.env.SNAP_REVISION, ue.env.CI || ue.env.BUILD_ARTIFACTSTAGINGDIRECTORY, Tt = ht, Yt = ht;
  const e = ue.env.VSCODE_NLS_CONFIG;
  if (e)
    try {
      const t = JSON.parse(e);
      Tt = t.userLocale, Ur = t.osLocale, Yt = t.resolvedLanguage || ht, Ka = (z1 = t.languagePack) == null ? void 0 : z1.translationsConfigFile;
    } catch {
    }
  X1 = !0;
} else typeof navigator == "object" && !to ? (Ae = navigator.userAgent, zn = Ae.indexOf("Windows") >= 0, Hn = Ae.indexOf("Macintosh") >= 0, (Ae.indexOf("Macintosh") >= 0 || Ae.indexOf("iPad") >= 0 || Ae.indexOf("iPhone") >= 0) && navigator.maxTouchPoints && navigator.maxTouchPoints > 0, En = Ae.indexOf("Linux") >= 0, (Ae == null ? void 0 : Ae.indexOf("Mobi")) >= 0, Sr = !0, Yt = T1() || ht, Tt = navigator.language.toLowerCase(), Ur = Tt) : console.error("Unable to resolve platform.");
const Ct = zn, no = Hn, ro = X1, io = Sr, so = Sr && typeof Ve.importScripts == "function", ao = so ? Ve.origin : void 0, Me = Ae, Oe = Yt;
var Br;
(function(e) {
  function t() {
    return Oe;
  }
  e.value = t;
  function n() {
    return Oe.length === 2 ? Oe === "en" : Oe.length >= 3 ? Oe[0] === "e" && Oe[1] === "n" && Oe[2] === "-" : !1;
  }
  e.isDefaultVariant = n;
  function r() {
    return Oe === "en";
  }
  e.isDefault = r;
})(Br || (Br = {}));
const oo = typeof Ve.postMessage == "function" && !Ve.importScripts;
(() => {
  if (oo) {
    const e = [];
    Ve.addEventListener("message", (n) => {
      if (n.data && n.data.vscodeScheduleAsyncWork)
        for (let r = 0, i = e.length; r < i; r++) {
          const s = e[r];
          if (s.id === n.data.vscodeScheduleAsyncWork) {
            e.splice(r, 1), s.callback();
            return;
          }
        }
    });
    let t = 0;
    return (n) => {
      const r = ++t;
      e.push({
        id: r,
        callback: n
      }), Ve.postMessage({ vscodeScheduleAsyncWork: r }, "*");
    };
  }
  return (e) => setTimeout(e);
})();
const lo = !!(Me && Me.indexOf("Chrome") >= 0);
Me && Me.indexOf("Firefox") >= 0;
!lo && Me && Me.indexOf("Safari") >= 0;
Me && Me.indexOf("Edg/") >= 0;
Me && Me.indexOf("Android") >= 0;
const Q1 = Object.freeze(function(e, t) {
  const n = setTimeout(e.bind(t), 0);
  return { dispose() {
    clearTimeout(n);
  } };
});
var on;
(function(e) {
  function t(n) {
    return n === e.None || n === e.Cancelled || n instanceof Zt ? !0 : !n || typeof n != "object" ? !1 : typeof n.isCancellationRequested == "boolean" && typeof n.onCancellationRequested == "function";
  }
  e.isCancellationToken = t, e.None = Object.freeze({
    isCancellationRequested: !1,
    onCancellationRequested: an.None
  }), e.Cancelled = Object.freeze({
    isCancellationRequested: !0,
    onCancellationRequested: Q1
  });
})(on || (on = {}));
class Zt {
  constructor() {
    this._isCancelled = !1, this._emitter = null;
  }
  cancel() {
    this._isCancelled || (this._isCancelled = !0, this._emitter && (this._emitter.fire(void 0), this.dispose()));
  }
  get isCancellationRequested() {
    return this._isCancelled;
  }
  get onCancellationRequested() {
    return this._isCancelled ? Q1 : (this._emitter || (this._emitter = new ve()), this._emitter.event);
  }
  dispose() {
    this._emitter && (this._emitter.dispose(), this._emitter = null);
  }
}
class uo {
  constructor(t) {
    this._token = void 0, this._parentListener = void 0, this._parentListener = t && t.onCancellationRequested(this.cancel, this);
  }
  get token() {
    return this._token || (this._token = new Zt()), this._token;
  }
  cancel() {
    this._token ? this._token instanceof Zt && this._token.cancel() : this._token = on.Cancelled;
  }
  dispose(t = !1) {
    var n;
    t && this.cancel(), (n = this._parentListener) == null || n.dispose(), this._token ? this._token instanceof Zt && this._token.dispose() : this._token = on.None;
  }
}
function co(e) {
  return e;
}
class ho {
  constructor(t, n) {
    this.lastCache = void 0, this.lastArgKey = void 0, typeof t == "function" ? (this._fn = t, this._computeKey = co) : (this._fn = n, this._computeKey = t.getCacheKey);
  }
  get(t) {
    const n = this._computeKey(t);
    return this.lastArgKey !== n && (this.lastArgKey = n, this.lastCache = this._fn(t)), this.lastCache;
  }
}
class qr {
  constructor(t) {
    this.executor = t, this._didRun = !1;
  }
  get hasValue() {
    return this._didRun;
  }
  get value() {
    if (!this._didRun)
      try {
        this._value = this.executor();
      } catch (t) {
        this._error = t;
      } finally {
        this._didRun = !0;
      }
    if (this._error)
      throw this._error;
    return this._value;
  }
  get rawValue() {
    return this._value;
  }
}
function fo(e) {
  return e.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, "\\$&");
}
function mo(e) {
  return e.split(/\r\n|\r|\n/);
}
function go(e) {
  for (let t = 0, n = e.length; t < n; t++) {
    const r = e.charCodeAt(t);
    if (r !== 32 && r !== 9)
      return t;
  }
  return -1;
}
function po(e, t = e.length - 1) {
  for (let n = t; n >= 0; n--) {
    const r = e.charCodeAt(n);
    if (r !== 32 && r !== 9)
      return n;
  }
  return -1;
}
function bo(e, t) {
  return e < t ? -1 : e > t ? 1 : 0;
}
function _o(e, t, n = 0, r = e.length, i = 0, s = t.length) {
  for (; n < r && i < s; n++, i++) {
    const l = e.charCodeAt(n), u = t.charCodeAt(i);
    if (l < u)
      return -1;
    if (l > u)
      return 1;
  }
  const a = r - n, o = s - i;
  return a < o ? -1 : a > o ? 1 : 0;
}
function J1(e, t, n = 0, r = e.length, i = 0, s = t.length) {
  for (; n < r && i < s; n++, i++) {
    let l = e.charCodeAt(n), u = t.charCodeAt(i);
    if (l === u)
      continue;
    if (l >= 128 || u >= 128)
      return _o(e.toLowerCase(), t.toLowerCase(), n, r, i, s);
    Or(l) && (l -= 32), Or(u) && (u -= 32);
    const h = l - u;
    if (h !== 0)
      return h;
  }
  const a = r - n, o = s - i;
  return a < o ? -1 : a > o ? 1 : 0;
}
function Or(e) {
  return e >= 97 && e <= 122;
}
function Y1(e) {
  return e >= 65 && e <= 90;
}
function xo(e, t) {
  return e.length === t.length && J1(e, t) === 0;
}
function vo(e, t) {
  const n = t.length;
  return t.length > e.length ? !1 : J1(e, t, 0, n) === 0;
}
function jn(e) {
  return 55296 <= e && e <= 56319;
}
function wo(e) {
  return 56320 <= e && e <= 57343;
}
function Lo(e, t) {
  return (e - 55296 << 10) + (t - 56320) + 65536;
}
function Co(e, t, n) {
  const r = e.charCodeAt(n);
  if (jn(r) && n + 1 < t) {
    const i = e.charCodeAt(n + 1);
    if (wo(i))
      return Lo(r, i);
  }
  return r;
}
const So = /^[\t\n\r\x20-\x7E]*$/;
function Ao(e) {
  return So.test(e);
}
const Ye = class Ye {
  static getInstance() {
    return Ye._INSTANCE || (Ye._INSTANCE = new Ye()), Ye._INSTANCE;
  }
  constructor() {
    this._data = No();
  }
  getGraphemeBreakType(t) {
    if (t < 32)
      return t === 10 ? 3 : t === 13 ? 2 : 4;
    if (t < 127)
      return 0;
    const n = this._data, r = n.length / 3;
    let i = 1;
    for (; i <= r; )
      if (t < n[3 * i])
        i = 2 * i;
      else if (t > n[3 * i + 1])
        i = 2 * i + 1;
      else
        return n[3 * i + 2];
    return 0;
  }
};
Ye._INSTANCE = null;
let Wr = Ye;
function No() {
  return JSON.parse("[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]");
}
const ye = class ye {
  static getInstance(t) {
    return ye.cache.get(Array.from(t));
  }
  static getLocales() {
    return ye._locales.value;
  }
  constructor(t) {
    this.confusableDictionary = t;
  }
  isAmbiguous(t) {
    return this.confusableDictionary.has(t);
  }
  containsAmbiguousCharacter(t) {
    for (let n = 0; n < t.length; n++) {
      const r = t.codePointAt(n);
      if (typeof r == "number" && this.isAmbiguous(r))
        return !0;
    }
    return !1;
  }
  getPrimaryConfusable(t) {
    return this.confusableDictionary.get(t);
  }
  getConfusableCodePoints() {
    return new Set(this.confusableDictionary.keys());
  }
};
ye.ambiguousCharacterData = new qr(() => JSON.parse('{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"cs":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"es":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"fr":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"it":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ja":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],"ko":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pt-BR":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ru":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"zh-hans":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],"zh-hant":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}')), ye.cache = new ho({ getCacheKey: JSON.stringify }, (t) => {
  function n(h) {
    const f = /* @__PURE__ */ new Map();
    for (let m = 0; m < h.length; m += 2)
      f.set(h[m], h[m + 1]);
    return f;
  }
  function r(h, f) {
    const m = new Map(h);
    for (const [d, p] of f)
      m.set(d, p);
    return m;
  }
  function i(h, f) {
    if (!h)
      return f;
    const m = /* @__PURE__ */ new Map();
    for (const [d, p] of h)
      f.has(d) && m.set(d, p);
    return m;
  }
  const s = ye.ambiguousCharacterData.value;
  let a = t.filter((h) => !h.startsWith("_") && h in s);
  a.length === 0 && (a = ["_default"]);
  let o;
  for (const h of a) {
    const f = n(s[h]);
    o = i(o, f);
  }
  const l = n(s._common), u = r(l, o);
  return new ye(u);
}), ye._locales = new qr(() => Object.keys(ye.ambiguousCharacterData.value).filter((t) => !t.startsWith("_")));
let Ot = ye;
const Ze = class Ze {
  static getRawData() {
    return JSON.parse("[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]");
  }
  static getData() {
    return this._data || (this._data = new Set(Ze.getRawData())), this._data;
  }
  static isInvisibleCharacter(t) {
    return Ze.getData().has(t);
  }
  static containsInvisibleCharacter(t) {
    for (let n = 0; n < t.length; n++) {
      const r = t.codePointAt(n);
      if (typeof r == "number" && Ze.isInvisibleCharacter(r))
        return !0;
    }
    return !1;
  }
  static get codePoints() {
    return Ze.getData();
  }
};
Ze._data = void 0;
let Ft = Ze;
const kn = "default", Ro = "$initialize";
class yo {
  constructor(t, n, r, i, s) {
    this.vsWorker = t, this.req = n, this.channel = r, this.method = i, this.args = s, this.type = 0;
  }
}
class zr {
  constructor(t, n, r, i) {
    this.vsWorker = t, this.seq = n, this.res = r, this.err = i, this.type = 1;
  }
}
class Eo {
  constructor(t, n, r, i, s) {
    this.vsWorker = t, this.req = n, this.channel = r, this.eventName = i, this.arg = s, this.type = 2;
  }
}
class ko {
  constructor(t, n, r) {
    this.vsWorker = t, this.req = n, this.event = r, this.type = 3;
  }
}
class Mo {
  constructor(t, n) {
    this.vsWorker = t, this.req = n, this.type = 4;
  }
}
class Po {
  constructor(t) {
    this._workerId = -1, this._handler = t, this._lastSentReq = 0, this._pendingReplies = /* @__PURE__ */ Object.create(null), this._pendingEmitters = /* @__PURE__ */ new Map(), this._pendingEvents = /* @__PURE__ */ new Map();
  }
  setWorkerId(t) {
    this._workerId = t;
  }
  sendMessage(t, n, r) {
    const i = String(++this._lastSentReq);
    return new Promise((s, a) => {
      this._pendingReplies[i] = {
        resolve: s,
        reject: a
      }, this._send(new yo(this._workerId, i, t, n, r));
    });
  }
  listen(t, n, r) {
    let i = null;
    const s = new ve({
      onWillAddFirstListener: () => {
        i = String(++this._lastSentReq), this._pendingEmitters.set(i, s), this._send(new Eo(this._workerId, i, t, n, r));
      },
      onDidRemoveLastListener: () => {
        this._pendingEmitters.delete(i), this._send(new Mo(this._workerId, i)), i = null;
      }
    });
    return s.event;
  }
  handleMessage(t) {
    !t || !t.vsWorker || this._workerId !== -1 && t.vsWorker !== this._workerId || this._handleMessage(t);
  }
  createProxyToRemoteChannel(t, n) {
    const r = {
      get: (i, s) => (typeof s == "string" && !i[s] && (K1(s) ? i[s] = (a) => this.listen(t, s, a) : Z1(s) ? i[s] = this.listen(t, s, void 0) : s.charCodeAt(0) === 36 && (i[s] = async (...a) => (await (n == null ? void 0 : n()), this.sendMessage(t, s, a)))), i[s])
    };
    return new Proxy(/* @__PURE__ */ Object.create(null), r);
  }
  _handleMessage(t) {
    switch (t.type) {
      case 1:
        return this._handleReplyMessage(t);
      case 0:
        return this._handleRequestMessage(t);
      case 2:
        return this._handleSubscribeEventMessage(t);
      case 3:
        return this._handleEventMessage(t);
      case 4:
        return this._handleUnsubscribeEventMessage(t);
    }
  }
  _handleReplyMessage(t) {
    if (!this._pendingReplies[t.seq]) {
      console.warn("Got reply to unknown seq");
      return;
    }
    const n = this._pendingReplies[t.seq];
    if (delete this._pendingReplies[t.seq], t.err) {
      let r = t.err;
      t.err.$isError && (r = new Error(), r.name = t.err.name, r.message = t.err.message, r.stack = t.err.stack), n.reject(r);
      return;
    }
    n.resolve(t.res);
  }
  _handleRequestMessage(t) {
    const n = t.req;
    this._handler.handleMessage(t.channel, t.method, t.args).then((i) => {
      this._send(new zr(this._workerId, n, i, void 0));
    }, (i) => {
      i.detail instanceof Error && (i.detail = Pr(i.detail)), this._send(new zr(this._workerId, n, void 0, Pr(i)));
    });
  }
  _handleSubscribeEventMessage(t) {
    const n = t.req, r = this._handler.handleEvent(t.channel, t.eventName, t.arg)((i) => {
      this._send(new ko(this._workerId, n, i));
    });
    this._pendingEvents.set(n, r);
  }
  _handleEventMessage(t) {
    if (!this._pendingEmitters.has(t.req)) {
      console.warn("Got event for unknown req");
      return;
    }
    this._pendingEmitters.get(t.req).fire(t.event);
  }
  _handleUnsubscribeEventMessage(t) {
    if (!this._pendingEvents.has(t.req)) {
      console.warn("Got unsubscribe for unknown req");
      return;
    }
    this._pendingEvents.get(t.req).dispose(), this._pendingEvents.delete(t.req);
  }
  _send(t) {
    const n = [];
    if (t.type === 0)
      for (let r = 0; r < t.args.length; r++)
        t.args[r] instanceof ArrayBuffer && n.push(t.args[r]);
    else t.type === 1 && t.res instanceof ArrayBuffer && n.push(t.res);
    this._handler.sendMessage(t, n);
  }
}
function Z1(e) {
  return e[0] === "o" && e[1] === "n" && Y1(e.charCodeAt(2));
}
function K1(e) {
  return /^onDynamic/.test(e) && Y1(e.charCodeAt(9));
}
class $o {
  constructor(t, n) {
    this._localChannels = /* @__PURE__ */ new Map(), this._remoteChannels = /* @__PURE__ */ new Map(), this._requestHandlerFactory = n, this._requestHandler = null, this._protocol = new Po({
      sendMessage: (r, i) => {
        t(r, i);
      },
      handleMessage: (r, i, s) => this._handleMessage(r, i, s),
      handleEvent: (r, i, s) => this._handleEvent(r, i, s)
    });
  }
  onmessage(t) {
    this._protocol.handleMessage(t);
  }
  _handleMessage(t, n, r) {
    if (t === kn && n === Ro)
      return this.initialize(r[0], r[1], r[2]);
    const i = t === kn ? this._requestHandler : this._localChannels.get(t);
    if (!i)
      return Promise.reject(new Error(`Missing channel ${t} on worker thread`));
    if (typeof i[n] != "function")
      return Promise.reject(new Error(`Missing method ${n} on worker thread channel ${t}`));
    try {
      return Promise.resolve(i[n].apply(i, r));
    } catch (s) {
      return Promise.reject(s);
    }
  }
  _handleEvent(t, n, r) {
    const i = t === kn ? this._requestHandler : this._localChannels.get(t);
    if (!i)
      throw new Error(`Missing channel ${t} on worker thread`);
    if (K1(n)) {
      const s = i[n].call(i, r);
      if (typeof s != "function")
        throw new Error(`Missing dynamic event ${n} on request handler.`);
      return s;
    }
    if (Z1(n)) {
      const s = i[n];
      if (typeof s != "function")
        throw new Error(`Missing event ${n} on request handler.`);
      return s;
    }
    throw new Error(`Malformed event name ${n}`);
  }
  setChannel(t, n) {
    this._localChannels.set(t, n);
  }
  getChannel(t) {
    if (!this._remoteChannels.has(t)) {
      const n = this._protocol.createProxyToRemoteChannel(t);
      this._remoteChannels.set(t, n);
    }
    return this._remoteChannels.get(t);
  }
  async initialize(t, n, r) {
    if (this._protocol.setWorkerId(t), this._requestHandlerFactory) {
      this._requestHandler = this._requestHandlerFactory(this);
      return;
    }
    return n && (typeof n.baseUrl < "u" && delete n.baseUrl, typeof n.paths < "u" && typeof n.paths.vs < "u" && delete n.paths.vs, typeof n.trustedTypesPolicy < "u" && delete n.trustedTypesPolicy, n.catchError = !0, globalThis.require.config(n)), Promise.reject(new Error("Unexpected usage"));
  }
}
class je {
  constructor(t, n, r, i) {
    this.originalStart = t, this.originalLength = n, this.modifiedStart = r, this.modifiedLength = i;
  }
  getOriginalEnd() {
    return this.originalStart + this.originalLength;
  }
  getModifiedEnd() {
    return this.modifiedStart + this.modifiedLength;
  }
}
function Hr(e, t) {
  return (t << 5) - t + e | 0;
}
function Do(e, t) {
  t = Hr(149417, t);
  for (let n = 0, r = e.length; n < r; n++)
    t = Hr(e.charCodeAt(n), t);
  return t;
}
class jr {
  constructor(t) {
    this.source = t;
  }
  getElements() {
    const t = this.source, n = new Int32Array(t.length);
    for (let r = 0, i = t.length; r < i; r++)
      n[r] = t.charCodeAt(r);
    return n;
  }
}
function Fo(e, t, n) {
  return new Ge(new jr(e), new jr(t)).ComputeDiff(n).changes;
}
class st {
  static Assert(t, n) {
    if (!t)
      throw new Error(n);
  }
}
class at {
  static Copy(t, n, r, i, s) {
    for (let a = 0; a < s; a++)
      r[i + a] = t[n + a];
  }
  static Copy2(t, n, r, i, s) {
    for (let a = 0; a < s; a++)
      r[i + a] = t[n + a];
  }
}
class Gr {
  constructor() {
    this.m_changes = [], this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824, this.m_originalCount = 0, this.m_modifiedCount = 0;
  }
  MarkNextChange() {
    (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.m_changes.push(new je(
      this.m_originalStart,
      this.m_originalCount,
      this.m_modifiedStart,
      this.m_modifiedCount
    )), this.m_originalCount = 0, this.m_modifiedCount = 0, this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824;
  }
  AddOriginalElement(t, n) {
    this.m_originalStart = Math.min(this.m_originalStart, t), this.m_modifiedStart = Math.min(this.m_modifiedStart, n), this.m_originalCount++;
  }
  AddModifiedElement(t, n) {
    this.m_originalStart = Math.min(this.m_originalStart, t), this.m_modifiedStart = Math.min(this.m_modifiedStart, n), this.m_modifiedCount++;
  }
  getChanges() {
    return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes;
  }
  getReverseChanges() {
    return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes.reverse(), this.m_changes;
  }
}
class Ge {
  constructor(t, n, r = null) {
    this.ContinueProcessingPredicate = r, this._originalSequence = t, this._modifiedSequence = n;
    const [i, s, a] = Ge._getElements(t), [o, l, u] = Ge._getElements(n);
    this._hasStrings = a && u, this._originalStringElements = i, this._originalElementsOrHash = s, this._modifiedStringElements = o, this._modifiedElementsOrHash = l, this.m_forwardHistory = [], this.m_reverseHistory = [];
  }
  static _isStringArray(t) {
    return t.length > 0 && typeof t[0] == "string";
  }
  static _getElements(t) {
    const n = t.getElements();
    if (Ge._isStringArray(n)) {
      const r = new Int32Array(n.length);
      for (let i = 0, s = n.length; i < s; i++)
        r[i] = Do(n[i], 0);
      return [n, r, !0];
    }
    return n instanceof Int32Array ? [[], n, !1] : [[], new Int32Array(n), !1];
  }
  ElementsAreEqual(t, n) {
    return this._originalElementsOrHash[t] !== this._modifiedElementsOrHash[n] ? !1 : this._hasStrings ? this._originalStringElements[t] === this._modifiedStringElements[n] : !0;
  }
  ElementsAreStrictEqual(t, n) {
    if (!this.ElementsAreEqual(t, n))
      return !1;
    const r = Ge._getStrictElement(this._originalSequence, t), i = Ge._getStrictElement(this._modifiedSequence, n);
    return r === i;
  }
  static _getStrictElement(t, n) {
    return typeof t.getStrictElement == "function" ? t.getStrictElement(n) : null;
  }
  OriginalElementsAreEqual(t, n) {
    return this._originalElementsOrHash[t] !== this._originalElementsOrHash[n] ? !1 : this._hasStrings ? this._originalStringElements[t] === this._originalStringElements[n] : !0;
  }
  ModifiedElementsAreEqual(t, n) {
    return this._modifiedElementsOrHash[t] !== this._modifiedElementsOrHash[n] ? !1 : this._hasStrings ? this._modifiedStringElements[t] === this._modifiedStringElements[n] : !0;
  }
  ComputeDiff(t) {
    return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, t);
  }
  _ComputeDiff(t, n, r, i, s) {
    const a = [!1];
    let o = this.ComputeDiffRecursive(t, n, r, i, a);
    return s && (o = this.PrettifyChanges(o)), {
      quitEarly: a[0],
      changes: o
    };
  }
  ComputeDiffRecursive(t, n, r, i, s) {
    for (s[0] = !1; t <= n && r <= i && this.ElementsAreEqual(t, r); )
      t++, r++;
    for (; n >= t && i >= r && this.ElementsAreEqual(n, i); )
      n--, i--;
    if (t > n || r > i) {
      let f;
      return r <= i ? (st.Assert(t === n + 1, "originalStart should only be one more than originalEnd"), f = [
        new je(t, 0, r, i - r + 1)
      ]) : t <= n ? (st.Assert(r === i + 1, "modifiedStart should only be one more than modifiedEnd"), f = [
        new je(t, n - t + 1, r, 0)
      ]) : (st.Assert(t === n + 1, "originalStart should only be one more than originalEnd"), st.Assert(r === i + 1, "modifiedStart should only be one more than modifiedEnd"), f = []), f;
    }
    const a = [0], o = [0], l = this.ComputeRecursionPoint(t, n, r, i, a, o, s), u = a[0], h = o[0];
    if (l !== null)
      return l;
    if (!s[0]) {
      const f = this.ComputeDiffRecursive(t, u, r, h, s);
      let m = [];
      return s[0] ? m = [
        new je(
          u + 1,
          n - (u + 1) + 1,
          h + 1,
          i - (h + 1) + 1
        )
      ] : m = this.ComputeDiffRecursive(u + 1, n, h + 1, i, s), this.ConcatenateChanges(f, m);
    }
    return [
      new je(
        t,
        n - t + 1,
        r,
        i - r + 1
      )
    ];
  }
  WALKTRACE(t, n, r, i, s, a, o, l, u, h, f, m, d, p, b, N, L, C) {
    let R = null, S = null, A = new Gr(), P = n, $ = r, D = d[0] - N[0] - i, q = -1073741824, Q = this.m_forwardHistory.length - 1;
    do {
      const k = D + t;
      k === P || k < $ && u[k - 1] < u[k + 1] ? (f = u[k + 1], p = f - D - i, f < q && A.MarkNextChange(), q = f, A.AddModifiedElement(f + 1, p), D = k + 1 - t) : (f = u[k - 1] + 1, p = f - D - i, f < q && A.MarkNextChange(), q = f - 1, A.AddOriginalElement(f, p + 1), D = k - 1 - t), Q >= 0 && (u = this.m_forwardHistory[Q], t = u[0], P = 1, $ = u.length - 1);
    } while (--Q >= -1);
    if (R = A.getReverseChanges(), C[0]) {
      let k = d[0] + 1, v = N[0] + 1;
      if (R !== null && R.length > 0) {
        const w = R[R.length - 1];
        k = Math.max(k, w.getOriginalEnd()), v = Math.max(v, w.getModifiedEnd());
      }
      S = [
        new je(
          k,
          m - k + 1,
          v,
          b - v + 1
        )
      ];
    } else {
      A = new Gr(), P = a, $ = o, D = d[0] - N[0] - l, q = 1073741824, Q = L ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
      do {
        const k = D + s;
        k === P || k < $ && h[k - 1] >= h[k + 1] ? (f = h[k + 1] - 1, p = f - D - l, f > q && A.MarkNextChange(), q = f + 1, A.AddOriginalElement(f + 1, p + 1), D = k + 1 - s) : (f = h[k - 1], p = f - D - l, f > q && A.MarkNextChange(), q = f, A.AddModifiedElement(f + 1, p + 1), D = k - 1 - s), Q >= 0 && (h = this.m_reverseHistory[Q], s = h[0], P = 1, $ = h.length - 1);
      } while (--Q >= -1);
      S = A.getChanges();
    }
    return this.ConcatenateChanges(R, S);
  }
  ComputeRecursionPoint(t, n, r, i, s, a, o) {
    let l = 0, u = 0, h = 0, f = 0, m = 0, d = 0;
    t--, r--, s[0] = 0, a[0] = 0, this.m_forwardHistory = [], this.m_reverseHistory = [];
    const p = n - t + (i - r), b = p + 1, N = new Int32Array(b), L = new Int32Array(b), C = i - r, R = n - t, S = t - r, A = n - i, $ = (R - C) % 2 === 0;
    N[C] = t, L[R] = n, o[0] = !1;
    for (let D = 1; D <= p / 2 + 1; D++) {
      let q = 0, Q = 0;
      h = this.ClipDiagonalBound(C - D, D, C, b), f = this.ClipDiagonalBound(C + D, D, C, b);
      for (let v = h; v <= f; v += 2) {
        v === h || v < f && N[v - 1] < N[v + 1] ? l = N[v + 1] : l = N[v - 1] + 1, u = l - (v - C) - S;
        const w = l;
        for (; l < n && u < i && this.ElementsAreEqual(l + 1, u + 1); )
          l++, u++;
        if (N[v] = l, l + u > q + Q && (q = l, Q = u), !$ && Math.abs(v - R) <= D - 1 && l >= L[v])
          return s[0] = l, a[0] = u, w <= L[v] && D <= 1448 ? this.WALKTRACE(C, h, f, S, R, m, d, A, N, L, l, n, s, u, i, a, $, o) : null;
      }
      const k = (q - t + (Q - r) - D) / 2;
      if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(q, k))
        return o[0] = !0, s[0] = q, a[0] = Q, k > 0 && D <= 1448 ? this.WALKTRACE(C, h, f, S, R, m, d, A, N, L, l, n, s, u, i, a, $, o) : (t++, r++, [
          new je(
            t,
            n - t + 1,
            r,
            i - r + 1
          )
        ]);
      m = this.ClipDiagonalBound(R - D, D, R, b), d = this.ClipDiagonalBound(R + D, D, R, b);
      for (let v = m; v <= d; v += 2) {
        v === m || v < d && L[v - 1] >= L[v + 1] ? l = L[v + 1] - 1 : l = L[v - 1], u = l - (v - R) - A;
        const w = l;
        for (; l > t && u > r && this.ElementsAreEqual(l, u); )
          l--, u--;
        if (L[v] = l, $ && Math.abs(v - C) <= D && l <= N[v])
          return s[0] = l, a[0] = u, w >= N[v] && D <= 1448 ? this.WALKTRACE(C, h, f, S, R, m, d, A, N, L, l, n, s, u, i, a, $, o) : null;
      }
      if (D <= 1447) {
        let v = new Int32Array(f - h + 2);
        v[0] = C - h + 1, at.Copy2(N, h, v, 1, f - h + 1), this.m_forwardHistory.push(v), v = new Int32Array(d - m + 2), v[0] = R - m + 1, at.Copy2(L, m, v, 1, d - m + 1), this.m_reverseHistory.push(v);
      }
    }
    return this.WALKTRACE(C, h, f, S, R, m, d, A, N, L, l, n, s, u, i, a, $, o);
  }
  PrettifyChanges(t) {
    for (let n = 0; n < t.length; n++) {
      const r = t[n], i = n < t.length - 1 ? t[n + 1].originalStart : this._originalElementsOrHash.length, s = n < t.length - 1 ? t[n + 1].modifiedStart : this._modifiedElementsOrHash.length, a = r.originalLength > 0, o = r.modifiedLength > 0;
      for (; r.originalStart + r.originalLength < i && r.modifiedStart + r.modifiedLength < s && (!a || this.OriginalElementsAreEqual(r.originalStart, r.originalStart + r.originalLength)) && (!o || this.ModifiedElementsAreEqual(r.modifiedStart, r.modifiedStart + r.modifiedLength)); ) {
        const u = this.ElementsAreStrictEqual(r.originalStart, r.modifiedStart);
        if (this.ElementsAreStrictEqual(r.originalStart + r.originalLength, r.modifiedStart + r.modifiedLength) && !u)
          break;
        r.originalStart++, r.modifiedStart++;
      }
      const l = [null];
      if (n < t.length - 1 && this.ChangesOverlap(t[n], t[n + 1], l)) {
        t[n] = l[0], t.splice(n + 1, 1), n--;
        continue;
      }
    }
    for (let n = t.length - 1; n >= 0; n--) {
      const r = t[n];
      let i = 0, s = 0;
      if (n > 0) {
        const f = t[n - 1];
        i = f.originalStart + f.originalLength, s = f.modifiedStart + f.modifiedLength;
      }
      const a = r.originalLength > 0, o = r.modifiedLength > 0;
      let l = 0, u = this._boundaryScore(r.originalStart, r.originalLength, r.modifiedStart, r.modifiedLength);
      for (let f = 1; ; f++) {
        const m = r.originalStart - f, d = r.modifiedStart - f;
        if (m < i || d < s || a && !this.OriginalElementsAreEqual(m, m + r.originalLength) || o && !this.ModifiedElementsAreEqual(d, d + r.modifiedLength))
          break;
        const b = (m === i && d === s ? 5 : 0) + this._boundaryScore(m, r.originalLength, d, r.modifiedLength);
        b > u && (u = b, l = f);
      }
      r.originalStart -= l, r.modifiedStart -= l;
      const h = [null];
      if (n > 0 && this.ChangesOverlap(t[n - 1], t[n], h)) {
        t[n - 1] = h[0], t.splice(n, 1), n++;
        continue;
      }
    }
    if (this._hasStrings)
      for (let n = 1, r = t.length; n < r; n++) {
        const i = t[n - 1], s = t[n], a = s.originalStart - i.originalStart - i.originalLength, o = i.originalStart, l = s.originalStart + s.originalLength, u = l - o, h = i.modifiedStart, f = s.modifiedStart + s.modifiedLength, m = f - h;
        if (a < 5 && u < 20 && m < 20) {
          const d = this._findBetterContiguousSequence(o, u, h, m, a);
          if (d) {
            const [p, b] = d;
            (p !== i.originalStart + i.originalLength || b !== i.modifiedStart + i.modifiedLength) && (i.originalLength = p - i.originalStart, i.modifiedLength = b - i.modifiedStart, s.originalStart = p + a, s.modifiedStart = b + a, s.originalLength = l - s.originalStart, s.modifiedLength = f - s.modifiedStart);
          }
        }
      }
    return t;
  }
  _findBetterContiguousSequence(t, n, r, i, s) {
    if (n < s || i < s)
      return null;
    const a = t + n - s + 1, o = r + i - s + 1;
    let l = 0, u = 0, h = 0;
    for (let f = t; f < a; f++)
      for (let m = r; m < o; m++) {
        const d = this._contiguousSequenceScore(f, m, s);
        d > 0 && d > l && (l = d, u = f, h = m);
      }
    return l > 0 ? [u, h] : null;
  }
  _contiguousSequenceScore(t, n, r) {
    let i = 0;
    for (let s = 0; s < r; s++) {
      if (!this.ElementsAreEqual(t + s, n + s))
        return 0;
      i += this._originalStringElements[t + s].length;
    }
    return i;
  }
  _OriginalIsBoundary(t) {
    return t <= 0 || t >= this._originalElementsOrHash.length - 1 ? !0 : this._hasStrings && /^\s*$/.test(this._originalStringElements[t]);
  }
  _OriginalRegionIsBoundary(t, n) {
    if (this._OriginalIsBoundary(t) || this._OriginalIsBoundary(t - 1))
      return !0;
    if (n > 0) {
      const r = t + n;
      if (this._OriginalIsBoundary(r - 1) || this._OriginalIsBoundary(r))
        return !0;
    }
    return !1;
  }
  _ModifiedIsBoundary(t) {
    return t <= 0 || t >= this._modifiedElementsOrHash.length - 1 ? !0 : this._hasStrings && /^\s*$/.test(this._modifiedStringElements[t]);
  }
  _ModifiedRegionIsBoundary(t, n) {
    if (this._ModifiedIsBoundary(t) || this._ModifiedIsBoundary(t - 1))
      return !0;
    if (n > 0) {
      const r = t + n;
      if (this._ModifiedIsBoundary(r - 1) || this._ModifiedIsBoundary(r))
        return !0;
    }
    return !1;
  }
  _boundaryScore(t, n, r, i) {
    const s = this._OriginalRegionIsBoundary(t, n) ? 1 : 0, a = this._ModifiedRegionIsBoundary(r, i) ? 1 : 0;
    return s + a;
  }
  ConcatenateChanges(t, n) {
    const r = [];
    if (t.length === 0 || n.length === 0)
      return n.length > 0 ? n : t;
    if (this.ChangesOverlap(t[t.length - 1], n[0], r)) {
      const i = new Array(t.length + n.length - 1);
      return at.Copy(t, 0, i, 0, t.length - 1), i[t.length - 1] = r[0], at.Copy(n, 1, i, t.length, n.length - 1), i;
    } else {
      const i = new Array(t.length + n.length);
      return at.Copy(t, 0, i, 0, t.length), at.Copy(n, 0, i, t.length, n.length), i;
    }
  }
  ChangesOverlap(t, n, r) {
    if (st.Assert(t.originalStart <= n.originalStart, "Left change is not less than or equal to right change"), st.Assert(t.modifiedStart <= n.modifiedStart, "Left change is not less than or equal to right change"), t.originalStart + t.originalLength >= n.originalStart || t.modifiedStart + t.modifiedLength >= n.modifiedStart) {
      const i = t.originalStart;
      let s = t.originalLength;
      const a = t.modifiedStart;
      let o = t.modifiedLength;
      return t.originalStart + t.originalLength >= n.originalStart && (s = n.originalStart + n.originalLength - t.originalStart), t.modifiedStart + t.modifiedLength >= n.modifiedStart && (o = n.modifiedStart + n.modifiedLength - t.modifiedStart), r[0] = new je(i, s, a, o), !0;
    } else
      return r[0] = null, !1;
  }
  ClipDiagonalBound(t, n, r, i) {
    if (t >= 0 && t < i)
      return t;
    const s = r, a = i - r - 1, o = n % 2 === 0;
    if (t < 0) {
      const l = s % 2 === 0;
      return o === l ? 0 : 1;
    } else {
      const l = a % 2 === 0;
      return o === l ? i - 1 : i - 2;
    }
  }
}
let X = class Qe {
  constructor(t, n) {
    this.lineNumber = t, this.column = n;
  }
  with(t = this.lineNumber, n = this.column) {
    return t === this.lineNumber && n === this.column ? this : new Qe(t, n);
  }
  delta(t = 0, n = 0) {
    return this.with(this.lineNumber + t, this.column + n);
  }
  equals(t) {
    return Qe.equals(this, t);
  }
  static equals(t, n) {
    return !t && !n ? !0 : !!t && !!n && t.lineNumber === n.lineNumber && t.column === n.column;
  }
  isBefore(t) {
    return Qe.isBefore(this, t);
  }
  static isBefore(t, n) {
    return t.lineNumber < n.lineNumber ? !0 : n.lineNumber < t.lineNumber ? !1 : t.column < n.column;
  }
  isBeforeOrEqual(t) {
    return Qe.isBeforeOrEqual(this, t);
  }
  static isBeforeOrEqual(t, n) {
    return t.lineNumber < n.lineNumber ? !0 : n.lineNumber < t.lineNumber ? !1 : t.column <= n.column;
  }
  static compare(t, n) {
    const r = t.lineNumber | 0, i = n.lineNumber | 0;
    if (r === i) {
      const s = t.column | 0, a = n.column | 0;
      return s - a;
    }
    return r - i;
  }
  clone() {
    return new Qe(this.lineNumber, this.column);
  }
  toString() {
    return "(" + this.lineNumber + "," + this.column + ")";
  }
  static lift(t) {
    return new Qe(t.lineNumber, t.column);
  }
  static isIPosition(t) {
    return t && typeof t.lineNumber == "number" && typeof t.column == "number";
  }
  toJSON() {
    return {
      lineNumber: this.lineNumber,
      column: this.column
    };
  }
}, B = class ie {
  constructor(t, n, r, i) {
    t > r || t === r && n > i ? (this.startLineNumber = r, this.startColumn = i, this.endLineNumber = t, this.endColumn = n) : (this.startLineNumber = t, this.startColumn = n, this.endLineNumber = r, this.endColumn = i);
  }
  isEmpty() {
    return ie.isEmpty(this);
  }
  static isEmpty(t) {
    return t.startLineNumber === t.endLineNumber && t.startColumn === t.endColumn;
  }
  containsPosition(t) {
    return ie.containsPosition(this, t);
  }
  static containsPosition(t, n) {
    return !(n.lineNumber < t.startLineNumber || n.lineNumber > t.endLineNumber || n.lineNumber === t.startLineNumber && n.column < t.startColumn || n.lineNumber === t.endLineNumber && n.column > t.endColumn);
  }
  static strictContainsPosition(t, n) {
    return !(n.lineNumber < t.startLineNumber || n.lineNumber > t.endLineNumber || n.lineNumber === t.startLineNumber && n.column <= t.startColumn || n.lineNumber === t.endLineNumber && n.column >= t.endColumn);
  }
  containsRange(t) {
    return ie.containsRange(this, t);
  }
  static containsRange(t, n) {
    return !(n.startLineNumber < t.startLineNumber || n.endLineNumber < t.startLineNumber || n.startLineNumber > t.endLineNumber || n.endLineNumber > t.endLineNumber || n.startLineNumber === t.startLineNumber && n.startColumn < t.startColumn || n.endLineNumber === t.endLineNumber && n.endColumn > t.endColumn);
  }
  strictContainsRange(t) {
    return ie.strictContainsRange(this, t);
  }
  static strictContainsRange(t, n) {
    return !(n.startLineNumber < t.startLineNumber || n.endLineNumber < t.startLineNumber || n.startLineNumber > t.endLineNumber || n.endLineNumber > t.endLineNumber || n.startLineNumber === t.startLineNumber && n.startColumn <= t.startColumn || n.endLineNumber === t.endLineNumber && n.endColumn >= t.endColumn);
  }
  plusRange(t) {
    return ie.plusRange(this, t);
  }
  static plusRange(t, n) {
    let r, i, s, a;
    return n.startLineNumber < t.startLineNumber ? (r = n.startLineNumber, i = n.startColumn) : n.startLineNumber === t.startLineNumber ? (r = n.startLineNumber, i = Math.min(n.startColumn, t.startColumn)) : (r = t.startLineNumber, i = t.startColumn), n.endLineNumber > t.endLineNumber ? (s = n.endLineNumber, a = n.endColumn) : n.endLineNumber === t.endLineNumber ? (s = n.endLineNumber, a = Math.max(n.endColumn, t.endColumn)) : (s = t.endLineNumber, a = t.endColumn), new ie(r, i, s, a);
  }
  intersectRanges(t) {
    return ie.intersectRanges(this, t);
  }
  static intersectRanges(t, n) {
    let r = t.startLineNumber, i = t.startColumn, s = t.endLineNumber, a = t.endColumn;
    const o = n.startLineNumber, l = n.startColumn, u = n.endLineNumber, h = n.endColumn;
    return r < o ? (r = o, i = l) : r === o && (i = Math.max(i, l)), s > u ? (s = u, a = h) : s === u && (a = Math.min(a, h)), r > s || r === s && i > a ? null : new ie(
      r,
      i,
      s,
      a
    );
  }
  equalsRange(t) {
    return ie.equalsRange(this, t);
  }
  static equalsRange(t, n) {
    return !t && !n ? !0 : !!t && !!n && t.startLineNumber === n.startLineNumber && t.startColumn === n.startColumn && t.endLineNumber === n.endLineNumber && t.endColumn === n.endColumn;
  }
  getEndPosition() {
    return ie.getEndPosition(this);
  }
  static getEndPosition(t) {
    return new X(t.endLineNumber, t.endColumn);
  }
  getStartPosition() {
    return ie.getStartPosition(this);
  }
  static getStartPosition(t) {
    return new X(t.startLineNumber, t.startColumn);
  }
  toString() {
    return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]";
  }
  setEndPosition(t, n) {
    return new ie(this.startLineNumber, this.startColumn, t, n);
  }
  setStartPosition(t, n) {
    return new ie(t, n, this.endLineNumber, this.endColumn);
  }
  collapseToStart() {
    return ie.collapseToStart(this);
  }
  static collapseToStart(t) {
    return new ie(
      t.startLineNumber,
      t.startColumn,
      t.startLineNumber,
      t.startColumn
    );
  }
  collapseToEnd() {
    return ie.collapseToEnd(this);
  }
  static collapseToEnd(t) {
    return new ie(t.endLineNumber, t.endColumn, t.endLineNumber, t.endColumn);
  }
  delta(t) {
    return new ie(
      this.startLineNumber + t,
      this.startColumn,
      this.endLineNumber + t,
      this.endColumn
    );
  }
  static fromPositions(t, n = t) {
    return new ie(t.lineNumber, t.column, n.lineNumber, n.column);
  }
  static lift(t) {
    return t ? new ie(
      t.startLineNumber,
      t.startColumn,
      t.endLineNumber,
      t.endColumn
    ) : null;
  }
  static isIRange(t) {
    return t && typeof t.startLineNumber == "number" && typeof t.startColumn == "number" && typeof t.endLineNumber == "number" && typeof t.endColumn == "number";
  }
  static areIntersectingOrTouching(t, n) {
    return !(t.endLineNumber < n.startLineNumber || t.endLineNumber === n.startLineNumber && t.endColumn < n.startColumn || n.endLineNumber < t.startLineNumber || n.endLineNumber === t.startLineNumber && n.endColumn < t.startColumn);
  }
  static areIntersecting(t, n) {
    return !(t.endLineNumber < n.startLineNumber || t.endLineNumber === n.startLineNumber && t.endColumn <= n.startColumn || n.endLineNumber < t.startLineNumber || n.endLineNumber === t.startLineNumber && n.endColumn <= t.startColumn);
  }
  static compareRangesUsingStarts(t, n) {
    if (t && n) {
      const s = t.startLineNumber | 0, a = n.startLineNumber | 0;
      if (s === a) {
        const o = t.startColumn | 0, l = n.startColumn | 0;
        if (o === l) {
          const u = t.endLineNumber | 0, h = n.endLineNumber | 0;
          if (u === h) {
            const f = t.endColumn | 0, m = n.endColumn | 0;
            return f - m;
          }
          return u - h;
        }
        return o - l;
      }
      return s - a;
    }
    return (t ? 1 : 0) - (n ? 1 : 0);
  }
  static compareRangesUsingEnds(t, n) {
    return t.endLineNumber === n.endLineNumber ? t.endColumn === n.endColumn ? t.startLineNumber === n.startLineNumber ? t.startColumn - n.startColumn : t.startLineNumber - n.startLineNumber : t.endColumn - n.endColumn : t.endLineNumber - n.endLineNumber;
  }
  static spansMultipleLines(t) {
    return t.endLineNumber > t.startLineNumber;
  }
  toJSON() {
    return this;
  }
};
function Tr(e) {
  return e < 0 ? 0 : e > 255 ? 255 : e | 0;
}
function ot(e) {
  return e < 0 ? 0 : e > 4294967295 ? 4294967295 : e | 0;
}
class Ar {
  constructor(t) {
    const n = Tr(t);
    this._defaultValue = n, this._asciiMap = Ar._createAsciiMap(n), this._map = /* @__PURE__ */ new Map();
  }
  static _createAsciiMap(t) {
    const n = new Uint8Array(256);
    return n.fill(t), n;
  }
  set(t, n) {
    const r = Tr(n);
    t >= 0 && t < 256 ? this._asciiMap[t] = r : this._map.set(t, r);
  }
  get(t) {
    return t >= 0 && t < 256 ? this._asciiMap[t] : this._map.get(t) || this._defaultValue;
  }
  clear() {
    this._asciiMap.fill(this._defaultValue), this._map.clear();
  }
}
class Io {
  constructor(t, n, r) {
    const i = new Uint8Array(t * n);
    for (let s = 0, a = t * n; s < a; s++)
      i[s] = r;
    this._data = i, this.rows = t, this.cols = n;
  }
  get(t, n) {
    return this._data[t * this.cols + n];
  }
  set(t, n, r) {
    this._data[t * this.cols + n] = r;
  }
}
class Vo {
  constructor(t) {
    let n = 0, r = 0;
    for (let s = 0, a = t.length; s < a; s++) {
      const [o, l, u] = t[s];
      l > n && (n = l), o > r && (r = o), u > r && (r = u);
    }
    n++, r++;
    const i = new Io(r, n, 0);
    for (let s = 0, a = t.length; s < a; s++) {
      const [o, l, u] = t[s];
      i.set(o, l, u);
    }
    this._states = i, this._maxCharCode = n;
  }
  nextState(t, n) {
    return n < 0 || n >= this._maxCharCode ? 0 : this._states.get(t, n);
  }
}
let Mn = null;
function Uo() {
  return Mn === null && (Mn = new Vo([
    [1, 104, 2],
    [1, 72, 2],
    [1, 102, 6],
    [1, 70, 6],
    [2, 116, 3],
    [2, 84, 3],
    [3, 116, 4],
    [3, 84, 4],
    [4, 112, 5],
    [4, 80, 5],
    [5, 115, 9],
    [5, 83, 9],
    [5, 58, 10],
    [6, 105, 7],
    [6, 73, 7],
    [7, 108, 8],
    [7, 76, 8],
    [8, 101, 9],
    [8, 69, 9],
    [9, 58, 10],
    [10, 47, 11],
    [11, 47, 12]
  ])), Mn;
}
let Rt = null;
function Bo() {
  if (Rt === null) {
    Rt = new Ar(0);
    const e = ` 	<>'"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…`;
    for (let n = 0; n < e.length; n++)
      Rt.set(e.charCodeAt(n), 1);
    const t = ".,;:";
    for (let n = 0; n < t.length; n++)
      Rt.set(t.charCodeAt(n), 2);
  }
  return Rt;
}
class ln {
  static _createLink(t, n, r, i, s) {
    let a = s - 1;
    do {
      const o = n.charCodeAt(a);
      if (t.get(o) !== 2)
        break;
      a--;
    } while (a > i);
    if (i > 0) {
      const o = n.charCodeAt(i - 1), l = n.charCodeAt(a);
      (o === 40 && l === 41 || o === 91 && l === 93 || o === 123 && l === 125) && a--;
    }
    return {
      range: {
        startLineNumber: r,
        startColumn: i + 1,
        endLineNumber: r,
        endColumn: a + 2
      },
      url: n.substring(i, a + 1)
    };
  }
  static computeLinks(t, n = Uo()) {
    const r = Bo(), i = [];
    for (let s = 1, a = t.getLineCount(); s <= a; s++) {
      const o = t.getLineContent(s), l = o.length;
      let u = 0, h = 0, f = 0, m = 1, d = !1, p = !1, b = !1, N = !1;
      for (; u < l; ) {
        let L = !1;
        const C = o.charCodeAt(u);
        if (m === 13) {
          let R;
          switch (C) {
            case 40:
              d = !0, R = 0;
              break;
            case 41:
              R = d ? 0 : 1;
              break;
            case 91:
              b = !0, p = !0, R = 0;
              break;
            case 93:
              b = !1, R = p ? 0 : 1;
              break;
            case 123:
              N = !0, R = 0;
              break;
            case 125:
              R = N ? 0 : 1;
              break;
            case 39:
            case 34:
            case 96:
              f === C ? R = 1 : f === 39 || f === 34 || f === 96 ? R = 0 : R = 1;
              break;
            case 42:
              R = f === 42 ? 1 : 0;
              break;
            case 124:
              R = f === 124 ? 1 : 0;
              break;
            case 32:
              R = b ? 0 : 1;
              break;
            default:
              R = r.get(C);
          }
          R === 1 && (i.push(ln._createLink(r, o, s, h, u)), L = !0);
        } else if (m === 12) {
          let R;
          C === 91 ? (p = !0, R = 0) : R = r.get(C), R === 1 ? L = !0 : m = 13;
        } else
          m = n.nextState(m, C), m === 0 && (L = !0);
        L && (m = 1, d = !1, p = !1, N = !1, h = u + 1, f = C), u++;
      }
      m === 13 && i.push(ln._createLink(r, o, s, h, l));
    }
    return i;
  }
}
function qo(e) {
  return !e || typeof e.getLineCount != "function" || typeof e.getLineContent != "function" ? [] : ln.computeLinks(e);
}
const Sn = class Sn {
  constructor() {
    this._defaultValueSet = [
      ["true", "false"],
      ["True", "False"],
      ["Private", "Public", "Friend", "ReadOnly", "Partial", "Protected", "WriteOnly"],
      ["public", "protected", "private"]
    ];
  }
  navigateValueSet(t, n, r, i, s) {
    if (t && n) {
      const a = this.doNavigateValueSet(n, s);
      if (a)
        return {
          range: t,
          value: a
        };
    }
    if (r && i) {
      const a = this.doNavigateValueSet(i, s);
      if (a)
        return {
          range: r,
          value: a
        };
    }
    return null;
  }
  doNavigateValueSet(t, n) {
    const r = this.numberReplace(t, n);
    return r !== null ? r : this.textReplace(t, n);
  }
  numberReplace(t, n) {
    const r = Math.pow(10, t.length - (t.lastIndexOf(".") + 1));
    let i = Number(t);
    const s = parseFloat(t);
    return !isNaN(i) && !isNaN(s) && i === s ? i === 0 && !n ? null : (i = Math.floor(i * r), i += n ? r : -r, String(i / r)) : null;
  }
  textReplace(t, n) {
    return this.valueSetsReplace(this._defaultValueSet, t, n);
  }
  valueSetsReplace(t, n, r) {
    let i = null;
    for (let s = 0, a = t.length; i === null && s < a; s++)
      i = this.valueSetReplace(t[s], n, r);
    return i;
  }
  valueSetReplace(t, n, r) {
    let i = t.indexOf(n);
    return i >= 0 ? (i += r ? 1 : -1, i < 0 ? i = t.length - 1 : i %= t.length, t[i]) : null;
  }
};
Sn.INSTANCE = new Sn();
let Gn = Sn;
class Nr {
  constructor() {
    this._keyCodeToStr = [], this._strToKeyCode = /* @__PURE__ */ Object.create(null);
  }
  define(t, n) {
    this._keyCodeToStr[t] = n, this._strToKeyCode[n.toLowerCase()] = t;
  }
  keyCodeToStr(t) {
    return this._keyCodeToStr[t];
  }
  strToKeyCode(t) {
    return this._strToKeyCode[t.toLowerCase()] || 0;
  }
}
const Kt = new Nr(), Tn = new Nr(), Xn = new Nr(), Oo = new Array(230), Wo = /* @__PURE__ */ Object.create(null), zo = /* @__PURE__ */ Object.create(null);
(function() {
  const e = "", t = [
    [1, 0, "None", 0, "unknown", 0, "VK_UNKNOWN", e, e],
    [1, 1, "Hyper", 0, e, 0, e, e, e],
    [1, 2, "Super", 0, e, 0, e, e, e],
    [1, 3, "Fn", 0, e, 0, e, e, e],
    [1, 4, "FnLock", 0, e, 0, e, e, e],
    [1, 5, "Suspend", 0, e, 0, e, e, e],
    [1, 6, "Resume", 0, e, 0, e, e, e],
    [1, 7, "Turbo", 0, e, 0, e, e, e],
    [1, 8, "Sleep", 0, e, 0, "VK_SLEEP", e, e],
    [1, 9, "WakeUp", 0, e, 0, e, e, e],
    [0, 10, "KeyA", 31, "A", 65, "VK_A", e, e],
    [0, 11, "KeyB", 32, "B", 66, "VK_B", e, e],
    [0, 12, "KeyC", 33, "C", 67, "VK_C", e, e],
    [0, 13, "KeyD", 34, "D", 68, "VK_D", e, e],
    [0, 14, "KeyE", 35, "E", 69, "VK_E", e, e],
    [0, 15, "KeyF", 36, "F", 70, "VK_F", e, e],
    [0, 16, "KeyG", 37, "G", 71, "VK_G", e, e],
    [0, 17, "KeyH", 38, "H", 72, "VK_H", e, e],
    [0, 18, "KeyI", 39, "I", 73, "VK_I", e, e],
    [0, 19, "KeyJ", 40, "J", 74, "VK_J", e, e],
    [0, 20, "KeyK", 41, "K", 75, "VK_K", e, e],
    [0, 21, "KeyL", 42, "L", 76, "VK_L", e, e],
    [0, 22, "KeyM", 43, "M", 77, "VK_M", e, e],
    [0, 23, "KeyN", 44, "N", 78, "VK_N", e, e],
    [0, 24, "KeyO", 45, "O", 79, "VK_O", e, e],
    [0, 25, "KeyP", 46, "P", 80, "VK_P", e, e],
    [0, 26, "KeyQ", 47, "Q", 81, "VK_Q", e, e],
    [0, 27, "KeyR", 48, "R", 82, "VK_R", e, e],
    [0, 28, "KeyS", 49, "S", 83, "VK_S", e, e],
    [0, 29, "KeyT", 50, "T", 84, "VK_T", e, e],
    [0, 30, "KeyU", 51, "U", 85, "VK_U", e, e],
    [0, 31, "KeyV", 52, "V", 86, "VK_V", e, e],
    [0, 32, "KeyW", 53, "W", 87, "VK_W", e, e],
    [0, 33, "KeyX", 54, "X", 88, "VK_X", e, e],
    [0, 34, "KeyY", 55, "Y", 89, "VK_Y", e, e],
    [0, 35, "KeyZ", 56, "Z", 90, "VK_Z", e, e],
    [0, 36, "Digit1", 22, "1", 49, "VK_1", e, e],
    [0, 37, "Digit2", 23, "2", 50, "VK_2", e, e],
    [0, 38, "Digit3", 24, "3", 51, "VK_3", e, e],
    [0, 39, "Digit4", 25, "4", 52, "VK_4", e, e],
    [0, 40, "Digit5", 26, "5", 53, "VK_5", e, e],
    [0, 41, "Digit6", 27, "6", 54, "VK_6", e, e],
    [0, 42, "Digit7", 28, "7", 55, "VK_7", e, e],
    [0, 43, "Digit8", 29, "8", 56, "VK_8", e, e],
    [0, 44, "Digit9", 30, "9", 57, "VK_9", e, e],
    [0, 45, "Digit0", 21, "0", 48, "VK_0", e, e],
    [1, 46, "Enter", 3, "Enter", 13, "VK_RETURN", e, e],
    [1, 47, "Escape", 9, "Escape", 27, "VK_ESCAPE", e, e],
    [1, 48, "Backspace", 1, "Backspace", 8, "VK_BACK", e, e],
    [1, 49, "Tab", 2, "Tab", 9, "VK_TAB", e, e],
    [1, 50, "Space", 10, "Space", 32, "VK_SPACE", e, e],
    [0, 51, "Minus", 88, "-", 189, "VK_OEM_MINUS", "-", "OEM_MINUS"],
    [0, 52, "Equal", 86, "=", 187, "VK_OEM_PLUS", "=", "OEM_PLUS"],
    [0, 53, "BracketLeft", 92, "[", 219, "VK_OEM_4", "[", "OEM_4"],
    [0, 54, "BracketRight", 94, "]", 221, "VK_OEM_6", "]", "OEM_6"],
    [0, 55, "Backslash", 93, "\\", 220, "VK_OEM_5", "\\", "OEM_5"],
    [0, 56, "IntlHash", 0, e, 0, e, e, e],
    [0, 57, "Semicolon", 85, ";", 186, "VK_OEM_1", ";", "OEM_1"],
    [0, 58, "Quote", 95, "'", 222, "VK_OEM_7", "'", "OEM_7"],
    [0, 59, "Backquote", 91, "`", 192, "VK_OEM_3", "`", "OEM_3"],
    [0, 60, "Comma", 87, ",", 188, "VK_OEM_COMMA", ",", "OEM_COMMA"],
    [0, 61, "Period", 89, ".", 190, "VK_OEM_PERIOD", ".", "OEM_PERIOD"],
    [0, 62, "Slash", 90, "/", 191, "VK_OEM_2", "/", "OEM_2"],
    [1, 63, "CapsLock", 8, "CapsLock", 20, "VK_CAPITAL", e, e],
    [1, 64, "F1", 59, "F1", 112, "VK_F1", e, e],
    [1, 65, "F2", 60, "F2", 113, "VK_F2", e, e],
    [1, 66, "F3", 61, "F3", 114, "VK_F3", e, e],
    [1, 67, "F4", 62, "F4", 115, "VK_F4", e, e],
    [1, 68, "F5", 63, "F5", 116, "VK_F5", e, e],
    [1, 69, "F6", 64, "F6", 117, "VK_F6", e, e],
    [1, 70, "F7", 65, "F7", 118, "VK_F7", e, e],
    [1, 71, "F8", 66, "F8", 119, "VK_F8", e, e],
    [1, 72, "F9", 67, "F9", 120, "VK_F9", e, e],
    [1, 73, "F10", 68, "F10", 121, "VK_F10", e, e],
    [1, 74, "F11", 69, "F11", 122, "VK_F11", e, e],
    [1, 75, "F12", 70, "F12", 123, "VK_F12", e, e],
    [1, 76, "PrintScreen", 0, e, 0, e, e, e],
    [1, 77, "ScrollLock", 84, "ScrollLock", 145, "VK_SCROLL", e, e],
    [1, 78, "Pause", 7, "PauseBreak", 19, "VK_PAUSE", e, e],
    [1, 79, "Insert", 19, "Insert", 45, "VK_INSERT", e, e],
    [1, 80, "Home", 14, "Home", 36, "VK_HOME", e, e],
    [1, 81, "PageUp", 11, "PageUp", 33, "VK_PRIOR", e, e],
    [1, 82, "Delete", 20, "Delete", 46, "VK_DELETE", e, e],
    [1, 83, "End", 13, "End", 35, "VK_END", e, e],
    [1, 84, "PageDown", 12, "PageDown", 34, "VK_NEXT", e, e],
    [1, 85, "ArrowRight", 17, "RightArrow", 39, "VK_RIGHT", "Right", e],
    [1, 86, "ArrowLeft", 15, "LeftArrow", 37, "VK_LEFT", "Left", e],
    [1, 87, "ArrowDown", 18, "DownArrow", 40, "VK_DOWN", "Down", e],
    [1, 88, "ArrowUp", 16, "UpArrow", 38, "VK_UP", "Up", e],
    [1, 89, "NumLock", 83, "NumLock", 144, "VK_NUMLOCK", e, e],
    [1, 90, "NumpadDivide", 113, "NumPad_Divide", 111, "VK_DIVIDE", e, e],
    [1, 91, "NumpadMultiply", 108, "NumPad_Multiply", 106, "VK_MULTIPLY", e, e],
    [1, 92, "NumpadSubtract", 111, "NumPad_Subtract", 109, "VK_SUBTRACT", e, e],
    [1, 93, "NumpadAdd", 109, "NumPad_Add", 107, "VK_ADD", e, e],
    [1, 94, "NumpadEnter", 3, e, 0, e, e, e],
    [1, 95, "Numpad1", 99, "NumPad1", 97, "VK_NUMPAD1", e, e],
    [1, 96, "Numpad2", 100, "NumPad2", 98, "VK_NUMPAD2", e, e],
    [1, 97, "Numpad3", 101, "NumPad3", 99, "VK_NUMPAD3", e, e],
    [1, 98, "Numpad4", 102, "NumPad4", 100, "VK_NUMPAD4", e, e],
    [1, 99, "Numpad5", 103, "NumPad5", 101, "VK_NUMPAD5", e, e],
    [1, 100, "Numpad6", 104, "NumPad6", 102, "VK_NUMPAD6", e, e],
    [1, 101, "Numpad7", 105, "NumPad7", 103, "VK_NUMPAD7", e, e],
    [1, 102, "Numpad8", 106, "NumPad8", 104, "VK_NUMPAD8", e, e],
    [1, 103, "Numpad9", 107, "NumPad9", 105, "VK_NUMPAD9", e, e],
    [1, 104, "Numpad0", 98, "NumPad0", 96, "VK_NUMPAD0", e, e],
    [1, 105, "NumpadDecimal", 112, "NumPad_Decimal", 110, "VK_DECIMAL", e, e],
    [0, 106, "IntlBackslash", 97, "OEM_102", 226, "VK_OEM_102", e, e],
    [1, 107, "ContextMenu", 58, "ContextMenu", 93, e, e, e],
    [1, 108, "Power", 0, e, 0, e, e, e],
    [1, 109, "NumpadEqual", 0, e, 0, e, e, e],
    [1, 110, "F13", 71, "F13", 124, "VK_F13", e, e],
    [1, 111, "F14", 72, "F14", 125, "VK_F14", e, e],
    [1, 112, "F15", 73, "F15", 126, "VK_F15", e, e],
    [1, 113, "F16", 74, "F16", 127, "VK_F16", e, e],
    [1, 114, "F17", 75, "F17", 128, "VK_F17", e, e],
    [1, 115, "F18", 76, "F18", 129, "VK_F18", e, e],
    [1, 116, "F19", 77, "F19", 130, "VK_F19", e, e],
    [1, 117, "F20", 78, "F20", 131, "VK_F20", e, e],
    [1, 118, "F21", 79, "F21", 132, "VK_F21", e, e],
    [1, 119, "F22", 80, "F22", 133, "VK_F22", e, e],
    [1, 120, "F23", 81, "F23", 134, "VK_F23", e, e],
    [1, 121, "F24", 82, "F24", 135, "VK_F24", e, e],
    [1, 122, "Open", 0, e, 0, e, e, e],
    [1, 123, "Help", 0, e, 0, e, e, e],
    [1, 124, "Select", 0, e, 0, e, e, e],
    [1, 125, "Again", 0, e, 0, e, e, e],
    [1, 126, "Undo", 0, e, 0, e, e, e],
    [1, 127, "Cut", 0, e, 0, e, e, e],
    [1, 128, "Copy", 0, e, 0, e, e, e],
    [1, 129, "Paste", 0, e, 0, e, e, e],
    [1, 130, "Find", 0, e, 0, e, e, e],
    [1, 131, "AudioVolumeMute", 117, "AudioVolumeMute", 173, "VK_VOLUME_MUTE", e, e],
    [1, 132, "AudioVolumeUp", 118, "AudioVolumeUp", 175, "VK_VOLUME_UP", e, e],
    [1, 133, "AudioVolumeDown", 119, "AudioVolumeDown", 174, "VK_VOLUME_DOWN", e, e],
    [1, 134, "NumpadComma", 110, "NumPad_Separator", 108, "VK_SEPARATOR", e, e],
    [0, 135, "IntlRo", 115, "ABNT_C1", 193, "VK_ABNT_C1", e, e],
    [1, 136, "KanaMode", 0, e, 0, e, e, e],
    [0, 137, "IntlYen", 0, e, 0, e, e, e],
    [1, 138, "Convert", 0, e, 0, e, e, e],
    [1, 139, "NonConvert", 0, e, 0, e, e, e],
    [1, 140, "Lang1", 0, e, 0, e, e, e],
    [1, 141, "Lang2", 0, e, 0, e, e, e],
    [1, 142, "Lang3", 0, e, 0, e, e, e],
    [1, 143, "Lang4", 0, e, 0, e, e, e],
    [1, 144, "Lang5", 0, e, 0, e, e, e],
    [1, 145, "Abort", 0, e, 0, e, e, e],
    [1, 146, "Props", 0, e, 0, e, e, e],
    [1, 147, "NumpadParenLeft", 0, e, 0, e, e, e],
    [1, 148, "NumpadParenRight", 0, e, 0, e, e, e],
    [1, 149, "NumpadBackspace", 0, e, 0, e, e, e],
    [1, 150, "NumpadMemoryStore", 0, e, 0, e, e, e],
    [1, 151, "NumpadMemoryRecall", 0, e, 0, e, e, e],
    [1, 152, "NumpadMemoryClear", 0, e, 0, e, e, e],
    [1, 153, "NumpadMemoryAdd", 0, e, 0, e, e, e],
    [1, 154, "NumpadMemorySubtract", 0, e, 0, e, e, e],
    [1, 155, "NumpadClear", 131, "Clear", 12, "VK_CLEAR", e, e],
    [1, 156, "NumpadClearEntry", 0, e, 0, e, e, e],
    [1, 0, e, 5, "Ctrl", 17, "VK_CONTROL", e, e],
    [1, 0, e, 4, "Shift", 16, "VK_SHIFT", e, e],
    [1, 0, e, 6, "Alt", 18, "VK_MENU", e, e],
    [1, 0, e, 57, "Meta", 91, "VK_COMMAND", e, e],
    [1, 157, "ControlLeft", 5, e, 0, "VK_LCONTROL", e, e],
    [1, 158, "ShiftLeft", 4, e, 0, "VK_LSHIFT", e, e],
    [1, 159, "AltLeft", 6, e, 0, "VK_LMENU", e, e],
    [1, 160, "MetaLeft", 57, e, 0, "VK_LWIN", e, e],
    [1, 161, "ControlRight", 5, e, 0, "VK_RCONTROL", e, e],
    [1, 162, "ShiftRight", 4, e, 0, "VK_RSHIFT", e, e],
    [1, 163, "AltRight", 6, e, 0, "VK_RMENU", e, e],
    [1, 164, "MetaRight", 57, e, 0, "VK_RWIN", e, e],
    [1, 165, "BrightnessUp", 0, e, 0, e, e, e],
    [1, 166, "BrightnessDown", 0, e, 0, e, e, e],
    [1, 167, "MediaPlay", 0, e, 0, e, e, e],
    [1, 168, "MediaRecord", 0, e, 0, e, e, e],
    [1, 169, "MediaFastForward", 0, e, 0, e, e, e],
    [1, 170, "MediaRewind", 0, e, 0, e, e, e],
    [1, 171, "MediaTrackNext", 124, "MediaTrackNext", 176, "VK_MEDIA_NEXT_TRACK", e, e],
    [1, 172, "MediaTrackPrevious", 125, "MediaTrackPrevious", 177, "VK_MEDIA_PREV_TRACK", e, e],
    [1, 173, "MediaStop", 126, "MediaStop", 178, "VK_MEDIA_STOP", e, e],
    [1, 174, "Eject", 0, e, 0, e, e, e],
    [1, 175, "MediaPlayPause", 127, "MediaPlayPause", 179, "VK_MEDIA_PLAY_PAUSE", e, e],
    [1, 176, "MediaSelect", 128, "LaunchMediaPlayer", 181, "VK_MEDIA_LAUNCH_MEDIA_SELECT", e, e],
    [1, 177, "LaunchMail", 129, "LaunchMail", 180, "VK_MEDIA_LAUNCH_MAIL", e, e],
    [1, 178, "LaunchApp2", 130, "LaunchApp2", 183, "VK_MEDIA_LAUNCH_APP2", e, e],
    [1, 179, "LaunchApp1", 0, e, 0, "VK_MEDIA_LAUNCH_APP1", e, e],
    [1, 180, "SelectTask", 0, e, 0, e, e, e],
    [1, 181, "LaunchScreenSaver", 0, e, 0, e, e, e],
    [1, 182, "BrowserSearch", 120, "BrowserSearch", 170, "VK_BROWSER_SEARCH", e, e],
    [1, 183, "BrowserHome", 121, "BrowserHome", 172, "VK_BROWSER_HOME", e, e],
    [1, 184, "BrowserBack", 122, "BrowserBack", 166, "VK_BROWSER_BACK", e, e],
    [1, 185, "BrowserForward", 123, "BrowserForward", 167, "VK_BROWSER_FORWARD", e, e],
    [1, 186, "BrowserStop", 0, e, 0, "VK_BROWSER_STOP", e, e],
    [1, 187, "BrowserRefresh", 0, e, 0, "VK_BROWSER_REFRESH", e, e],
    [1, 188, "BrowserFavorites", 0, e, 0, "VK_BROWSER_FAVORITES", e, e],
    [1, 189, "ZoomToggle", 0, e, 0, e, e, e],
    [1, 190, "MailReply", 0, e, 0, e, e, e],
    [1, 191, "MailForward", 0, e, 0, e, e, e],
    [1, 192, "MailSend", 0, e, 0, e, e, e],
    [1, 0, e, 114, "KeyInComposition", 229, e, e, e],
    [1, 0, e, 116, "ABNT_C2", 194, "VK_ABNT_C2", e, e],
    [1, 0, e, 96, "OEM_8", 223, "VK_OEM_8", e, e],
    [1, 0, e, 0, e, 0, "VK_KANA", e, e],
    [1, 0, e, 0, e, 0, "VK_HANGUL", e, e],
    [1, 0, e, 0, e, 0, "VK_JUNJA", e, e],
    [1, 0, e, 0, e, 0, "VK_FINAL", e, e],
    [1, 0, e, 0, e, 0, "VK_HANJA", e, e],
    [1, 0, e, 0, e, 0, "VK_KANJI", e, e],
    [1, 0, e, 0, e, 0, "VK_CONVERT", e, e],
    [1, 0, e, 0, e, 0, "VK_NONCONVERT", e, e],
    [1, 0, e, 0, e, 0, "VK_ACCEPT", e, e],
    [1, 0, e, 0, e, 0, "VK_MODECHANGE", e, e],
    [1, 0, e, 0, e, 0, "VK_SELECT", e, e],
    [1, 0, e, 0, e, 0, "VK_PRINT", e, e],
    [1, 0, e, 0, e, 0, "VK_EXECUTE", e, e],
    [1, 0, e, 0, e, 0, "VK_SNAPSHOT", e, e],
    [1, 0, e, 0, e, 0, "VK_HELP", e, e],
    [1, 0, e, 0, e, 0, "VK_APPS", e, e],
    [1, 0, e, 0, e, 0, "VK_PROCESSKEY", e, e],
    [1, 0, e, 0, e, 0, "VK_PACKET", e, e],
    [1, 0, e, 0, e, 0, "VK_DBE_SBCSCHAR", e, e],
    [1, 0, e, 0, e, 0, "VK_DBE_DBCSCHAR", e, e],
    [1, 0, e, 0, e, 0, "VK_ATTN", e, e],
    [1, 0, e, 0, e, 0, "VK_CRSEL", e, e],
    [1, 0, e, 0, e, 0, "VK_EXSEL", e, e],
    [1, 0, e, 0, e, 0, "VK_EREOF", e, e],
    [1, 0, e, 0, e, 0, "VK_PLAY", e, e],
    [1, 0, e, 0, e, 0, "VK_ZOOM", e, e],
    [1, 0, e, 0, e, 0, "VK_NONAME", e, e],
    [1, 0, e, 0, e, 0, "VK_PA1", e, e],
    [1, 0, e, 0, e, 0, "VK_OEM_CLEAR", e, e]
  ], n = [], r = [];
  for (const i of t) {
    const [s, a, o, l, u, h, f, m, d] = i;
    if (r[a] || (r[a] = !0, Wo[o] = a, zo[o.toLowerCase()] = a), !n[l]) {
      if (n[l] = !0, !u)
        throw new Error(
          `String representation missing for key code ${l} around scan code ${o}`
        );
      Kt.define(l, u), Tn.define(l, m || u), Xn.define(l, d || m || u);
    }
    h && (Oo[h] = l);
  }
})();
var Xr;
(function(e) {
  function t(o) {
    return Kt.keyCodeToStr(o);
  }
  e.toString = t;
  function n(o) {
    return Kt.strToKeyCode(o);
  }
  e.fromString = n;
  function r(o) {
    return Tn.keyCodeToStr(o);
  }
  e.toUserSettingsUS = r;
  function i(o) {
    return Xn.keyCodeToStr(o);
  }
  e.toUserSettingsGeneral = i;
  function s(o) {
    return Tn.strToKeyCode(o) || Xn.strToKeyCode(o);
  }
  e.fromUserSettings = s;
  function a(o) {
    if (o >= 98 && o <= 113)
      return null;
    switch (o) {
      case 16:
        return "Up";
      case 18:
        return "Down";
      case 15:
        return "Left";
      case 17:
        return "Right";
    }
    return Kt.keyCodeToStr(o);
  }
  e.toElectronAccelerator = a;
})(Xr || (Xr = {}));
function Ho(e, t) {
  const n = (t & 65535) << 16 >>> 0;
  return (e | n) >>> 0;
}
let nt;
const Pn = globalThis.vscode;
var H1;
if (typeof Pn < "u" && typeof Pn.process < "u") {
  const e = Pn.process;
  nt = {
    get platform() {
      return e.platform;
    },
    get arch() {
      return e.arch;
    },
    get env() {
      return e.env;
    },
    cwd() {
      return e.cwd();
    }
  };
} else typeof process < "u" && typeof ((H1 = process == null ? void 0 : process.versions) == null ? void 0 : H1.node) == "string" ? nt = {
  get platform() {
    return process.platform;
  },
  get arch() {
    return process.arch;
  },
  get env() {
    return process.env;
  },
  cwd() {
    return process.env.VSCODE_CWD || process.cwd();
  }
} : nt = {
  get platform() {
    return Ct ? "win32" : no ? "darwin" : "linux";
  },
  get arch() {
  },
  get env() {
    return {};
  },
  cwd() {
    return "/";
  }
};
const un = nt.cwd, jo = nt.env, Go = nt.platform;
nt.arch;
const To = 65, Xo = 97, Qo = 90, Jo = 122, Te = 46, le = 47, pe = 92, We = 58, Yo = 63;
class ea extends Error {
  constructor(t, n, r) {
    let i;
    typeof n == "string" && n.indexOf("not ") === 0 ? (i = "must not be", n = n.replace(/^not /, "")) : i = "must be";
    const s = t.indexOf(".") !== -1 ? "property" : "argument";
    let a = `The "${t}" ${s} ${i} of type ${n}`;
    a += `. Received type ${typeof r}`, super(a), this.code = "ERR_INVALID_ARG_TYPE";
  }
}
function Zo(e, t) {
  if (e === null || typeof e != "object")
    throw new ea(t, "Object", e);
}
function re(e, t) {
  if (typeof e != "string")
    throw new ea(t, "string", e);
}
const Ce = Go === "win32";
function W(e) {
  return e === le || e === pe;
}
function Qn(e) {
  return e === le;
}
function ze(e) {
  return e >= To && e <= Qo || e >= Xo && e <= Jo;
}
function cn(e, t, n, r) {
  let i = "", s = 0, a = -1, o = 0, l = 0;
  for (let u = 0; u <= e.length; ++u) {
    if (u < e.length)
      l = e.charCodeAt(u);
    else {
      if (r(l))
        break;
      l = le;
    }
    if (r(l)) {
      if (!(a === u - 1 || o === 1)) if (o === 2) {
        if (i.length < 2 || s !== 2 || i.charCodeAt(i.length - 1) !== Te || i.charCodeAt(i.length - 2) !== Te) {
          if (i.length > 2) {
            const h = i.lastIndexOf(n);
            h === -1 ? (i = "", s = 0) : (i = i.slice(0, h), s = i.length - 1 - i.lastIndexOf(n)), a = u, o = 0;
            continue;
          } else if (i.length !== 0) {
            i = "", s = 0, a = u, o = 0;
            continue;
          }
        }
        t && (i += i.length > 0 ? `${n}..` : "..", s = 2);
      } else
        i.length > 0 ? i += `${n}${e.slice(a + 1, u)}` : i = e.slice(a + 1, u), s = u - a - 1;
      a = u, o = 0;
    } else l === Te && o !== -1 ? ++o : o = -1;
  }
  return i;
}
function Ko(e) {
  return e ? `${e[0] === "." ? "" : "."}${e}` : "";
}
function ta(e, t) {
  Zo(t, "pathObject");
  const n = t.dir || t.root, r = t.base || `${t.name || ""}${Ko(t.ext)}`;
  return n ? n === t.root ? `${n}${r}` : `${n}${e}${r}` : r;
}
const oe = {
  resolve(...e) {
    let t = "", n = "", r = !1;
    for (let i = e.length - 1; i >= -1; i--) {
      let s;
      if (i >= 0) {
        if (s = e[i], re(s, `paths[${i}]`), s.length === 0)
          continue;
      } else t.length === 0 ? s = un() : (s = jo[`=${t}`] || un(), (s === void 0 || s.slice(0, 2).toLowerCase() !== t.toLowerCase() && s.charCodeAt(2) === pe) && (s = `${t}\\`));
      const a = s.length;
      let o = 0, l = "", u = !1;
      const h = s.charCodeAt(0);
      if (a === 1)
        W(h) && (o = 1, u = !0);
      else if (W(h))
        if (u = !0, W(s.charCodeAt(1))) {
          let f = 2, m = f;
          for (; f < a && !W(s.charCodeAt(f)); )
            f++;
          if (f < a && f !== m) {
            const d = s.slice(m, f);
            for (m = f; f < a && W(s.charCodeAt(f)); )
              f++;
            if (f < a && f !== m) {
              for (m = f; f < a && !W(s.charCodeAt(f)); )
                f++;
              (f === a || f !== m) && (l = `\\\\${d}\\${s.slice(m, f)}`, o = f);
            }
          }
        } else
          o = 1;
      else ze(h) && s.charCodeAt(1) === We && (l = s.slice(0, 2), o = 2, a > 2 && W(s.charCodeAt(2)) && (u = !0, o = 3));
      if (l.length > 0)
        if (t.length > 0) {
          if (l.toLowerCase() !== t.toLowerCase())
            continue;
        } else
          t = l;
      if (r) {
        if (t.length > 0)
          break;
      } else if (n = `${s.slice(o)}\\${n}`, r = u, u && t.length > 0)
        break;
    }
    return n = cn(n, !r, "\\", W), r ? `${t}\\${n}` : `${t}${n}` || ".";
  },
  normalize(e) {
    re(e, "path");
    const t = e.length;
    if (t === 0)
      return ".";
    let n = 0, r, i = !1;
    const s = e.charCodeAt(0);
    if (t === 1)
      return Qn(s) ? "\\" : e;
    if (W(s))
      if (i = !0, W(e.charCodeAt(1))) {
        let o = 2, l = o;
        for (; o < t && !W(e.charCodeAt(o)); )
          o++;
        if (o < t && o !== l) {
          const u = e.slice(l, o);
          for (l = o; o < t && W(e.charCodeAt(o)); )
            o++;
          if (o < t && o !== l) {
            for (l = o; o < t && !W(e.charCodeAt(o)); )
              o++;
            if (o === t)
              return `\\\\${u}\\${e.slice(l)}\\`;
            o !== l && (r = `\\\\${u}\\${e.slice(l, o)}`, n = o);
          }
        }
      } else
        n = 1;
    else ze(s) && e.charCodeAt(1) === We && (r = e.slice(0, 2), n = 2, t > 2 && W(e.charCodeAt(2)) && (i = !0, n = 3));
    let a = n < t ? cn(e.slice(n), !i, "\\", W) : "";
    return a.length === 0 && !i && (a = "."), a.length > 0 && W(e.charCodeAt(t - 1)) && (a += "\\"), r === void 0 ? i ? `\\${a}` : a : i ? `${r}\\${a}` : `${r}${a}`;
  },
  isAbsolute(e) {
    re(e, "path");
    const t = e.length;
    if (t === 0)
      return !1;
    const n = e.charCodeAt(0);
    return W(n) || t > 2 && ze(n) && e.charCodeAt(1) === We && W(e.charCodeAt(2));
  },
  join(...e) {
    if (e.length === 0)
      return ".";
    let t, n;
    for (let s = 0; s < e.length; ++s) {
      const a = e[s];
      re(a, "path"), a.length > 0 && (t === void 0 ? t = n = a : t += `\\${a}`);
    }
    if (t === void 0)
      return ".";
    let r = !0, i = 0;
    if (typeof n == "string" && W(n.charCodeAt(0))) {
      ++i;
      const s = n.length;
      s > 1 && W(n.charCodeAt(1)) && (++i, s > 2 && (W(n.charCodeAt(2)) ? ++i : r = !1));
    }
    if (r) {
      for (; i < t.length && W(t.charCodeAt(i)); )
        i++;
      i >= 2 && (t = `\\${t.slice(i)}`);
    }
    return oe.normalize(t);
  },
  relative(e, t) {
    if (re(e, "from"), re(t, "to"), e === t)
      return "";
    const n = oe.resolve(e), r = oe.resolve(t);
    if (n === r || (e = n.toLowerCase(), t = r.toLowerCase(), e === t))
      return "";
    let i = 0;
    for (; i < e.length && e.charCodeAt(i) === pe; )
      i++;
    let s = e.length;
    for (; s - 1 > i && e.charCodeAt(s - 1) === pe; )
      s--;
    const a = s - i;
    let o = 0;
    for (; o < t.length && t.charCodeAt(o) === pe; )
      o++;
    let l = t.length;
    for (; l - 1 > o && t.charCodeAt(l - 1) === pe; )
      l--;
    const u = l - o, h = a < u ? a : u;
    let f = -1, m = 0;
    for (; m < h; m++) {
      const p = e.charCodeAt(i + m);
      if (p !== t.charCodeAt(o + m))
        break;
      p === pe && (f = m);
    }
    if (m !== h) {
      if (f === -1)
        return r;
    } else {
      if (u > h) {
        if (t.charCodeAt(o + m) === pe)
          return r.slice(o + m + 1);
        if (m === 2)
          return r.slice(o + m);
      }
      a > h && (e.charCodeAt(i + m) === pe ? f = m : m === 2 && (f = 3)), f === -1 && (f = 0);
    }
    let d = "";
    for (m = i + f + 1; m <= s; ++m)
      (m === s || e.charCodeAt(m) === pe) && (d += d.length === 0 ? ".." : "\\..");
    return o += f, d.length > 0 ? `${d}${r.slice(o, l)}` : (r.charCodeAt(o) === pe && ++o, r.slice(o, l));
  },
  toNamespacedPath(e) {
    if (typeof e != "string" || e.length === 0)
      return e;
    const t = oe.resolve(e);
    if (t.length <= 2)
      return e;
    if (t.charCodeAt(0) === pe) {
      if (t.charCodeAt(1) === pe) {
        const n = t.charCodeAt(2);
        if (n !== Yo && n !== Te)
          return `\\\\?\\UNC\\${t.slice(2)}`;
      }
    } else if (ze(t.charCodeAt(0)) && t.charCodeAt(1) === We && t.charCodeAt(2) === pe)
      return `\\\\?\\${t}`;
    return e;
  },
  dirname(e) {
    re(e, "path");
    const t = e.length;
    if (t === 0)
      return ".";
    let n = -1, r = 0;
    const i = e.charCodeAt(0);
    if (t === 1)
      return W(i) ? e : ".";
    if (W(i)) {
      if (n = r = 1, W(e.charCodeAt(1))) {
        let o = 2, l = o;
        for (; o < t && !W(e.charCodeAt(o)); )
          o++;
        if (o < t && o !== l) {
          for (l = o; o < t && W(e.charCodeAt(o)); )
            o++;
          if (o < t && o !== l) {
            for (l = o; o < t && !W(e.charCodeAt(o)); )
              o++;
            if (o === t)
              return e;
            o !== l && (n = r = o + 1);
          }
        }
      }
    } else ze(i) && e.charCodeAt(1) === We && (n = t > 2 && W(e.charCodeAt(2)) ? 3 : 2, r = n);
    let s = -1, a = !0;
    for (let o = t - 1; o >= r; --o)
      if (W(e.charCodeAt(o))) {
        if (!a) {
          s = o;
          break;
        }
      } else
        a = !1;
    if (s === -1) {
      if (n === -1)
        return ".";
      s = n;
    }
    return e.slice(0, s);
  },
  basename(e, t) {
    t !== void 0 && re(t, "suffix"), re(e, "path");
    let n = 0, r = -1, i = !0, s;
    if (e.length >= 2 && ze(e.charCodeAt(0)) && e.charCodeAt(1) === We && (n = 2), t !== void 0 && t.length > 0 && t.length <= e.length) {
      if (t === e)
        return "";
      let a = t.length - 1, o = -1;
      for (s = e.length - 1; s >= n; --s) {
        const l = e.charCodeAt(s);
        if (W(l)) {
          if (!i) {
            n = s + 1;
            break;
          }
        } else
          o === -1 && (i = !1, o = s + 1), a >= 0 && (l === t.charCodeAt(a) ? --a === -1 && (r = s) : (a = -1, r = o));
      }
      return n === r ? r = o : r === -1 && (r = e.length), e.slice(n, r);
    }
    for (s = e.length - 1; s >= n; --s)
      if (W(e.charCodeAt(s))) {
        if (!i) {
          n = s + 1;
          break;
        }
      } else r === -1 && (i = !1, r = s + 1);
    return r === -1 ? "" : e.slice(n, r);
  },
  extname(e) {
    re(e, "path");
    let t = 0, n = -1, r = 0, i = -1, s = !0, a = 0;
    e.length >= 2 && e.charCodeAt(1) === We && ze(e.charCodeAt(0)) && (t = r = 2);
    for (let o = e.length - 1; o >= t; --o) {
      const l = e.charCodeAt(o);
      if (W(l)) {
        if (!s) {
          r = o + 1;
          break;
        }
        continue;
      }
      i === -1 && (s = !1, i = o + 1), l === Te ? n === -1 ? n = o : a !== 1 && (a = 1) : n !== -1 && (a = -1);
    }
    return n === -1 || i === -1 || a === 0 || a === 1 && n === i - 1 && n === r + 1 ? "" : e.slice(n, i);
  },
  format: ta.bind(null, "\\"),
  parse(e) {
    re(e, "path");
    const t = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return t;
    const n = e.length;
    let r = 0, i = e.charCodeAt(0);
    if (n === 1)
      return W(i) ? (t.root = t.dir = e, t) : (t.base = t.name = e, t);
    if (W(i)) {
      if (r = 1, W(e.charCodeAt(1))) {
        let f = 2, m = f;
        for (; f < n && !W(e.charCodeAt(f)); )
          f++;
        if (f < n && f !== m) {
          for (m = f; f < n && W(e.charCodeAt(f)); )
            f++;
          if (f < n && f !== m) {
            for (m = f; f < n && !W(e.charCodeAt(f)); )
              f++;
            f === n ? r = f : f !== m && (r = f + 1);
          }
        }
      }
    } else if (ze(i) && e.charCodeAt(1) === We) {
      if (n <= 2)
        return t.root = t.dir = e, t;
      if (r = 2, W(e.charCodeAt(2))) {
        if (n === 3)
          return t.root = t.dir = e, t;
        r = 3;
      }
    }
    r > 0 && (t.root = e.slice(0, r));
    let s = -1, a = r, o = -1, l = !0, u = e.length - 1, h = 0;
    for (; u >= r; --u) {
      if (i = e.charCodeAt(u), W(i)) {
        if (!l) {
          a = u + 1;
          break;
        }
        continue;
      }
      o === -1 && (l = !1, o = u + 1), i === Te ? s === -1 ? s = u : h !== 1 && (h = 1) : s !== -1 && (h = -1);
    }
    return o !== -1 && (s === -1 || h === 0 || h === 1 && s === o - 1 && s === a + 1 ? t.base = t.name = e.slice(a, o) : (t.name = e.slice(a, s), t.base = e.slice(a, o), t.ext = e.slice(s, o))), a > 0 && a !== r ? t.dir = e.slice(0, a - 1) : t.dir = t.root, t;
  },
  sep: "\\",
  delimiter: ";",
  win32: null,
  posix: null
}, el = (() => {
  if (Ce) {
    const e = /\\/g;
    return () => {
      const t = un().replace(e, "/");
      return t.slice(t.indexOf("/"));
    };
  }
  return () => un();
})(), J = {
  resolve(...e) {
    let t = "", n = !1;
    for (let r = e.length - 1; r >= -1 && !n; r--) {
      const i = r >= 0 ? e[r] : el();
      re(i, `paths[${r}]`), i.length !== 0 && (t = `${i}/${t}`, n = i.charCodeAt(0) === le);
    }
    return t = cn(t, !n, "/", Qn), n ? `/${t}` : t.length > 0 ? t : ".";
  },
  normalize(e) {
    if (re(e, "path"), e.length === 0)
      return ".";
    const t = e.charCodeAt(0) === le, n = e.charCodeAt(e.length - 1) === le;
    return e = cn(e, !t, "/", Qn), e.length === 0 ? t ? "/" : n ? "./" : "." : (n && (e += "/"), t ? `/${e}` : e);
  },
  isAbsolute(e) {
    return re(e, "path"), e.length > 0 && e.charCodeAt(0) === le;
  },
  join(...e) {
    if (e.length === 0)
      return ".";
    let t;
    for (let n = 0; n < e.length; ++n) {
      const r = e[n];
      re(r, "path"), r.length > 0 && (t === void 0 ? t = r : t += `/${r}`);
    }
    return t === void 0 ? "." : J.normalize(t);
  },
  relative(e, t) {
    if (re(e, "from"), re(t, "to"), e === t || (e = J.resolve(e), t = J.resolve(t), e === t))
      return "";
    const n = 1, r = e.length, i = r - n, s = 1, a = t.length - s, o = i < a ? i : a;
    let l = -1, u = 0;
    for (; u < o; u++) {
      const f = e.charCodeAt(n + u);
      if (f !== t.charCodeAt(s + u))
        break;
      f === le && (l = u);
    }
    if (u === o)
      if (a > o) {
        if (t.charCodeAt(s + u) === le)
          return t.slice(s + u + 1);
        if (u === 0)
          return t.slice(s + u);
      } else i > o && (e.charCodeAt(n + u) === le ? l = u : u === 0 && (l = 0));
    let h = "";
    for (u = n + l + 1; u <= r; ++u)
      (u === r || e.charCodeAt(u) === le) && (h += h.length === 0 ? ".." : "/..");
    return `${h}${t.slice(s + l)}`;
  },
  toNamespacedPath(e) {
    return e;
  },
  dirname(e) {
    if (re(e, "path"), e.length === 0)
      return ".";
    const t = e.charCodeAt(0) === le;
    let n = -1, r = !0;
    for (let i = e.length - 1; i >= 1; --i)
      if (e.charCodeAt(i) === le) {
        if (!r) {
          n = i;
          break;
        }
      } else
        r = !1;
    return n === -1 ? t ? "/" : "." : t && n === 1 ? "//" : e.slice(0, n);
  },
  basename(e, t) {
    t !== void 0 && re(t, "ext"), re(e, "path");
    let n = 0, r = -1, i = !0, s;
    if (t !== void 0 && t.length > 0 && t.length <= e.length) {
      if (t === e)
        return "";
      let a = t.length - 1, o = -1;
      for (s = e.length - 1; s >= 0; --s) {
        const l = e.charCodeAt(s);
        if (l === le) {
          if (!i) {
            n = s + 1;
            break;
          }
        } else
          o === -1 && (i = !1, o = s + 1), a >= 0 && (l === t.charCodeAt(a) ? --a === -1 && (r = s) : (a = -1, r = o));
      }
      return n === r ? r = o : r === -1 && (r = e.length), e.slice(n, r);
    }
    for (s = e.length - 1; s >= 0; --s)
      if (e.charCodeAt(s) === le) {
        if (!i) {
          n = s + 1;
          break;
        }
      } else r === -1 && (i = !1, r = s + 1);
    return r === -1 ? "" : e.slice(n, r);
  },
  extname(e) {
    re(e, "path");
    let t = -1, n = 0, r = -1, i = !0, s = 0;
    for (let a = e.length - 1; a >= 0; --a) {
      const o = e.charCodeAt(a);
      if (o === le) {
        if (!i) {
          n = a + 1;
          break;
        }
        continue;
      }
      r === -1 && (i = !1, r = a + 1), o === Te ? t === -1 ? t = a : s !== 1 && (s = 1) : t !== -1 && (s = -1);
    }
    return t === -1 || r === -1 || s === 0 || s === 1 && t === r - 1 && t === n + 1 ? "" : e.slice(t, r);
  },
  format: ta.bind(null, "/"),
  parse(e) {
    re(e, "path");
    const t = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return t;
    const n = e.charCodeAt(0) === le;
    let r;
    n ? (t.root = "/", r = 1) : r = 0;
    let i = -1, s = 0, a = -1, o = !0, l = e.length - 1, u = 0;
    for (; l >= r; --l) {
      const h = e.charCodeAt(l);
      if (h === le) {
        if (!o) {
          s = l + 1;
          break;
        }
        continue;
      }
      a === -1 && (o = !1, a = l + 1), h === Te ? i === -1 ? i = l : u !== 1 && (u = 1) : i !== -1 && (u = -1);
    }
    if (a !== -1) {
      const h = s === 0 && n ? 1 : s;
      i === -1 || u === 0 || u === 1 && i === a - 1 && i === s + 1 ? t.base = t.name = e.slice(h, a) : (t.name = e.slice(h, i), t.base = e.slice(h, a), t.ext = e.slice(i, a));
    }
    return s > 0 ? t.dir = e.slice(0, s - 1) : n && (t.dir = "/"), t;
  },
  sep: "/",
  delimiter: ":",
  win32: null,
  posix: null
};
J.win32 = oe.win32 = oe;
J.posix = oe.posix = J;
const tl = Ce ? oe.normalize : J.normalize;
Ce ? oe.isAbsolute : J.isAbsolute;
const nl = Ce ? oe.join : J.join, rl = Ce ? oe.resolve : J.resolve, il = Ce ? oe.relative : J.relative, sl = Ce ? oe.dirname : J.dirname;
Ce ? oe.basename : J.basename;
Ce ? oe.extname : J.extname;
Ce ? oe.parse : J.parse;
const en = Ce ? oe.sep : J.sep;
Ce ? oe.delimiter : J.delimiter;
const al = /^\w[\w\d+.-]*$/, ol = /^\//, ll = /^\/\//;
function ul(e, t) {
  if (!e.scheme && t)
    throw new Error(
      `[UriError]: Scheme is missing: {scheme: "", authority: "${e.authority}", path: "${e.path}", query: "${e.query}", fragment: "${e.fragment}"}`
    );
  if (e.scheme && !al.test(e.scheme))
    throw new Error("[UriError]: Scheme contains illegal characters.");
  if (e.path) {
    if (e.authority) {
      if (!ol.test(e.path))
        throw new Error(
          '[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character'
        );
    } else if (ll.test(e.path))
      throw new Error(
        '[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")'
      );
  }
}
function cl(e, t) {
  return !e && !t ? "file" : e;
}
function hl(e, t) {
  switch (e) {
    case "https":
    case "http":
    case "file":
      t ? t[0] !== Ne && (t = Ne + t) : t = Ne;
      break;
  }
  return t;
}
const Y = "", Ne = "/", fl = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
let _e = class tn {
  static isUri(t) {
    return t instanceof tn ? !0 : t ? typeof t.authority == "string" && typeof t.fragment == "string" && typeof t.path == "string" && typeof t.query == "string" && typeof t.scheme == "string" && typeof t.fsPath == "string" && typeof t.with == "function" && typeof t.toString == "function" : !1;
  }
  constructor(t, n, r, i, s, a = !1) {
    typeof t == "object" ? (this.scheme = t.scheme || Y, this.authority = t.authority || Y, this.path = t.path || Y, this.query = t.query || Y, this.fragment = t.fragment || Y) : (this.scheme = cl(t, a), this.authority = n || Y, this.path = hl(this.scheme, r || Y), this.query = i || Y, this.fragment = s || Y, ul(this, a));
  }
  get fsPath() {
    return hn(this, !1);
  }
  with(t) {
    if (!t)
      return this;
    let { scheme: n, authority: r, path: i, query: s, fragment: a } = t;
    return n === void 0 ? n = this.scheme : n === null && (n = Y), r === void 0 ? r = this.authority : r === null && (r = Y), i === void 0 ? i = this.path : i === null && (i = Y), s === void 0 ? s = this.query : s === null && (s = Y), a === void 0 ? a = this.fragment : a === null && (a = Y), n === this.scheme && r === this.authority && i === this.path && s === this.query && a === this.fragment ? this : new lt(n, r, i, s, a);
  }
  static parse(t, n = !1) {
    const r = fl.exec(t);
    return r ? new lt(
      r[2] || Y,
      Xt(r[4] || Y),
      Xt(r[5] || Y),
      Xt(r[7] || Y),
      Xt(r[9] || Y),
      n
    ) : new lt(Y, Y, Y, Y, Y);
  }
  static file(t) {
    let n = Y;
    if (Ct && (t = t.replace(/\\/g, Ne)), t[0] === Ne && t[1] === Ne) {
      const r = t.indexOf(Ne, 2);
      r === -1 ? (n = t.substring(2), t = Ne) : (n = t.substring(2, r), t = t.substring(r) || Ne);
    }
    return new lt("file", n, t, Y, Y);
  }
  static from(t, n) {
    return new lt(
      t.scheme,
      t.authority,
      t.path,
      t.query,
      t.fragment,
      n
    );
  }
  static joinPath(t, ...n) {
    if (!t.path)
      throw new Error("[UriError]: cannot call joinPath on URI without path");
    let r;
    return Ct && t.scheme === "file" ? r = tn.file(oe.join(hn(t, !0), ...n)).path : r = J.join(t.path, ...n), t.with({ path: r });
  }
  toString(t = !1) {
    return Jn(this, t);
  }
  toJSON() {
    return this;
  }
  static revive(t) {
    if (t) {
      if (t instanceof tn)
        return t;
      {
        const n = new lt(t);
        return n._formatted = t.external ?? null, n._fsPath = t._sep === na ? t.fsPath ?? null : null, n;
      }
    } else return t;
  }
  [Symbol.for("debug.description")]() {
    return `URI(${this.toString()})`;
  }
};
const na = Ct ? 1 : void 0;
class lt extends _e {
  constructor() {
    super(...arguments), this._formatted = null, this._fsPath = null;
  }
  get fsPath() {
    return this._fsPath || (this._fsPath = hn(this, !1)), this._fsPath;
  }
  toString(t = !1) {
    return t ? Jn(this, !0) : (this._formatted || (this._formatted = Jn(this, !1)), this._formatted);
  }
  toJSON() {
    const t = {
      $mid: 1
    };
    return this._fsPath && (t.fsPath = this._fsPath, t._sep = na), this._formatted && (t.external = this._formatted), this.path && (t.path = this.path), this.scheme && (t.scheme = this.scheme), this.authority && (t.authority = this.authority), this.query && (t.query = this.query), this.fragment && (t.fragment = this.fragment), t;
  }
}
const ra = {
  58: "%3A",
  47: "%2F",
  63: "%3F",
  35: "%23",
  91: "%5B",
  93: "%5D",
  64: "%40",
  33: "%21",
  36: "%24",
  38: "%26",
  39: "%27",
  40: "%28",
  41: "%29",
  42: "%2A",
  43: "%2B",
  44: "%2C",
  59: "%3B",
  61: "%3D",
  32: "%20"
};
function Qr(e, t, n) {
  let r, i = -1;
  for (let s = 0; s < e.length; s++) {
    const a = e.charCodeAt(s);
    if (a >= 97 && a <= 122 || a >= 65 && a <= 90 || a >= 48 && a <= 57 || a === 45 || a === 46 || a === 95 || a === 126 || t && a === 47 || n && a === 91 || n && a === 93 || n && a === 58)
      i !== -1 && (r += encodeURIComponent(e.substring(i, s)), i = -1), r !== void 0 && (r += e.charAt(s));
    else {
      r === void 0 && (r = e.substr(0, s));
      const o = ra[a];
      o !== void 0 ? (i !== -1 && (r += encodeURIComponent(e.substring(i, s)), i = -1), r += o) : i === -1 && (i = s);
    }
  }
  return i !== -1 && (r += encodeURIComponent(e.substring(i))), r !== void 0 ? r : e;
}
function dl(e) {
  let t;
  for (let n = 0; n < e.length; n++) {
    const r = e.charCodeAt(n);
    r === 35 || r === 63 ? (t === void 0 && (t = e.substr(0, n)), t += ra[r]) : t !== void 0 && (t += e[n]);
  }
  return t !== void 0 ? t : e;
}
function hn(e, t) {
  let n;
  return e.authority && e.path.length > 1 && e.scheme === "file" ? n = `//${e.authority}${e.path}` : e.path.charCodeAt(0) === 47 && (e.path.charCodeAt(1) >= 65 && e.path.charCodeAt(1) <= 90 || e.path.charCodeAt(1) >= 97 && e.path.charCodeAt(1) <= 122) && e.path.charCodeAt(2) === 58 ? t ? n = e.path.substr(1) : n = e.path[1].toLowerCase() + e.path.substr(2) : n = e.path, Ct && (n = n.replace(/\//g, "\\")), n;
}
function Jn(e, t) {
  const n = t ? dl : Qr;
  let r = "", { scheme: i, authority: s, path: a, query: o, fragment: l } = e;
  if (i && (r += i, r += ":"), (s || i === "file") && (r += Ne, r += Ne), s) {
    let u = s.indexOf("@");
    if (u !== -1) {
      const h = s.substr(0, u);
      s = s.substr(u + 1), u = h.lastIndexOf(":"), u === -1 ? r += n(h, !1, !1) : (r += n(h.substr(0, u), !1, !1), r += ":", r += n(h.substr(u + 1), !1, !0)), r += "@";
    }
    s = s.toLowerCase(), u = s.lastIndexOf(":"), u === -1 ? r += n(s, !1, !0) : (r += n(s.substr(0, u), !1, !0), r += s.substr(u));
  }
  if (a) {
    if (a.length >= 3 && a.charCodeAt(0) === 47 && a.charCodeAt(2) === 58) {
      const u = a.charCodeAt(1);
      u >= 65 && u <= 90 && (a = `/${String.fromCharCode(u + 32)}:${a.substr(3)}`);
    } else if (a.length >= 2 && a.charCodeAt(1) === 58) {
      const u = a.charCodeAt(0);
      u >= 65 && u <= 90 && (a = `${String.fromCharCode(u + 32)}:${a.substr(2)}`);
    }
    r += n(a, !0, !1);
  }
  return o && (r += "?", r += n(o, !1, !1)), l && (r += "#", r += t ? l : Qr(l, !1, !1)), r;
}
function ia(e) {
  try {
    return decodeURIComponent(e);
  } catch {
    return e.length > 3 ? e.substr(0, 3) + ia(e.substr(3)) : e;
  }
}
const Jr = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function Xt(e) {
  return e.match(Jr) ? e.replace(Jr, (t) => ia(t)) : e;
}
class xe extends B {
  constructor(t, n, r, i) {
    super(t, n, r, i), this.selectionStartLineNumber = t, this.selectionStartColumn = n, this.positionLineNumber = r, this.positionColumn = i;
  }
  toString() {
    return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]";
  }
  equalsSelection(t) {
    return xe.selectionsEqual(this, t);
  }
  static selectionsEqual(t, n) {
    return t.selectionStartLineNumber === n.selectionStartLineNumber && t.selectionStartColumn === n.selectionStartColumn && t.positionLineNumber === n.positionLineNumber && t.positionColumn === n.positionColumn;
  }
  getDirection() {
    return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? 0 : 1;
  }
  setEndPosition(t, n) {
    return this.getDirection() === 0 ? new xe(this.startLineNumber, this.startColumn, t, n) : new xe(t, n, this.startLineNumber, this.startColumn);
  }
  getPosition() {
    return new X(this.positionLineNumber, this.positionColumn);
  }
  getSelectionStart() {
    return new X(this.selectionStartLineNumber, this.selectionStartColumn);
  }
  setStartPosition(t, n) {
    return this.getDirection() === 0 ? new xe(t, n, this.endLineNumber, this.endColumn) : new xe(this.endLineNumber, this.endColumn, t, n);
  }
  static fromPositions(t, n = t) {
    return new xe(t.lineNumber, t.column, n.lineNumber, n.column);
  }
  static fromRange(t, n) {
    return n === 0 ? new xe(
      t.startLineNumber,
      t.startColumn,
      t.endLineNumber,
      t.endColumn
    ) : new xe(
      t.endLineNumber,
      t.endColumn,
      t.startLineNumber,
      t.startColumn
    );
  }
  static liftSelection(t) {
    return new xe(
      t.selectionStartLineNumber,
      t.selectionStartColumn,
      t.positionLineNumber,
      t.positionColumn
    );
  }
  static selectionsArrEqual(t, n) {
    if (t && !n || !t && n)
      return !1;
    if (!t && !n)
      return !0;
    if (t.length !== n.length)
      return !1;
    for (let r = 0, i = t.length; r < i; r++)
      if (!this.selectionsEqual(t[r], n[r]))
        return !1;
    return !0;
  }
  static isISelection(t) {
    return t && typeof t.selectionStartLineNumber == "number" && typeof t.selectionStartColumn == "number" && typeof t.positionLineNumber == "number" && typeof t.positionColumn == "number";
  }
  static createWithDirection(t, n, r, i, s) {
    return s === 0 ? new xe(t, n, r, i) : new xe(r, i, t, n);
  }
}
function ml(e) {
  return typeof e == "string";
}
const Yr = /* @__PURE__ */ Object.create(null);
function c(e, t) {
  if (ml(t)) {
    const n = Yr[t];
    if (n === void 0)
      throw new Error(`${e} references an unknown codicon: ${t}`);
    t = n;
  }
  return Yr[e] = t, { id: e };
}
const gl = {
  add: c("add", 6e4),
  plus: c("plus", 6e4),
  gistNew: c("gist-new", 6e4),
  repoCreate: c("repo-create", 6e4),
  lightbulb: c("lightbulb", 60001),
  lightBulb: c("light-bulb", 60001),
  repo: c("repo", 60002),
  repoDelete: c("repo-delete", 60002),
  gistFork: c("gist-fork", 60003),
  repoForked: c("repo-forked", 60003),
  gitPullRequest: c("git-pull-request", 60004),
  gitPullRequestAbandoned: c("git-pull-request-abandoned", 60004),
  recordKeys: c("record-keys", 60005),
  keyboard: c("keyboard", 60005),
  tag: c("tag", 60006),
  gitPullRequestLabel: c("git-pull-request-label", 60006),
  tagAdd: c("tag-add", 60006),
  tagRemove: c("tag-remove", 60006),
  person: c("person", 60007),
  personFollow: c("person-follow", 60007),
  personOutline: c("person-outline", 60007),
  personFilled: c("person-filled", 60007),
  gitBranch: c("git-branch", 60008),
  gitBranchCreate: c("git-branch-create", 60008),
  gitBranchDelete: c("git-branch-delete", 60008),
  sourceControl: c("source-control", 60008),
  mirror: c("mirror", 60009),
  mirrorPublic: c("mirror-public", 60009),
  star: c("star", 60010),
  starAdd: c("star-add", 60010),
  starDelete: c("star-delete", 60010),
  starEmpty: c("star-empty", 60010),
  comment: c("comment", 60011),
  commentAdd: c("comment-add", 60011),
  alert: c("alert", 60012),
  warning: c("warning", 60012),
  search: c("search", 60013),
  searchSave: c("search-save", 60013),
  logOut: c("log-out", 60014),
  signOut: c("sign-out", 60014),
  logIn: c("log-in", 60015),
  signIn: c("sign-in", 60015),
  eye: c("eye", 60016),
  eyeUnwatch: c("eye-unwatch", 60016),
  eyeWatch: c("eye-watch", 60016),
  circleFilled: c("circle-filled", 60017),
  primitiveDot: c("primitive-dot", 60017),
  closeDirty: c("close-dirty", 60017),
  debugBreakpoint: c("debug-breakpoint", 60017),
  debugBreakpointDisabled: c("debug-breakpoint-disabled", 60017),
  debugHint: c("debug-hint", 60017),
  terminalDecorationSuccess: c("terminal-decoration-success", 60017),
  primitiveSquare: c("primitive-square", 60018),
  edit: c("edit", 60019),
  pencil: c("pencil", 60019),
  info: c("info", 60020),
  issueOpened: c("issue-opened", 60020),
  gistPrivate: c("gist-private", 60021),
  gitForkPrivate: c("git-fork-private", 60021),
  lock: c("lock", 60021),
  mirrorPrivate: c("mirror-private", 60021),
  close: c("close", 60022),
  removeClose: c("remove-close", 60022),
  x: c("x", 60022),
  repoSync: c("repo-sync", 60023),
  sync: c("sync", 60023),
  clone: c("clone", 60024),
  desktopDownload: c("desktop-download", 60024),
  beaker: c("beaker", 60025),
  microscope: c("microscope", 60025),
  vm: c("vm", 60026),
  deviceDesktop: c("device-desktop", 60026),
  file: c("file", 60027),
  fileText: c("file-text", 60027),
  more: c("more", 60028),
  ellipsis: c("ellipsis", 60028),
  kebabHorizontal: c("kebab-horizontal", 60028),
  mailReply: c("mail-reply", 60029),
  reply: c("reply", 60029),
  organization: c("organization", 60030),
  organizationFilled: c("organization-filled", 60030),
  organizationOutline: c("organization-outline", 60030),
  newFile: c("new-file", 60031),
  fileAdd: c("file-add", 60031),
  newFolder: c("new-folder", 60032),
  fileDirectoryCreate: c("file-directory-create", 60032),
  trash: c("trash", 60033),
  trashcan: c("trashcan", 60033),
  history: c("history", 60034),
  clock: c("clock", 60034),
  folder: c("folder", 60035),
  fileDirectory: c("file-directory", 60035),
  symbolFolder: c("symbol-folder", 60035),
  logoGithub: c("logo-github", 60036),
  markGithub: c("mark-github", 60036),
  github: c("github", 60036),
  terminal: c("terminal", 60037),
  console: c("console", 60037),
  repl: c("repl", 60037),
  zap: c("zap", 60038),
  symbolEvent: c("symbol-event", 60038),
  error: c("error", 60039),
  stop: c("stop", 60039),
  variable: c("variable", 60040),
  symbolVariable: c("symbol-variable", 60040),
  array: c("array", 60042),
  symbolArray: c("symbol-array", 60042),
  symbolModule: c("symbol-module", 60043),
  symbolPackage: c("symbol-package", 60043),
  symbolNamespace: c("symbol-namespace", 60043),
  symbolObject: c("symbol-object", 60043),
  symbolMethod: c("symbol-method", 60044),
  symbolFunction: c("symbol-function", 60044),
  symbolConstructor: c("symbol-constructor", 60044),
  symbolBoolean: c("symbol-boolean", 60047),
  symbolNull: c("symbol-null", 60047),
  symbolNumeric: c("symbol-numeric", 60048),
  symbolNumber: c("symbol-number", 60048),
  symbolStructure: c("symbol-structure", 60049),
  symbolStruct: c("symbol-struct", 60049),
  symbolParameter: c("symbol-parameter", 60050),
  symbolTypeParameter: c("symbol-type-parameter", 60050),
  symbolKey: c("symbol-key", 60051),
  symbolText: c("symbol-text", 60051),
  symbolReference: c("symbol-reference", 60052),
  goToFile: c("go-to-file", 60052),
  symbolEnum: c("symbol-enum", 60053),
  symbolValue: c("symbol-value", 60053),
  symbolRuler: c("symbol-ruler", 60054),
  symbolUnit: c("symbol-unit", 60054),
  activateBreakpoints: c("activate-breakpoints", 60055),
  archive: c("archive", 60056),
  arrowBoth: c("arrow-both", 60057),
  arrowDown: c("arrow-down", 60058),
  arrowLeft: c("arrow-left", 60059),
  arrowRight: c("arrow-right", 60060),
  arrowSmallDown: c("arrow-small-down", 60061),
  arrowSmallLeft: c("arrow-small-left", 60062),
  arrowSmallRight: c("arrow-small-right", 60063),
  arrowSmallUp: c("arrow-small-up", 60064),
  arrowUp: c("arrow-up", 60065),
  bell: c("bell", 60066),
  bold: c("bold", 60067),
  book: c("book", 60068),
  bookmark: c("bookmark", 60069),
  debugBreakpointConditionalUnverified: c("debug-breakpoint-conditional-unverified", 60070),
  debugBreakpointConditional: c("debug-breakpoint-conditional", 60071),
  debugBreakpointConditionalDisabled: c("debug-breakpoint-conditional-disabled", 60071),
  debugBreakpointDataUnverified: c("debug-breakpoint-data-unverified", 60072),
  debugBreakpointData: c("debug-breakpoint-data", 60073),
  debugBreakpointDataDisabled: c("debug-breakpoint-data-disabled", 60073),
  debugBreakpointLogUnverified: c("debug-breakpoint-log-unverified", 60074),
  debugBreakpointLog: c("debug-breakpoint-log", 60075),
  debugBreakpointLogDisabled: c("debug-breakpoint-log-disabled", 60075),
  briefcase: c("briefcase", 60076),
  broadcast: c("broadcast", 60077),
  browser: c("browser", 60078),
  bug: c("bug", 60079),
  calendar: c("calendar", 60080),
  caseSensitive: c("case-sensitive", 60081),
  check: c("check", 60082),
  checklist: c("checklist", 60083),
  chevronDown: c("chevron-down", 60084),
  chevronLeft: c("chevron-left", 60085),
  chevronRight: c("chevron-right", 60086),
  chevronUp: c("chevron-up", 60087),
  chromeClose: c("chrome-close", 60088),
  chromeMaximize: c("chrome-maximize", 60089),
  chromeMinimize: c("chrome-minimize", 60090),
  chromeRestore: c("chrome-restore", 60091),
  circleOutline: c("circle-outline", 60092),
  circle: c("circle", 60092),
  debugBreakpointUnverified: c("debug-breakpoint-unverified", 60092),
  terminalDecorationIncomplete: c("terminal-decoration-incomplete", 60092),
  circleSlash: c("circle-slash", 60093),
  circuitBoard: c("circuit-board", 60094),
  clearAll: c("clear-all", 60095),
  clippy: c("clippy", 60096),
  closeAll: c("close-all", 60097),
  cloudDownload: c("cloud-download", 60098),
  cloudUpload: c("cloud-upload", 60099),
  code: c("code", 60100),
  collapseAll: c("collapse-all", 60101),
  colorMode: c("color-mode", 60102),
  commentDiscussion: c("comment-discussion", 60103),
  creditCard: c("credit-card", 60105),
  dash: c("dash", 60108),
  dashboard: c("dashboard", 60109),
  database: c("database", 60110),
  debugContinue: c("debug-continue", 60111),
  debugDisconnect: c("debug-disconnect", 60112),
  debugPause: c("debug-pause", 60113),
  debugRestart: c("debug-restart", 60114),
  debugStart: c("debug-start", 60115),
  debugStepInto: c("debug-step-into", 60116),
  debugStepOut: c("debug-step-out", 60117),
  debugStepOver: c("debug-step-over", 60118),
  debugStop: c("debug-stop", 60119),
  debug: c("debug", 60120),
  deviceCameraVideo: c("device-camera-video", 60121),
  deviceCamera: c("device-camera", 60122),
  deviceMobile: c("device-mobile", 60123),
  diffAdded: c("diff-added", 60124),
  diffIgnored: c("diff-ignored", 60125),
  diffModified: c("diff-modified", 60126),
  diffRemoved: c("diff-removed", 60127),
  diffRenamed: c("diff-renamed", 60128),
  diff: c("diff", 60129),
  diffSidebyside: c("diff-sidebyside", 60129),
  discard: c("discard", 60130),
  editorLayout: c("editor-layout", 60131),
  emptyWindow: c("empty-window", 60132),
  exclude: c("exclude", 60133),
  extensions: c("extensions", 60134),
  eyeClosed: c("eye-closed", 60135),
  fileBinary: c("file-binary", 60136),
  fileCode: c("file-code", 60137),
  fileMedia: c("file-media", 60138),
  filePdf: c("file-pdf", 60139),
  fileSubmodule: c("file-submodule", 60140),
  fileSymlinkDirectory: c("file-symlink-directory", 60141),
  fileSymlinkFile: c("file-symlink-file", 60142),
  fileZip: c("file-zip", 60143),
  files: c("files", 60144),
  filter: c("filter", 60145),
  flame: c("flame", 60146),
  foldDown: c("fold-down", 60147),
  foldUp: c("fold-up", 60148),
  fold: c("fold", 60149),
  folderActive: c("folder-active", 60150),
  folderOpened: c("folder-opened", 60151),
  gear: c("gear", 60152),
  gift: c("gift", 60153),
  gistSecret: c("gist-secret", 60154),
  gist: c("gist", 60155),
  gitCommit: c("git-commit", 60156),
  gitCompare: c("git-compare", 60157),
  compareChanges: c("compare-changes", 60157),
  gitMerge: c("git-merge", 60158),
  githubAction: c("github-action", 60159),
  githubAlt: c("github-alt", 60160),
  globe: c("globe", 60161),
  grabber: c("grabber", 60162),
  graph: c("graph", 60163),
  gripper: c("gripper", 60164),
  heart: c("heart", 60165),
  home: c("home", 60166),
  horizontalRule: c("horizontal-rule", 60167),
  hubot: c("hubot", 60168),
  inbox: c("inbox", 60169),
  issueReopened: c("issue-reopened", 60171),
  issues: c("issues", 60172),
  italic: c("italic", 60173),
  jersey: c("jersey", 60174),
  json: c("json", 60175),
  kebabVertical: c("kebab-vertical", 60176),
  key: c("key", 60177),
  law: c("law", 60178),
  lightbulbAutofix: c("lightbulb-autofix", 60179),
  linkExternal: c("link-external", 60180),
  link: c("link", 60181),
  listOrdered: c("list-ordered", 60182),
  listUnordered: c("list-unordered", 60183),
  liveShare: c("live-share", 60184),
  loading: c("loading", 60185),
  location: c("location", 60186),
  mailRead: c("mail-read", 60187),
  mail: c("mail", 60188),
  markdown: c("markdown", 60189),
  megaphone: c("megaphone", 60190),
  mention: c("mention", 60191),
  milestone: c("milestone", 60192),
  gitPullRequestMilestone: c("git-pull-request-milestone", 60192),
  mortarBoard: c("mortar-board", 60193),
  move: c("move", 60194),
  multipleWindows: c("multiple-windows", 60195),
  mute: c("mute", 60196),
  noNewline: c("no-newline", 60197),
  note: c("note", 60198),
  octoface: c("octoface", 60199),
  openPreview: c("open-preview", 60200),
  package: c("package", 60201),
  paintcan: c("paintcan", 60202),
  pin: c("pin", 60203),
  play: c("play", 60204),
  run: c("run", 60204),
  plug: c("plug", 60205),
  preserveCase: c("preserve-case", 60206),
  preview: c("preview", 60207),
  project: c("project", 60208),
  pulse: c("pulse", 60209),
  question: c("question", 60210),
  quote: c("quote", 60211),
  radioTower: c("radio-tower", 60212),
  reactions: c("reactions", 60213),
  references: c("references", 60214),
  refresh: c("refresh", 60215),
  regex: c("regex", 60216),
  remoteExplorer: c("remote-explorer", 60217),
  remote: c("remote", 60218),
  remove: c("remove", 60219),
  replaceAll: c("replace-all", 60220),
  replace: c("replace", 60221),
  repoClone: c("repo-clone", 60222),
  repoForcePush: c("repo-force-push", 60223),
  repoPull: c("repo-pull", 60224),
  repoPush: c("repo-push", 60225),
  report: c("report", 60226),
  requestChanges: c("request-changes", 60227),
  rocket: c("rocket", 60228),
  rootFolderOpened: c("root-folder-opened", 60229),
  rootFolder: c("root-folder", 60230),
  rss: c("rss", 60231),
  ruby: c("ruby", 60232),
  saveAll: c("save-all", 60233),
  saveAs: c("save-as", 60234),
  save: c("save", 60235),
  screenFull: c("screen-full", 60236),
  screenNormal: c("screen-normal", 60237),
  searchStop: c("search-stop", 60238),
  server: c("server", 60240),
  settingsGear: c("settings-gear", 60241),
  settings: c("settings", 60242),
  shield: c("shield", 60243),
  smiley: c("smiley", 60244),
  sortPrecedence: c("sort-precedence", 60245),
  splitHorizontal: c("split-horizontal", 60246),
  splitVertical: c("split-vertical", 60247),
  squirrel: c("squirrel", 60248),
  starFull: c("star-full", 60249),
  starHalf: c("star-half", 60250),
  symbolClass: c("symbol-class", 60251),
  symbolColor: c("symbol-color", 60252),
  symbolConstant: c("symbol-constant", 60253),
  symbolEnumMember: c("symbol-enum-member", 60254),
  symbolField: c("symbol-field", 60255),
  symbolFile: c("symbol-file", 60256),
  symbolInterface: c("symbol-interface", 60257),
  symbolKeyword: c("symbol-keyword", 60258),
  symbolMisc: c("symbol-misc", 60259),
  symbolOperator: c("symbol-operator", 60260),
  symbolProperty: c("symbol-property", 60261),
  wrench: c("wrench", 60261),
  wrenchSubaction: c("wrench-subaction", 60261),
  symbolSnippet: c("symbol-snippet", 60262),
  tasklist: c("tasklist", 60263),
  telescope: c("telescope", 60264),
  textSize: c("text-size", 60265),
  threeBars: c("three-bars", 60266),
  thumbsdown: c("thumbsdown", 60267),
  thumbsup: c("thumbsup", 60268),
  tools: c("tools", 60269),
  triangleDown: c("triangle-down", 60270),
  triangleLeft: c("triangle-left", 60271),
  triangleRight: c("triangle-right", 60272),
  triangleUp: c("triangle-up", 60273),
  twitter: c("twitter", 60274),
  unfold: c("unfold", 60275),
  unlock: c("unlock", 60276),
  unmute: c("unmute", 60277),
  unverified: c("unverified", 60278),
  verified: c("verified", 60279),
  versions: c("versions", 60280),
  vmActive: c("vm-active", 60281),
  vmOutline: c("vm-outline", 60282),
  vmRunning: c("vm-running", 60283),
  watch: c("watch", 60284),
  whitespace: c("whitespace", 60285),
  wholeWord: c("whole-word", 60286),
  window: c("window", 60287),
  wordWrap: c("word-wrap", 60288),
  zoomIn: c("zoom-in", 60289),
  zoomOut: c("zoom-out", 60290),
  listFilter: c("list-filter", 60291),
  listFlat: c("list-flat", 60292),
  listSelection: c("list-selection", 60293),
  selection: c("selection", 60293),
  listTree: c("list-tree", 60294),
  debugBreakpointFunctionUnverified: c("debug-breakpoint-function-unverified", 60295),
  debugBreakpointFunction: c("debug-breakpoint-function", 60296),
  debugBreakpointFunctionDisabled: c("debug-breakpoint-function-disabled", 60296),
  debugStackframeActive: c("debug-stackframe-active", 60297),
  circleSmallFilled: c("circle-small-filled", 60298),
  debugStackframeDot: c("debug-stackframe-dot", 60298),
  terminalDecorationMark: c("terminal-decoration-mark", 60298),
  debugStackframe: c("debug-stackframe", 60299),
  debugStackframeFocused: c("debug-stackframe-focused", 60299),
  debugBreakpointUnsupported: c("debug-breakpoint-unsupported", 60300),
  symbolString: c("symbol-string", 60301),
  debugReverseContinue: c("debug-reverse-continue", 60302),
  debugStepBack: c("debug-step-back", 60303),
  debugRestartFrame: c("debug-restart-frame", 60304),
  debugAlt: c("debug-alt", 60305),
  callIncoming: c("call-incoming", 60306),
  callOutgoing: c("call-outgoing", 60307),
  menu: c("menu", 60308),
  expandAll: c("expand-all", 60309),
  feedback: c("feedback", 60310),
  gitPullRequestReviewer: c("git-pull-request-reviewer", 60310),
  groupByRefType: c("group-by-ref-type", 60311),
  ungroupByRefType: c("ungroup-by-ref-type", 60312),
  account: c("account", 60313),
  gitPullRequestAssignee: c("git-pull-request-assignee", 60313),
  bellDot: c("bell-dot", 60314),
  debugConsole: c("debug-console", 60315),
  library: c("library", 60316),
  output: c("output", 60317),
  runAll: c("run-all", 60318),
  syncIgnored: c("sync-ignored", 60319),
  pinned: c("pinned", 60320),
  githubInverted: c("github-inverted", 60321),
  serverProcess: c("server-process", 60322),
  serverEnvironment: c("server-environment", 60323),
  pass: c("pass", 60324),
  issueClosed: c("issue-closed", 60324),
  stopCircle: c("stop-circle", 60325),
  playCircle: c("play-circle", 60326),
  record: c("record", 60327),
  debugAltSmall: c("debug-alt-small", 60328),
  vmConnect: c("vm-connect", 60329),
  cloud: c("cloud", 60330),
  merge: c("merge", 60331),
  export: c("export", 60332),
  graphLeft: c("graph-left", 60333),
  magnet: c("magnet", 60334),
  notebook: c("notebook", 60335),
  redo: c("redo", 60336),
  checkAll: c("check-all", 60337),
  pinnedDirty: c("pinned-dirty", 60338),
  passFilled: c("pass-filled", 60339),
  circleLargeFilled: c("circle-large-filled", 60340),
  circleLarge: c("circle-large", 60341),
  circleLargeOutline: c("circle-large-outline", 60341),
  combine: c("combine", 60342),
  gather: c("gather", 60342),
  table: c("table", 60343),
  variableGroup: c("variable-group", 60344),
  typeHierarchy: c("type-hierarchy", 60345),
  typeHierarchySub: c("type-hierarchy-sub", 60346),
  typeHierarchySuper: c("type-hierarchy-super", 60347),
  gitPullRequestCreate: c("git-pull-request-create", 60348),
  runAbove: c("run-above", 60349),
  runBelow: c("run-below", 60350),
  notebookTemplate: c("notebook-template", 60351),
  debugRerun: c("debug-rerun", 60352),
  workspaceTrusted: c("workspace-trusted", 60353),
  workspaceUntrusted: c("workspace-untrusted", 60354),
  workspaceUnknown: c("workspace-unknown", 60355),
  terminalCmd: c("terminal-cmd", 60356),
  terminalDebian: c("terminal-debian", 60357),
  terminalLinux: c("terminal-linux", 60358),
  terminalPowershell: c("terminal-powershell", 60359),
  terminalTmux: c("terminal-tmux", 60360),
  terminalUbuntu: c("terminal-ubuntu", 60361),
  terminalBash: c("terminal-bash", 60362),
  arrowSwap: c("arrow-swap", 60363),
  copy: c("copy", 60364),
  personAdd: c("person-add", 60365),
  filterFilled: c("filter-filled", 60366),
  wand: c("wand", 60367),
  debugLineByLine: c("debug-line-by-line", 60368),
  inspect: c("inspect", 60369),
  layers: c("layers", 60370),
  layersDot: c("layers-dot", 60371),
  layersActive: c("layers-active", 60372),
  compass: c("compass", 60373),
  compassDot: c("compass-dot", 60374),
  compassActive: c("compass-active", 60375),
  azure: c("azure", 60376),
  issueDraft: c("issue-draft", 60377),
  gitPullRequestClosed: c("git-pull-request-closed", 60378),
  gitPullRequestDraft: c("git-pull-request-draft", 60379),
  debugAll: c("debug-all", 60380),
  debugCoverage: c("debug-coverage", 60381),
  runErrors: c("run-errors", 60382),
  folderLibrary: c("folder-library", 60383),
  debugContinueSmall: c("debug-continue-small", 60384),
  beakerStop: c("beaker-stop", 60385),
  graphLine: c("graph-line", 60386),
  graphScatter: c("graph-scatter", 60387),
  pieChart: c("pie-chart", 60388),
  bracket: c("bracket", 60175),
  bracketDot: c("bracket-dot", 60389),
  bracketError: c("bracket-error", 60390),
  lockSmall: c("lock-small", 60391),
  azureDevops: c("azure-devops", 60392),
  verifiedFilled: c("verified-filled", 60393),
  newline: c("newline", 60394),
  layout: c("layout", 60395),
  layoutActivitybarLeft: c("layout-activitybar-left", 60396),
  layoutActivitybarRight: c("layout-activitybar-right", 60397),
  layoutPanelLeft: c("layout-panel-left", 60398),
  layoutPanelCenter: c("layout-panel-center", 60399),
  layoutPanelJustify: c("layout-panel-justify", 60400),
  layoutPanelRight: c("layout-panel-right", 60401),
  layoutPanel: c("layout-panel", 60402),
  layoutSidebarLeft: c("layout-sidebar-left", 60403),
  layoutSidebarRight: c("layout-sidebar-right", 60404),
  layoutStatusbar: c("layout-statusbar", 60405),
  layoutMenubar: c("layout-menubar", 60406),
  layoutCentered: c("layout-centered", 60407),
  target: c("target", 60408),
  indent: c("indent", 60409),
  recordSmall: c("record-small", 60410),
  errorSmall: c("error-small", 60411),
  terminalDecorationError: c("terminal-decoration-error", 60411),
  arrowCircleDown: c("arrow-circle-down", 60412),
  arrowCircleLeft: c("arrow-circle-left", 60413),
  arrowCircleRight: c("arrow-circle-right", 60414),
  arrowCircleUp: c("arrow-circle-up", 60415),
  layoutSidebarRightOff: c("layout-sidebar-right-off", 60416),
  layoutPanelOff: c("layout-panel-off", 60417),
  layoutSidebarLeftOff: c("layout-sidebar-left-off", 60418),
  blank: c("blank", 60419),
  heartFilled: c("heart-filled", 60420),
  map: c("map", 60421),
  mapHorizontal: c("map-horizontal", 60421),
  foldHorizontal: c("fold-horizontal", 60421),
  mapFilled: c("map-filled", 60422),
  mapHorizontalFilled: c("map-horizontal-filled", 60422),
  foldHorizontalFilled: c("fold-horizontal-filled", 60422),
  circleSmall: c("circle-small", 60423),
  bellSlash: c("bell-slash", 60424),
  bellSlashDot: c("bell-slash-dot", 60425),
  commentUnresolved: c("comment-unresolved", 60426),
  gitPullRequestGoToChanges: c("git-pull-request-go-to-changes", 60427),
  gitPullRequestNewChanges: c("git-pull-request-new-changes", 60428),
  searchFuzzy: c("search-fuzzy", 60429),
  commentDraft: c("comment-draft", 60430),
  send: c("send", 60431),
  sparkle: c("sparkle", 60432),
  insert: c("insert", 60433),
  mic: c("mic", 60434),
  thumbsdownFilled: c("thumbsdown-filled", 60435),
  thumbsupFilled: c("thumbsup-filled", 60436),
  coffee: c("coffee", 60437),
  snake: c("snake", 60438),
  game: c("game", 60439),
  vr: c("vr", 60440),
  chip: c("chip", 60441),
  piano: c("piano", 60442),
  music: c("music", 60443),
  micFilled: c("mic-filled", 60444),
  repoFetch: c("repo-fetch", 60445),
  copilot: c("copilot", 60446),
  lightbulbSparkle: c("lightbulb-sparkle", 60447),
  robot: c("robot", 60448),
  sparkleFilled: c("sparkle-filled", 60449),
  diffSingle: c("diff-single", 60450),
  diffMultiple: c("diff-multiple", 60451),
  surroundWith: c("surround-with", 60452),
  share: c("share", 60453),
  gitStash: c("git-stash", 60454),
  gitStashApply: c("git-stash-apply", 60455),
  gitStashPop: c("git-stash-pop", 60456),
  vscode: c("vscode", 60457),
  vscodeInsiders: c("vscode-insiders", 60458),
  codeOss: c("code-oss", 60459),
  runCoverage: c("run-coverage", 60460),
  runAllCoverage: c("run-all-coverage", 60461),
  coverage: c("coverage", 60462),
  githubProject: c("github-project", 60463),
  mapVertical: c("map-vertical", 60464),
  foldVertical: c("fold-vertical", 60464),
  mapVerticalFilled: c("map-vertical-filled", 60465),
  foldVerticalFilled: c("fold-vertical-filled", 60465),
  goToSearch: c("go-to-search", 60466),
  percentage: c("percentage", 60467),
  sortPercentage: c("sort-percentage", 60467),
  attach: c("attach", 60468)
}, pl = {
  dialogError: c("dialog-error", "error"),
  dialogWarning: c("dialog-warning", "warning"),
  dialogInfo: c("dialog-info", "info"),
  dialogClose: c("dialog-close", "close"),
  treeItemExpanded: c("tree-item-expanded", "chevron-down"),
  treeFilterOnTypeOn: c("tree-filter-on-type-on", "list-filter"),
  treeFilterOnTypeOff: c("tree-filter-on-type-off", "list-selection"),
  treeFilterClear: c("tree-filter-clear", "close"),
  treeItemLoading: c("tree-item-loading", "loading"),
  menuSelection: c("menu-selection", "check"),
  menuSubmenu: c("menu-submenu", "chevron-right"),
  menuBarMore: c("menubar-more", "more"),
  scrollbarButtonLeft: c("scrollbar-button-left", "triangle-left"),
  scrollbarButtonRight: c("scrollbar-button-right", "triangle-right"),
  scrollbarButtonUp: c("scrollbar-button-up", "triangle-up"),
  scrollbarButtonDown: c("scrollbar-button-down", "triangle-down"),
  toolBarMore: c("toolbar-more", "more"),
  quickInputBack: c("quick-input-back", "arrow-left"),
  dropDownButton: c("drop-down-button", 60084),
  symbolCustomColor: c("symbol-customcolor", 60252),
  exportIcon: c("export", 60332),
  workspaceUnspecified: c("workspace-unspecified", 60355),
  newLine: c("newline", 60394),
  thumbsDownFilled: c("thumbsdown-filled", 60435),
  thumbsUpFilled: c("thumbsup-filled", 60436),
  gitFetch: c("git-fetch", 60445),
  lightbulbSparkleAutofix: c("lightbulb-sparkle-autofix", 60447),
  debugBreakpointPending: c("debug-breakpoint-pending", 60377)
}, F = {
  ...gl,
  ...pl
};
class sa {
  constructor() {
    this._tokenizationSupports = /* @__PURE__ */ new Map(), this._factories = /* @__PURE__ */ new Map(), this._onDidChange = new ve(), this.onDidChange = this._onDidChange.event, this._colorMap = null;
  }
  handleChange(t) {
    this._onDidChange.fire({
      changedLanguages: t,
      changedColorMap: !1
    });
  }
  register(t, n) {
    return this._tokenizationSupports.set(t, n), this.handleChange([t]), Bt(() => {
      this._tokenizationSupports.get(t) === n && (this._tokenizationSupports.delete(t), this.handleChange([t]));
    });
  }
  get(t) {
    return this._tokenizationSupports.get(t) || null;
  }
  registerFactory(t, n) {
    var i;
    (i = this._factories.get(t)) == null || i.dispose();
    const r = new bl(this, t, n);
    return this._factories.set(t, r), Bt(() => {
      const s = this._factories.get(t);
      !s || s !== r || (this._factories.delete(t), s.dispose());
    });
  }
  async getOrCreate(t) {
    const n = this.get(t);
    if (n)
      return n;
    const r = this._factories.get(t);
    return !r || r.isResolved ? null : (await r.resolve(), this.get(t));
  }
  isResolved(t) {
    if (this.get(t))
      return !0;
    const r = this._factories.get(t);
    return !!(!r || r.isResolved);
  }
  setColorMap(t) {
    this._colorMap = t, this._onDidChange.fire({
      changedLanguages: Array.from(this._tokenizationSupports.keys()),
      changedColorMap: !0
    });
  }
  getColorMap() {
    return this._colorMap;
  }
  getDefaultBackground() {
    return this._colorMap && this._colorMap.length > 2 ? this._colorMap[2] : null;
  }
}
class bl extends Lt {
  get isResolved() {
    return this._isResolved;
  }
  constructor(t, n, r) {
    super(), this._registry = t, this._languageId = n, this._factory = r, this._isDisposed = !1, this._resolvePromise = null, this._isResolved = !1;
  }
  dispose() {
    this._isDisposed = !0, super.dispose();
  }
  async resolve() {
    return this._resolvePromise || (this._resolvePromise = this._create()), this._resolvePromise;
  }
  async _create() {
    const t = await this._factory.tokenizationSupport;
    this._isResolved = !0, t && !this._isDisposed && this._register(this._registry.register(this._languageId, t));
  }
}
class _l {
  constructor(t, n, r) {
    this.offset = t, this.type = n, this.language = r, this._tokenBrand = void 0;
  }
  toString() {
    return "(" + this.offset + ", " + this.type + ")";
  }
}
var Zr;
(function(e) {
  e[e.Increase = 0] = "Increase", e[e.Decrease = 1] = "Decrease";
})(Zr || (Zr = {}));
var Kr;
(function(e) {
  const t = /* @__PURE__ */ new Map();
  t.set(0, F.symbolMethod), t.set(1, F.symbolFunction), t.set(2, F.symbolConstructor), t.set(3, F.symbolField), t.set(4, F.symbolVariable), t.set(5, F.symbolClass), t.set(6, F.symbolStruct), t.set(7, F.symbolInterface), t.set(8, F.symbolModule), t.set(9, F.symbolProperty), t.set(10, F.symbolEvent), t.set(11, F.symbolOperator), t.set(12, F.symbolUnit), t.set(13, F.symbolValue), t.set(15, F.symbolEnum), t.set(14, F.symbolConstant), t.set(15, F.symbolEnum), t.set(16, F.symbolEnumMember), t.set(17, F.symbolKeyword), t.set(27, F.symbolSnippet), t.set(18, F.symbolText), t.set(19, F.symbolColor), t.set(20, F.symbolFile), t.set(21, F.symbolReference), t.set(22, F.symbolCustomColor), t.set(23, F.symbolFolder), t.set(24, F.symbolTypeParameter), t.set(25, F.account), t.set(26, F.issues);
  function n(s) {
    let a = t.get(s);
    return a || (console.info("No codicon found for CompletionItemKind " + s), a = F.symbolProperty), a;
  }
  e.toIcon = n;
  const r = /* @__PURE__ */ new Map();
  r.set("method", 0), r.set("function", 1), r.set("constructor", 2), r.set("field", 3), r.set("variable", 4), r.set("class", 5), r.set("struct", 6), r.set("interface", 7), r.set("module", 8), r.set("property", 9), r.set("event", 10), r.set("operator", 11), r.set("unit", 12), r.set("value", 13), r.set("constant", 14), r.set("enum", 15), r.set("enum-member", 16), r.set("enumMember", 16), r.set("keyword", 17), r.set("snippet", 27), r.set("text", 18), r.set("color", 19), r.set("file", 20), r.set("reference", 21), r.set("customcolor", 22), r.set("folder", 23), r.set("type-parameter", 24), r.set("typeParameter", 24), r.set("account", 25), r.set("issue", 26);
  function i(s, a) {
    let o = r.get(s);
    return typeof o > "u" && !a && (o = 9), o;
  }
  e.fromString = i;
})(Kr || (Kr = {}));
var ei;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.Explicit = 1] = "Explicit";
})(ei || (ei = {}));
var ti;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.PasteAs = 1] = "PasteAs";
})(ti || (ti = {}));
var ni;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.TriggerCharacter = 2] = "TriggerCharacter", e[e.ContentChange = 3] = "ContentChange";
})(ni || (ni = {}));
var ri;
(function(e) {
  e[e.Text = 0] = "Text", e[e.Read = 1] = "Read", e[e.Write = 2] = "Write";
})(ri || (ri = {}));
Z(1678, "array"), Z(1679, "boolean"), Z(1680, "class"), Z(1681, "constant"), Z(1682, "constructor"), Z(1683, "enumeration"), Z(1684, "enumeration member"), Z(1685, "event"), Z(1686, "field"), Z(1687, "file"), Z(1688, "function"), Z(1689, "interface"), Z(1690, "key"), Z(1691, "method"), Z(1692, "module"), Z(1693, "namespace"), Z(1694, "null"), Z(1695, "number"), Z(1696, "object"), Z(1697, "operator"), Z(1698, "package"), Z(1699, "property"), Z(1700, "string"), Z(1701, "struct"), Z(1702, "type parameter"), Z(1703, "variable");
var ii;
(function(e) {
  const t = /* @__PURE__ */ new Map();
  t.set(0, F.symbolFile), t.set(1, F.symbolModule), t.set(2, F.symbolNamespace), t.set(3, F.symbolPackage), t.set(4, F.symbolClass), t.set(5, F.symbolMethod), t.set(6, F.symbolProperty), t.set(7, F.symbolField), t.set(8, F.symbolConstructor), t.set(9, F.symbolEnum), t.set(10, F.symbolInterface), t.set(11, F.symbolFunction), t.set(12, F.symbolVariable), t.set(13, F.symbolConstant), t.set(14, F.symbolString), t.set(15, F.symbolNumber), t.set(16, F.symbolBoolean), t.set(17, F.symbolArray), t.set(18, F.symbolObject), t.set(19, F.symbolKey), t.set(20, F.symbolNull), t.set(21, F.symbolEnumMember), t.set(22, F.symbolStruct), t.set(23, F.symbolEvent), t.set(24, F.symbolOperator), t.set(25, F.symbolTypeParameter);
  function n(r) {
    let i = t.get(r);
    return i || (console.info("No codicon found for SymbolKind " + r), i = F.symbolProperty), i;
  }
  e.toIcon = n;
})(ii || (ii = {}));
var me;
let Bu = (me = class {
  static fromValue(t) {
    switch (t) {
      case "comment":
        return me.Comment;
      case "imports":
        return me.Imports;
      case "region":
        return me.Region;
    }
    return new me(t);
  }
  constructor(t) {
    this.value = t;
  }
}, me.Comment = new me("comment"), me.Imports = new me("imports"), me.Region = new me("region"), me);
var si;
(function(e) {
  e[e.AIGenerated = 1] = "AIGenerated";
})(si || (si = {}));
var ai;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(ai || (ai = {}));
var oi;
(function(e) {
  function t(n) {
    return !n || typeof n != "object" ? !1 : typeof n.id == "string" && typeof n.title == "string";
  }
  e.is = t;
})(oi || (oi = {}));
var li;
(function(e) {
  e[e.Collapsed = 0] = "Collapsed", e[e.Expanded = 1] = "Expanded";
})(li || (li = {}));
var ui;
(function(e) {
  e[e.Unresolved = 0] = "Unresolved", e[e.Resolved = 1] = "Resolved";
})(ui || (ui = {}));
var ci;
(function(e) {
  e[e.Current = 0] = "Current", e[e.Outdated = 1] = "Outdated";
})(ci || (ci = {}));
var hi;
(function(e) {
  e[e.Editing = 0] = "Editing", e[e.Preview = 1] = "Preview";
})(hi || (hi = {}));
var fi;
(function(e) {
  e[e.Type = 1] = "Type", e[e.Parameter = 2] = "Parameter";
})(fi || (fi = {}));
new sa();
new sa();
var di;
(function(e) {
  e[e.None = 0] = "None", e[e.Option = 1] = "Option", e[e.Default = 2] = "Default", e[e.Preferred = 3] = "Preferred";
})(di || (di = {}));
var mi;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(mi || (mi = {}));
var gi;
(function(e) {
  e[e.Unknown = 0] = "Unknown", e[e.Disabled = 1] = "Disabled", e[e.Enabled = 2] = "Enabled";
})(gi || (gi = {}));
var pi;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.Auto = 2] = "Auto";
})(pi || (pi = {}));
var bi;
(function(e) {
  e[e.None = 0] = "None", e[e.KeepWhitespace = 1] = "KeepWhitespace", e[e.InsertAsSnippet = 4] = "InsertAsSnippet";
})(bi || (bi = {}));
var _i;
(function(e) {
  e[e.Method = 0] = "Method", e[e.Function = 1] = "Function", e[e.Constructor = 2] = "Constructor", e[e.Field = 3] = "Field", e[e.Variable = 4] = "Variable", e[e.Class = 5] = "Class", e[e.Struct = 6] = "Struct", e[e.Interface = 7] = "Interface", e[e.Module = 8] = "Module", e[e.Property = 9] = "Property", e[e.Event = 10] = "Event", e[e.Operator = 11] = "Operator", e[e.Unit = 12] = "Unit", e[e.Value = 13] = "Value", e[e.Constant = 14] = "Constant", e[e.Enum = 15] = "Enum", e[e.EnumMember = 16] = "EnumMember", e[e.Keyword = 17] = "Keyword", e[e.Text = 18] = "Text", e[e.Color = 19] = "Color", e[e.File = 20] = "File", e[e.Reference = 21] = "Reference", e[e.Customcolor = 22] = "Customcolor", e[e.Folder = 23] = "Folder", e[e.TypeParameter = 24] = "TypeParameter", e[e.User = 25] = "User", e[e.Issue = 26] = "Issue", e[e.Snippet = 27] = "Snippet";
})(_i || (_i = {}));
var xi;
(function(e) {
  e[e.Deprecated = 1] = "Deprecated";
})(xi || (xi = {}));
var vi;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.TriggerCharacter = 1] = "TriggerCharacter", e[e.TriggerForIncompleteCompletions = 2] = "TriggerForIncompleteCompletions";
})(vi || (vi = {}));
var wi;
(function(e) {
  e[e.EXACT = 0] = "EXACT", e[e.ABOVE = 1] = "ABOVE", e[e.BELOW = 2] = "BELOW";
})(wi || (wi = {}));
var Li;
(function(e) {
  e[e.NotSet = 0] = "NotSet", e[e.ContentFlush = 1] = "ContentFlush", e[e.RecoverFromMarkers = 2] = "RecoverFromMarkers", e[e.Explicit = 3] = "Explicit", e[e.Paste = 4] = "Paste", e[e.Undo = 5] = "Undo", e[e.Redo = 6] = "Redo";
})(Li || (Li = {}));
var Ci;
(function(e) {
  e[e.LF = 1] = "LF", e[e.CRLF = 2] = "CRLF";
})(Ci || (Ci = {}));
var Si;
(function(e) {
  e[e.Text = 0] = "Text", e[e.Read = 1] = "Read", e[e.Write = 2] = "Write";
})(Si || (Si = {}));
var Ai;
(function(e) {
  e[e.None = 0] = "None", e[e.Keep = 1] = "Keep", e[e.Brackets = 2] = "Brackets", e[e.Advanced = 3] = "Advanced", e[e.Full = 4] = "Full";
})(Ai || (Ai = {}));
var Ni;
(function(e) {
  e[e.acceptSuggestionOnCommitCharacter = 0] = "acceptSuggestionOnCommitCharacter", e[e.acceptSuggestionOnEnter = 1] = "acceptSuggestionOnEnter", e[e.accessibilitySupport = 2] = "accessibilitySupport", e[e.accessibilityPageSize = 3] = "accessibilityPageSize", e[e.ariaLabel = 4] = "ariaLabel", e[e.ariaRequired = 5] = "ariaRequired", e[e.autoClosingBrackets = 6] = "autoClosingBrackets", e[e.autoClosingComments = 7] = "autoClosingComments", e[e.screenReaderAnnounceInlineSuggestion = 8] = "screenReaderAnnounceInlineSuggestion", e[e.autoClosingDelete = 9] = "autoClosingDelete", e[e.autoClosingOvertype = 10] = "autoClosingOvertype", e[e.autoClosingQuotes = 11] = "autoClosingQuotes", e[e.autoIndent = 12] = "autoIndent", e[e.automaticLayout = 13] = "automaticLayout", e[e.autoSurround = 14] = "autoSurround", e[e.bracketPairColorization = 15] = "bracketPairColorization", e[e.guides = 16] = "guides", e[e.codeLens = 17] = "codeLens", e[e.codeLensFontFamily = 18] = "codeLensFontFamily", e[e.codeLensFontSize = 19] = "codeLensFontSize", e[e.colorDecorators = 20] = "colorDecorators", e[e.colorDecoratorsLimit = 21] = "colorDecoratorsLimit", e[e.columnSelection = 22] = "columnSelection", e[e.comments = 23] = "comments", e[e.contextmenu = 24] = "contextmenu", e[e.copyWithSyntaxHighlighting = 25] = "copyWithSyntaxHighlighting", e[e.cursorBlinking = 26] = "cursorBlinking", e[e.cursorSmoothCaretAnimation = 27] = "cursorSmoothCaretAnimation", e[e.cursorStyle = 28] = "cursorStyle", e[e.cursorSurroundingLines = 29] = "cursorSurroundingLines", e[e.cursorSurroundingLinesStyle = 30] = "cursorSurroundingLinesStyle", e[e.cursorWidth = 31] = "cursorWidth", e[e.disableLayerHinting = 32] = "disableLayerHinting", e[e.disableMonospaceOptimizations = 33] = "disableMonospaceOptimizations", e[e.domReadOnly = 34] = "domReadOnly", e[e.dragAndDrop = 35] = "dragAndDrop", e[e.dropIntoEditor = 36] = "dropIntoEditor", e[e.experimentalEditContextEnabled = 37] = "experimentalEditContextEnabled", e[e.emptySelectionClipboard = 38] = "emptySelectionClipboard", e[e.experimentalGpuAcceleration = 39] = "experimentalGpuAcceleration", e[e.experimentalWhitespaceRendering = 40] = "experimentalWhitespaceRendering", e[e.extraEditorClassName = 41] = "extraEditorClassName", e[e.fastScrollSensitivity = 42] = "fastScrollSensitivity", e[e.find = 43] = "find", e[e.fixedOverflowWidgets = 44] = "fixedOverflowWidgets", e[e.folding = 45] = "folding", e[e.foldingStrategy = 46] = "foldingStrategy", e[e.foldingHighlight = 47] = "foldingHighlight", e[e.foldingImportsByDefault = 48] = "foldingImportsByDefault", e[e.foldingMaximumRegions = 49] = "foldingMaximumRegions", e[e.unfoldOnClickAfterEndOfLine = 50] = "unfoldOnClickAfterEndOfLine", e[e.fontFamily = 51] = "fontFamily", e[e.fontInfo = 52] = "fontInfo", e[e.fontLigatures = 53] = "fontLigatures", e[e.fontSize = 54] = "fontSize", e[e.fontWeight = 55] = "fontWeight", e[e.fontVariations = 56] = "fontVariations", e[e.formatOnPaste = 57] = "formatOnPaste", e[e.formatOnType = 58] = "formatOnType", e[e.glyphMargin = 59] = "glyphMargin", e[e.gotoLocation = 60] = "gotoLocation", e[e.hideCursorInOverviewRuler = 61] = "hideCursorInOverviewRuler", e[e.hover = 62] = "hover", e[e.inDiffEditor = 63] = "inDiffEditor", e[e.inlineSuggest = 64] = "inlineSuggest", e[e.inlineEdit = 65] = "inlineEdit", e[e.letterSpacing = 66] = "letterSpacing", e[e.lightbulb = 67] = "lightbulb", e[e.lineDecorationsWidth = 68] = "lineDecorationsWidth", e[e.lineHeight = 69] = "lineHeight", e[e.lineNumbers = 70] = "lineNumbers", e[e.lineNumbersMinChars = 71] = "lineNumbersMinChars", e[e.linkedEditing = 72] = "linkedEditing", e[e.links = 73] = "links", e[e.matchBrackets = 74] = "matchBrackets", e[e.minimap = 75] = "minimap", e[e.mouseStyle = 76] = "mouseStyle", e[e.mouseWheelScrollSensitivity = 77] = "mouseWheelScrollSensitivity", e[e.mouseWheelZoom = 78] = "mouseWheelZoom", e[e.multiCursorMergeOverlapping = 79] = "multiCursorMergeOverlapping", e[e.multiCursorModifier = 80] = "multiCursorModifier", e[e.multiCursorPaste = 81] = "multiCursorPaste", e[e.multiCursorLimit = 82] = "multiCursorLimit", e[e.occurrencesHighlight = 83] = "occurrencesHighlight", e[e.overviewRulerBorder = 84] = "overviewRulerBorder", e[e.overviewRulerLanes = 85] = "overviewRulerLanes", e[e.padding = 86] = "padding", e[e.pasteAs = 87] = "pasteAs", e[e.parameterHints = 88] = "parameterHints", e[e.peekWidgetDefaultFocus = 89] = "peekWidgetDefaultFocus", e[e.placeholder = 90] = "placeholder", e[e.definitionLinkOpensInPeek = 91] = "definitionLinkOpensInPeek", e[e.quickSuggestions = 92] = "quickSuggestions", e[e.quickSuggestionsDelay = 93] = "quickSuggestionsDelay", e[e.readOnly = 94] = "readOnly", e[e.readOnlyMessage = 95] = "readOnlyMessage", e[e.renameOnType = 96] = "renameOnType", e[e.renderControlCharacters = 97] = "renderControlCharacters", e[e.renderFinalNewline = 98] = "renderFinalNewline", e[e.renderLineHighlight = 99] = "renderLineHighlight", e[e.renderLineHighlightOnlyWhenFocus = 100] = "renderLineHighlightOnlyWhenFocus", e[e.renderValidationDecorations = 101] = "renderValidationDecorations", e[e.renderWhitespace = 102] = "renderWhitespace", e[e.revealHorizontalRightPadding = 103] = "revealHorizontalRightPadding", e[e.roundedSelection = 104] = "roundedSelection", e[e.rulers = 105] = "rulers", e[e.scrollbar = 106] = "scrollbar", e[e.scrollBeyondLastColumn = 107] = "scrollBeyondLastColumn", e[e.scrollBeyondLastLine = 108] = "scrollBeyondLastLine", e[e.scrollPredominantAxis = 109] = "scrollPredominantAxis", e[e.selectionClipboard = 110] = "selectionClipboard", e[e.selectionHighlight = 111] = "selectionHighlight", e[e.selectOnLineNumbers = 112] = "selectOnLineNumbers", e[e.showFoldingControls = 113] = "showFoldingControls", e[e.showUnused = 114] = "showUnused", e[e.snippetSuggestions = 115] = "snippetSuggestions", e[e.smartSelect = 116] = "smartSelect", e[e.smoothScrolling = 117] = "smoothScrolling", e[e.stickyScroll = 118] = "stickyScroll", e[e.stickyTabStops = 119] = "stickyTabStops", e[e.stopRenderingLineAfter = 120] = "stopRenderingLineAfter", e[e.suggest = 121] = "suggest", e[e.suggestFontSize = 122] = "suggestFontSize", e[e.suggestLineHeight = 123] = "suggestLineHeight", e[e.suggestOnTriggerCharacters = 124] = "suggestOnTriggerCharacters", e[e.suggestSelection = 125] = "suggestSelection", e[e.tabCompletion = 126] = "tabCompletion", e[e.tabIndex = 127] = "tabIndex", e[e.unicodeHighlighting = 128] = "unicodeHighlighting", e[e.unusualLineTerminators = 129] = "unusualLineTerminators", e[e.useShadowDOM = 130] = "useShadowDOM", e[e.useTabStops = 131] = "useTabStops", e[e.wordBreak = 132] = "wordBreak", e[e.wordSegmenterLocales = 133] = "wordSegmenterLocales", e[e.wordSeparators = 134] = "wordSeparators", e[e.wordWrap = 135] = "wordWrap", e[e.wordWrapBreakAfterCharacters = 136] = "wordWrapBreakAfterCharacters", e[e.wordWrapBreakBeforeCharacters = 137] = "wordWrapBreakBeforeCharacters", e[e.wordWrapColumn = 138] = "wordWrapColumn", e[e.wordWrapOverride1 = 139] = "wordWrapOverride1", e[e.wordWrapOverride2 = 140] = "wordWrapOverride2", e[e.wrappingIndent = 141] = "wrappingIndent", e[e.wrappingStrategy = 142] = "wrappingStrategy", e[e.showDeprecated = 143] = "showDeprecated", e[e.inlayHints = 144] = "inlayHints", e[e.editorClassName = 145] = "editorClassName", e[e.pixelRatio = 146] = "pixelRatio", e[e.tabFocusMode = 147] = "tabFocusMode", e[e.layoutInfo = 148] = "layoutInfo", e[e.wrappingInfo = 149] = "wrappingInfo", e[e.defaultColorDecorators = 150] = "defaultColorDecorators", e[e.colorDecoratorsActivatedOn = 151] = "colorDecoratorsActivatedOn", e[e.inlineCompletionsAccessibilityVerbose = 152] = "inlineCompletionsAccessibilityVerbose";
})(Ni || (Ni = {}));
var Ri;
(function(e) {
  e[e.TextDefined = 0] = "TextDefined", e[e.LF = 1] = "LF", e[e.CRLF = 2] = "CRLF";
})(Ri || (Ri = {}));
var yi;
(function(e) {
  e[e.LF = 0] = "LF", e[e.CRLF = 1] = "CRLF";
})(yi || (yi = {}));
var Ei;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right";
})(Ei || (Ei = {}));
var ki;
(function(e) {
  e[e.Increase = 0] = "Increase", e[e.Decrease = 1] = "Decrease";
})(ki || (ki = {}));
var Mi;
(function(e) {
  e[e.None = 0] = "None", e[e.Indent = 1] = "Indent", e[e.IndentOutdent = 2] = "IndentOutdent", e[e.Outdent = 3] = "Outdent";
})(Mi || (Mi = {}));
var Pi;
(function(e) {
  e[e.Both = 0] = "Both", e[e.Right = 1] = "Right", e[e.Left = 2] = "Left", e[e.None = 3] = "None";
})(Pi || (Pi = {}));
var $i;
(function(e) {
  e[e.Type = 1] = "Type", e[e.Parameter = 2] = "Parameter";
})($i || ($i = {}));
var Di;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.Explicit = 1] = "Explicit";
})(Di || (Di = {}));
var Fi;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(Fi || (Fi = {}));
var Yn;
(function(e) {
  e[e.DependsOnKbLayout = -1] = "DependsOnKbLayout", e[e.Unknown = 0] = "Unknown", e[e.Backspace = 1] = "Backspace", e[e.Tab = 2] = "Tab", e[e.Enter = 3] = "Enter", e[e.Shift = 4] = "Shift", e[e.Ctrl = 5] = "Ctrl", e[e.Alt = 6] = "Alt", e[e.PauseBreak = 7] = "PauseBreak", e[e.CapsLock = 8] = "CapsLock", e[e.Escape = 9] = "Escape", e[e.Space = 10] = "Space", e[e.PageUp = 11] = "PageUp", e[e.PageDown = 12] = "PageDown", e[e.End = 13] = "End", e[e.Home = 14] = "Home", e[e.LeftArrow = 15] = "LeftArrow", e[e.UpArrow = 16] = "UpArrow", e[e.RightArrow = 17] = "RightArrow", e[e.DownArrow = 18] = "DownArrow", e[e.Insert = 19] = "Insert", e[e.Delete = 20] = "Delete", e[e.Digit0 = 21] = "Digit0", e[e.Digit1 = 22] = "Digit1", e[e.Digit2 = 23] = "Digit2", e[e.Digit3 = 24] = "Digit3", e[e.Digit4 = 25] = "Digit4", e[e.Digit5 = 26] = "Digit5", e[e.Digit6 = 27] = "Digit6", e[e.Digit7 = 28] = "Digit7", e[e.Digit8 = 29] = "Digit8", e[e.Digit9 = 30] = "Digit9", e[e.KeyA = 31] = "KeyA", e[e.KeyB = 32] = "KeyB", e[e.KeyC = 33] = "KeyC", e[e.KeyD = 34] = "KeyD", e[e.KeyE = 35] = "KeyE", e[e.KeyF = 36] = "KeyF", e[e.KeyG = 37] = "KeyG", e[e.KeyH = 38] = "KeyH", e[e.KeyI = 39] = "KeyI", e[e.KeyJ = 40] = "KeyJ", e[e.KeyK = 41] = "KeyK", e[e.KeyL = 42] = "KeyL", e[e.KeyM = 43] = "KeyM", e[e.KeyN = 44] = "KeyN", e[e.KeyO = 45] = "KeyO", e[e.KeyP = 46] = "KeyP", e[e.KeyQ = 47] = "KeyQ", e[e.KeyR = 48] = "KeyR", e[e.KeyS = 49] = "KeyS", e[e.KeyT = 50] = "KeyT", e[e.KeyU = 51] = "KeyU", e[e.KeyV = 52] = "KeyV", e[e.KeyW = 53] = "KeyW", e[e.KeyX = 54] = "KeyX", e[e.KeyY = 55] = "KeyY", e[e.KeyZ = 56] = "KeyZ", e[e.Meta = 57] = "Meta", e[e.ContextMenu = 58] = "ContextMenu", e[e.F1 = 59] = "F1", e[e.F2 = 60] = "F2", e[e.F3 = 61] = "F3", e[e.F4 = 62] = "F4", e[e.F5 = 63] = "F5", e[e.F6 = 64] = "F6", e[e.F7 = 65] = "F7", e[e.F8 = 66] = "F8", e[e.F9 = 67] = "F9", e[e.F10 = 68] = "F10", e[e.F11 = 69] = "F11", e[e.F12 = 70] = "F12", e[e.F13 = 71] = "F13", e[e.F14 = 72] = "F14", e[e.F15 = 73] = "F15", e[e.F16 = 74] = "F16", e[e.F17 = 75] = "F17", e[e.F18 = 76] = "F18", e[e.F19 = 77] = "F19", e[e.F20 = 78] = "F20", e[e.F21 = 79] = "F21", e[e.F22 = 80] = "F22", e[e.F23 = 81] = "F23", e[e.F24 = 82] = "F24", e[e.NumLock = 83] = "NumLock", e[e.ScrollLock = 84] = "ScrollLock", e[e.Semicolon = 85] = "Semicolon", e[e.Equal = 86] = "Equal", e[e.Comma = 87] = "Comma", e[e.Minus = 88] = "Minus", e[e.Period = 89] = "Period", e[e.Slash = 90] = "Slash", e[e.Backquote = 91] = "Backquote", e[e.BracketLeft = 92] = "BracketLeft", e[e.Backslash = 93] = "Backslash", e[e.BracketRight = 94] = "BracketRight", e[e.Quote = 95] = "Quote", e[e.OEM_8 = 96] = "OEM_8", e[e.IntlBackslash = 97] = "IntlBackslash", e[e.Numpad0 = 98] = "Numpad0", e[e.Numpad1 = 99] = "Numpad1", e[e.Numpad2 = 100] = "Numpad2", e[e.Numpad3 = 101] = "Numpad3", e[e.Numpad4 = 102] = "Numpad4", e[e.Numpad5 = 103] = "Numpad5", e[e.Numpad6 = 104] = "Numpad6", e[e.Numpad7 = 105] = "Numpad7", e[e.Numpad8 = 106] = "Numpad8", e[e.Numpad9 = 107] = "Numpad9", e[e.NumpadMultiply = 108] = "NumpadMultiply", e[e.NumpadAdd = 109] = "NumpadAdd", e[e.NUMPAD_SEPARATOR = 110] = "NUMPAD_SEPARATOR", e[e.NumpadSubtract = 111] = "NumpadSubtract", e[e.NumpadDecimal = 112] = "NumpadDecimal", e[e.NumpadDivide = 113] = "NumpadDivide", e[e.KEY_IN_COMPOSITION = 114] = "KEY_IN_COMPOSITION", e[e.ABNT_C1 = 115] = "ABNT_C1", e[e.ABNT_C2 = 116] = "ABNT_C2", e[e.AudioVolumeMute = 117] = "AudioVolumeMute", e[e.AudioVolumeUp = 118] = "AudioVolumeUp", e[e.AudioVolumeDown = 119] = "AudioVolumeDown", e[e.BrowserSearch = 120] = "BrowserSearch", e[e.BrowserHome = 121] = "BrowserHome", e[e.BrowserBack = 122] = "BrowserBack", e[e.BrowserForward = 123] = "BrowserForward", e[e.MediaTrackNext = 124] = "MediaTrackNext", e[e.MediaTrackPrevious = 125] = "MediaTrackPrevious", e[e.MediaStop = 126] = "MediaStop", e[e.MediaPlayPause = 127] = "MediaPlayPause", e[e.LaunchMediaPlayer = 128] = "LaunchMediaPlayer", e[e.LaunchMail = 129] = "LaunchMail", e[e.LaunchApp2 = 130] = "LaunchApp2", e[e.Clear = 131] = "Clear", e[e.MAX_VALUE = 132] = "MAX_VALUE";
})(Yn || (Yn = {}));
var Zn;
(function(e) {
  e[e.Hint = 1] = "Hint", e[e.Info = 2] = "Info", e[e.Warning = 4] = "Warning", e[e.Error = 8] = "Error";
})(Zn || (Zn = {}));
var Kn;
(function(e) {
  e[e.Unnecessary = 1] = "Unnecessary", e[e.Deprecated = 2] = "Deprecated";
})(Kn || (Kn = {}));
var Ii;
(function(e) {
  e[e.Inline = 1] = "Inline", e[e.Gutter = 2] = "Gutter";
})(Ii || (Ii = {}));
var Vi;
(function(e) {
  e[e.Normal = 1] = "Normal", e[e.Underlined = 2] = "Underlined";
})(Vi || (Vi = {}));
var Ui;
(function(e) {
  e[e.UNKNOWN = 0] = "UNKNOWN", e[e.TEXTAREA = 1] = "TEXTAREA", e[e.GUTTER_GLYPH_MARGIN = 2] = "GUTTER_GLYPH_MARGIN", e[e.GUTTER_LINE_NUMBERS = 3] = "GUTTER_LINE_NUMBERS", e[e.GUTTER_LINE_DECORATIONS = 4] = "GUTTER_LINE_DECORATIONS", e[e.GUTTER_VIEW_ZONE = 5] = "GUTTER_VIEW_ZONE", e[e.CONTENT_TEXT = 6] = "CONTENT_TEXT", e[e.CONTENT_EMPTY = 7] = "CONTENT_EMPTY", e[e.CONTENT_VIEW_ZONE = 8] = "CONTENT_VIEW_ZONE", e[e.CONTENT_WIDGET = 9] = "CONTENT_WIDGET", e[e.OVERVIEW_RULER = 10] = "OVERVIEW_RULER", e[e.SCROLLBAR = 11] = "SCROLLBAR", e[e.OVERLAY_WIDGET = 12] = "OVERLAY_WIDGET", e[e.OUTSIDE_EDITOR = 13] = "OUTSIDE_EDITOR";
})(Ui || (Ui = {}));
var Bi;
(function(e) {
  e[e.AIGenerated = 1] = "AIGenerated";
})(Bi || (Bi = {}));
var qi;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(qi || (qi = {}));
var Oi;
(function(e) {
  e[e.TOP_RIGHT_CORNER = 0] = "TOP_RIGHT_CORNER", e[e.BOTTOM_RIGHT_CORNER = 1] = "BOTTOM_RIGHT_CORNER", e[e.TOP_CENTER = 2] = "TOP_CENTER";
})(Oi || (Oi = {}));
var Wi;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 4] = "Right", e[e.Full = 7] = "Full";
})(Wi || (Wi = {}));
var zi;
(function(e) {
  e[e.Word = 0] = "Word", e[e.Line = 1] = "Line", e[e.Suggest = 2] = "Suggest";
})(zi || (zi = {}));
var Hi;
(function(e) {
  e[e.Left = 0] = "Left", e[e.Right = 1] = "Right", e[e.None = 2] = "None", e[e.LeftOfInjectedText = 3] = "LeftOfInjectedText", e[e.RightOfInjectedText = 4] = "RightOfInjectedText";
})(Hi || (Hi = {}));
var ji;
(function(e) {
  e[e.Off = 0] = "Off", e[e.On = 1] = "On", e[e.Relative = 2] = "Relative", e[e.Interval = 3] = "Interval", e[e.Custom = 4] = "Custom";
})(ji || (ji = {}));
var Gi;
(function(e) {
  e[e.None = 0] = "None", e[e.Text = 1] = "Text", e[e.Blocks = 2] = "Blocks";
})(Gi || (Gi = {}));
var Ti;
(function(e) {
  e[e.Smooth = 0] = "Smooth", e[e.Immediate = 1] = "Immediate";
})(Ti || (Ti = {}));
var Xi;
(function(e) {
  e[e.Auto = 1] = "Auto", e[e.Hidden = 2] = "Hidden", e[e.Visible = 3] = "Visible";
})(Xi || (Xi = {}));
var er;
(function(e) {
  e[e.LTR = 0] = "LTR", e[e.RTL = 1] = "RTL";
})(er || (er = {}));
var Qi;
(function(e) {
  e.Off = "off", e.OnCode = "onCode", e.On = "on";
})(Qi || (Qi = {}));
var Ji;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.TriggerCharacter = 2] = "TriggerCharacter", e[e.ContentChange = 3] = "ContentChange";
})(Ji || (Ji = {}));
var Yi;
(function(e) {
  e[e.File = 0] = "File", e[e.Module = 1] = "Module", e[e.Namespace = 2] = "Namespace", e[e.Package = 3] = "Package", e[e.Class = 4] = "Class", e[e.Method = 5] = "Method", e[e.Property = 6] = "Property", e[e.Field = 7] = "Field", e[e.Constructor = 8] = "Constructor", e[e.Enum = 9] = "Enum", e[e.Interface = 10] = "Interface", e[e.Function = 11] = "Function", e[e.Variable = 12] = "Variable", e[e.Constant = 13] = "Constant", e[e.String = 14] = "String", e[e.Number = 15] = "Number", e[e.Boolean = 16] = "Boolean", e[e.Array = 17] = "Array", e[e.Object = 18] = "Object", e[e.Key = 19] = "Key", e[e.Null = 20] = "Null", e[e.EnumMember = 21] = "EnumMember", e[e.Struct = 22] = "Struct", e[e.Event = 23] = "Event", e[e.Operator = 24] = "Operator", e[e.TypeParameter = 25] = "TypeParameter";
})(Yi || (Yi = {}));
var Zi;
(function(e) {
  e[e.Deprecated = 1] = "Deprecated";
})(Zi || (Zi = {}));
var Ki;
(function(e) {
  e[e.Hidden = 0] = "Hidden", e[e.Blink = 1] = "Blink", e[e.Smooth = 2] = "Smooth", e[e.Phase = 3] = "Phase", e[e.Expand = 4] = "Expand", e[e.Solid = 5] = "Solid";
})(Ki || (Ki = {}));
var es;
(function(e) {
  e[e.Line = 1] = "Line", e[e.Block = 2] = "Block", e[e.Underline = 3] = "Underline", e[e.LineThin = 4] = "LineThin", e[e.BlockOutline = 5] = "BlockOutline", e[e.UnderlineThin = 6] = "UnderlineThin";
})(es || (es = {}));
var ts;
(function(e) {
  e[e.AlwaysGrowsWhenTypingAtEdges = 0] = "AlwaysGrowsWhenTypingAtEdges", e[e.NeverGrowsWhenTypingAtEdges = 1] = "NeverGrowsWhenTypingAtEdges", e[e.GrowsOnlyWhenTypingBefore = 2] = "GrowsOnlyWhenTypingBefore", e[e.GrowsOnlyWhenTypingAfter = 3] = "GrowsOnlyWhenTypingAfter";
})(ts || (ts = {}));
var ns;
(function(e) {
  e[e.None = 0] = "None", e[e.Same = 1] = "Same", e[e.Indent = 2] = "Indent", e[e.DeepIndent = 3] = "DeepIndent";
})(ns || (ns = {}));
const pt = class pt {
  static chord(t, n) {
    return Ho(t, n);
  }
};
pt.CtrlCmd = 2048, pt.Shift = 1024, pt.Alt = 512, pt.WinCtrl = 256;
let tr = pt;
function xl() {
  return {
    editor: void 0,
    languages: void 0,
    CancellationTokenSource: uo,
    Emitter: ve,
    KeyCode: Yn,
    KeyMod: tr,
    Position: X,
    Range: B,
    Selection: xe,
    SelectionDirection: er,
    MarkerSeverity: Zn,
    MarkerTag: Kn,
    Uri: _e,
    Token: _l
  };
}
const Vt = class Vt {
  static getChannel(t) {
    return t.getChannel(Vt.CHANNEL_NAME);
  }
  static setChannel(t, n) {
    t.setChannel(Vt.CHANNEL_NAME, n);
  }
};
Vt.CHANNEL_NAME = "editorWorkerHost";
let nr = Vt;
new qa(10);
function vl(e) {
  let t = [];
  for (; Object.prototype !== e; )
    t = t.concat(Object.getOwnPropertyNames(e)), e = Object.getPrototypeOf(e);
  return t;
}
function wl(e) {
  const t = [];
  for (const n of vl(e))
    typeof e[n] == "function" && t.push(n);
  return t;
}
function Ll(e, t) {
  const n = (i) => function() {
    const s = Array.prototype.slice.call(arguments, 0);
    return t(i, s);
  }, r = {};
  for (const i of e)
    r[i] = n(i);
  return r;
}
var rs;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 4] = "Right", e[e.Full = 7] = "Full";
})(rs || (rs = {}));
var is;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right";
})(is || (is = {}));
var ss;
(function(e) {
  e[e.Both = 0] = "Both", e[e.Right = 1] = "Right", e[e.Left = 2] = "Left", e[e.None = 3] = "None";
})(ss || (ss = {}));
function Cl(e, t, n, r, i) {
  if (r === 0)
    return !0;
  const s = t.charCodeAt(r - 1);
  if (e.get(s) !== 0 || s === 13 || s === 10)
    return !0;
  if (i > 0) {
    const a = t.charCodeAt(r);
    if (e.get(a) !== 0)
      return !0;
  }
  return !1;
}
function Sl(e, t, n, r, i) {
  if (r + i === n)
    return !0;
  const s = t.charCodeAt(r + i);
  if (e.get(s) !== 0 || s === 13 || s === 10)
    return !0;
  if (i > 0) {
    const a = t.charCodeAt(r + i - 1);
    if (e.get(a) !== 0)
      return !0;
  }
  return !1;
}
function Al(e, t, n, r, i) {
  return Cl(e, t, n, r, i) && Sl(e, t, n, r, i);
}
class Nl {
  constructor(t, n) {
    this._wordSeparators = t, this._searchRegex = n, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  reset(t) {
    this._searchRegex.lastIndex = t, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  next(t) {
    const n = t.length;
    let r;
    do {
      if (this._prevMatchStartIndex + this._prevMatchLength === n || (r = this._searchRegex.exec(t), !r))
        return null;
      const i = r.index, s = r[0].length;
      if (i === this._prevMatchStartIndex && s === this._prevMatchLength) {
        if (s === 0) {
          Co(t, n, this._searchRegex.lastIndex) > 65535 ? this._searchRegex.lastIndex += 2 : this._searchRegex.lastIndex += 1;
          continue;
        }
        return null;
      }
      if (this._prevMatchStartIndex = i, this._prevMatchLength = s, !this._wordSeparators || Al(this._wordSeparators, t, n, i, s))
        return r;
    } while (r);
    return null;
  }
}
function Rl(e, t = "Unreachable") {
  throw new Error(t);
}
function yl(e, t = "unexpected state") {
  if (!e)
    throw new he(`Assertion Failed: ${t}`);
}
function Wt(e) {
  if (!e()) {
    debugger;
    e(), Pt(new he("Assertion Failed"));
  }
}
function Rr(e, t) {
  let n = 0;
  for (; n < e.length - 1; ) {
    const r = e[n], i = e[n + 1];
    if (!t(r, i))
      return !1;
    n++;
  }
  return !0;
}
const El = "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";
function kl(e = "") {
  let t = "(-?\\d*\\.\\d\\w*)|([^";
  for (const n of El)
    e.indexOf(n) >= 0 || (t += "\\" + n);
  return t += "\\s]+)", new RegExp(t, "g");
}
const aa = kl();
function oa(e) {
  let t = aa;
  if (e && e instanceof RegExp)
    if (e.global)
      t = e;
    else {
      let n = "g";
      e.ignoreCase && (n += "i"), e.multiline && (n += "m"), e.unicode && (n += "u"), t = new RegExp(e.source, n);
    }
  return t.lastIndex = 0, t;
}
const la = new Wa();
la.unshift({
  maxLen: 1e3,
  windowSize: 15,
  timeBudget: 150
});
function yr(e, t, n, r, i) {
  if (t = oa(t), i || (i = sn.first(la)), n.length > i.maxLen) {
    let u = e - i.maxLen / 2;
    return u < 0 ? u = 0 : r += u, n = n.substring(u, e + i.maxLen / 2), yr(e, t, n, r, i);
  }
  const s = Date.now(), a = e - 1 - r;
  let o = -1, l = null;
  for (let u = 1; !(Date.now() - s >= i.timeBudget); u++) {
    const h = a - i.windowSize * u;
    t.lastIndex = Math.max(0, h);
    const f = Ml(t, n, a, o);
    if (!f && l || (l = f, h <= 0))
      break;
    o = h;
  }
  if (l) {
    const u = {
      word: l[0],
      startColumn: r + 1 + l.index,
      endColumn: r + 1 + l.index + l[0].length
    };
    return t.lastIndex = 0, u;
  }
  return null;
}
function Ml(e, t, n, r) {
  let i;
  for (; i = e.exec(t); ) {
    const s = i.index || 0;
    if (s <= n && e.lastIndex >= n)
      return i;
    if (r > 0 && s > r)
      return null;
  }
  return null;
}
class Pl {
  static computeUnicodeHighlights(t, n, r) {
    const i = r ? r.startLineNumber : 1, s = r ? r.endLineNumber : t.getLineCount(), a = new as(n), o = a.getCandidateCodePoints();
    let l;
    o === "allNonBasicAscii" ? l = new RegExp("[^\\t\\n\\r\\x20-\\x7E]", "g") : l = new RegExp(`${$l(Array.from(o))}`, "g");
    const u = new Nl(null, l), h = [];
    let f = !1, m, d = 0, p = 0, b = 0;
    e: for (let N = i, L = s; N <= L; N++) {
      const C = t.getLineContent(N), R = C.length;
      u.reset(0);
      do
        if (m = u.next(C), m) {
          let S = m.index, A = m.index + m[0].length;
          if (S > 0) {
            const q = C.charCodeAt(S - 1);
            jn(q) && S--;
          }
          if (A + 1 < R) {
            const q = C.charCodeAt(A - 1);
            jn(q) && A++;
          }
          const P = C.substring(S, A);
          let $ = yr(S + 1, aa, C, 0);
          $ && $.endColumn <= S + 1 && ($ = null);
          const D = a.shouldHighlightNonBasicASCII(P, $ ? $.word : null);
          if (D !== 0) {
            if (D === 3 ? d++ : D === 2 ? p++ : D === 1 ? b++ : Rl(), h.length >= 1e3) {
              f = !0;
              break e;
            }
            h.push(new B(N, S + 1, N, A + 1));
          }
        }
      while (m);
    }
    return {
      ranges: h,
      hasMore: f,
      ambiguousCharacterCount: d,
      invisibleCharacterCount: p,
      nonBasicAsciiCharacterCount: b
    };
  }
  static computeUnicodeHighlightReason(t, n) {
    const r = new as(n);
    switch (r.shouldHighlightNonBasicASCII(t, null)) {
      case 0:
        return null;
      case 2:
        return { kind: 1 };
      case 3: {
        const s = t.codePointAt(0), a = r.ambiguousCharacters.getPrimaryConfusable(s), o = Ot.getLocales().filter((l) => !Ot.getInstance(/* @__PURE__ */ new Set([...n.allowedLocales, l])).isAmbiguous(s));
        return { kind: 0, confusableWith: String.fromCodePoint(a), notAmbiguousInLocales: o };
      }
      case 1:
        return { kind: 2 };
    }
  }
}
function $l(e, t) {
  return `[${fo(e.map((r) => String.fromCodePoint(r)).join(""))}]`;
}
class as {
  constructor(t) {
    this.options = t, this.allowedCodePoints = new Set(t.allowedCodePoints), this.ambiguousCharacters = Ot.getInstance(new Set(t.allowedLocales));
  }
  getCandidateCodePoints() {
    if (this.options.nonBasicASCII)
      return "allNonBasicAscii";
    const t = /* @__PURE__ */ new Set();
    if (this.options.invisibleCharacters)
      for (const n of Ft.codePoints)
        os(String.fromCodePoint(n)) || t.add(n);
    if (this.options.ambiguousCharacters)
      for (const n of this.ambiguousCharacters.getConfusableCodePoints())
        t.add(n);
    for (const n of this.allowedCodePoints)
      t.delete(n);
    return t;
  }
  shouldHighlightNonBasicASCII(t, n) {
    const r = t.codePointAt(0);
    if (this.allowedCodePoints.has(r))
      return 0;
    if (this.options.nonBasicASCII)
      return 1;
    let i = !1, s = !1;
    if (n)
      for (const a of n) {
        const o = a.codePointAt(0), l = Ao(a);
        i = i || l, !l && !this.ambiguousCharacters.isAmbiguous(o) && !Ft.isInvisibleCharacter(o) && (s = !0);
      }
    return !i && s ? 0 : this.options.invisibleCharacters && !os(t) && Ft.isInvisibleCharacter(r) ? 2 : this.options.ambiguousCharacters && this.ambiguousCharacters.isAmbiguous(r) ? 3 : 0;
  }
}
function os(e) {
  return e === " " || e === `
` || e === "	";
}
class nn {
  constructor(t, n, r) {
    this.changes = t, this.moves = n, this.hitTimeout = r;
  }
}
class Er {
  constructor(t, n) {
    this.lineRangeMapping = t, this.changes = n;
  }
  flip() {
    return new Er(this.lineRangeMapping.flip(), this.changes.map((t) => t.flip()));
  }
}
class H {
  static addRange(t, n) {
    let r = 0;
    for (; r < n.length && n[r].endExclusive < t.start; )
      r++;
    let i = r;
    for (; i < n.length && n[i].start <= t.endExclusive; )
      i++;
    if (r === i)
      n.splice(r, 0, t);
    else {
      const s = Math.min(t.start, n[r].start), a = Math.max(t.endExclusive, n[i - 1].endExclusive);
      n.splice(r, i - r, new H(s, a));
    }
  }
  static tryCreate(t, n) {
    if (!(t > n))
      return new H(t, n);
  }
  static ofLength(t) {
    return new H(0, t);
  }
  static ofStartAndLength(t, n) {
    return new H(t, t + n);
  }
  static emptyAt(t) {
    return new H(t, t);
  }
  constructor(t, n) {
    if (this.start = t, this.endExclusive = n, t > n)
      throw new he(`Invalid range: ${this.toString()}`);
  }
  get isEmpty() {
    return this.start === this.endExclusive;
  }
  delta(t) {
    return new H(this.start + t, this.endExclusive + t);
  }
  deltaStart(t) {
    return new H(this.start + t, this.endExclusive);
  }
  deltaEnd(t) {
    return new H(this.start, this.endExclusive + t);
  }
  get length() {
    return this.endExclusive - this.start;
  }
  toString() {
    return `[${this.start}, ${this.endExclusive})`;
  }
  equals(t) {
    return this.start === t.start && this.endExclusive === t.endExclusive;
  }
  containsRange(t) {
    return this.start <= t.start && t.endExclusive <= this.endExclusive;
  }
  contains(t) {
    return this.start <= t && t < this.endExclusive;
  }
  join(t) {
    return new H(
      Math.min(this.start, t.start),
      Math.max(this.endExclusive, t.endExclusive)
    );
  }
  intersect(t) {
    const n = Math.max(this.start, t.start), r = Math.min(this.endExclusive, t.endExclusive);
    if (n <= r)
      return new H(n, r);
  }
  intersectionLength(t) {
    const n = Math.max(this.start, t.start), r = Math.min(this.endExclusive, t.endExclusive);
    return Math.max(0, r - n);
  }
  intersects(t) {
    const n = Math.max(this.start, t.start), r = Math.min(this.endExclusive, t.endExclusive);
    return n < r;
  }
  intersectsOrTouches(t) {
    const n = Math.max(this.start, t.start), r = Math.min(this.endExclusive, t.endExclusive);
    return n <= r;
  }
  isBefore(t) {
    return this.endExclusive <= t.start;
  }
  isAfter(t) {
    return this.start >= t.endExclusive;
  }
  slice(t) {
    return t.slice(this.start, this.endExclusive);
  }
  substring(t) {
    return t.substring(this.start, this.endExclusive);
  }
  clip(t) {
    if (this.isEmpty)
      throw new he(`Invalid clipping range: ${this.toString()}`);
    return Math.max(this.start, Math.min(this.endExclusive - 1, t));
  }
  clipCyclic(t) {
    if (this.isEmpty)
      throw new he(`Invalid clipping range: ${this.toString()}`);
    return t < this.start ? this.endExclusive - (this.start - t) % this.length : t >= this.endExclusive ? this.start + (t - this.start) % this.length : t;
  }
  map(t) {
    const n = [];
    for (let r = this.start; r < this.endExclusive; r++)
      n.push(t(r));
    return n;
  }
  forEach(t) {
    for (let n = this.start; n < this.endExclusive; n++)
      t(n);
  }
}
class U {
  static fromRange(t) {
    return new U(t.startLineNumber, t.endLineNumber);
  }
  static fromRangeInclusive(t) {
    return new U(t.startLineNumber, t.endLineNumber + 1);
  }
  static subtract(t, n) {
    return n ? t.startLineNumber < n.startLineNumber && n.endLineNumberExclusive < t.endLineNumberExclusive ? [
      new U(t.startLineNumber, n.startLineNumber),
      new U(n.endLineNumberExclusive, t.endLineNumberExclusive)
    ] : n.startLineNumber <= t.startLineNumber && t.endLineNumberExclusive <= n.endLineNumberExclusive ? [] : n.endLineNumberExclusive < t.endLineNumberExclusive ? [new U(
      Math.max(n.endLineNumberExclusive, t.startLineNumber),
      t.endLineNumberExclusive
    )] : [new U(t.startLineNumber, Math.min(n.startLineNumber, t.endLineNumberExclusive))] : [t];
  }
  static joinMany(t) {
    if (t.length === 0)
      return [];
    let n = new Ee(t[0].slice());
    for (let r = 1; r < t.length; r++)
      n = n.getUnion(new Ee(t[r].slice()));
    return n.ranges;
  }
  static join(t) {
    if (t.length === 0)
      throw new he("lineRanges cannot be empty");
    let n = t[0].startLineNumber, r = t[0].endLineNumberExclusive;
    for (let i = 1; i < t.length; i++)
      n = Math.min(n, t[i].startLineNumber), r = Math.max(r, t[i].endLineNumberExclusive);
    return new U(n, r);
  }
  static ofLength(t, n) {
    return new U(t, t + n);
  }
  static deserialize(t) {
    return new U(t[0], t[1]);
  }
  constructor(t, n) {
    if (t > n)
      throw new he(
        `startLineNumber ${t} cannot be after endLineNumberExclusive ${n}`
      );
    this.startLineNumber = t, this.endLineNumberExclusive = n;
  }
  contains(t) {
    return this.startLineNumber <= t && t < this.endLineNumberExclusive;
  }
  get isEmpty() {
    return this.startLineNumber === this.endLineNumberExclusive;
  }
  delta(t) {
    return new U(this.startLineNumber + t, this.endLineNumberExclusive + t);
  }
  deltaLength(t) {
    return new U(this.startLineNumber, this.endLineNumberExclusive + t);
  }
  get length() {
    return this.endLineNumberExclusive - this.startLineNumber;
  }
  join(t) {
    return new U(
      Math.min(this.startLineNumber, t.startLineNumber),
      Math.max(this.endLineNumberExclusive, t.endLineNumberExclusive)
    );
  }
  toString() {
    return `[${this.startLineNumber},${this.endLineNumberExclusive})`;
  }
  intersect(t) {
    const n = Math.max(this.startLineNumber, t.startLineNumber), r = Math.min(this.endLineNumberExclusive, t.endLineNumberExclusive);
    if (n <= r)
      return new U(n, r);
  }
  intersectsStrict(t) {
    return this.startLineNumber < t.endLineNumberExclusive && t.startLineNumber < this.endLineNumberExclusive;
  }
  overlapOrTouch(t) {
    return this.startLineNumber <= t.endLineNumberExclusive && t.startLineNumber <= this.endLineNumberExclusive;
  }
  equals(t) {
    return this.startLineNumber === t.startLineNumber && this.endLineNumberExclusive === t.endLineNumberExclusive;
  }
  toInclusiveRange() {
    return this.isEmpty ? null : new B(
      this.startLineNumber,
      1,
      this.endLineNumberExclusive - 1,
      Number.MAX_SAFE_INTEGER
    );
  }
  toExclusiveRange() {
    return new B(this.startLineNumber, 1, this.endLineNumberExclusive, 1);
  }
  mapToLineArray(t) {
    const n = [];
    for (let r = this.startLineNumber; r < this.endLineNumberExclusive; r++)
      n.push(t(r));
    return n;
  }
  forEach(t) {
    for (let n = this.startLineNumber; n < this.endLineNumberExclusive; n++)
      t(n);
  }
  serialize() {
    return [this.startLineNumber, this.endLineNumberExclusive];
  }
  includes(t) {
    return this.startLineNumber <= t && t < this.endLineNumberExclusive;
  }
  toOffsetRange() {
    return new H(this.startLineNumber - 1, this.endLineNumberExclusive - 1);
  }
}
class Ee {
  constructor(t = []) {
    this._normalizedRanges = t;
  }
  get ranges() {
    return this._normalizedRanges;
  }
  addRange(t) {
    if (t.length === 0)
      return;
    const n = Un(this._normalizedRanges, (i) => i.endLineNumberExclusive >= t.startLineNumber), r = wt(this._normalizedRanges, (i) => i.startLineNumber <= t.endLineNumberExclusive) + 1;
    if (n === r)
      this._normalizedRanges.splice(n, 0, t);
    else if (n === r - 1) {
      const i = this._normalizedRanges[n];
      this._normalizedRanges[n] = i.join(t);
    } else {
      const i = this._normalizedRanges[n].join(this._normalizedRanges[r - 1]).join(t);
      this._normalizedRanges.splice(n, r - n, i);
    }
  }
  contains(t) {
    const n = vt(this._normalizedRanges, (r) => r.startLineNumber <= t);
    return !!n && n.endLineNumberExclusive > t;
  }
  intersects(t) {
    const n = vt(this._normalizedRanges, (r) => r.startLineNumber < t.endLineNumberExclusive);
    return !!n && n.endLineNumberExclusive > t.startLineNumber;
  }
  getUnion(t) {
    if (this._normalizedRanges.length === 0)
      return t;
    if (t._normalizedRanges.length === 0)
      return this;
    const n = [];
    let r = 0, i = 0, s = null;
    for (; r < this._normalizedRanges.length || i < t._normalizedRanges.length; ) {
      let a = null;
      if (r < this._normalizedRanges.length && i < t._normalizedRanges.length) {
        const o = this._normalizedRanges[r], l = t._normalizedRanges[i];
        o.startLineNumber < l.startLineNumber ? (a = o, r++) : (a = l, i++);
      } else r < this._normalizedRanges.length ? (a = this._normalizedRanges[r], r++) : (a = t._normalizedRanges[i], i++);
      s === null ? s = a : s.endLineNumberExclusive >= a.startLineNumber ? s = new U(
        s.startLineNumber,
        Math.max(s.endLineNumberExclusive, a.endLineNumberExclusive)
      ) : (n.push(s), s = a);
    }
    return s !== null && n.push(s), new Ee(n);
  }
  subtractFrom(t) {
    const n = Un(this._normalizedRanges, (a) => a.endLineNumberExclusive >= t.startLineNumber), r = wt(this._normalizedRanges, (a) => a.startLineNumber <= t.endLineNumberExclusive) + 1;
    if (n === r)
      return new Ee([t]);
    const i = [];
    let s = t.startLineNumber;
    for (let a = n; a < r; a++) {
      const o = this._normalizedRanges[a];
      o.startLineNumber > s && i.push(new U(s, o.startLineNumber)), s = o.endLineNumberExclusive;
    }
    return s < t.endLineNumberExclusive && i.push(new U(s, t.endLineNumberExclusive)), new Ee(i);
  }
  toString() {
    return this._normalizedRanges.map((t) => t.toString()).join(", ");
  }
  getIntersection(t) {
    const n = [];
    let r = 0, i = 0;
    for (; r < this._normalizedRanges.length && i < t._normalizedRanges.length; ) {
      const s = this._normalizedRanges[r], a = t._normalizedRanges[i], o = s.intersect(a);
      o && !o.isEmpty && n.push(o), s.endLineNumberExclusive < a.endLineNumberExclusive ? r++ : i++;
    }
    return new Ee(n);
  }
  getWithDelta(t) {
    return new Ee(this._normalizedRanges.map((n) => n.delta(t)));
  }
}
const be = class be {
  static lengthDiffNonNegative(t, n) {
    return n.isLessThan(t) ? be.zero : t.lineCount === n.lineCount ? new be(0, n.columnCount - t.columnCount) : new be(n.lineCount - t.lineCount, n.columnCount);
  }
  static betweenPositions(t, n) {
    return t.lineNumber === n.lineNumber ? new be(0, n.column - t.column) : new be(n.lineNumber - t.lineNumber, n.column - 1);
  }
  static fromPosition(t) {
    return new be(t.lineNumber - 1, t.column - 1);
  }
  static ofRange(t) {
    return be.betweenPositions(t.getStartPosition(), t.getEndPosition());
  }
  static ofText(t) {
    let n = 0, r = 0;
    for (const i of t)
      i === `
` ? (n++, r = 0) : r++;
    return new be(n, r);
  }
  constructor(t, n) {
    this.lineCount = t, this.columnCount = n;
  }
  isZero() {
    return this.lineCount === 0 && this.columnCount === 0;
  }
  isLessThan(t) {
    return this.lineCount !== t.lineCount ? this.lineCount < t.lineCount : this.columnCount < t.columnCount;
  }
  isGreaterThan(t) {
    return this.lineCount !== t.lineCount ? this.lineCount > t.lineCount : this.columnCount > t.columnCount;
  }
  isGreaterThanOrEqualTo(t) {
    return this.lineCount !== t.lineCount ? this.lineCount > t.lineCount : this.columnCount >= t.columnCount;
  }
  equals(t) {
    return this.lineCount === t.lineCount && this.columnCount === t.columnCount;
  }
  compare(t) {
    return this.lineCount !== t.lineCount ? this.lineCount - t.lineCount : this.columnCount - t.columnCount;
  }
  add(t) {
    return t.lineCount === 0 ? new be(this.lineCount, this.columnCount + t.columnCount) : new be(this.lineCount + t.lineCount, t.columnCount);
  }
  createRange(t) {
    return this.lineCount === 0 ? new B(
      t.lineNumber,
      t.column,
      t.lineNumber,
      t.column + this.columnCount
    ) : new B(
      t.lineNumber,
      t.column,
      t.lineNumber + this.lineCount,
      this.columnCount + 1
    );
  }
  toRange() {
    return new B(1, 1, this.lineCount + 1, this.columnCount + 1);
  }
  addToPosition(t) {
    return this.lineCount === 0 ? new X(t.lineNumber, t.column + this.columnCount) : new X(t.lineNumber + this.lineCount, this.columnCount + 1);
  }
  addToRange(t) {
    return B.fromPositions(this.addToPosition(t.getStartPosition()), this.addToPosition(t.getEndPosition()));
  }
  toString() {
    return `${this.lineCount},${this.columnCount}`;
  }
};
be.zero = new be(0, 0);
let rt = be;
class Dl {
  constructor(t) {
    this.text = t, this.lineStartOffsetByLineIdx = [], this.lineStartOffsetByLineIdx.push(0);
    for (let n = 0; n < t.length; n++)
      t.charAt(n) === `
` && this.lineStartOffsetByLineIdx.push(n + 1);
  }
  getOffset(t) {
    return this.lineStartOffsetByLineIdx[t.lineNumber - 1] + t.column - 1;
  }
  getOffsetRange(t) {
    return new H(
      this.getOffset(t.getStartPosition()),
      this.getOffset(t.getEndPosition())
    );
  }
  getPosition(t) {
    const n = wt(this.lineStartOffsetByLineIdx, (s) => s <= t), r = n + 1, i = t - this.lineStartOffsetByLineIdx[n] + 1;
    return new X(r, i);
  }
  getRange(t) {
    return B.fromPositions(this.getPosition(t.start), this.getPosition(t.endExclusive));
  }
  getTextLength(t) {
    return rt.ofRange(this.getRange(t));
  }
  get textLength() {
    const t = this.lineStartOffsetByLineIdx.length - 1;
    return new rt(t, this.text.length - this.lineStartOffsetByLineIdx[t]);
  }
}
let Fl = class kt {
  static single(t, n) {
    return new kt([new et(t, n)]);
  }
  static insert(t, n) {
    return new kt([new et(B.fromPositions(t, t), n)]);
  }
  constructor(t) {
    this.edits = t, Wt(() => Rr(t, (n, r) => n.range.getEndPosition().isBeforeOrEqual(r.range.getStartPosition())));
  }
  normalize() {
    const t = [];
    for (const n of this.edits)
      if (t.length > 0 && t[t.length - 1].range.getEndPosition().equals(n.range.getStartPosition())) {
        const r = t[t.length - 1];
        t[t.length - 1] = new et(r.range.plusRange(n.range), r.text + n.text);
      } else n.isEmpty || t.push(n);
    return new kt(t);
  }
  mapPosition(t) {
    let n = 0, r = 0, i = 0;
    for (const s of this.edits) {
      const a = s.range.getStartPosition();
      if (t.isBeforeOrEqual(a))
        break;
      const o = s.range.getEndPosition(), l = rt.ofText(s.text);
      if (t.isBefore(o)) {
        const u = new X(
          a.lineNumber + n,
          a.column + (a.lineNumber + n === r ? i : 0)
        ), h = l.addToPosition(u);
        return Qt(u, h);
      }
      a.lineNumber + n !== r && (i = 0), n += l.lineCount - (s.range.endLineNumber - s.range.startLineNumber), l.lineCount === 0 ? o.lineNumber !== a.lineNumber ? i += l.columnCount - (o.column - 1) : i += l.columnCount - (o.column - a.column) : i = l.columnCount, r = o.lineNumber + n;
    }
    return new X(
      t.lineNumber + n,
      t.column + (t.lineNumber + n === r ? i : 0)
    );
  }
  mapRange(t) {
    function n(a) {
      return a instanceof X ? a : a.getStartPosition();
    }
    function r(a) {
      return a instanceof X ? a : a.getEndPosition();
    }
    const i = n(this.mapPosition(t.getStartPosition())), s = r(this.mapPosition(t.getEndPosition()));
    return Qt(i, s);
  }
  inverseMapPosition(t, n) {
    return this.inverse(n).mapPosition(t);
  }
  inverseMapRange(t, n) {
    return this.inverse(n).mapRange(t);
  }
  apply(t) {
    let n = "", r = new X(1, 1);
    for (const s of this.edits) {
      const a = s.range, o = a.getStartPosition(), l = a.getEndPosition(), u = Qt(r, o);
      u.isEmpty() || (n += t.getValueOfRange(u)), n += s.text, r = l;
    }
    const i = Qt(r, t.endPositionExclusive);
    return i.isEmpty() || (n += t.getValueOfRange(i)), n;
  }
  applyToString(t) {
    const n = new Vl(t);
    return this.apply(n);
  }
  inverse(t) {
    const n = this.getNewRanges();
    return new kt(this.edits.map((r, i) => new et(n[i], t.getValueOfRange(r.range))));
  }
  getNewRanges() {
    const t = [];
    let n = 0, r = 0, i = 0;
    for (const s of this.edits) {
      const a = rt.ofText(s.text), o = X.lift({
        lineNumber: s.range.startLineNumber + r,
        column: s.range.startColumn + (s.range.startLineNumber === n ? i : 0)
      }), l = a.createRange(o);
      t.push(l), r = l.endLineNumber - s.range.endLineNumber, i = l.endColumn - s.range.endColumn, n = s.range.endLineNumber;
    }
    return t;
  }
};
class et {
  constructor(t, n) {
    this.range = t, this.text = n;
  }
  get isEmpty() {
    return this.range.isEmpty() && this.text.length === 0;
  }
  static equals(t, n) {
    return t.range.equalsRange(n.range) && t.text === n.text;
  }
  toSingleEditOperation() {
    return {
      range: this.range,
      text: this.text
    };
  }
  toEdit() {
    return new Fl([this]);
  }
  equals(t) {
    return et.equals(this, t);
  }
}
function Qt(e, t) {
  if (e.lineNumber === t.lineNumber && e.column === Number.MAX_SAFE_INTEGER)
    return B.fromPositions(t, t);
  if (!e.isBeforeOrEqual(t))
    throw new he("start must be before end");
  return new B(e.lineNumber, e.column, t.lineNumber, t.column);
}
class ua {
  get endPositionExclusive() {
    return this.length.addToPosition(new X(1, 1));
  }
  getValue() {
    return this.getValueOfRange(this.length.toRange());
  }
  getLineLength(t) {
    return this.getValueOfRange(new B(t, 1, t, Number.MAX_SAFE_INTEGER)).length;
  }
}
class Il extends ua {
  constructor(t, n) {
    yl(n >= 1), super(), this._getLineContent = t, this._lineCount = n;
  }
  getValueOfRange(t) {
    if (t.startLineNumber === t.endLineNumber)
      return this._getLineContent(t.startLineNumber).substring(t.startColumn - 1, t.endColumn - 1);
    let n = this._getLineContent(t.startLineNumber).substring(t.startColumn - 1);
    for (let r = t.startLineNumber + 1; r < t.endLineNumber; r++)
      n += `
` + this._getLineContent(r);
    return n += `
` + this._getLineContent(t.endLineNumber).substring(0, t.endColumn - 1), n;
  }
  getLineLength(t) {
    return this._getLineContent(t).length;
  }
  get length() {
    const t = this._getLineContent(this._lineCount);
    return new rt(this._lineCount - 1, t.length);
  }
}
class Jt extends Il {
  constructor(t) {
    super((n) => t[n - 1], t.length);
  }
}
class Vl extends ua {
  constructor(t) {
    super(), this.value = t, this._t = new Dl(this.value);
  }
  getValueOfRange(t) {
    return this._t.getOffsetRange(t).substring(this.value);
  }
  get length() {
    return this._t.textLength;
  }
}
class Le {
  static inverse(t, n, r) {
    const i = [];
    let s = 1, a = 1;
    for (const l of t) {
      const u = new Le(new U(s, l.original.startLineNumber), new U(a, l.modified.startLineNumber));
      u.modified.isEmpty || i.push(u), s = l.original.endLineNumberExclusive, a = l.modified.endLineNumberExclusive;
    }
    const o = new Le(new U(s, n + 1), new U(a, r + 1));
    return o.modified.isEmpty || i.push(o), i;
  }
  static clip(t, n, r) {
    const i = [];
    for (const s of t) {
      const a = s.original.intersect(n), o = s.modified.intersect(r);
      a && !a.isEmpty && o && !o.isEmpty && i.push(new Le(a, o));
    }
    return i;
  }
  constructor(t, n) {
    this.original = t, this.modified = n;
  }
  toString() {
    return `{${this.original.toString()}->${this.modified.toString()}}`;
  }
  flip() {
    return new Le(this.modified, this.original);
  }
  join(t) {
    return new Le(this.original.join(t.original), this.modified.join(t.modified));
  }
  get changedLineCount() {
    return Math.max(this.original.length, this.modified.length);
  }
  toRangeMapping() {
    const t = this.original.toInclusiveRange(), n = this.modified.toInclusiveRange();
    if (t && n)
      return new ge(t, n);
    if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {
      if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1))
        throw new he("not a valid diff");
      return new ge(new B(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new B(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
    } else
      return new ge(new B(
        this.original.startLineNumber - 1,
        Number.MAX_SAFE_INTEGER,
        this.original.endLineNumberExclusive - 1,
        Number.MAX_SAFE_INTEGER
      ), new B(
        this.modified.startLineNumber - 1,
        Number.MAX_SAFE_INTEGER,
        this.modified.endLineNumberExclusive - 1,
        Number.MAX_SAFE_INTEGER
      ));
  }
  toRangeMapping2(t, n) {
    if (ls(this.original.endLineNumberExclusive, t) && ls(this.modified.endLineNumberExclusive, n))
      return new ge(new B(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new B(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
    if (!this.original.isEmpty && !this.modified.isEmpty)
      return new ge(B.fromPositions(new X(this.original.startLineNumber, 1), ut(new X(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), t)), B.fromPositions(new X(this.modified.startLineNumber, 1), ut(new X(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), n)));
    if (this.original.startLineNumber > 1 && this.modified.startLineNumber > 1)
      return new ge(B.fromPositions(ut(new X(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER), t), ut(new X(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), t)), B.fromPositions(ut(new X(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER), n), ut(new X(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), n)));
    throw new he();
  }
}
function ut(e, t) {
  if (e.lineNumber < 1)
    return new X(1, 1);
  if (e.lineNumber > t.length)
    return new X(t.length, t[t.length - 1].length + 1);
  const n = t[e.lineNumber - 1];
  return e.column > n.length + 1 ? new X(e.lineNumber, n.length + 1) : e;
}
function ls(e, t) {
  return e >= 1 && e <= t.length;
}
class Ue extends Le {
  static fromRangeMappings(t) {
    const n = U.join(t.map((i) => U.fromRangeInclusive(i.originalRange))), r = U.join(t.map((i) => U.fromRangeInclusive(i.modifiedRange)));
    return new Ue(n, r, t);
  }
  constructor(t, n, r) {
    super(t, n), this.innerChanges = r;
  }
  flip() {
    var t;
    return new Ue(this.modified, this.original, (t = this.innerChanges) == null ? void 0 : t.map((n) => n.flip()));
  }
  withInnerChangesFromLineRanges() {
    return new Ue(this.original, this.modified, [this.toRangeMapping()]);
  }
}
class ge {
  static fromEdit(t) {
    const n = t.getNewRanges();
    return t.edits.map((i, s) => new ge(i.range, n[s]));
  }
  static fromEditJoin(t) {
    const n = t.getNewRanges(), r = t.edits.map((i, s) => new ge(i.range, n[s]));
    return ge.join(r);
  }
  static join(t) {
    if (t.length === 0)
      throw new he("Cannot join an empty list of range mappings");
    let n = t[0];
    for (let r = 1; r < t.length; r++)
      n = n.join(t[r]);
    return n;
  }
  static assertSorted(t) {
    for (let n = 1; n < t.length; n++) {
      const r = t[n - 1], i = t[n];
      if (!(r.originalRange.getEndPosition().isBeforeOrEqual(i.originalRange.getStartPosition()) && r.modifiedRange.getEndPosition().isBeforeOrEqual(i.modifiedRange.getStartPosition())))
        throw new he("Range mappings must be sorted");
    }
  }
  constructor(t, n) {
    this.originalRange = t, this.modifiedRange = n;
  }
  toString() {
    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;
  }
  flip() {
    return new ge(this.modifiedRange, this.originalRange);
  }
  toTextEdit(t) {
    const n = t.getValueOfRange(this.modifiedRange);
    return new et(this.originalRange, n);
  }
  join(t) {
    return new ge(
      this.originalRange.plusRange(t.originalRange),
      this.modifiedRange.plusRange(t.modifiedRange)
    );
  }
}
function us(e, t, n, r = !1) {
  const i = [];
  for (const s of Ma(e.map((a) => Ul(a, t, n)), (a, o) => a.original.overlapOrTouch(o.original) || a.modified.overlapOrTouch(o.modified))) {
    const a = s[0], o = s[s.length - 1];
    i.push(new Ue(
      a.original.join(o.original),
      a.modified.join(o.modified),
      s.map((l) => l.innerChanges[0])
    ));
  }
  return Wt(() => !r && i.length > 0 && (i[0].modified.startLineNumber !== i[0].original.startLineNumber || n.length.lineCount - i[i.length - 1].modified.endLineNumberExclusive !== t.length.lineCount - i[i.length - 1].original.endLineNumberExclusive) ? !1 : Rr(i, (s, a) => a.original.startLineNumber - s.original.endLineNumberExclusive === a.modified.startLineNumber - s.modified.endLineNumberExclusive && s.original.endLineNumberExclusive < a.original.startLineNumber && s.modified.endLineNumberExclusive < a.modified.startLineNumber)), i;
}
function Ul(e, t, n) {
  let r = 0, i = 0;
  e.modifiedRange.endColumn === 1 && e.originalRange.endColumn === 1 && e.originalRange.startLineNumber + r <= e.originalRange.endLineNumber && e.modifiedRange.startLineNumber + r <= e.modifiedRange.endLineNumber && (i = -1), e.modifiedRange.startColumn - 1 >= n.getLineLength(e.modifiedRange.startLineNumber) && e.originalRange.startColumn - 1 >= t.getLineLength(e.originalRange.startLineNumber) && e.originalRange.startLineNumber <= e.originalRange.endLineNumber + i && e.modifiedRange.startLineNumber <= e.modifiedRange.endLineNumber + i && (r = 1);
  const s = new U(
    e.originalRange.startLineNumber + r,
    e.originalRange.endLineNumber + 1 + i
  ), a = new U(
    e.modifiedRange.startLineNumber + r,
    e.modifiedRange.endLineNumber + 1 + i
  );
  return new Ue(s, a, [e]);
}
const Bl = 3;
class ql {
  computeDiff(t, n, r) {
    var l;
    const s = new ha(t, n, {
      maxComputationTime: r.maxComputationTimeMs,
      shouldIgnoreTrimWhitespace: r.ignoreTrimWhitespace,
      shouldComputeCharChanges: !0,
      shouldMakePrettyDiff: !0,
      shouldPostProcessCharChanges: !0
    }).computeDiff(), a = [];
    let o = null;
    for (const u of s.changes) {
      let h;
      u.originalEndLineNumber === 0 ? h = new U(u.originalStartLineNumber + 1, u.originalStartLineNumber + 1) : h = new U(u.originalStartLineNumber, u.originalEndLineNumber + 1);
      let f;
      u.modifiedEndLineNumber === 0 ? f = new U(u.modifiedStartLineNumber + 1, u.modifiedStartLineNumber + 1) : f = new U(u.modifiedStartLineNumber, u.modifiedEndLineNumber + 1);
      let m = new Ue(h, f, (l = u.charChanges) == null ? void 0 : l.map((d) => new ge(new B(
        d.originalStartLineNumber,
        d.originalStartColumn,
        d.originalEndLineNumber,
        d.originalEndColumn
      ), new B(
        d.modifiedStartLineNumber,
        d.modifiedStartColumn,
        d.modifiedEndLineNumber,
        d.modifiedEndColumn
      ))));
      o && (o.modified.endLineNumberExclusive === m.modified.startLineNumber || o.original.endLineNumberExclusive === m.original.startLineNumber) && (m = new Ue(
        o.original.join(m.original),
        o.modified.join(m.modified),
        o.innerChanges && m.innerChanges ? o.innerChanges.concat(m.innerChanges) : void 0
      ), a.pop()), a.push(m), o = m;
    }
    return Wt(() => Rr(a, (u, h) => h.original.startLineNumber - u.original.endLineNumberExclusive === h.modified.startLineNumber - u.modified.endLineNumberExclusive && u.original.endLineNumberExclusive < h.original.startLineNumber && u.modified.endLineNumberExclusive < h.modified.startLineNumber)), new nn(a, [], s.quitEarly);
  }
}
function ca(e, t, n, r) {
  return new Ge(e, t, n).ComputeDiff(r);
}
let cs = class {
  constructor(t) {
    const n = [], r = [];
    for (let i = 0, s = t.length; i < s; i++)
      n[i] = rr(t[i], 1), r[i] = ir(t[i], 1);
    this.lines = t, this._startColumns = n, this._endColumns = r;
  }
  getElements() {
    const t = [];
    for (let n = 0, r = this.lines.length; n < r; n++)
      t[n] = this.lines[n].substring(this._startColumns[n] - 1, this._endColumns[n] - 1);
    return t;
  }
  getStrictElement(t) {
    return this.lines[t];
  }
  getStartLineNumber(t) {
    return t + 1;
  }
  getEndLineNumber(t) {
    return t + 1;
  }
  createCharSequence(t, n, r) {
    const i = [], s = [], a = [];
    let o = 0;
    for (let l = n; l <= r; l++) {
      const u = this.lines[l], h = t ? this._startColumns[l] : 1, f = t ? this._endColumns[l] : u.length + 1;
      for (let m = h; m < f; m++)
        i[o] = u.charCodeAt(m - 1), s[o] = l + 1, a[o] = m, o++;
      !t && l < r && (i[o] = 10, s[o] = l + 1, a[o] = u.length + 1, o++);
    }
    return new Ol(i, s, a);
  }
};
class Ol {
  constructor(t, n, r) {
    this._charCodes = t, this._lineNumbers = n, this._columns = r;
  }
  toString() {
    return "[" + this._charCodes.map(
      (t, n) => (t === 10 ? "\\n" : String.fromCharCode(t)) + `-(${this._lineNumbers[n]},${this._columns[n]})`
    ).join(", ") + "]";
  }
  _assertIndex(t, n) {
    if (t < 0 || t >= n.length)
      throw new Error("Illegal index");
  }
  getElements() {
    return this._charCodes;
  }
  getStartLineNumber(t) {
    return t > 0 && t === this._lineNumbers.length ? this.getEndLineNumber(t - 1) : (this._assertIndex(t, this._lineNumbers), this._lineNumbers[t]);
  }
  getEndLineNumber(t) {
    return t === -1 ? this.getStartLineNumber(t + 1) : (this._assertIndex(t, this._lineNumbers), this._charCodes[t] === 10 ? this._lineNumbers[t] + 1 : this._lineNumbers[t]);
  }
  getStartColumn(t) {
    return t > 0 && t === this._columns.length ? this.getEndColumn(t - 1) : (this._assertIndex(t, this._columns), this._columns[t]);
  }
  getEndColumn(t) {
    return t === -1 ? this.getStartColumn(t + 1) : (this._assertIndex(t, this._columns), this._charCodes[t] === 10 ? 1 : this._columns[t] + 1);
  }
}
class _t {
  constructor(t, n, r, i, s, a, o, l) {
    this.originalStartLineNumber = t, this.originalStartColumn = n, this.originalEndLineNumber = r, this.originalEndColumn = i, this.modifiedStartLineNumber = s, this.modifiedStartColumn = a, this.modifiedEndLineNumber = o, this.modifiedEndColumn = l;
  }
  static createFromDiffChange(t, n, r) {
    const i = n.getStartLineNumber(t.originalStart), s = n.getStartColumn(t.originalStart), a = n.getEndLineNumber(t.originalStart + t.originalLength - 1), o = n.getEndColumn(t.originalStart + t.originalLength - 1), l = r.getStartLineNumber(t.modifiedStart), u = r.getStartColumn(t.modifiedStart), h = r.getEndLineNumber(t.modifiedStart + t.modifiedLength - 1), f = r.getEndColumn(t.modifiedStart + t.modifiedLength - 1);
    return new _t(
      i,
      s,
      a,
      o,
      l,
      u,
      h,
      f
    );
  }
}
function Wl(e) {
  if (e.length <= 1)
    return e;
  const t = [e[0]];
  let n = t[0];
  for (let r = 1, i = e.length; r < i; r++) {
    const s = e[r], a = s.originalStart - (n.originalStart + n.originalLength), o = s.modifiedStart - (n.modifiedStart + n.modifiedLength);
    Math.min(a, o) < Bl ? (n.originalLength = s.originalStart + s.originalLength - n.originalStart, n.modifiedLength = s.modifiedStart + s.modifiedLength - n.modifiedStart) : (t.push(s), n = s);
  }
  return t;
}
class It {
  constructor(t, n, r, i, s) {
    this.originalStartLineNumber = t, this.originalEndLineNumber = n, this.modifiedStartLineNumber = r, this.modifiedEndLineNumber = i, this.charChanges = s;
  }
  static createFromDiffResult(t, n, r, i, s, a, o) {
    let l, u, h, f, m;
    if (n.originalLength === 0 ? (l = r.getStartLineNumber(n.originalStart) - 1, u = 0) : (l = r.getStartLineNumber(n.originalStart), u = r.getEndLineNumber(n.originalStart + n.originalLength - 1)), n.modifiedLength === 0 ? (h = i.getStartLineNumber(n.modifiedStart) - 1, f = 0) : (h = i.getStartLineNumber(n.modifiedStart), f = i.getEndLineNumber(n.modifiedStart + n.modifiedLength - 1)), a && n.originalLength > 0 && n.originalLength < 20 && n.modifiedLength > 0 && n.modifiedLength < 20 && s()) {
      const d = r.createCharSequence(t, n.originalStart, n.originalStart + n.originalLength - 1), p = i.createCharSequence(t, n.modifiedStart, n.modifiedStart + n.modifiedLength - 1);
      if (d.getElements().length > 0 && p.getElements().length > 0) {
        let b = ca(d, p, s, !0).changes;
        o && (b = Wl(b)), m = [];
        for (let N = 0, L = b.length; N < L; N++)
          m.push(_t.createFromDiffChange(b[N], d, p));
      }
    }
    return new It(
      l,
      u,
      h,
      f,
      m
    );
  }
}
class ha {
  constructor(t, n, r) {
    this.shouldComputeCharChanges = r.shouldComputeCharChanges, this.shouldPostProcessCharChanges = r.shouldPostProcessCharChanges, this.shouldIgnoreTrimWhitespace = r.shouldIgnoreTrimWhitespace, this.shouldMakePrettyDiff = r.shouldMakePrettyDiff, this.originalLines = t, this.modifiedLines = n, this.original = new cs(t), this.modified = new cs(n), this.continueLineDiff = hs(r.maxComputationTime), this.continueCharDiff = hs(r.maxComputationTime === 0 ? 0 : Math.min(r.maxComputationTime, 5e3));
  }
  computeDiff() {
    if (this.original.lines.length === 1 && this.original.lines[0].length === 0)
      return this.modified.lines.length === 1 && this.modified.lines[0].length === 0 ? {
        quitEarly: !1,
        changes: []
      } : {
        quitEarly: !1,
        changes: [{
          originalStartLineNumber: 1,
          originalEndLineNumber: 1,
          modifiedStartLineNumber: 1,
          modifiedEndLineNumber: this.modified.lines.length,
          charChanges: void 0
        }]
      };
    if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0)
      return {
        quitEarly: !1,
        changes: [{
          originalStartLineNumber: 1,
          originalEndLineNumber: this.original.lines.length,
          modifiedStartLineNumber: 1,
          modifiedEndLineNumber: 1,
          charChanges: void 0
        }]
      };
    const t = ca(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff), n = t.changes, r = t.quitEarly;
    if (this.shouldIgnoreTrimWhitespace) {
      const o = [];
      for (let l = 0, u = n.length; l < u; l++)
        o.push(It.createFromDiffResult(this.shouldIgnoreTrimWhitespace, n[l], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
      return {
        quitEarly: r,
        changes: o
      };
    }
    const i = [];
    let s = 0, a = 0;
    for (let o = -1, l = n.length; o < l; o++) {
      const u = o + 1 < l ? n[o + 1] : null, h = u ? u.originalStart : this.originalLines.length, f = u ? u.modifiedStart : this.modifiedLines.length;
      for (; s < h && a < f; ) {
        const m = this.originalLines[s], d = this.modifiedLines[a];
        if (m !== d) {
          {
            let p = rr(m, 1), b = rr(d, 1);
            for (; p > 1 && b > 1; ) {
              const N = m.charCodeAt(p - 2), L = d.charCodeAt(b - 2);
              if (N !== L)
                break;
              p--, b--;
            }
            (p > 1 || b > 1) && this._pushTrimWhitespaceCharChange(i, s + 1, 1, p, a + 1, 1, b);
          }
          {
            let p = ir(m, 1), b = ir(d, 1);
            const N = m.length + 1, L = d.length + 1;
            for (; p < N && b < L; ) {
              const C = m.charCodeAt(p - 1), R = m.charCodeAt(b - 1);
              if (C !== R)
                break;
              p++, b++;
            }
            (p < N || b < L) && this._pushTrimWhitespaceCharChange(i, s + 1, p, N, a + 1, b, L);
          }
        }
        s++, a++;
      }
      u && (i.push(It.createFromDiffResult(this.shouldIgnoreTrimWhitespace, u, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges)), s += u.originalLength, a += u.modifiedLength);
    }
    return {
      quitEarly: r,
      changes: i
    };
  }
  _pushTrimWhitespaceCharChange(t, n, r, i, s, a, o) {
    if (this._mergeTrimWhitespaceCharChange(t, n, r, i, s, a, o))
      return;
    let l;
    this.shouldComputeCharChanges && (l = [new _t(
      n,
      r,
      n,
      i,
      s,
      a,
      s,
      o
    )]), t.push(new It(
      n,
      n,
      s,
      s,
      l
    ));
  }
  _mergeTrimWhitespaceCharChange(t, n, r, i, s, a, o) {
    const l = t.length;
    if (l === 0)
      return !1;
    const u = t[l - 1];
    return u.originalEndLineNumber === 0 || u.modifiedEndLineNumber === 0 ? !1 : u.originalEndLineNumber === n && u.modifiedEndLineNumber === s ? (this.shouldComputeCharChanges && u.charChanges && u.charChanges.push(new _t(
      n,
      r,
      n,
      i,
      s,
      a,
      s,
      o
    )), !0) : u.originalEndLineNumber + 1 === n && u.modifiedEndLineNumber + 1 === s ? (u.originalEndLineNumber = n, u.modifiedEndLineNumber = s, this.shouldComputeCharChanges && u.charChanges && u.charChanges.push(new _t(
      n,
      r,
      n,
      i,
      s,
      a,
      s,
      o
    )), !0) : !1;
  }
}
function rr(e, t) {
  const n = go(e);
  return n === -1 ? t : n + 1;
}
function ir(e, t) {
  const n = po(e);
  return n === -1 ? t : n + 2;
}
function hs(e) {
  if (e === 0)
    return () => !0;
  const t = Date.now();
  return () => Date.now() - t < e;
}
class Be {
  static trivial(t, n) {
    return new Be([new ne(H.ofLength(t.length), H.ofLength(n.length))], !1);
  }
  static trivialTimedOut(t, n) {
    return new Be([new ne(H.ofLength(t.length), H.ofLength(n.length))], !0);
  }
  constructor(t, n) {
    this.diffs = t, this.hitTimeout = n;
  }
}
class ne {
  static invert(t, n) {
    const r = [];
    return Pa(t, (i, s) => {
      r.push(ne.fromOffsetPairs(i ? i.getEndExclusives() : Ie.zero, s ? s.getStarts() : new Ie(
        n,
        (i ? i.seq2Range.endExclusive - i.seq1Range.endExclusive : 0) + n
      )));
    }), r;
  }
  static fromOffsetPairs(t, n) {
    return new ne(new H(t.offset1, n.offset1), new H(t.offset2, n.offset2));
  }
  static assertSorted(t) {
    let n;
    for (const r of t) {
      if (n && !(n.seq1Range.endExclusive <= r.seq1Range.start && n.seq2Range.endExclusive <= r.seq2Range.start))
        throw new he("Sequence diffs must be sorted");
      n = r;
    }
  }
  constructor(t, n) {
    this.seq1Range = t, this.seq2Range = n;
  }
  swap() {
    return new ne(this.seq2Range, this.seq1Range);
  }
  toString() {
    return `${this.seq1Range} <-> ${this.seq2Range}`;
  }
  join(t) {
    return new ne(this.seq1Range.join(t.seq1Range), this.seq2Range.join(t.seq2Range));
  }
  delta(t) {
    return t === 0 ? this : new ne(this.seq1Range.delta(t), this.seq2Range.delta(t));
  }
  deltaStart(t) {
    return t === 0 ? this : new ne(this.seq1Range.deltaStart(t), this.seq2Range.deltaStart(t));
  }
  deltaEnd(t) {
    return t === 0 ? this : new ne(this.seq1Range.deltaEnd(t), this.seq2Range.deltaEnd(t));
  }
  intersectsOrTouches(t) {
    return this.seq1Range.intersectsOrTouches(t.seq1Range) || this.seq2Range.intersectsOrTouches(t.seq2Range);
  }
  intersect(t) {
    const n = this.seq1Range.intersect(t.seq1Range), r = this.seq2Range.intersect(t.seq2Range);
    if (!(!n || !r))
      return new ne(n, r);
  }
  getStarts() {
    return new Ie(this.seq1Range.start, this.seq2Range.start);
  }
  getEndExclusives() {
    return new Ie(this.seq1Range.endExclusive, this.seq2Range.endExclusive);
  }
}
const Ke = class Ke {
  constructor(t, n) {
    this.offset1 = t, this.offset2 = n;
  }
  toString() {
    return `${this.offset1} <-> ${this.offset2}`;
  }
  delta(t) {
    return t === 0 ? this : new Ke(this.offset1 + t, this.offset2 + t);
  }
  equals(t) {
    return this.offset1 === t.offset1 && this.offset2 === t.offset2;
  }
};
Ke.zero = new Ke(0, 0), Ke.max = new Ke(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
let Ie = Ke;
const An = class An {
  isValid() {
    return !0;
  }
};
An.instance = new An();
let zt = An;
class zl {
  constructor(t) {
    if (this.timeout = t, this.startTime = Date.now(), this.valid = !0, t <= 0)
      throw new he("timeout must be positive");
  }
  isValid() {
    return !(Date.now() - this.startTime < this.timeout) && this.valid && (this.valid = !1), this.valid;
  }
  disable() {
    this.timeout = Number.MAX_SAFE_INTEGER, this.isValid = () => !0, this.valid = !0;
  }
}
class $n {
  constructor(t, n) {
    this.width = t, this.height = n, this.array = [], this.array = new Array(t * n);
  }
  get(t, n) {
    return this.array[t + n * this.width];
  }
  set(t, n, r) {
    this.array[t + n * this.width] = r;
  }
}
function sr(e) {
  return e === 32 || e === 9;
}
const Ut = class Ut {
  static getKey(t) {
    let n = this.chrKeys.get(t);
    return n === void 0 && (n = this.chrKeys.size, this.chrKeys.set(t, n)), n;
  }
  constructor(t, n, r) {
    this.range = t, this.lines = n, this.source = r, this.histogram = [];
    let i = 0;
    for (let s = t.startLineNumber - 1; s < t.endLineNumberExclusive - 1; s++) {
      const a = n[s];
      for (let l = 0; l < a.length; l++) {
        i++;
        const u = a[l], h = Ut.getKey(u);
        this.histogram[h] = (this.histogram[h] || 0) + 1;
      }
      i++;
      const o = Ut.getKey(`
`);
      this.histogram[o] = (this.histogram[o] || 0) + 1;
    }
    this.totalCount = i;
  }
  computeSimilarity(t) {
    let n = 0;
    const r = Math.max(this.histogram.length, t.histogram.length);
    for (let i = 0; i < r; i++)
      n += Math.abs((this.histogram[i] ?? 0) - (t.histogram[i] ?? 0));
    return 1 - n / (this.totalCount + t.totalCount);
  }
};
Ut.chrKeys = /* @__PURE__ */ new Map();
let fn = Ut;
class Hl {
  compute(t, n, r = zt.instance, i) {
    if (t.length === 0 || n.length === 0)
      return Be.trivial(t, n);
    const s = new $n(t.length, n.length), a = new $n(t.length, n.length), o = new $n(t.length, n.length);
    for (let p = 0; p < t.length; p++)
      for (let b = 0; b < n.length; b++) {
        if (!r.isValid())
          return Be.trivialTimedOut(t, n);
        const N = p === 0 ? 0 : s.get(p - 1, b), L = b === 0 ? 0 : s.get(p, b - 1);
        let C;
        t.getElement(p) === n.getElement(b) ? (p === 0 || b === 0 ? C = 0 : C = s.get(p - 1, b - 1), p > 0 && b > 0 && a.get(p - 1, b - 1) === 3 && (C += o.get(p - 1, b - 1)), C += i ? i(p, b) : 1) : C = -1;
        const R = Math.max(N, L, C);
        if (R === C) {
          const S = p > 0 && b > 0 ? o.get(p - 1, b - 1) : 0;
          o.set(p, b, S + 1), a.set(p, b, 3);
        } else R === N ? (o.set(p, b, 0), a.set(p, b, 1)) : R === L && (o.set(p, b, 0), a.set(p, b, 2));
        s.set(p, b, R);
      }
    const l = [];
    let u = t.length, h = n.length;
    function f(p, b) {
      (p + 1 !== u || b + 1 !== h) && l.push(new ne(new H(p + 1, u), new H(b + 1, h))), u = p, h = b;
    }
    let m = t.length - 1, d = n.length - 1;
    for (; m >= 0 && d >= 0; )
      a.get(m, d) === 3 ? (f(m, d), m--, d--) : a.get(m, d) === 1 ? m-- : d--;
    return f(-1, -1), l.reverse(), new Be(l, !1);
  }
}
class fa {
  compute(t, n, r = zt.instance) {
    if (t.length === 0 || n.length === 0)
      return Be.trivial(t, n);
    const i = t, s = n;
    function a(b, N) {
      for (; b < i.length && N < s.length && i.getElement(b) === s.getElement(N); )
        b++, N++;
      return b;
    }
    let o = 0;
    const l = new jl();
    l.set(0, a(0, 0));
    const u = new Gl();
    u.set(0, l.get(0) === 0 ? null : new fs(null, 0, 0, l.get(0)));
    let h = 0;
    e: for (; ; ) {
      if (o++, !r.isValid())
        return Be.trivialTimedOut(i, s);
      const b = -Math.min(o, s.length + o % 2), N = Math.min(o, i.length + o % 2);
      for (h = b; h <= N; h += 2) {
        const L = h === N ? -1 : l.get(h + 1), C = h === b ? -1 : l.get(h - 1) + 1, R = Math.min(Math.max(L, C), i.length), S = R - h;
        if (R > i.length || S > s.length)
          continue;
        const A = a(R, S);
        l.set(h, A);
        const P = R === L ? u.get(h + 1) : u.get(h - 1);
        if (u.set(h, A !== R ? new fs(P, R, S, A - R) : P), l.get(h) === i.length && l.get(h) - h === s.length)
          break e;
      }
    }
    let f = u.get(h);
    const m = [];
    let d = i.length, p = s.length;
    for (; ; ) {
      const b = f ? f.x + f.length : 0, N = f ? f.y + f.length : 0;
      if ((b !== d || N !== p) && m.push(new ne(new H(b, d), new H(N, p))), !f)
        break;
      d = f.x, p = f.y, f = f.prev;
    }
    return m.reverse(), new Be(m, !1);
  }
}
class fs {
  constructor(t, n, r, i) {
    this.prev = t, this.x = n, this.y = r, this.length = i;
  }
}
class jl {
  constructor() {
    this.positiveArr = new Int32Array(10), this.negativeArr = new Int32Array(10);
  }
  get(t) {
    return t < 0 ? (t = -t - 1, this.negativeArr[t]) : this.positiveArr[t];
  }
  set(t, n) {
    if (t < 0) {
      if (t = -t - 1, t >= this.negativeArr.length) {
        const r = this.negativeArr;
        this.negativeArr = new Int32Array(r.length * 2), this.negativeArr.set(r);
      }
      this.negativeArr[t] = n;
    } else {
      if (t >= this.positiveArr.length) {
        const r = this.positiveArr;
        this.positiveArr = new Int32Array(r.length * 2), this.positiveArr.set(r);
      }
      this.positiveArr[t] = n;
    }
  }
}
class Gl {
  constructor() {
    this.positiveArr = [], this.negativeArr = [];
  }
  get(t) {
    return t < 0 ? (t = -t - 1, this.negativeArr[t]) : this.positiveArr[t];
  }
  set(t, n) {
    t < 0 ? (t = -t - 1, this.negativeArr[t] = n) : this.positiveArr[t] = n;
  }
}
class dn {
  constructor(t, n, r) {
    this.lines = t, this.range = n, this.considerWhitespaceChanges = r, this.elements = [], this.firstElementOffsetByLineIdx = [], this.lineStartOffsets = [], this.trimmedWsLengthsByLineIdx = [], this.firstElementOffsetByLineIdx.push(0);
    for (let i = this.range.startLineNumber; i <= this.range.endLineNumber; i++) {
      let s = t[i - 1], a = 0;
      i === this.range.startLineNumber && this.range.startColumn > 1 && (a = this.range.startColumn - 1, s = s.substring(a)), this.lineStartOffsets.push(a);
      let o = 0;
      if (!r) {
        const u = s.trimStart();
        o = s.length - u.length, s = u.trimEnd();
      }
      this.trimmedWsLengthsByLineIdx.push(o);
      const l = i === this.range.endLineNumber ? Math.min(this.range.endColumn - 1 - a - o, s.length) : s.length;
      for (let u = 0; u < l; u++)
        this.elements.push(s.charCodeAt(u));
      i < this.range.endLineNumber && (this.elements.push(10), this.firstElementOffsetByLineIdx.push(this.elements.length));
    }
  }
  toString() {
    return `Slice: "${this.text}"`;
  }
  get text() {
    return this.getText(new H(0, this.length));
  }
  getText(t) {
    return this.elements.slice(t.start, t.endExclusive).map((n) => String.fromCharCode(n)).join("");
  }
  getElement(t) {
    return this.elements[t];
  }
  get length() {
    return this.elements.length;
  }
  getBoundaryScore(t) {
    const n = ms(t > 0 ? this.elements[t - 1] : -1), r = ms(t < this.elements.length ? this.elements[t] : -1);
    if (n === 7 && r === 8)
      return 0;
    if (n === 8)
      return 150;
    let i = 0;
    return n !== r && (i += 10, n === 0 && r === 1 && (i += 1)), i += ds(n), i += ds(r), i;
  }
  translateOffset(t, n = "right") {
    const r = wt(this.firstElementOffsetByLineIdx, (s) => s <= t), i = t - this.firstElementOffsetByLineIdx[r];
    return new X(
      this.range.startLineNumber + r,
      1 + this.lineStartOffsets[r] + i + (i === 0 && n === "left" ? 0 : this.trimmedWsLengthsByLineIdx[r])
    );
  }
  translateRange(t) {
    const n = this.translateOffset(t.start, "right"), r = this.translateOffset(t.endExclusive, "left");
    return r.isBefore(n) ? B.fromPositions(r, r) : B.fromPositions(n, r);
  }
  findWordContaining(t) {
    if (t < 0 || t >= this.elements.length || !Dn(this.elements[t]))
      return;
    let n = t;
    for (; n > 0 && Dn(this.elements[n - 1]); )
      n--;
    let r = t;
    for (; r < this.elements.length && Dn(this.elements[r]); )
      r++;
    return new H(n, r);
  }
  countLinesIn(t) {
    return this.translateOffset(t.endExclusive).lineNumber - this.translateOffset(t.start).lineNumber;
  }
  isStronglyEqual(t, n) {
    return this.elements[t] === this.elements[n];
  }
  extendToFullLines(t) {
    const n = vt(this.firstElementOffsetByLineIdx, (i) => i <= t.start) ?? 0, r = Ea(this.firstElementOffsetByLineIdx, (i) => t.endExclusive <= i) ?? this.elements.length;
    return new H(n, r);
  }
}
function Dn(e) {
  return e >= 97 && e <= 122 || e >= 65 && e <= 90 || e >= 48 && e <= 57;
}
const Tl = {
  0: 0,
  1: 0,
  2: 0,
  3: 10,
  4: 2,
  5: 30,
  6: 3,
  7: 10,
  8: 10
};
function ds(e) {
  return Tl[e];
}
function ms(e) {
  return e === 10 ? 8 : e === 13 ? 7 : sr(e) ? 6 : e >= 97 && e <= 122 ? 0 : e >= 65 && e <= 90 ? 1 : e >= 48 && e <= 57 ? 2 : e === -1 ? 3 : e === 44 || e === 59 ? 5 : 4;
}
function Xl(e, t, n, r, i, s) {
  let { moves: a, excludedChanges: o } = Jl(e, t, n, s);
  if (!s.isValid())
    return [];
  const l = e.filter((h) => !o.has(h)), u = Yl(l, r, i, t, n, s);
  return Da(a, u), a = Zl(a), a = a.filter((h) => {
    const f = h.original.toOffsetRange().slice(t).map((d) => d.trim());
    return f.join(`
`).length >= 15 && Ql(f, (d) => d.length >= 2) >= 2;
  }), a = Kl(e, a), a;
}
function Ql(e, t) {
  let n = 0;
  for (const r of e)
    t(r) && n++;
  return n;
}
function Jl(e, t, n, r) {
  const i = [], s = e.filter((l) => l.modified.isEmpty && l.original.length >= 3).map((l) => new fn(l.original, t, l)), a = new Set(e.filter((l) => l.original.isEmpty && l.modified.length >= 3).map((l) => new fn(l.modified, n, l))), o = /* @__PURE__ */ new Set();
  for (const l of s) {
    let u = -1, h;
    for (const f of a) {
      const m = l.computeSimilarity(f);
      m > u && (u = m, h = f);
    }
    if (u > 0.9 && h && (a.delete(h), i.push(new Le(l.range, h.range)), o.add(l.source), o.add(h.source)), !r.isValid())
      return { moves: i, excludedChanges: o };
  }
  return { moves: i, excludedChanges: o };
}
function Yl(e, t, n, r, i, s) {
  const a = [], o = new j1();
  for (const m of e)
    for (let d = m.original.startLineNumber; d < m.original.endLineNumberExclusive - 2; d++) {
      const p = `${t[d - 1]}:${t[d + 1 - 1]}:${t[d + 2 - 1]}`;
      o.add(p, { range: new U(d, d + 3) });
    }
  const l = [];
  e.sort($t((m) => m.modified.startLineNumber, Dt));
  for (const m of e) {
    let d = [];
    for (let p = m.modified.startLineNumber; p < m.modified.endLineNumberExclusive - 2; p++) {
      const b = `${n[p - 1]}:${n[p + 1 - 1]}:${n[p + 2 - 1]}`, N = new U(p, p + 3), L = [];
      o.forEach(b, ({ range: C }) => {
        for (const S of d)
          if (S.originalLineRange.endLineNumberExclusive + 1 === C.endLineNumberExclusive && S.modifiedLineRange.endLineNumberExclusive + 1 === N.endLineNumberExclusive) {
            S.originalLineRange = new U(
              S.originalLineRange.startLineNumber,
              C.endLineNumberExclusive
            ), S.modifiedLineRange = new U(
              S.modifiedLineRange.startLineNumber,
              N.endLineNumberExclusive
            ), L.push(S);
            return;
          }
        const R = {
          modifiedLineRange: N,
          originalLineRange: C
        };
        l.push(R), L.push(R);
      }), d = L;
    }
    if (!s.isValid())
      return [];
  }
  l.sort(Fa($t((m) => m.modifiedLineRange.length, Dt)));
  const u = new Ee(), h = new Ee();
  for (const m of l) {
    const d = m.modifiedLineRange.startLineNumber - m.originalLineRange.startLineNumber, p = u.subtractFrom(m.modifiedLineRange), b = h.subtractFrom(m.originalLineRange).getWithDelta(d), N = p.getIntersection(b);
    for (const L of N.ranges) {
      if (L.length < 3)
        continue;
      const C = L, R = L.delta(-d);
      a.push(new Le(R, C)), u.addRange(C), h.addRange(R);
    }
  }
  a.sort($t((m) => m.original.startLineNumber, Dt));
  const f = new rn(e);
  for (let m = 0; m < a.length; m++) {
    const d = a[m], p = f.findLastMonotonous((P) => P.original.startLineNumber <= d.original.startLineNumber), b = vt(e, (P) => P.modified.startLineNumber <= d.modified.startLineNumber), N = Math.max(d.original.startLineNumber - p.original.startLineNumber, d.modified.startLineNumber - b.modified.startLineNumber), L = f.findLastMonotonous((P) => P.original.startLineNumber < d.original.endLineNumberExclusive), C = vt(e, (P) => P.modified.startLineNumber < d.modified.endLineNumberExclusive), R = Math.max(L.original.endLineNumberExclusive - d.original.endLineNumberExclusive, C.modified.endLineNumberExclusive - d.modified.endLineNumberExclusive);
    let S;
    for (S = 0; S < N; S++) {
      const P = d.original.startLineNumber - S - 1, $ = d.modified.startLineNumber - S - 1;
      if (P > r.length || $ > i.length || u.contains($) || h.contains(P) || !gs(r[P - 1], i[$ - 1], s))
        break;
    }
    S > 0 && (h.addRange(new U(d.original.startLineNumber - S, d.original.startLineNumber)), u.addRange(new U(d.modified.startLineNumber - S, d.modified.startLineNumber)));
    let A;
    for (A = 0; A < R; A++) {
      const P = d.original.endLineNumberExclusive + A, $ = d.modified.endLineNumberExclusive + A;
      if (P > r.length || $ > i.length || u.contains($) || h.contains(P) || !gs(r[P - 1], i[$ - 1], s))
        break;
    }
    A > 0 && (h.addRange(new U(
      d.original.endLineNumberExclusive,
      d.original.endLineNumberExclusive + A
    )), u.addRange(new U(
      d.modified.endLineNumberExclusive,
      d.modified.endLineNumberExclusive + A
    ))), (S > 0 || A > 0) && (a[m] = new Le(new U(
      d.original.startLineNumber - S,
      d.original.endLineNumberExclusive + A
    ), new U(
      d.modified.startLineNumber - S,
      d.modified.endLineNumberExclusive + A
    )));
  }
  return a;
}
function gs(e, t, n) {
  if (e.trim() === t.trim())
    return !0;
  if (e.length > 300 && t.length > 300)
    return !1;
  const i = new fa().compute(new dn([e], new B(1, 1, 1, e.length), !1), new dn([t], new B(1, 1, 1, t.length), !1), n);
  let s = 0;
  const a = ne.invert(i.diffs, e.length);
  for (const h of a)
    h.seq1Range.forEach((f) => {
      sr(e.charCodeAt(f)) || s++;
    });
  function o(h) {
    let f = 0;
    for (let m = 0; m < e.length; m++)
      sr(h.charCodeAt(m)) || f++;
    return f;
  }
  const l = o(e.length > t.length ? e : t);
  return s / l > 0.6 && l > 10;
}
function Zl(e) {
  if (e.length === 0)
    return e;
  e.sort($t((n) => n.original.startLineNumber, Dt));
  const t = [e[0]];
  for (let n = 1; n < e.length; n++) {
    const r = t[t.length - 1], i = e[n], s = i.original.startLineNumber - r.original.endLineNumberExclusive, a = i.modified.startLineNumber - r.modified.endLineNumberExclusive;
    if (s >= 0 && a >= 0 && s + a <= 2) {
      t[t.length - 1] = r.join(i);
      continue;
    }
    t.push(i);
  }
  return t;
}
function Kl(e, t) {
  const n = new rn(e);
  return t = t.filter((r) => {
    const i = n.findLastMonotonous((o) => o.original.startLineNumber < r.original.endLineNumberExclusive) || new Le(new U(1, 1), new U(1, 1)), s = vt(e, (o) => o.modified.startLineNumber < r.modified.endLineNumberExclusive);
    return i !== s;
  }), t;
}
function ps(e, t, n) {
  let r = n;
  return r = bs(e, t, r), r = bs(e, t, r), r = eu(e, t, r), r;
}
function bs(e, t, n) {
  if (n.length === 0)
    return n;
  const r = [];
  r.push(n[0]);
  for (let s = 1; s < n.length; s++) {
    const a = r[r.length - 1];
    let o = n[s];
    if (o.seq1Range.isEmpty || o.seq2Range.isEmpty) {
      const l = o.seq1Range.start - a.seq1Range.endExclusive;
      let u;
      for (u = 1; u <= l && !(e.getElement(o.seq1Range.start - u) !== e.getElement(o.seq1Range.endExclusive - u) || t.getElement(o.seq2Range.start - u) !== t.getElement(o.seq2Range.endExclusive - u)); u++)
        ;
      if (u--, u === l) {
        r[r.length - 1] = new ne(new H(a.seq1Range.start, o.seq1Range.endExclusive - l), new H(a.seq2Range.start, o.seq2Range.endExclusive - l));
        continue;
      }
      o = o.delta(-u);
    }
    r.push(o);
  }
  const i = [];
  for (let s = 0; s < r.length - 1; s++) {
    const a = r[s + 1];
    let o = r[s];
    if (o.seq1Range.isEmpty || o.seq2Range.isEmpty) {
      const l = a.seq1Range.start - o.seq1Range.endExclusive;
      let u;
      for (u = 0; u < l && !(!e.isStronglyEqual(o.seq1Range.start + u, o.seq1Range.endExclusive + u) || !t.isStronglyEqual(o.seq2Range.start + u, o.seq2Range.endExclusive + u)); u++)
        ;
      if (u === l) {
        r[s + 1] = new ne(new H(o.seq1Range.start + l, a.seq1Range.endExclusive), new H(o.seq2Range.start + l, a.seq2Range.endExclusive));
        continue;
      }
      u > 0 && (o = o.delta(u));
    }
    i.push(o);
  }
  return r.length > 0 && i.push(r[r.length - 1]), i;
}
function eu(e, t, n) {
  if (!e.getBoundaryScore || !t.getBoundaryScore)
    return n;
  for (let r = 0; r < n.length; r++) {
    const i = r > 0 ? n[r - 1] : void 0, s = n[r], a = r + 1 < n.length ? n[r + 1] : void 0, o = new H(
      i ? i.seq1Range.endExclusive + 1 : 0,
      a ? a.seq1Range.start - 1 : e.length
    ), l = new H(
      i ? i.seq2Range.endExclusive + 1 : 0,
      a ? a.seq2Range.start - 1 : t.length
    );
    s.seq1Range.isEmpty ? n[r] = _s(s, e, t, o, l) : s.seq2Range.isEmpty && (n[r] = _s(s.swap(), t, e, l, o).swap());
  }
  return n;
}
function _s(e, t, n, r, i) {
  let a = 1;
  for (; e.seq1Range.start - a >= r.start && e.seq2Range.start - a >= i.start && n.isStronglyEqual(e.seq2Range.start - a, e.seq2Range.endExclusive - a) && a < 100; )
    a++;
  a--;
  let o = 0;
  for (; e.seq1Range.start + o < r.endExclusive && e.seq2Range.endExclusive + o < i.endExclusive && n.isStronglyEqual(e.seq2Range.start + o, e.seq2Range.endExclusive + o) && o < 100; )
    o++;
  if (a === 0 && o === 0)
    return e;
  let l = 0, u = -1;
  for (let h = -a; h <= o; h++) {
    const f = e.seq2Range.start + h, m = e.seq2Range.endExclusive + h, d = e.seq1Range.start + h, p = t.getBoundaryScore(d) + n.getBoundaryScore(f) + n.getBoundaryScore(m);
    p > u && (u = p, l = h);
  }
  return e.delta(l);
}
function tu(e, t, n) {
  const r = [];
  for (const i of n) {
    const s = r[r.length - 1];
    if (!s) {
      r.push(i);
      continue;
    }
    i.seq1Range.start - s.seq1Range.endExclusive <= 2 || i.seq2Range.start - s.seq2Range.endExclusive <= 2 ? r[r.length - 1] = new ne(s.seq1Range.join(i.seq1Range), s.seq2Range.join(i.seq2Range)) : r.push(i);
  }
  return r;
}
function nu(e, t, n) {
  const r = ne.invert(n, e.length), i = [];
  let s = new Ie(0, 0);
  function a(l, u) {
    if (l.offset1 < s.offset1 || l.offset2 < s.offset2)
      return;
    const h = e.findWordContaining(l.offset1), f = t.findWordContaining(l.offset2);
    if (!h || !f)
      return;
    let m = new ne(h, f);
    const d = m.intersect(u);
    let p = d.seq1Range.length, b = d.seq2Range.length;
    for (; r.length > 0; ) {
      const N = r[0];
      if (!(N.seq1Range.intersects(m.seq1Range) || N.seq2Range.intersects(m.seq2Range)))
        break;
      const C = e.findWordContaining(N.seq1Range.start), R = t.findWordContaining(N.seq2Range.start), S = new ne(C, R), A = S.intersect(N);
      if (p += A.seq1Range.length, b += A.seq2Range.length, m = m.join(S), m.seq1Range.endExclusive >= N.seq1Range.endExclusive)
        r.shift();
      else
        break;
    }
    p + b < (m.seq1Range.length + m.seq2Range.length) * 2 / 3 && i.push(m), s = m.getEndExclusives();
  }
  for (; r.length > 0; ) {
    const l = r.shift();
    l.seq1Range.isEmpty || (a(l.getStarts(), l), a(l.getEndExclusives().delta(-1), l));
  }
  return ru(n, i);
}
function ru(e, t) {
  const n = [];
  for (; e.length > 0 || t.length > 0; ) {
    const r = e[0], i = t[0];
    let s;
    r && (!i || r.seq1Range.start < i.seq1Range.start) ? s = e.shift() : s = t.shift(), n.length > 0 && n[n.length - 1].seq1Range.endExclusive >= s.seq1Range.start ? n[n.length - 1] = n[n.length - 1].join(s) : n.push(s);
  }
  return n;
}
function iu(e, t, n) {
  let r = n;
  if (r.length === 0)
    return r;
  let i = 0, s;
  do {
    s = !1;
    const a = [
      r[0]
    ];
    for (let o = 1; o < r.length; o++) {
      let h = function(m, d) {
        const p = new H(u.seq1Range.endExclusive, l.seq1Range.start);
        return e.getText(p).replace(/\s/g, "").length <= 4 && (m.seq1Range.length + m.seq2Range.length > 5 || d.seq1Range.length + d.seq2Range.length > 5);
      };
      const l = r[o], u = a[a.length - 1];
      h(u, l) ? (s = !0, a[a.length - 1] = a[a.length - 1].join(l)) : a.push(l);
    }
    r = a;
  } while (i++ < 10 && s);
  return r;
}
function su(e, t, n) {
  let r = n;
  if (r.length === 0)
    return r;
  let i = 0, s;
  do {
    s = !1;
    const o = [
      r[0]
    ];
    for (let l = 1; l < r.length; l++) {
      let f = function(d, p) {
        const b = new H(h.seq1Range.endExclusive, u.seq1Range.start);
        if (e.countLinesIn(b) > 5 || b.length > 500)
          return !1;
        const L = e.getText(b).trim();
        if (L.length > 20 || L.split(/\r\n|\r|\n/).length > 1)
          return !1;
        const C = e.countLinesIn(d.seq1Range), R = d.seq1Range.length, S = t.countLinesIn(d.seq2Range), A = d.seq2Range.length, P = e.countLinesIn(p.seq1Range), $ = p.seq1Range.length, D = t.countLinesIn(p.seq2Range), q = p.seq2Range.length, Q = 2 * 40 + 50;
        function k(v) {
          return Math.min(v, Q);
        }
        return Math.pow(Math.pow(k(C * 40 + R), 1.5) + Math.pow(k(S * 40 + A), 1.5), 1.5) + Math.pow(Math.pow(k(P * 40 + $), 1.5) + Math.pow(k(D * 40 + q), 1.5), 1.5) > (Q ** 1.5) ** 1.5 * 1.3;
      };
      const u = r[l], h = o[o.length - 1];
      f(h, u) ? (s = !0, o[o.length - 1] = o[o.length - 1].join(u)) : o.push(u);
    }
    r = o;
  } while (i++ < 10 && s);
  const a = [];
  return $a(r, (o, l, u) => {
    let h = l;
    function f(L) {
      return L.length > 0 && L.trim().length <= 3 && l.seq1Range.length + l.seq2Range.length > 100;
    }
    const m = e.extendToFullLines(l.seq1Range), d = e.getText(new H(m.start, l.seq1Range.start));
    f(d) && (h = h.deltaStart(-d.length));
    const p = e.getText(new H(l.seq1Range.endExclusive, m.endExclusive));
    f(p) && (h = h.deltaEnd(p.length));
    const b = ne.fromOffsetPairs(o ? o.getEndExclusives() : Ie.zero, u ? u.getStarts() : Ie.max), N = h.intersect(b);
    a.length > 0 && N.getStarts().equals(a[a.length - 1].getEndExclusives()) ? a[a.length - 1] = a[a.length - 1].join(N) : a.push(N);
  }), a;
}
class xs {
  constructor(t, n) {
    this.trimmedHash = t, this.lines = n;
  }
  getElement(t) {
    return this.trimmedHash[t];
  }
  get length() {
    return this.trimmedHash.length;
  }
  getBoundaryScore(t) {
    const n = t === 0 ? 0 : vs(this.lines[t - 1]), r = t === this.lines.length ? 0 : vs(this.lines[t]);
    return 1e3 - (n + r);
  }
  getText(t) {
    return this.lines.slice(t.start, t.endExclusive).join(`
`);
  }
  isStronglyEqual(t, n) {
    return this.lines[t] === this.lines[n];
  }
}
function vs(e) {
  let t = 0;
  for (; t < e.length && (e.charCodeAt(t) === 32 || e.charCodeAt(t) === 9); )
    t++;
  return t;
}
class au {
  constructor() {
    this.dynamicProgrammingDiffing = new Hl(), this.myersDiffingAlgorithm = new fa();
  }
  computeDiff(t, n, r) {
    if (t.length <= 1 && ka(t, n, (A, P) => A === P))
      return new nn([], [], !1);
    if (t.length === 1 && t[0].length === 0 || n.length === 1 && n[0].length === 0)
      return new nn([
        new Ue(new U(1, t.length + 1), new U(1, n.length + 1), [
          new ge(new B(
            1,
            1,
            t.length,
            t[t.length - 1].length + 1
          ), new B(
            1,
            1,
            n.length,
            n[n.length - 1].length + 1
          ))
        ])
      ], [], !1);
    const i = r.maxComputationTimeMs === 0 ? zt.instance : new zl(r.maxComputationTimeMs), s = !r.ignoreTrimWhitespace, a = /* @__PURE__ */ new Map();
    function o(A) {
      let P = a.get(A);
      return P === void 0 && (P = a.size, a.set(A, P)), P;
    }
    const l = t.map((A) => o(A.trim())), u = n.map((A) => o(A.trim())), h = new xs(l, t), f = new xs(u, n), m = h.length + f.length < 1700 ? this.dynamicProgrammingDiffing.compute(h, f, i, (A, P) => t[A] === n[P] ? n[P].length === 0 ? 0.1 : 1 + Math.log(1 + n[P].length) : 0.99) : this.myersDiffingAlgorithm.compute(h, f, i);
    let d = m.diffs, p = m.hitTimeout;
    d = ps(h, f, d), d = iu(h, f, d);
    const b = [], N = (A) => {
      if (s)
        for (let P = 0; P < A; P++) {
          const $ = L + P, D = C + P;
          if (t[$] !== n[D]) {
            const q = this.refineDiff(t, n, new ne(new H($, $ + 1), new H(D, D + 1)), i, s);
            for (const Q of q.mappings)
              b.push(Q);
            q.hitTimeout && (p = !0);
          }
        }
    };
    let L = 0, C = 0;
    for (const A of d) {
      Wt(() => A.seq1Range.start - L === A.seq2Range.start - C);
      const P = A.seq1Range.start - L;
      N(P), L = A.seq1Range.endExclusive, C = A.seq2Range.endExclusive;
      const $ = this.refineDiff(t, n, A, i, s);
      $.hitTimeout && (p = !0);
      for (const D of $.mappings)
        b.push(D);
    }
    N(t.length - L);
    const R = us(b, new Jt(t), new Jt(n));
    let S = [];
    return r.computeMoves && (S = this.computeMoves(R, t, n, l, u, i, s)), Wt(() => {
      function A($, D) {
        if ($.lineNumber < 1 || $.lineNumber > D.length)
          return !1;
        const q = D[$.lineNumber - 1];
        return !($.column < 1 || $.column > q.length + 1);
      }
      function P($, D) {
        return !($.startLineNumber < 1 || $.startLineNumber > D.length + 1 || $.endLineNumberExclusive < 1 || $.endLineNumberExclusive > D.length + 1);
      }
      for (const $ of R) {
        if (!$.innerChanges)
          return !1;
        for (const D of $.innerChanges)
          if (!(A(D.modifiedRange.getStartPosition(), n) && A(D.modifiedRange.getEndPosition(), n) && A(D.originalRange.getStartPosition(), t) && A(D.originalRange.getEndPosition(), t)))
            return !1;
        if (!P($.modified, n) || !P($.original, t))
          return !1;
      }
      return !0;
    }), new nn(R, S, p);
  }
  computeMoves(t, n, r, i, s, a, o) {
    return Xl(t, n, r, i, s, a).map((h) => {
      const f = this.refineDiff(n, r, new ne(h.original.toOffsetRange(), h.modified.toOffsetRange()), a, o), m = us(f.mappings, new Jt(n), new Jt(r), !0);
      return new Er(h, m);
    });
  }
  refineDiff(t, n, r, i, s) {
    const o = ou(r).toRangeMapping2(t, n), l = new dn(t, o.originalRange, s), u = new dn(n, o.modifiedRange, s), h = l.length + u.length < 500 ? this.dynamicProgrammingDiffing.compute(l, u, i) : this.myersDiffingAlgorithm.compute(l, u, i);
    let f = h.diffs;
    return f = ps(l, u, f), f = nu(l, u, f), f = tu(l, u, f), f = su(l, u, f), {
      mappings: f.map((d) => new ge(l.translateRange(d.seq1Range), u.translateRange(d.seq2Range))),
      hitTimeout: h.hitTimeout
    };
  }
}
function ou(e) {
  return new Le(new U(e.seq1Range.start + 1, e.seq1Range.endExclusive + 1), new U(e.seq2Range.start + 1, e.seq2Range.endExclusive + 1));
}
const Fn = {
  getLegacy: () => new ql(),
  getDefault: () => new au()
};
function Xe(e, t) {
  const n = Math.pow(10, t);
  return Math.round(e * n) / n;
}
class ee {
  constructor(t, n, r, i = 1) {
    this._rgbaBrand = void 0, this.r = Math.min(255, Math.max(0, t)) | 0, this.g = Math.min(255, Math.max(0, n)) | 0, this.b = Math.min(255, Math.max(0, r)) | 0, this.a = Xe(Math.max(Math.min(1, i), 0), 3);
  }
  static equals(t, n) {
    return t.r === n.r && t.g === n.g && t.b === n.b && t.a === n.a;
  }
}
class we {
  constructor(t, n, r, i) {
    this._hslaBrand = void 0, this.h = Math.max(Math.min(360, t), 0) | 0, this.s = Xe(Math.max(Math.min(1, n), 0), 3), this.l = Xe(Math.max(Math.min(1, r), 0), 3), this.a = Xe(Math.max(Math.min(1, i), 0), 3);
  }
  static equals(t, n) {
    return t.h === n.h && t.s === n.s && t.l === n.l && t.a === n.a;
  }
  static fromRGBA(t) {
    const n = t.r / 255, r = t.g / 255, i = t.b / 255, s = t.a, a = Math.max(n, r, i), o = Math.min(n, r, i);
    let l = 0, u = 0;
    const h = (o + a) / 2, f = a - o;
    if (f > 0) {
      switch (u = Math.min(h <= 0.5 ? f / (2 * h) : f / (2 - 2 * h), 1), a) {
        case n:
          l = (r - i) / f + (r < i ? 6 : 0);
          break;
        case r:
          l = (i - n) / f + 2;
          break;
        case i:
          l = (n - r) / f + 4;
          break;
      }
      l *= 60, l = Math.round(l);
    }
    return new we(l, u, h, s);
  }
  static _hue2rgb(t, n, r) {
    return r < 0 && (r += 1), r > 1 && (r -= 1), r < 1 / 6 ? t + (n - t) * 6 * r : r < 1 / 2 ? n : r < 2 / 3 ? t + (n - t) * (2 / 3 - r) * 6 : t;
  }
  static toRGBA(t) {
    const n = t.h / 360, { s: r, l: i, a: s } = t;
    let a, o, l;
    if (r === 0)
      a = o = l = i;
    else {
      const u = i < 0.5 ? i * (1 + r) : i + r - i * r, h = 2 * i - u;
      a = we._hue2rgb(h, u, n + 1 / 3), o = we._hue2rgb(h, u, n), l = we._hue2rgb(h, u, n - 1 / 3);
    }
    return new ee(Math.round(a * 255), Math.round(o * 255), Math.round(l * 255), s);
  }
}
class ft {
  constructor(t, n, r, i) {
    this._hsvaBrand = void 0, this.h = Math.max(Math.min(360, t), 0) | 0, this.s = Xe(Math.max(Math.min(1, n), 0), 3), this.v = Xe(Math.max(Math.min(1, r), 0), 3), this.a = Xe(Math.max(Math.min(1, i), 0), 3);
  }
  static equals(t, n) {
    return t.h === n.h && t.s === n.s && t.v === n.v && t.a === n.a;
  }
  static fromRGBA(t) {
    const n = t.r / 255, r = t.g / 255, i = t.b / 255, s = Math.max(n, r, i), a = Math.min(n, r, i), o = s - a, l = s === 0 ? 0 : o / s;
    let u;
    return o === 0 ? u = 0 : s === n ? u = ((r - i) / o % 6 + 6) % 6 : s === r ? u = (i - n) / o + 2 : u = (n - r) / o + 4, new ft(Math.round(u * 60), l, s, t.a);
  }
  static toRGBA(t) {
    const { h: n, s: r, v: i, a: s } = t, a = i * r, o = a * (1 - Math.abs(n / 60 % 2 - 1)), l = i - a;
    let [u, h, f] = [0, 0, 0];
    return n < 60 ? (u = a, h = o) : n < 120 ? (u = o, h = a) : n < 180 ? (h = a, f = o) : n < 240 ? (h = o, f = a) : n < 300 ? (u = o, f = a) : n <= 360 && (u = a, f = o), u = Math.round((u + l) * 255), h = Math.round((h + l) * 255), f = Math.round((f + l) * 255), new ee(u, h, f, s);
  }
}
var z;
let mn = (z = class {
  static fromHex(t) {
    return z.Format.CSS.parseHex(t) || z.red;
  }
  static equals(t, n) {
    return !t && !n ? !0 : !t || !n ? !1 : t.equals(n);
  }
  get hsla() {
    return this._hsla ? this._hsla : we.fromRGBA(this.rgba);
  }
  get hsva() {
    return this._hsva ? this._hsva : ft.fromRGBA(this.rgba);
  }
  constructor(t) {
    if (t)
      if (t instanceof ee)
        this.rgba = t;
      else if (t instanceof we)
        this._hsla = t, this.rgba = we.toRGBA(t);
      else if (t instanceof ft)
        this._hsva = t, this.rgba = ft.toRGBA(t);
      else
        throw new Error("Invalid color ctor argument");
    else throw new Error("Color needs a value");
  }
  equals(t) {
    return !!t && ee.equals(this.rgba, t.rgba) && we.equals(this.hsla, t.hsla) && ft.equals(this.hsva, t.hsva);
  }
  getRelativeLuminance() {
    const t = z._relativeLuminanceForComponent(this.rgba.r), n = z._relativeLuminanceForComponent(this.rgba.g), r = z._relativeLuminanceForComponent(this.rgba.b), i = 0.2126 * t + 0.7152 * n + 0.0722 * r;
    return Xe(i, 4);
  }
  reduceRelativeLuminace(t, n) {
    let { r, g: i, b: s } = t.rgba, a = this.getContrastRatio(t);
    for (; a < n && (r > 0 || i > 0 || s > 0); )
      r -= Math.max(0, Math.ceil(r * 0.1)), i -= Math.max(0, Math.ceil(i * 0.1)), s -= Math.max(0, Math.ceil(s * 0.1)), a = this.getContrastRatio(new z(new ee(r, i, s)));
    return new z(new ee(r, i, s));
  }
  increaseRelativeLuminace(t, n) {
    let { r, g: i, b: s } = t.rgba, a = this.getContrastRatio(t);
    for (; a < n && (r < 255 || i < 255 || s < 255); )
      r = Math.min(255, r + Math.ceil((255 - r) * 0.1)), i = Math.min(255, i + Math.ceil((255 - i) * 0.1)), s = Math.min(255, s + Math.ceil((255 - s) * 0.1)), a = this.getContrastRatio(new z(new ee(r, i, s)));
    return new z(new ee(r, i, s));
  }
  static _relativeLuminanceForComponent(t) {
    const n = t / 255;
    return n <= 0.03928 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4);
  }
  getContrastRatio(t) {
    const n = this.getRelativeLuminance(), r = t.getRelativeLuminance();
    return n > r ? (n + 0.05) / (r + 0.05) : (r + 0.05) / (n + 0.05);
  }
  isDarker() {
    return (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3 < 128;
  }
  isLighter() {
    return (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3 >= 128;
  }
  isLighterThan(t) {
    const n = this.getRelativeLuminance(), r = t.getRelativeLuminance();
    return n > r;
  }
  isDarkerThan(t) {
    const n = this.getRelativeLuminance(), r = t.getRelativeLuminance();
    return n < r;
  }
  ensureConstrast(t, n) {
    const r = this.getRelativeLuminance(), i = t.getRelativeLuminance();
    if (this.getContrastRatio(t) < n) {
      if (i < r) {
        const l = this.reduceRelativeLuminace(t, n), u = this.getContrastRatio(l);
        if (u < n) {
          const h = this.increaseRelativeLuminace(t, n), f = this.getContrastRatio(h);
          return u > f ? l : h;
        }
        return l;
      }
      const a = this.increaseRelativeLuminace(t, n), o = this.getContrastRatio(a);
      if (o < n) {
        const l = this.reduceRelativeLuminace(t, n), u = this.getContrastRatio(l);
        return o > u ? a : l;
      }
      return a;
    }
    return t;
  }
  lighten(t) {
    return new z(new we(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * t, this.hsla.a));
  }
  darken(t) {
    return new z(new we(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * t, this.hsla.a));
  }
  transparent(t) {
    const { r: n, g: r, b: i, a: s } = this.rgba;
    return new z(new ee(n, r, i, s * t));
  }
  isTransparent() {
    return this.rgba.a === 0;
  }
  isOpaque() {
    return this.rgba.a === 1;
  }
  opposite() {
    return new z(new ee(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
  }
  blend(t) {
    const n = t.rgba, r = this.rgba.a, i = n.a, s = r + i * (1 - r);
    if (s < 1e-6)
      return z.transparent;
    const a = this.rgba.r * r / s + n.r * i * (1 - r) / s, o = this.rgba.g * r / s + n.g * i * (1 - r) / s, l = this.rgba.b * r / s + n.b * i * (1 - r) / s;
    return new z(new ee(a, o, l, s));
  }
  makeOpaque(t) {
    if (this.isOpaque() || t.rgba.a !== 1)
      return this;
    const { r: n, g: r, b: i, a: s } = this.rgba;
    return new z(new ee(
      t.rgba.r - s * (t.rgba.r - n),
      t.rgba.g - s * (t.rgba.g - r),
      t.rgba.b - s * (t.rgba.b - i),
      1
    ));
  }
  flatten(...t) {
    const n = t.reduceRight((r, i) => z._flatten(i, r));
    return z._flatten(this, n);
  }
  static _flatten(t, n) {
    const r = 1 - t.rgba.a;
    return new z(new ee(
      r * n.rgba.r + t.rgba.a * t.rgba.r,
      r * n.rgba.g + t.rgba.a * t.rgba.g,
      r * n.rgba.b + t.rgba.a * t.rgba.b
    ));
  }
  toString() {
    return this._toString || (this._toString = z.Format.CSS.format(this)), this._toString;
  }
  static getLighterColor(t, n, r) {
    if (t.isLighterThan(n))
      return t;
    r = r || 0.5;
    const i = t.getRelativeLuminance(), s = n.getRelativeLuminance();
    return r = r * (s - i) / s, t.lighten(r);
  }
  static getDarkerColor(t, n, r) {
    if (t.isDarkerThan(n))
      return t;
    r = r || 0.5;
    const i = t.getRelativeLuminance(), s = n.getRelativeLuminance();
    return r = r * (i - s) / i, t.darken(r);
  }
}, z.white = new z(new ee(255, 255, 255, 1)), z.black = new z(new ee(0, 0, 0, 1)), z.red = new z(new ee(255, 0, 0, 1)), z.blue = new z(new ee(0, 0, 255, 1)), z.green = new z(new ee(0, 255, 0, 1)), z.cyan = new z(new ee(0, 255, 255, 1)), z.lightgrey = new z(new ee(211, 211, 211, 1)), z.transparent = new z(new ee(0, 0, 0, 0)), z);
(function(e) {
  (function(t) {
    (function(n) {
      function r(d) {
        return d.rgba.a === 1 ? `rgb(${d.rgba.r}, ${d.rgba.g}, ${d.rgba.b})` : e.Format.CSS.formatRGBA(d);
      }
      n.formatRGB = r;
      function i(d) {
        return `rgba(${d.rgba.r}, ${d.rgba.g}, ${d.rgba.b}, ${+d.rgba.a.toFixed(2)})`;
      }
      n.formatRGBA = i;
      function s(d) {
        return d.hsla.a === 1 ? `hsl(${d.hsla.h}, ${(d.hsla.s * 100).toFixed(2)}%, ${(d.hsla.l * 100).toFixed(2)}%)` : e.Format.CSS.formatHSLA(d);
      }
      n.formatHSL = s;
      function a(d) {
        return `hsla(${d.hsla.h}, ${(d.hsla.s * 100).toFixed(2)}%, ${(d.hsla.l * 100).toFixed(2)}%, ${d.hsla.a.toFixed(2)})`;
      }
      n.formatHSLA = a;
      function o(d) {
        const p = d.toString(16);
        return p.length !== 2 ? "0" + p : p;
      }
      function l(d) {
        return `#${o(d.rgba.r)}${o(d.rgba.g)}${o(d.rgba.b)}`;
      }
      n.formatHex = l;
      function u(d, p = !1) {
        return p && d.rgba.a === 1 ? e.Format.CSS.formatHex(d) : `#${o(d.rgba.r)}${o(d.rgba.g)}${o(d.rgba.b)}${o(Math.round(d.rgba.a * 255))}`;
      }
      n.formatHexA = u;
      function h(d) {
        return d.isOpaque() ? e.Format.CSS.formatHex(d) : e.Format.CSS.formatRGBA(d);
      }
      n.format = h;
      function f(d) {
        const p = d.length;
        if (p === 0 || d.charCodeAt(0) !== 35)
          return null;
        if (p === 7) {
          const b = 16 * m(d.charCodeAt(1)) + m(d.charCodeAt(2)), N = 16 * m(d.charCodeAt(3)) + m(d.charCodeAt(4)), L = 16 * m(d.charCodeAt(5)) + m(d.charCodeAt(6));
          return new e(new ee(b, N, L, 1));
        }
        if (p === 9) {
          const b = 16 * m(d.charCodeAt(1)) + m(d.charCodeAt(2)), N = 16 * m(d.charCodeAt(3)) + m(d.charCodeAt(4)), L = 16 * m(d.charCodeAt(5)) + m(d.charCodeAt(6)), C = 16 * m(d.charCodeAt(7)) + m(d.charCodeAt(8));
          return new e(new ee(b, N, L, C / 255));
        }
        if (p === 4) {
          const b = m(d.charCodeAt(1)), N = m(d.charCodeAt(2)), L = m(d.charCodeAt(3));
          return new e(new ee(16 * b + b, 16 * N + N, 16 * L + L));
        }
        if (p === 5) {
          const b = m(d.charCodeAt(1)), N = m(d.charCodeAt(2)), L = m(d.charCodeAt(3)), C = m(d.charCodeAt(4));
          return new e(new ee(16 * b + b, 16 * N + N, 16 * L + L, (16 * C + C) / 255));
        }
        return null;
      }
      n.parseHex = f;
      function m(d) {
        switch (d) {
          case 48:
            return 0;
          case 49:
            return 1;
          case 50:
            return 2;
          case 51:
            return 3;
          case 52:
            return 4;
          case 53:
            return 5;
          case 54:
            return 6;
          case 55:
            return 7;
          case 56:
            return 8;
          case 57:
            return 9;
          case 97:
            return 10;
          case 65:
            return 10;
          case 98:
            return 11;
          case 66:
            return 11;
          case 99:
            return 12;
          case 67:
            return 12;
          case 100:
            return 13;
          case 68:
            return 13;
          case 101:
            return 14;
          case 69:
            return 14;
          case 102:
            return 15;
          case 70:
            return 15;
        }
        return 0;
      }
    })(t.CSS || (t.CSS = {}));
  })(e.Format || (e.Format = {}));
})(mn || (mn = {}));
function da(e) {
  const t = [];
  for (const n of e) {
    const r = Number(n);
    (r || r === 0 && n.replace(/\s/g, "") !== "") && t.push(r);
  }
  return t;
}
function kr(e, t, n, r) {
  return {
    red: e / 255,
    blue: n / 255,
    green: t / 255,
    alpha: r
  };
}
function yt(e, t) {
  const n = t.index, r = t[0].length;
  if (!n)
    return;
  const i = e.positionAt(n);
  return {
    startLineNumber: i.lineNumber,
    startColumn: i.column,
    endLineNumber: i.lineNumber,
    endColumn: i.column + r
  };
}
function lu(e, t) {
  if (!e)
    return;
  const n = mn.Format.CSS.parseHex(t);
  if (n)
    return {
      range: e,
      color: kr(n.rgba.r, n.rgba.g, n.rgba.b, n.rgba.a)
    };
}
function ws(e, t, n) {
  if (!e || t.length !== 1)
    return;
  const i = t[0].values(), s = da(i);
  return {
    range: e,
    color: kr(s[0], s[1], s[2], n ? s[3] : 1)
  };
}
function Ls(e, t, n) {
  if (!e || t.length !== 1)
    return;
  const i = t[0].values(), s = da(i), a = new mn(new we(
    s[0],
    s[1] / 100,
    s[2] / 100,
    n ? s[3] : 1
  ));
  return {
    range: e,
    color: kr(a.rgba.r, a.rgba.g, a.rgba.b, a.rgba.a)
  };
}
function Et(e, t) {
  return typeof e == "string" ? [...e.matchAll(t)] : e.findMatches(t);
}
function uu(e) {
  const t = [], r = Et(e, /\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm);
  if (r.length > 0)
    for (const i of r) {
      const s = i.filter((u) => u !== void 0), a = s[1], o = s[2];
      if (!o)
        continue;
      let l;
      if (a === "rgb") {
        const u = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;
        l = ws(yt(e, i), Et(o, u), !1);
      } else if (a === "rgba") {
        const u = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        l = ws(yt(e, i), Et(o, u), !0);
      } else if (a === "hsl") {
        const u = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;
        l = Ls(yt(e, i), Et(o, u), !1);
      } else if (a === "hsla") {
        const u = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        l = Ls(yt(e, i), Et(o, u), !0);
      } else a === "#" && (l = lu(yt(e, i), a + o));
      l && t.push(l);
    }
  return t;
}
function cu(e) {
  return !e || typeof e.getValue != "function" || typeof e.positionAt != "function" ? [] : uu(e);
}
const Cs = new RegExp("\\bMARK:\\s*(.*)$", "d"), hu = /^-+|-+$/g;
function fu(e, t) {
  var r;
  let n = [];
  if (t.findRegionSectionHeaders && ((r = t.foldingRules) != null && r.markers)) {
    const i = du(e, t);
    n = n.concat(i);
  }
  if (t.findMarkSectionHeaders) {
    const i = mu(e);
    n = n.concat(i);
  }
  return n;
}
function du(e, t) {
  const n = [], r = e.getLineCount();
  for (let i = 1; i <= r; i++) {
    const s = e.getLineContent(i), a = s.match(t.foldingRules.markers.start);
    if (a) {
      const o = { startLineNumber: i, startColumn: a[0].length + 1, endLineNumber: i, endColumn: s.length + 1 };
      if (o.endColumn > o.startColumn) {
        const l = {
          range: o,
          ...ma(s.substring(a[0].length)),
          shouldBeInComments: !1
        };
        (l.text || l.hasSeparatorLine) && n.push(l);
      }
    }
  }
  return n;
}
function mu(e) {
  const t = [], n = e.getLineCount();
  for (let r = 1; r <= n; r++) {
    const i = e.getLineContent(r);
    gu(i, r, t);
  }
  return t;
}
function gu(e, t, n) {
  Cs.lastIndex = 0;
  const r = Cs.exec(e);
  if (r) {
    const i = r.indices[1][0] + 1, s = r.indices[1][1] + 1, a = { startLineNumber: t, startColumn: i, endLineNumber: t, endColumn: s };
    if (a.endColumn > a.startColumn) {
      const o = {
        range: a,
        ...ma(r[1]),
        shouldBeInComments: !0
      };
      (o.text || o.hasSeparatorLine) && n.push(o);
    }
  }
}
function ma(e) {
  e = e.trim();
  const t = e.startsWith("-");
  return e = e.replace(hu, ""), { text: e, hasSeparatorLine: t };
}
function He(e) {
  return e === 47 || e === 92;
}
function ga(e) {
  return e.replace(/[\\/]/g, J.sep);
}
function pu(e) {
  return e.indexOf("/") === -1 && (e = ga(e)), /^[a-zA-Z]:(\/|$)/.test(e) && (e = "/" + e), e;
}
function Ss(e, t = J.sep) {
  if (!e)
    return "";
  const n = e.length, r = e.charCodeAt(0);
  if (He(r)) {
    if (He(e.charCodeAt(1)) && !He(e.charCodeAt(2))) {
      let s = 3;
      const a = s;
      for (; s < n && !He(e.charCodeAt(s)); s++)
        ;
      if (a !== s && !He(e.charCodeAt(s + 1))) {
        for (s += 1; s < n; s++)
          if (He(e.charCodeAt(s)))
            return e.slice(0, s + 1).replace(/[\\/]/g, t);
      }
    }
    return t;
  } else if (bu(r) && e.charCodeAt(1) === 58)
    return He(e.charCodeAt(2)) ? e.slice(0, 2) + t : e.slice(0, 2);
  let i = e.indexOf("://");
  if (i !== -1) {
    for (i += 3; i < n; i++)
      if (He(e.charCodeAt(i)))
        return e.slice(0, i + 1);
  }
  return "";
}
function As(e, t, n, r = en) {
  if (e === t)
    return !0;
  if (!e || !t || t.length > e.length)
    return !1;
  if (n) {
    if (!vo(e, t))
      return !1;
    if (t.length === e.length)
      return !0;
    let s = t.length;
    return t.charAt(t.length - 1) === r && s--, e.charAt(s) === r;
  }
  return t.charAt(t.length - 1) !== r && (t += r), e.indexOf(t) === 0;
}
function bu(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
var ce;
(function(e) {
  e.inMemory = "inmemory", e.vscode = "vscode", e.internal = "private", e.walkThrough = "walkThrough", e.walkThroughSnippet = "walkThroughSnippet", e.http = "http", e.https = "https", e.file = "file", e.mailto = "mailto", e.untitled = "untitled", e.data = "data", e.command = "command", e.vscodeRemote = "vscode-remote", e.vscodeRemoteResource = "vscode-remote-resource", e.vscodeManagedRemoteResource = "vscode-managed-remote-resource", e.vscodeUserData = "vscode-userdata", e.vscodeCustomEditor = "vscode-custom-editor", e.vscodeNotebookCell = "vscode-notebook-cell", e.vscodeNotebookCellMetadata = "vscode-notebook-cell-metadata", e.vscodeNotebookCellMetadataDiff = "vscode-notebook-cell-metadata-diff", e.vscodeNotebookCellOutput = "vscode-notebook-cell-output", e.vscodeNotebookCellOutputDiff = "vscode-notebook-cell-output-diff", e.vscodeNotebookMetadata = "vscode-notebook-metadata", e.vscodeInteractiveInput = "vscode-interactive-input", e.vscodeSettings = "vscode-settings", e.vscodeWorkspaceTrust = "vscode-workspace-trust", e.vscodeTerminal = "vscode-terminal", e.vscodeChatCodeBlock = "vscode-chat-code-block", e.vscodeChatCodeCompareBlock = "vscode-chat-code-compare-block", e.vscodeChatSesssion = "vscode-chat-editor", e.webviewPanel = "webview-panel", e.vscodeWebview = "vscode-webview", e.extension = "extension", e.vscodeFileResource = "vscode-file", e.tmp = "tmp", e.vsls = "vsls", e.vscodeSourceControl = "vscode-scm", e.commentsInput = "comment", e.codeSetting = "code-setting", e.outputChannel = "output";
})(ce || (ce = {}));
const _u = "tkn";
class xu {
  constructor() {
    this._hosts = /* @__PURE__ */ Object.create(null), this._ports = /* @__PURE__ */ Object.create(null), this._connectionTokens = /* @__PURE__ */ Object.create(null), this._preferredWebSchema = "http", this._delegate = null, this._serverRootPath = "/";
  }
  setPreferredWebSchema(t) {
    this._preferredWebSchema = t;
  }
  setDelegate(t) {
    this._delegate = t;
  }
  setServerRootPath(t, n) {
    this._serverRootPath = wu(t, n);
  }
  getServerRootPath() {
    return this._serverRootPath;
  }
  get _remoteResourcesPath() {
    return J.join(this._serverRootPath, ce.vscodeRemoteResource);
  }
  set(t, n, r) {
    this._hosts[t] = n, this._ports[t] = r;
  }
  setConnectionToken(t, n) {
    this._connectionTokens[t] = n;
  }
  getPreferredWebSchema() {
    return this._preferredWebSchema;
  }
  rewrite(t) {
    if (this._delegate)
      try {
        return this._delegate(t);
      } catch (o) {
        return Pt(o), t;
      }
    const n = t.authority;
    let r = this._hosts[n];
    r && r.indexOf(":") !== -1 && r.indexOf("[") === -1 && (r = `[${r}]`);
    const i = this._ports[n], s = this._connectionTokens[n];
    let a = `path=${encodeURIComponent(t.path)}`;
    return typeof s == "string" && (a += `&${_u}=${encodeURIComponent(s)}`), _e.from({
      scheme: io ? this._preferredWebSchema : ce.vscodeRemoteResource,
      authority: `${r}:${i}`,
      path: this._remoteResourcesPath,
      query: a
    });
  }
}
const vu = new xu();
function wu(e, t) {
  return J.join(t ?? "/", `${e.quality ?? "oss"}-${e.commit ?? "dev"}`);
}
const Lu = "vscode-app", bt = class bt {
  constructor() {
    this.staticBrowserUris = new qn(), this.appResourcePathUrls = /* @__PURE__ */ new Map();
  }
  registerAppResourcePathUrl(t, n) {
    this.appResourcePathUrls.set(t, n);
  }
  toUrl(t) {
    var r;
    let n = this.appResourcePathUrls.get(t);
    return typeof n == "function" && (n = n()), new URL(n ?? t, ((r = globalThis.location) == null ? void 0 : r.href) ?? "file:///home/jazzpirate/work/Software/sTeX/iMMT/source/ts/editor/node_modules/monaco-editor-wrapper/dist/workers/cssWorker-es.js").toString();
  }
  asBrowserUri(t) {
    const n = this.toUri(t, { toUrl: this.toUrl.bind(this) });
    return this.uriToBrowserUri(n);
  }
  uriToBrowserUri(t) {
    return t.scheme === ce.vscodeRemote ? vu.rewrite(t) : t.scheme === ce.file && (ro || ao === `${ce.vscodeFileResource}://${bt.FALLBACK_AUTHORITY}`) ? t.with({
      scheme: ce.vscodeFileResource,
      authority: t.authority || bt.FALLBACK_AUTHORITY,
      query: null,
      fragment: null
    }) : this.staticBrowserUris.get(t) ?? t;
  }
  asFileUri(t) {
    const n = this.toUri(t, { toUrl: this.toUrl.bind(this) });
    return this.uriToFileUri(n);
  }
  uriToFileUri(t) {
    return t.scheme === ce.vscodeFileResource ? t.with({
      scheme: ce.file,
      authority: t.authority !== bt.FALLBACK_AUTHORITY ? t.authority : null,
      query: null,
      fragment: null
    }) : t;
  }
  toUri(t, n) {
    if (_e.isUri(t))
      return t;
    if (globalThis._VSCODE_FILE_ROOT) {
      const r = globalThis._VSCODE_FILE_ROOT;
      if (/^\w[\w\d+.-]*:\/\//.test(r))
        return _e.joinPath(_e.parse(r, !0), t);
      const i = nl(r, t);
      return _e.file(i);
    }
    return _e.parse(n.toUrl(t));
  }
  registerStaticBrowserUri(t, n) {
    return this.staticBrowserUris.set(t, n), Bt(() => {
      this.staticBrowserUris.get(t) === n && this.staticBrowserUris.delete(t);
    });
  }
  getRegisteredBrowserUris() {
    return this.staticBrowserUris.keys();
  }
};
bt.FALLBACK_AUTHORITY = Lu;
let ar = bt;
new ar();
var Ns;
(function(e) {
  const t = /* @__PURE__ */ new Map([
    ["1", { "Cross-Origin-Opener-Policy": "same-origin" }],
    ["2", { "Cross-Origin-Embedder-Policy": "require-corp" }],
    ["3", { "Cross-Origin-Opener-Policy": "same-origin", "Cross-Origin-Embedder-Policy": "require-corp" }]
  ]);
  e.CoopAndCoep = Object.freeze(t.get("3"));
  const n = "vscode-coi";
  function r(s) {
    let a;
    typeof s == "string" ? a = new URL(s).searchParams : s instanceof URL ? a = s.searchParams : _e.isUri(s) && (a = new URL(s.toString(!0)).searchParams);
    const o = a == null ? void 0 : a.get(n);
    if (o)
      return t.get(o);
  }
  e.getHeadersFromQuery = r;
  function i(s, a, o) {
    if (!globalThis.crossOriginIsolated)
      return;
    const l = a && o ? "3" : o ? "2" : "1";
    s instanceof URLSearchParams ? s.set(n, l) : s[n] = l;
  }
  e.addSearchParam = i;
})(Ns || (Ns = {}));
function De(e) {
  return hn(e, !0);
}
class Cu {
  constructor(t) {
    this._ignorePathCasing = t;
  }
  compare(t, n, r = !1) {
    return t === n ? 0 : bo(this.getComparisonKey(t, r), this.getComparisonKey(n, r));
  }
  isEqual(t, n, r = !1) {
    return t === n ? !0 : !t || !n ? !1 : this.getComparisonKey(t, r) === this.getComparisonKey(n, r);
  }
  getComparisonKey(t, n = !1) {
    return t.with({
      path: this._ignorePathCasing(t) ? t.path.toLowerCase() : void 0,
      fragment: n ? null : void 0
    }).toString();
  }
  ignorePathCasing(t) {
    return this._ignorePathCasing(t);
  }
  isEqualOrParent(t, n, r = !1) {
    if (t.scheme === n.scheme) {
      if (t.scheme === ce.file)
        return As(De(t), De(n), this._ignorePathCasing(t)) && t.query === n.query && (r || t.fragment === n.fragment);
      if (Rs(t.authority, n.authority))
        return As(t.path, n.path, this._ignorePathCasing(t), "/") && t.query === n.query && (r || t.fragment === n.fragment);
    }
    return !1;
  }
  joinPath(t, ...n) {
    return _e.joinPath(t, ...n);
  }
  basenameOrAuthority(t) {
    return Su(t) || t.authority;
  }
  basename(t) {
    return J.basename(t.path);
  }
  extname(t) {
    return J.extname(t.path);
  }
  dirname(t) {
    if (t.path.length === 0)
      return t;
    let n;
    return t.scheme === ce.file ? n = _e.file(sl(De(t))).path : (n = J.dirname(t.path), t.authority && n.length && n.charCodeAt(0) !== 47 && (console.error(`dirname("${t.toString})) resulted in a relative path`), n = "/")), t.with({
      path: n
    });
  }
  normalizePath(t) {
    if (!t.path.length)
      return t;
    let n;
    return t.scheme === ce.file ? n = _e.file(tl(De(t))).path : n = J.normalize(t.path), t.with({
      path: n
    });
  }
  relativePath(t, n) {
    if (t.scheme !== n.scheme || !Rs(t.authority, n.authority))
      return;
    if (t.scheme === ce.file) {
      const s = il(De(t), De(n));
      return Ct ? ga(s) : s;
    }
    let r = t.path || "/";
    const i = n.path || "/";
    if (this._ignorePathCasing(t)) {
      let s = 0;
      for (const a = Math.min(r.length, i.length); s < a && !(r.charCodeAt(s) !== i.charCodeAt(s) && r.charAt(s).toLowerCase() !== i.charAt(s).toLowerCase()); s++)
        ;
      r = i.substr(0, s) + r.substr(s);
    }
    return J.relative(r, i);
  }
  resolvePath(t, n) {
    if (t.scheme === ce.file) {
      const r = _e.file(rl(De(t), n));
      return t.with({
        authority: r.authority,
        path: r.path
      });
    }
    return n = pu(n), t.with({
      path: J.resolve(t.path, n)
    });
  }
  isAbsolutePath(t) {
    return !!t.path && t.path[0] === "/";
  }
  isEqualAuthority(t, n) {
    return t === n || t !== void 0 && n !== void 0 && xo(t, n);
  }
  hasTrailingPathSeparator(t, n = en) {
    if (t.scheme === ce.file) {
      const r = De(t);
      return r.length > Ss(r).length && r[r.length - 1] === n;
    } else {
      const r = t.path;
      return r.length > 1 && r.charCodeAt(r.length - 1) === 47 && !/^[a-zA-Z]:(\/$|\\$)/.test(t.fsPath);
    }
  }
  removeTrailingPathSeparator(t, n = en) {
    return ys(t, n) ? t.with({ path: t.path.substr(0, t.path.length - 1) }) : t;
  }
  addTrailingPathSeparator(t, n = en) {
    let r = !1;
    if (t.scheme === ce.file) {
      const i = De(t);
      r = i !== void 0 && i.length === Ss(i).length && i[i.length - 1] === n;
    } else {
      n = "/";
      const i = t.path;
      r = i.length === 1 && i.charCodeAt(i.length - 1) === 47;
    }
    return !r && !ys(t, n) ? t.with({ path: t.path + "/" }) : t;
  }
}
const T = new Cu(() => !1);
T.isEqual.bind(T);
T.isEqualOrParent.bind(T);
T.getComparisonKey.bind(T);
T.basenameOrAuthority.bind(T);
const Su = T.basename.bind(T);
T.extname.bind(T);
T.dirname.bind(T);
T.joinPath.bind(T);
T.normalizePath.bind(T);
T.relativePath.bind(T);
T.resolvePath.bind(T);
T.isAbsolutePath.bind(T);
const Rs = T.isEqualAuthority.bind(T), ys = T.hasTrailingPathSeparator.bind(T);
T.removeTrailingPathSeparator.bind(T);
T.addTrailingPathSeparator.bind(T);
var Es;
(function(e) {
  e.META_DATA_LABEL = "label", e.META_DATA_DESCRIPTION = "description", e.META_DATA_SIZE = "size", e.META_DATA_MIME = "mime";
  function t(n) {
    const r = /* @__PURE__ */ new Map();
    n.path.substring(n.path.indexOf(";") + 1, n.path.lastIndexOf(";")).split(";").forEach((a) => {
      const [o, l] = a.split(":");
      o && l && r.set(o, l);
    });
    const s = n.path.substring(0, n.path.indexOf(";"));
    return s && r.set(e.META_DATA_MIME, s), r;
  }
  e.parseMetaData = t;
})(Es || (Es = {}));
var ks;
(function(e) {
  async function t(r) {
    let i;
    const s = await Promise.all(r.map((a) => a.then((o) => o, (o) => {
      i || (i = o);
    })));
    if (typeof i < "u")
      throw i;
    return s;
  }
  e.settled = t;
  function n(r) {
    return new Promise(async (i, s) => {
      try {
        await r(i, s);
      } catch (a) {
        s(a);
      }
    });
  }
  e.withAsyncBody = n;
})(ks || (ks = {}));
const de = class de {
  static fromArray(t) {
    return new de((n) => {
      n.emitMany(t);
    });
  }
  static fromPromise(t) {
    return new de(async (n) => {
      n.emitMany(await t);
    });
  }
  static fromPromises(t) {
    return new de(async (n) => {
      await Promise.all(t.map(async (r) => n.emitOne(await r)));
    });
  }
  static merge(t) {
    return new de(async (n) => {
      await Promise.all(t.map(async (r) => {
        for await (const i of r)
          n.emitOne(i);
      }));
    });
  }
  constructor(t, n) {
    this._state = 0, this._results = [], this._error = null, this._onReturn = n, this._onStateChanged = new ve(), queueMicrotask(async () => {
      const r = {
        emitOne: (i) => this.emitOne(i),
        emitMany: (i) => this.emitMany(i),
        reject: (i) => this.reject(i)
      };
      try {
        await Promise.resolve(t(r)), this.resolve();
      } catch (i) {
        this.reject(i);
      } finally {
        r.emitOne = void 0, r.emitMany = void 0, r.reject = void 0;
      }
    });
  }
  [Symbol.asyncIterator]() {
    let t = 0;
    return {
      next: async () => {
        do {
          if (this._state === 2)
            throw this._error;
          if (t < this._results.length)
            return { done: !1, value: this._results[t++] };
          if (this._state === 1)
            return { done: !0, value: void 0 };
          await an.toPromise(this._onStateChanged.event);
        } while (!0);
      },
      return: async () => {
        var n;
        return (n = this._onReturn) == null || n.call(this), { done: !0, value: void 0 };
      }
    };
  }
  static map(t, n) {
    return new de(async (r) => {
      for await (const i of t)
        r.emitOne(n(i));
    });
  }
  map(t) {
    return de.map(this, t);
  }
  static filter(t, n) {
    return new de(async (r) => {
      for await (const i of t)
        n(i) && r.emitOne(i);
    });
  }
  filter(t) {
    return de.filter(this, t);
  }
  static coalesce(t) {
    return de.filter(t, (n) => !!n);
  }
  coalesce() {
    return de.coalesce(this);
  }
  static async toPromise(t) {
    const n = [];
    for await (const r of t)
      n.push(r);
    return n;
  }
  toPromise() {
    return de.toPromise(this);
  }
  emitOne(t) {
    this._state === 0 && (this._results.push(t), this._onStateChanged.fire());
  }
  emitMany(t) {
    this._state === 0 && (this._results = this._results.concat(t), this._onStateChanged.fire());
  }
  resolve() {
    this._state === 0 && (this._state = 1, this._onStateChanged.fire());
  }
  reject(t) {
    this._state === 0 && (this._state = 2, this._error = t, this._onStateChanged.fire());
  }
};
de.EMPTY = de.fromArray([]);
let Ms = de;
class Au {
  constructor(t) {
    this.values = t, this.prefixSum = new Uint32Array(t.length), this.prefixSumValidIndex = new Int32Array(1), this.prefixSumValidIndex[0] = -1;
  }
  getCount() {
    return this.values.length;
  }
  insertValues(t, n) {
    t = ot(t);
    const r = this.values, i = this.prefixSum, s = n.length;
    return s === 0 ? !1 : (this.values = new Uint32Array(r.length + s), this.values.set(r.subarray(0, t), 0), this.values.set(r.subarray(t), t + s), this.values.set(n, t), t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), this.prefixSum = new Uint32Array(this.values.length), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(i.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  setValue(t, n) {
    return t = ot(t), n = ot(n), this.values[t] === n ? !1 : (this.values[t] = n, t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), !0);
  }
  removeValues(t, n) {
    t = ot(t), n = ot(n);
    const r = this.values, i = this.prefixSum;
    if (t >= r.length)
      return !1;
    const s = r.length - t;
    return n >= s && (n = s), n === 0 ? !1 : (this.values = new Uint32Array(r.length - n), this.values.set(r.subarray(0, t), 0), this.values.set(r.subarray(t + n), t), this.prefixSum = new Uint32Array(this.values.length), t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(i.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  getTotalSum() {
    return this.values.length === 0 ? 0 : this._getPrefixSum(this.values.length - 1);
  }
  getPrefixSum(t) {
    return t < 0 ? 0 : (t = ot(t), this._getPrefixSum(t));
  }
  _getPrefixSum(t) {
    if (t <= this.prefixSumValidIndex[0])
      return this.prefixSum[t];
    let n = this.prefixSumValidIndex[0] + 1;
    n === 0 && (this.prefixSum[0] = this.values[0], n++), t >= this.values.length && (t = this.values.length - 1);
    for (let r = n; r <= t; r++)
      this.prefixSum[r] = this.prefixSum[r - 1] + this.values[r];
    return this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], t), this.prefixSum[t];
  }
  getIndexOf(t) {
    t = Math.floor(t), this.getTotalSum();
    let n = 0, r = this.values.length - 1, i = 0, s = 0, a = 0;
    for (; n <= r; )
      if (i = n + (r - n) / 2 | 0, s = this.prefixSum[i], a = s - this.values[i], t < a)
        r = i - 1;
      else if (t >= s)
        n = i + 1;
      else
        break;
    return new Nu(i, t - a);
  }
}
class Nu {
  constructor(t, n) {
    this.index = t, this.remainder = n, this._prefixSumIndexOfResultBrand = void 0, this.index = t, this.remainder = n;
  }
}
class Ru {
  constructor(t, n, r, i) {
    this._uri = t, this._lines = n, this._eol = r, this._versionId = i, this._lineStarts = null, this._cachedTextValue = null;
  }
  dispose() {
    this._lines.length = 0;
  }
  get version() {
    return this._versionId;
  }
  getText() {
    return this._cachedTextValue === null && (this._cachedTextValue = this._lines.join(this._eol)), this._cachedTextValue;
  }
  onEvents(t) {
    t.eol && t.eol !== this._eol && (this._eol = t.eol, this._lineStarts = null);
    const n = t.changes;
    for (const r of n)
      this._acceptDeleteRange(r.range), this._acceptInsertText(new X(r.range.startLineNumber, r.range.startColumn), r.text);
    this._versionId = t.versionId, this._cachedTextValue = null;
  }
  _ensureLineStarts() {
    if (!this._lineStarts) {
      const t = this._eol.length, n = this._lines.length, r = new Uint32Array(n);
      for (let i = 0; i < n; i++)
        r[i] = this._lines[i].length + t;
      this._lineStarts = new Au(r);
    }
  }
  _setLineText(t, n) {
    this._lines[t] = n, this._lineStarts && this._lineStarts.setValue(t, this._lines[t].length + this._eol.length);
  }
  _acceptDeleteRange(t) {
    if (t.startLineNumber === t.endLineNumber) {
      if (t.startColumn === t.endColumn)
        return;
      this._setLineText(t.startLineNumber - 1, this._lines[t.startLineNumber - 1].substring(0, t.startColumn - 1) + this._lines[t.startLineNumber - 1].substring(t.endColumn - 1));
      return;
    }
    this._setLineText(t.startLineNumber - 1, this._lines[t.startLineNumber - 1].substring(0, t.startColumn - 1) + this._lines[t.endLineNumber - 1].substring(t.endColumn - 1)), this._lines.splice(t.startLineNumber, t.endLineNumber - t.startLineNumber), this._lineStarts && this._lineStarts.removeValues(t.startLineNumber, t.endLineNumber - t.startLineNumber);
  }
  _acceptInsertText(t, n) {
    if (n.length === 0)
      return;
    const r = mo(n);
    if (r.length === 1) {
      this._setLineText(t.lineNumber - 1, this._lines[t.lineNumber - 1].substring(0, t.column - 1) + r[0] + this._lines[t.lineNumber - 1].substring(t.column - 1));
      return;
    }
    r[r.length - 1] += this._lines[t.lineNumber - 1].substring(t.column - 1), this._setLineText(t.lineNumber - 1, this._lines[t.lineNumber - 1].substring(0, t.column - 1) + r[0]);
    const i = new Uint32Array(r.length - 1);
    for (let s = 1; s < r.length; s++)
      this._lines.splice(t.lineNumber + s - 1, 0, r[s]), i[s - 1] = r[s].length + this._eol.length;
    this._lineStarts && this._lineStarts.insertValues(t.lineNumber, i);
  }
}
const yu = "workerTextModelSync";
class Eu {
  constructor() {
    this._models = /* @__PURE__ */ Object.create(null);
  }
  bindToServer(t) {
    t.setChannel(yu, this);
  }
  getModel(t) {
    return this._models[t];
  }
  getModels() {
    const t = [];
    return Object.keys(this._models).forEach((n) => t.push(this._models[n])), t;
  }
  $acceptNewModel(t) {
    this._models[t.url] = new ku(_e.parse(t.url), t.lines, t.EOL, t.versionId);
  }
  $acceptModelChanged(t, n) {
    if (!this._models[t])
      return;
    this._models[t].onEvents(n);
  }
  $acceptRemovedModel(t) {
    this._models[t] && delete this._models[t];
  }
}
class ku extends Ru {
  get uri() {
    return this._uri;
  }
  get eol() {
    return this._eol;
  }
  getValue() {
    return this.getText();
  }
  findMatches(t) {
    const n = [];
    for (let r = 0; r < this._lines.length; r++) {
      const i = this._lines[r], s = this.offsetAt(new X(r + 1, 1)), a = i.matchAll(t);
      for (const o of a)
        (o.index || o.index === 0) && (o.index = o.index + s), n.push(o);
    }
    return n;
  }
  getLinesContent() {
    return this._lines.slice(0);
  }
  getLineCount() {
    return this._lines.length;
  }
  getLineContent(t) {
    return this._lines[t - 1];
  }
  getWordAtPosition(t, n) {
    const r = yr(t.column, oa(n), this._lines[t.lineNumber - 1], 0);
    return r ? new B(
      t.lineNumber,
      r.startColumn,
      t.lineNumber,
      r.endColumn
    ) : null;
  }
  getWordUntilPosition(t, n) {
    const r = this.getWordAtPosition(t, n);
    return r ? {
      word: this._lines[t.lineNumber - 1].substring(r.startColumn - 1, t.column - 1),
      startColumn: r.startColumn,
      endColumn: t.column
    } : {
      word: "",
      startColumn: t.column,
      endColumn: t.column
    };
  }
  words(t) {
    const n = this._lines, r = this._wordenize.bind(this);
    let i = 0, s = "", a = 0, o = [];
    return {
      *[Symbol.iterator]() {
        for (; ; )
          if (a < o.length) {
            const l = s.substring(o[a].start, o[a].end);
            a += 1, yield l;
          } else if (i < n.length)
            s = n[i], o = r(s, t), a = 0, i += 1;
          else
            break;
      }
    };
  }
  getLineWords(t, n) {
    const r = this._lines[t - 1], i = this._wordenize(r, n), s = [];
    for (const a of i)
      s.push({
        word: r.substring(a.start, a.end),
        startColumn: a.start + 1,
        endColumn: a.end + 1
      });
    return s;
  }
  _wordenize(t, n) {
    const r = [];
    let i;
    for (n.lastIndex = 0; (i = n.exec(t)) && i[0].length !== 0; )
      r.push({ start: i.index, end: i.index + i[0].length });
    return r;
  }
  getValueInRange(t) {
    if (t = this._validateRange(t), t.startLineNumber === t.endLineNumber)
      return this._lines[t.startLineNumber - 1].substring(t.startColumn - 1, t.endColumn - 1);
    const n = this._eol, r = t.startLineNumber - 1, i = t.endLineNumber - 1, s = [];
    s.push(this._lines[r].substring(t.startColumn - 1));
    for (let a = r + 1; a < i; a++)
      s.push(this._lines[a]);
    return s.push(this._lines[i].substring(0, t.endColumn - 1)), s.join(n);
  }
  offsetAt(t) {
    return t = this._validatePosition(t), this._ensureLineStarts(), this._lineStarts.getPrefixSum(t.lineNumber - 2) + (t.column - 1);
  }
  positionAt(t) {
    t = Math.floor(t), t = Math.max(0, t), this._ensureLineStarts();
    const n = this._lineStarts.getIndexOf(t), r = this._lines[n.index].length;
    return {
      lineNumber: 1 + n.index,
      column: 1 + Math.min(n.remainder, r)
    };
  }
  _validateRange(t) {
    const n = this._validatePosition({ lineNumber: t.startLineNumber, column: t.startColumn }), r = this._validatePosition({ lineNumber: t.endLineNumber, column: t.endColumn });
    return n.lineNumber !== t.startLineNumber || n.column !== t.startColumn || r.lineNumber !== t.endLineNumber || r.column !== t.endColumn ? {
      startLineNumber: n.lineNumber,
      startColumn: n.column,
      endLineNumber: r.lineNumber,
      endColumn: r.column
    } : t;
  }
  _validatePosition(t) {
    if (!X.isIPosition(t))
      throw new Error("bad position");
    let { lineNumber: n, column: r } = t, i = !1;
    if (n < 1)
      n = 1, r = 1, i = !0;
    else if (n > this._lines.length)
      n = this._lines.length, r = this._lines[n - 1].length + 1, i = !0;
    else {
      const s = this._lines[n - 1].length + 1;
      r < 1 ? (r = 1, i = !0) : r > s && (r = s, i = !0);
    }
    return i ? { lineNumber: n, column: r } : t;
  }
}
const Nn = class Nn {
  constructor() {
    this._workerTextModelSyncServer = new Eu();
  }
  dispose() {
  }
  _getModel(t) {
    return this._workerTextModelSyncServer.getModel(t);
  }
  _getModels() {
    return this._workerTextModelSyncServer.getModels();
  }
  $acceptNewModel(t) {
    this._workerTextModelSyncServer.$acceptNewModel(t);
  }
  $acceptModelChanged(t, n) {
    this._workerTextModelSyncServer.$acceptModelChanged(t, n);
  }
  $acceptRemovedModel(t) {
    this._workerTextModelSyncServer.$acceptRemovedModel(t);
  }
  async $computeUnicodeHighlights(t, n, r) {
    const i = this._getModel(t);
    return i ? Pl.computeUnicodeHighlights(i, n, r) : { ranges: [], hasMore: !1, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };
  }
  async $findSectionHeaders(t, n) {
    const r = this._getModel(t);
    return r ? fu(r, n) : [];
  }
  async $computeDiff(t, n, r, i) {
    const s = this._getModel(t), a = this._getModel(n);
    return !s || !a ? null : Mt.computeDiff(s, a, r, i);
  }
  static computeDiff(t, n, r, i) {
    const s = i === "advanced" ? Fn.getDefault() : Fn.getLegacy(), a = t.getLinesContent(), o = n.getLinesContent(), l = s.computeDiff(a, o, r), u = l.changes.length > 0 ? !1 : this._modelsAreIdentical(t, n);
    function h(f) {
      return f.map(
        (m) => {
          var d;
          return [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (d = m.innerChanges) == null ? void 0 : d.map((p) => [
            p.originalRange.startLineNumber,
            p.originalRange.startColumn,
            p.originalRange.endLineNumber,
            p.originalRange.endColumn,
            p.modifiedRange.startLineNumber,
            p.modifiedRange.startColumn,
            p.modifiedRange.endLineNumber,
            p.modifiedRange.endColumn
          ])];
        }
      );
    }
    return {
      identical: u,
      quitEarly: l.hitTimeout,
      changes: h(l.changes),
      moves: l.moves.map((f) => [
        f.lineRangeMapping.original.startLineNumber,
        f.lineRangeMapping.original.endLineNumberExclusive,
        f.lineRangeMapping.modified.startLineNumber,
        f.lineRangeMapping.modified.endLineNumberExclusive,
        h(f.changes)
      ])
    };
  }
  static _modelsAreIdentical(t, n) {
    const r = t.getLineCount(), i = n.getLineCount();
    if (r !== i)
      return !1;
    for (let s = 1; s <= r; s++) {
      const a = t.getLineContent(s), o = n.getLineContent(s);
      if (a !== o)
        return !1;
    }
    return !0;
  }
  async $computeDirtyDiff(t, n, r) {
    const i = this._getModel(t), s = this._getModel(n);
    if (!i || !s)
      return null;
    const a = i.getLinesContent(), o = s.getLinesContent();
    return new ha(a, o, {
      shouldComputeCharChanges: !1,
      shouldPostProcessCharChanges: !1,
      shouldIgnoreTrimWhitespace: r,
      shouldMakePrettyDiff: !0,
      maxComputationTime: 1e3
    }).computeDiff().changes;
  }
  async $computeMoreMinimalEdits(t, n, r) {
    const i = this._getModel(t);
    if (!i)
      return n;
    const s = [];
    let a;
    n = n.slice(0).sort((l, u) => {
      if (l.range && u.range)
        return B.compareRangesUsingStarts(l.range, u.range);
      const h = l.range ? 0 : 1, f = u.range ? 0 : 1;
      return h - f;
    });
    let o = 0;
    for (let l = 1; l < n.length; l++)
      B.getEndPosition(n[o].range).equals(B.getStartPosition(n[l].range)) ? (n[o].range = B.fromPositions(B.getStartPosition(n[o].range), B.getEndPosition(n[l].range)), n[o].text += n[l].text) : (o++, n[o] = n[l]);
    n.length = o + 1;
    for (let { range: l, text: u, eol: h } of n) {
      if (typeof h == "number" && (a = h), B.isEmpty(l) && !u)
        continue;
      const f = i.getValueInRange(l);
      if (u = u.replace(/\r\n|\n|\r/g, i.eol), f === u)
        continue;
      if (Math.max(u.length, f.length) > Mt._diffLimit) {
        s.push({ range: l, text: u });
        continue;
      }
      const m = Fo(f, u, r), d = i.offsetAt(B.lift(l).getStartPosition());
      for (const p of m) {
        const b = i.positionAt(d + p.originalStart), N = i.positionAt(d + p.originalStart + p.originalLength), L = {
          text: u.substr(p.modifiedStart, p.modifiedLength),
          range: { startLineNumber: b.lineNumber, startColumn: b.column, endLineNumber: N.lineNumber, endColumn: N.column }
        };
        i.getValueInRange(L.range) !== L.text && s.push(L);
      }
    }
    return typeof a == "number" && s.push({ eol: a, text: "", range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } }), s;
  }
  $computeHumanReadableDiff(t, n, r) {
    const i = this._getModel(t);
    if (!i)
      return n;
    const s = [];
    let a;
    n = n.slice(0).sort((o, l) => {
      if (o.range && l.range)
        return B.compareRangesUsingStarts(o.range, l.range);
      const u = o.range ? 0 : 1, h = l.range ? 0 : 1;
      return u - h;
    });
    for (let { range: o, text: l, eol: u } of n) {
      let b = function(L, C) {
        return new X(
          L.lineNumber + C.lineNumber - 1,
          C.lineNumber === 1 ? L.column + C.column - 1 : C.column
        );
      }, N = function(L, C) {
        const R = [];
        for (let S = C.startLineNumber; S <= C.endLineNumber; S++) {
          const A = L[S - 1];
          S === C.startLineNumber && S === C.endLineNumber ? R.push(A.substring(C.startColumn - 1, C.endColumn - 1)) : S === C.startLineNumber ? R.push(A.substring(C.startColumn - 1)) : S === C.endLineNumber ? R.push(A.substring(0, C.endColumn - 1)) : R.push(A);
        }
        return R;
      };
      if (typeof u == "number" && (a = u), B.isEmpty(o) && !l)
        continue;
      const h = i.getValueInRange(o);
      if (l = l.replace(/\r\n|\n|\r/g, i.eol), h === l)
        continue;
      if (Math.max(l.length, h.length) > Mt._diffLimit) {
        s.push({ range: o, text: l });
        continue;
      }
      const f = h.split(/\r\n|\n|\r/), m = l.split(/\r\n|\n|\r/), d = Fn.getDefault().computeDiff(f, m, r), p = B.lift(o).getStartPosition();
      for (const L of d.changes)
        if (L.innerChanges)
          for (const C of L.innerChanges)
            s.push({
              range: B.fromPositions(b(p, C.originalRange.getStartPosition()), b(p, C.originalRange.getEndPosition())),
              text: N(m, C.modifiedRange).join(i.eol)
            });
        else
          throw new he("The experimental diff algorithm always produces inner changes");
    }
    return typeof a == "number" && s.push({ eol: a, text: "", range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } }), s;
  }
  async $computeLinks(t) {
    const n = this._getModel(t);
    return n ? qo(n) : null;
  }
  async $computeDefaultDocumentColors(t) {
    const n = this._getModel(t);
    return n ? cu(n) : null;
  }
  async $textualSuggest(t, n, r, i) {
    const s = new Rn(), a = new RegExp(r, i), o = /* @__PURE__ */ new Set();
    e: for (const l of t) {
      const u = this._getModel(l);
      if (u) {
        for (const h of u.words(a))
          if (!(h === n || !isNaN(Number(h))) && (o.add(h), o.size > Mt._suggestionsLimit))
            break e;
      }
    }
    return { words: Array.from(o), duration: s.elapsed() };
  }
  async $computeWordRanges(t, n, r, i) {
    const s = this._getModel(t);
    if (!s)
      return /* @__PURE__ */ Object.create(null);
    const a = new RegExp(r, i), o = /* @__PURE__ */ Object.create(null);
    for (let l = n.startLineNumber; l < n.endLineNumber; l++) {
      const u = s.getLineWords(l, a);
      for (const h of u) {
        if (!isNaN(Number(h.word)))
          continue;
        let f = o[h.word];
        f || (f = [], o[h.word] = f), f.push({
          startLineNumber: l,
          startColumn: h.startColumn,
          endLineNumber: l,
          endColumn: h.endColumn
        });
      }
    }
    return o;
  }
  async $navigateValueSet(t, n, r, i, s) {
    const a = this._getModel(t);
    if (!a)
      return null;
    const o = new RegExp(i, s);
    n.startColumn === n.endColumn && (n = {
      startLineNumber: n.startLineNumber,
      startColumn: n.startColumn,
      endLineNumber: n.endLineNumber,
      endColumn: n.endColumn + 1
    });
    const l = a.getValueInRange(n), u = a.getWordAtPosition({ lineNumber: n.startLineNumber, column: n.startColumn }, o);
    if (!u)
      return null;
    const h = a.getValueInRange(u);
    return Gn.INSTANCE.navigateValueSet(n, l, u, h, r);
  }
};
Nn._diffLimit = 1e5, Nn._suggestionsLimit = 1e4;
let or = Nn;
class Mt extends or {
  constructor(t, n) {
    super(), this._host = t, this._foreignModuleFactory = n, this._foreignModule = null;
  }
  async $ping() {
    return "pong";
  }
  $loadForeignModule(t, n, r) {
    const a = {
      host: Ll(r, (o, l) => this._host.$fhr(o, l)),
      getMirrorModels: () => this._getModels()
    };
    return this._foreignModuleFactory ? (this._foreignModule = this._foreignModuleFactory(a, n), Promise.resolve(wl(this._foreignModule))) : Promise.reject(new Error("Unexpected usage"));
  }
  $fmr(t, n) {
    if (!this._foreignModule || typeof this._foreignModule[t] != "function")
      return Promise.reject(new Error("Missing requestHandler or method: " + t));
    try {
      return Promise.resolve(this._foreignModule[t].apply(this._foreignModule, n));
    } catch (r) {
      return Promise.reject(r);
    }
  }
}
typeof importScripts == "function" && (globalThis.monaco = xl());
let lr = !1;
function pa(e) {
  if (lr)
    return;
  lr = !0;
  const t = new $o((n) => {
    globalThis.postMessage(n);
  }, (n) => new Mt(nr.getChannel(n), null));
  globalThis.onmessage = (n) => {
    t.onmessage(n.data);
  };
}
globalThis.onmessage = (e) => {
  lr || pa();
};
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.52.0(undefined)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
var j;
(function(e) {
  e[e.Ident = 0] = "Ident", e[e.AtKeyword = 1] = "AtKeyword", e[e.String = 2] = "String", e[e.BadString = 3] = "BadString", e[e.UnquotedString = 4] = "UnquotedString", e[e.Hash = 5] = "Hash", e[e.Num = 6] = "Num", e[e.Percentage = 7] = "Percentage", e[e.Dimension = 8] = "Dimension", e[e.UnicodeRange = 9] = "UnicodeRange", e[e.CDO = 10] = "CDO", e[e.CDC = 11] = "CDC", e[e.Colon = 12] = "Colon", e[e.SemiColon = 13] = "SemiColon", e[e.CurlyL = 14] = "CurlyL", e[e.CurlyR = 15] = "CurlyR", e[e.ParenthesisL = 16] = "ParenthesisL", e[e.ParenthesisR = 17] = "ParenthesisR", e[e.BracketL = 18] = "BracketL", e[e.BracketR = 19] = "BracketR", e[e.Whitespace = 20] = "Whitespace", e[e.Includes = 21] = "Includes", e[e.Dashmatch = 22] = "Dashmatch", e[e.SubstringOperator = 23] = "SubstringOperator", e[e.PrefixOperator = 24] = "PrefixOperator", e[e.SuffixOperator = 25] = "SuffixOperator", e[e.Delim = 26] = "Delim", e[e.EMS = 27] = "EMS", e[e.EXS = 28] = "EXS", e[e.Length = 29] = "Length", e[e.Angle = 30] = "Angle", e[e.Time = 31] = "Time", e[e.Freq = 32] = "Freq", e[e.Exclamation = 33] = "Exclamation", e[e.Resolution = 34] = "Resolution", e[e.Comma = 35] = "Comma", e[e.Charset = 36] = "Charset", e[e.EscapedJavaScript = 37] = "EscapedJavaScript", e[e.BadEscapedJavaScript = 38] = "BadEscapedJavaScript", e[e.Comment = 39] = "Comment", e[e.SingleLineComment = 40] = "SingleLineComment", e[e.EOF = 41] = "EOF", e[e.ContainerQueryLength = 42] = "ContainerQueryLength", e[e.CustomToken = 43] = "CustomToken";
})(j || (j = {}));
j.SemiColon;
j.Colon;
j.CurlyL;
j.CurlyR;
j.BracketR;
j.BracketL;
j.ParenthesisL;
j.ParenthesisR;
j.Comma;
j.EMS;
j.EXS;
j.Length;
j.Length;
j.Length;
j.Length;
j.Length;
j.Length;
j.Angle;
j.Angle;
j.Angle;
j.Time;
j.Time;
j.Freq;
j.Freq;
j.Percentage;
j.Percentage;
j.Resolution;
j.Resolution;
j.ContainerQueryLength;
j.ContainerQueryLength;
j.ContainerQueryLength;
j.ContainerQueryLength;
j.ContainerQueryLength;
j.ContainerQueryLength;
var Ps;
(function(e) {
  e[e.Undefined = 0] = "Undefined", e[e.Identifier = 1] = "Identifier", e[e.Stylesheet = 2] = "Stylesheet", e[e.Ruleset = 3] = "Ruleset", e[e.Selector = 4] = "Selector", e[e.SimpleSelector = 5] = "SimpleSelector", e[e.SelectorInterpolation = 6] = "SelectorInterpolation", e[e.SelectorCombinator = 7] = "SelectorCombinator", e[e.SelectorCombinatorParent = 8] = "SelectorCombinatorParent", e[e.SelectorCombinatorSibling = 9] = "SelectorCombinatorSibling", e[e.SelectorCombinatorAllSiblings = 10] = "SelectorCombinatorAllSiblings", e[e.SelectorCombinatorShadowPiercingDescendant = 11] = "SelectorCombinatorShadowPiercingDescendant", e[e.Page = 12] = "Page", e[e.PageBoxMarginBox = 13] = "PageBoxMarginBox", e[e.ClassSelector = 14] = "ClassSelector", e[e.IdentifierSelector = 15] = "IdentifierSelector", e[e.ElementNameSelector = 16] = "ElementNameSelector", e[e.PseudoSelector = 17] = "PseudoSelector", e[e.AttributeSelector = 18] = "AttributeSelector", e[e.Declaration = 19] = "Declaration", e[e.Declarations = 20] = "Declarations", e[e.Property = 21] = "Property", e[e.Expression = 22] = "Expression", e[e.BinaryExpression = 23] = "BinaryExpression", e[e.Term = 24] = "Term", e[e.Operator = 25] = "Operator", e[e.Value = 26] = "Value", e[e.StringLiteral = 27] = "StringLiteral", e[e.URILiteral = 28] = "URILiteral", e[e.EscapedValue = 29] = "EscapedValue", e[e.Function = 30] = "Function", e[e.NumericValue = 31] = "NumericValue", e[e.HexColorValue = 32] = "HexColorValue", e[e.RatioValue = 33] = "RatioValue", e[e.MixinDeclaration = 34] = "MixinDeclaration", e[e.MixinReference = 35] = "MixinReference", e[e.VariableName = 36] = "VariableName", e[e.VariableDeclaration = 37] = "VariableDeclaration", e[e.Prio = 38] = "Prio", e[e.Interpolation = 39] = "Interpolation", e[e.NestedProperties = 40] = "NestedProperties", e[e.ExtendsReference = 41] = "ExtendsReference", e[e.SelectorPlaceholder = 42] = "SelectorPlaceholder", e[e.Debug = 43] = "Debug", e[e.If = 44] = "If", e[e.Else = 45] = "Else", e[e.For = 46] = "For", e[e.Each = 47] = "Each", e[e.While = 48] = "While", e[e.MixinContentReference = 49] = "MixinContentReference", e[e.MixinContentDeclaration = 50] = "MixinContentDeclaration", e[e.Media = 51] = "Media", e[e.Keyframe = 52] = "Keyframe", e[e.FontFace = 53] = "FontFace", e[e.Import = 54] = "Import", e[e.Namespace = 55] = "Namespace", e[e.Invocation = 56] = "Invocation", e[e.FunctionDeclaration = 57] = "FunctionDeclaration", e[e.ReturnStatement = 58] = "ReturnStatement", e[e.MediaQuery = 59] = "MediaQuery", e[e.MediaCondition = 60] = "MediaCondition", e[e.MediaFeature = 61] = "MediaFeature", e[e.FunctionParameter = 62] = "FunctionParameter", e[e.FunctionArgument = 63] = "FunctionArgument", e[e.KeyframeSelector = 64] = "KeyframeSelector", e[e.ViewPort = 65] = "ViewPort", e[e.Document = 66] = "Document", e[e.AtApplyRule = 67] = "AtApplyRule", e[e.CustomPropertyDeclaration = 68] = "CustomPropertyDeclaration", e[e.CustomPropertySet = 69] = "CustomPropertySet", e[e.ListEntry = 70] = "ListEntry", e[e.Supports = 71] = "Supports", e[e.SupportsCondition = 72] = "SupportsCondition", e[e.NamespacePrefix = 73] = "NamespacePrefix", e[e.GridLine = 74] = "GridLine", e[e.Plugin = 75] = "Plugin", e[e.UnknownAtRule = 76] = "UnknownAtRule", e[e.Use = 77] = "Use", e[e.ModuleConfiguration = 78] = "ModuleConfiguration", e[e.Forward = 79] = "Forward", e[e.ForwardVisibility = 80] = "ForwardVisibility", e[e.Module = 81] = "Module", e[e.UnicodeRange = 82] = "UnicodeRange", e[e.Layer = 83] = "Layer", e[e.LayerNameList = 84] = "LayerNameList", e[e.LayerName = 85] = "LayerName", e[e.PropertyAtRule = 86] = "PropertyAtRule", e[e.Container = 87] = "Container";
})(Ps || (Ps = {}));
var $s;
(function(e) {
  e[e.Mixin = 0] = "Mixin", e[e.Rule = 1] = "Rule", e[e.Variable = 2] = "Variable", e[e.Function = 3] = "Function", e[e.Keyframe = 4] = "Keyframe", e[e.Unknown = 5] = "Unknown", e[e.Module = 6] = "Module", e[e.Forward = 7] = "Forward", e[e.ForwardVisibility = 8] = "ForwardVisibility", e[e.Property = 9] = "Property";
})($s || ($s = {}));
var Ht;
(function(e) {
  e[e.Ignore = 1] = "Ignore", e[e.Warning = 2] = "Warning", e[e.Error = 4] = "Error";
})(Ht || (Ht = {}));
function g(...e) {
  const t = e[0];
  let n, r, i;
  if (typeof t == "string")
    n = t, r = t, e.splice(0, 1), i = !e || typeof e[0] != "object" ? e : e[0];
  else if (t instanceof Array) {
    const s = e.slice(1);
    if (t.length !== s.length + 1)
      throw new Error("expected a string as the first argument to l10n.t");
    let a = t[0];
    for (let o = 1; o < t.length; o++)
      a += `{${o - 1}}` + t[o];
    return g(a, ...s);
  } else
    r = t.message, n = r, t.comment && t.comment.length > 0 && (n += `/${Array.isArray(t.comment) ? t.comment.join("") : t.comment}`), i = t.args ?? {};
  return Pu(r, i);
}
var Mu = /{([^}]+)}/g;
function Pu(e, t) {
  return Object.keys(t).length === 0 ? e : e.replace(Mu, (n, r) => t[r] ?? n);
}
var G = class {
  constructor(e, t) {
    this.id = e, this.message = t;
  }
};
new G("css-numberexpected", g("number expected")), new G("css-conditionexpected", g("condition expected")), new G("css-ruleorselectorexpected", g("at-rule or selector expected")), new G("css-dotexpected", g("dot expected")), new G("css-colonexpected", g("colon expected")), new G("css-semicolonexpected", g("semi-colon expected")), new G("css-termexpected", g("term expected")), new G("css-expressionexpected", g("expression expected")), new G("css-operatorexpected", g("operator expected")), new G("css-identifierexpected", g("identifier expected")), new G("css-percentageexpected", g("percentage expected")), new G("css-uriorstringexpected", g("uri or string expected")), new G("css-uriexpected", g("URI expected")), new G("css-varnameexpected", g("variable name expected")), new G("css-varvalueexpected", g("variable value expected")), new G("css-propertyvalueexpected", g("property value expected")), new G("css-lcurlyexpected", g("{ expected")), new G("css-rcurlyexpected", g("} expected")), new G("css-rbracketexpected", g("[ expected")), new G("css-lbracketexpected", g("] expected")), new G("css-lparentexpected", g("( expected")), new G("css-rparentexpected", g(") expected")), new G("css-commaexpected", g("comma expected")), new G("css-pagedirordeclexpected", g("page directive or declaraton expected")), new G("css-unknownatrule", g("at-rule unknown")), new G("css-unknownkeyword", g("unknown keyword")), new G("css-selectorexpected", g("selector expected")), new G("css-stringliteralexpected", g("string literal expected")), new G("css-whitespaceexpected", g("whitespace expected")), new G("css-mediaqueryexpected", g("media query expected")), new G("css-idorwildcardexpected", g("identifier or wildcard expected")), new G("css-wildcardexpected", g("wildcard expected")), new G("css-idorvarexpected", g("identifier or variable expected"));
var Ds;
(function(e) {
  function t(n) {
    return typeof n == "string";
  }
  e.is = t;
})(Ds || (Ds = {}));
var ur;
(function(e) {
  function t(n) {
    return typeof n == "string";
  }
  e.is = t;
})(ur || (ur = {}));
var Fs;
(function(e) {
  e.MIN_VALUE = -2147483648, e.MAX_VALUE = 2147483647;
  function t(n) {
    return typeof n == "number" && e.MIN_VALUE <= n && n <= e.MAX_VALUE;
  }
  e.is = t;
})(Fs || (Fs = {}));
var gn;
(function(e) {
  e.MIN_VALUE = 0, e.MAX_VALUE = 2147483647;
  function t(n) {
    return typeof n == "number" && e.MIN_VALUE <= n && n <= e.MAX_VALUE;
  }
  e.is = t;
})(gn || (gn = {}));
var Re;
(function(e) {
  function t(r, i) {
    return r === Number.MAX_VALUE && (r = gn.MAX_VALUE), i === Number.MAX_VALUE && (i = gn.MAX_VALUE), { line: r, character: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.objectLiteral(i) && _.uinteger(i.line) && _.uinteger(i.character);
  }
  e.is = n;
})(Re || (Re = {}));
var se;
(function(e) {
  function t(r, i, s, a) {
    if (_.uinteger(r) && _.uinteger(i) && _.uinteger(s) && _.uinteger(a))
      return { start: Re.create(r, i), end: Re.create(s, a) };
    if (Re.is(r) && Re.is(i))
      return { start: r, end: i };
    throw new Error(`Range#create called with invalid arguments[${r}, ${i}, ${s}, ${a}]`);
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.objectLiteral(i) && Re.is(i.start) && Re.is(i.end);
  }
  e.is = n;
})(se || (se = {}));
var pn;
(function(e) {
  function t(r, i) {
    return { uri: r, range: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.objectLiteral(i) && se.is(i.range) && (_.string(i.uri) || _.undefined(i.uri));
  }
  e.is = n;
})(pn || (pn = {}));
var Is;
(function(e) {
  function t(r, i, s, a) {
    return { targetUri: r, targetRange: i, targetSelectionRange: s, originSelectionRange: a };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.objectLiteral(i) && se.is(i.targetRange) && _.string(i.targetUri) && se.is(i.targetSelectionRange) && (se.is(i.originSelectionRange) || _.undefined(i.originSelectionRange));
  }
  e.is = n;
})(Is || (Is = {}));
var cr;
(function(e) {
  function t(r, i, s, a) {
    return {
      red: r,
      green: i,
      blue: s,
      alpha: a
    };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && _.numberRange(i.red, 0, 1) && _.numberRange(i.green, 0, 1) && _.numberRange(i.blue, 0, 1) && _.numberRange(i.alpha, 0, 1);
  }
  e.is = n;
})(cr || (cr = {}));
var Vs;
(function(e) {
  function t(r, i) {
    return {
      range: r,
      color: i
    };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && se.is(i.range) && cr.is(i.color);
  }
  e.is = n;
})(Vs || (Vs = {}));
var Us;
(function(e) {
  function t(r, i, s) {
    return {
      label: r,
      textEdit: i,
      additionalTextEdits: s
    };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && _.string(i.label) && (_.undefined(i.textEdit) || At.is(i)) && (_.undefined(i.additionalTextEdits) || _.typedArray(i.additionalTextEdits, At.is));
  }
  e.is = n;
})(Us || (Us = {}));
var Bs;
(function(e) {
  e.Comment = "comment", e.Imports = "imports", e.Region = "region";
})(Bs || (Bs = {}));
var qs;
(function(e) {
  function t(r, i, s, a, o, l) {
    const u = {
      startLine: r,
      endLine: i
    };
    return _.defined(s) && (u.startCharacter = s), _.defined(a) && (u.endCharacter = a), _.defined(o) && (u.kind = o), _.defined(l) && (u.collapsedText = l), u;
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && _.uinteger(i.startLine) && _.uinteger(i.startLine) && (_.undefined(i.startCharacter) || _.uinteger(i.startCharacter)) && (_.undefined(i.endCharacter) || _.uinteger(i.endCharacter)) && (_.undefined(i.kind) || _.string(i.kind));
  }
  e.is = n;
})(qs || (qs = {}));
var hr;
(function(e) {
  function t(r, i) {
    return {
      location: r,
      message: i
    };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && pn.is(i.location) && _.string(i.message);
  }
  e.is = n;
})(hr || (hr = {}));
var Os;
(function(e) {
  e.Error = 1, e.Warning = 2, e.Information = 3, e.Hint = 4;
})(Os || (Os = {}));
var Ws;
(function(e) {
  e.Unnecessary = 1, e.Deprecated = 2;
})(Ws || (Ws = {}));
var zs;
(function(e) {
  function t(n) {
    const r = n;
    return _.objectLiteral(r) && _.string(r.href);
  }
  e.is = t;
})(zs || (zs = {}));
var bn;
(function(e) {
  function t(r, i, s, a, o, l) {
    let u = { range: r, message: i };
    return _.defined(s) && (u.severity = s), _.defined(a) && (u.code = a), _.defined(o) && (u.source = o), _.defined(l) && (u.relatedInformation = l), u;
  }
  e.create = t;
  function n(r) {
    var i;
    let s = r;
    return _.defined(s) && se.is(s.range) && _.string(s.message) && (_.number(s.severity) || _.undefined(s.severity)) && (_.integer(s.code) || _.string(s.code) || _.undefined(s.code)) && (_.undefined(s.codeDescription) || _.string((i = s.codeDescription) === null || i === void 0 ? void 0 : i.href)) && (_.string(s.source) || _.undefined(s.source)) && (_.undefined(s.relatedInformation) || _.typedArray(s.relatedInformation, hr.is));
  }
  e.is = n;
})(bn || (bn = {}));
var St;
(function(e) {
  function t(r, i, ...s) {
    let a = { title: r, command: i };
    return _.defined(s) && s.length > 0 && (a.arguments = s), a;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.string(i.title) && _.string(i.command);
  }
  e.is = n;
})(St || (St = {}));
var At;
(function(e) {
  function t(s, a) {
    return { range: s, newText: a };
  }
  e.replace = t;
  function n(s, a) {
    return { range: { start: s, end: s }, newText: a };
  }
  e.insert = n;
  function r(s) {
    return { range: s, newText: "" };
  }
  e.del = r;
  function i(s) {
    const a = s;
    return _.objectLiteral(a) && _.string(a.newText) && se.is(a.range);
  }
  e.is = i;
})(At || (At = {}));
var fr;
(function(e) {
  function t(r, i, s) {
    const a = { label: r };
    return i !== void 0 && (a.needsConfirmation = i), s !== void 0 && (a.description = s), a;
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && _.string(i.label) && (_.boolean(i.needsConfirmation) || i.needsConfirmation === void 0) && (_.string(i.description) || i.description === void 0);
  }
  e.is = n;
})(fr || (fr = {}));
var Nt;
(function(e) {
  function t(n) {
    const r = n;
    return _.string(r);
  }
  e.is = t;
})(Nt || (Nt = {}));
var Hs;
(function(e) {
  function t(s, a, o) {
    return { range: s, newText: a, annotationId: o };
  }
  e.replace = t;
  function n(s, a, o) {
    return { range: { start: s, end: s }, newText: a, annotationId: o };
  }
  e.insert = n;
  function r(s, a) {
    return { range: s, newText: "", annotationId: a };
  }
  e.del = r;
  function i(s) {
    const a = s;
    return At.is(a) && (fr.is(a.annotationId) || Nt.is(a.annotationId));
  }
  e.is = i;
})(Hs || (Hs = {}));
var dr;
(function(e) {
  function t(r, i) {
    return { textDocument: r, edits: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _r.is(i.textDocument) && Array.isArray(i.edits);
  }
  e.is = n;
})(dr || (dr = {}));
var mr;
(function(e) {
  function t(r, i, s) {
    let a = {
      kind: "create",
      uri: r
    };
    return i !== void 0 && (i.overwrite !== void 0 || i.ignoreIfExists !== void 0) && (a.options = i), s !== void 0 && (a.annotationId = s), a;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return i && i.kind === "create" && _.string(i.uri) && (i.options === void 0 || (i.options.overwrite === void 0 || _.boolean(i.options.overwrite)) && (i.options.ignoreIfExists === void 0 || _.boolean(i.options.ignoreIfExists))) && (i.annotationId === void 0 || Nt.is(i.annotationId));
  }
  e.is = n;
})(mr || (mr = {}));
var gr;
(function(e) {
  function t(r, i, s, a) {
    let o = {
      kind: "rename",
      oldUri: r,
      newUri: i
    };
    return s !== void 0 && (s.overwrite !== void 0 || s.ignoreIfExists !== void 0) && (o.options = s), a !== void 0 && (o.annotationId = a), o;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return i && i.kind === "rename" && _.string(i.oldUri) && _.string(i.newUri) && (i.options === void 0 || (i.options.overwrite === void 0 || _.boolean(i.options.overwrite)) && (i.options.ignoreIfExists === void 0 || _.boolean(i.options.ignoreIfExists))) && (i.annotationId === void 0 || Nt.is(i.annotationId));
  }
  e.is = n;
})(gr || (gr = {}));
var pr;
(function(e) {
  function t(r, i, s) {
    let a = {
      kind: "delete",
      uri: r
    };
    return i !== void 0 && (i.recursive !== void 0 || i.ignoreIfNotExists !== void 0) && (a.options = i), s !== void 0 && (a.annotationId = s), a;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return i && i.kind === "delete" && _.string(i.uri) && (i.options === void 0 || (i.options.recursive === void 0 || _.boolean(i.options.recursive)) && (i.options.ignoreIfNotExists === void 0 || _.boolean(i.options.ignoreIfNotExists))) && (i.annotationId === void 0 || Nt.is(i.annotationId));
  }
  e.is = n;
})(pr || (pr = {}));
var br;
(function(e) {
  function t(n) {
    let r = n;
    return r && (r.changes !== void 0 || r.documentChanges !== void 0) && (r.documentChanges === void 0 || r.documentChanges.every((i) => _.string(i.kind) ? mr.is(i) || gr.is(i) || pr.is(i) : dr.is(i)));
  }
  e.is = t;
})(br || (br = {}));
var js;
(function(e) {
  function t(r) {
    return { uri: r };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.string(i.uri);
  }
  e.is = n;
})(js || (js = {}));
var Gs;
(function(e) {
  function t(r, i) {
    return { uri: r, version: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.string(i.uri) && _.integer(i.version);
  }
  e.is = n;
})(Gs || (Gs = {}));
var _r;
(function(e) {
  function t(r, i) {
    return { uri: r, version: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.string(i.uri) && (i.version === null || _.integer(i.version));
  }
  e.is = n;
})(_r || (_r = {}));
var Ts;
(function(e) {
  function t(r, i, s, a) {
    return { uri: r, languageId: i, version: s, text: a };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.string(i.uri) && _.string(i.languageId) && _.integer(i.version) && _.string(i.text);
  }
  e.is = n;
})(Ts || (Ts = {}));
var tt;
(function(e) {
  e.PlainText = "plaintext", e.Markdown = "markdown";
  function t(n) {
    const r = n;
    return r === e.PlainText || r === e.Markdown;
  }
  e.is = t;
})(tt || (tt = {}));
var jt;
(function(e) {
  function t(n) {
    const r = n;
    return _.objectLiteral(n) && tt.is(r.kind) && _.string(r.value);
  }
  e.is = t;
})(jt || (jt = {}));
var fe;
(function(e) {
  e.Text = 1, e.Method = 2, e.Function = 3, e.Constructor = 4, e.Field = 5, e.Variable = 6, e.Class = 7, e.Interface = 8, e.Module = 9, e.Property = 10, e.Unit = 11, e.Value = 12, e.Enum = 13, e.Keyword = 14, e.Snippet = 15, e.Color = 16, e.File = 17, e.Reference = 18, e.Folder = 19, e.EnumMember = 20, e.Constant = 21, e.Struct = 22, e.Event = 23, e.Operator = 24, e.TypeParameter = 25;
})(fe || (fe = {}));
var ke;
(function(e) {
  e.PlainText = 1, e.Snippet = 2;
})(ke || (ke = {}));
var Xs;
(function(e) {
  e.Deprecated = 1;
})(Xs || (Xs = {}));
var Qs;
(function(e) {
  function t(r, i, s) {
    return { newText: r, insert: i, replace: s };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return i && _.string(i.newText) && se.is(i.insert) && se.is(i.replace);
  }
  e.is = n;
})(Qs || (Qs = {}));
var Js;
(function(e) {
  e.asIs = 1, e.adjustIndentation = 2;
})(Js || (Js = {}));
var Ys;
(function(e) {
  function t(n) {
    const r = n;
    return r && (_.string(r.detail) || r.detail === void 0) && (_.string(r.description) || r.description === void 0);
  }
  e.is = t;
})(Ys || (Ys = {}));
var Zs;
(function(e) {
  function t(n) {
    return { label: n };
  }
  e.create = t;
})(Zs || (Zs = {}));
var Ks;
(function(e) {
  function t(n, r) {
    return { items: n || [], isIncomplete: !!r };
  }
  e.create = t;
})(Ks || (Ks = {}));
var _n;
(function(e) {
  function t(r) {
    return r.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
  }
  e.fromPlainText = t;
  function n(r) {
    const i = r;
    return _.string(i) || _.objectLiteral(i) && _.string(i.language) && _.string(i.value);
  }
  e.is = n;
})(_n || (_n = {}));
var e1;
(function(e) {
  function t(n) {
    let r = n;
    return !!r && _.objectLiteral(r) && (jt.is(r.contents) || _n.is(r.contents) || _.typedArray(r.contents, _n.is)) && (n.range === void 0 || se.is(n.range));
  }
  e.is = t;
})(e1 || (e1 = {}));
var t1;
(function(e) {
  function t(n, r) {
    return r ? { label: n, documentation: r } : { label: n };
  }
  e.create = t;
})(t1 || (t1 = {}));
var n1;
(function(e) {
  function t(n, r, ...i) {
    let s = { label: n };
    return _.defined(r) && (s.documentation = r), _.defined(i) ? s.parameters = i : s.parameters = [], s;
  }
  e.create = t;
})(n1 || (n1 = {}));
var r1;
(function(e) {
  e.Text = 1, e.Read = 2, e.Write = 3;
})(r1 || (r1 = {}));
var i1;
(function(e) {
  function t(n, r) {
    let i = { range: n };
    return _.number(r) && (i.kind = r), i;
  }
  e.create = t;
})(i1 || (i1 = {}));
var s1;
(function(e) {
  e.File = 1, e.Module = 2, e.Namespace = 3, e.Package = 4, e.Class = 5, e.Method = 6, e.Property = 7, e.Field = 8, e.Constructor = 9, e.Enum = 10, e.Interface = 11, e.Function = 12, e.Variable = 13, e.Constant = 14, e.String = 15, e.Number = 16, e.Boolean = 17, e.Array = 18, e.Object = 19, e.Key = 20, e.Null = 21, e.EnumMember = 22, e.Struct = 23, e.Event = 24, e.Operator = 25, e.TypeParameter = 26;
})(s1 || (s1 = {}));
var a1;
(function(e) {
  e.Deprecated = 1;
})(a1 || (a1 = {}));
var o1;
(function(e) {
  function t(n, r, i, s, a) {
    let o = {
      name: n,
      kind: r,
      location: { uri: s, range: i }
    };
    return a && (o.containerName = a), o;
  }
  e.create = t;
})(o1 || (o1 = {}));
var l1;
(function(e) {
  function t(n, r, i, s) {
    return s !== void 0 ? { name: n, kind: r, location: { uri: i, range: s } } : { name: n, kind: r, location: { uri: i } };
  }
  e.create = t;
})(l1 || (l1 = {}));
var u1;
(function(e) {
  function t(r, i, s, a, o, l) {
    let u = {
      name: r,
      detail: i,
      kind: s,
      range: a,
      selectionRange: o
    };
    return l !== void 0 && (u.children = l), u;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return i && _.string(i.name) && _.number(i.kind) && se.is(i.range) && se.is(i.selectionRange) && (i.detail === void 0 || _.string(i.detail)) && (i.deprecated === void 0 || _.boolean(i.deprecated)) && (i.children === void 0 || Array.isArray(i.children)) && (i.tags === void 0 || Array.isArray(i.tags));
  }
  e.is = n;
})(u1 || (u1 = {}));
var c1;
(function(e) {
  e.Empty = "", e.QuickFix = "quickfix", e.Refactor = "refactor", e.RefactorExtract = "refactor.extract", e.RefactorInline = "refactor.inline", e.RefactorRewrite = "refactor.rewrite", e.Source = "source", e.SourceOrganizeImports = "source.organizeImports", e.SourceFixAll = "source.fixAll";
})(c1 || (c1 = {}));
var xn;
(function(e) {
  e.Invoked = 1, e.Automatic = 2;
})(xn || (xn = {}));
var h1;
(function(e) {
  function t(r, i, s) {
    let a = { diagnostics: r };
    return i != null && (a.only = i), s != null && (a.triggerKind = s), a;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.typedArray(i.diagnostics, bn.is) && (i.only === void 0 || _.typedArray(i.only, _.string)) && (i.triggerKind === void 0 || i.triggerKind === xn.Invoked || i.triggerKind === xn.Automatic);
  }
  e.is = n;
})(h1 || (h1 = {}));
var f1;
(function(e) {
  function t(r, i, s) {
    let a = { title: r }, o = !0;
    return typeof i == "string" ? (o = !1, a.kind = i) : St.is(i) ? a.command = i : a.edit = i, o && s !== void 0 && (a.kind = s), a;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return i && _.string(i.title) && (i.diagnostics === void 0 || _.typedArray(i.diagnostics, bn.is)) && (i.kind === void 0 || _.string(i.kind)) && (i.edit !== void 0 || i.command !== void 0) && (i.command === void 0 || St.is(i.command)) && (i.isPreferred === void 0 || _.boolean(i.isPreferred)) && (i.edit === void 0 || br.is(i.edit));
  }
  e.is = n;
})(f1 || (f1 = {}));
var d1;
(function(e) {
  function t(r, i) {
    let s = { range: r };
    return _.defined(i) && (s.data = i), s;
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && se.is(i.range) && (_.undefined(i.command) || St.is(i.command));
  }
  e.is = n;
})(d1 || (d1 = {}));
var m1;
(function(e) {
  function t(r, i) {
    return { tabSize: r, insertSpaces: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && _.uinteger(i.tabSize) && _.boolean(i.insertSpaces);
  }
  e.is = n;
})(m1 || (m1 = {}));
var g1;
(function(e) {
  function t(r, i, s) {
    return { range: r, target: i, data: s };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.defined(i) && se.is(i.range) && (_.undefined(i.target) || _.string(i.target));
  }
  e.is = n;
})(g1 || (g1 = {}));
var p1;
(function(e) {
  function t(r, i) {
    return { range: r, parent: i };
  }
  e.create = t;
  function n(r) {
    let i = r;
    return _.objectLiteral(i) && se.is(i.range) && (i.parent === void 0 || e.is(i.parent));
  }
  e.is = n;
})(p1 || (p1 = {}));
var b1;
(function(e) {
  e.namespace = "namespace", e.type = "type", e.class = "class", e.enum = "enum", e.interface = "interface", e.struct = "struct", e.typeParameter = "typeParameter", e.parameter = "parameter", e.variable = "variable", e.property = "property", e.enumMember = "enumMember", e.event = "event", e.function = "function", e.method = "method", e.macro = "macro", e.keyword = "keyword", e.modifier = "modifier", e.comment = "comment", e.string = "string", e.number = "number", e.regexp = "regexp", e.operator = "operator", e.decorator = "decorator";
})(b1 || (b1 = {}));
var _1;
(function(e) {
  e.declaration = "declaration", e.definition = "definition", e.readonly = "readonly", e.static = "static", e.deprecated = "deprecated", e.abstract = "abstract", e.async = "async", e.modification = "modification", e.documentation = "documentation", e.defaultLibrary = "defaultLibrary";
})(_1 || (_1 = {}));
var x1;
(function(e) {
  function t(n) {
    const r = n;
    return _.objectLiteral(r) && (r.resultId === void 0 || typeof r.resultId == "string") && Array.isArray(r.data) && (r.data.length === 0 || typeof r.data[0] == "number");
  }
  e.is = t;
})(x1 || (x1 = {}));
var v1;
(function(e) {
  function t(r, i) {
    return { range: r, text: i };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return i != null && se.is(i.range) && _.string(i.text);
  }
  e.is = n;
})(v1 || (v1 = {}));
var w1;
(function(e) {
  function t(r, i, s) {
    return { range: r, variableName: i, caseSensitiveLookup: s };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return i != null && se.is(i.range) && _.boolean(i.caseSensitiveLookup) && (_.string(i.variableName) || i.variableName === void 0);
  }
  e.is = n;
})(w1 || (w1 = {}));
var L1;
(function(e) {
  function t(r, i) {
    return { range: r, expression: i };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return i != null && se.is(i.range) && (_.string(i.expression) || i.expression === void 0);
  }
  e.is = n;
})(L1 || (L1 = {}));
var C1;
(function(e) {
  function t(r, i) {
    return { frameId: r, stoppedLocation: i };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.defined(i) && se.is(r.stoppedLocation);
  }
  e.is = n;
})(C1 || (C1 = {}));
var xr;
(function(e) {
  e.Type = 1, e.Parameter = 2;
  function t(n) {
    return n === 1 || n === 2;
  }
  e.is = t;
})(xr || (xr = {}));
var vr;
(function(e) {
  function t(r) {
    return { value: r };
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && (i.tooltip === void 0 || _.string(i.tooltip) || jt.is(i.tooltip)) && (i.location === void 0 || pn.is(i.location)) && (i.command === void 0 || St.is(i.command));
  }
  e.is = n;
})(vr || (vr = {}));
var S1;
(function(e) {
  function t(r, i, s) {
    const a = { position: r, label: i };
    return s !== void 0 && (a.kind = s), a;
  }
  e.create = t;
  function n(r) {
    const i = r;
    return _.objectLiteral(i) && Re.is(i.position) && (_.string(i.label) || _.typedArray(i.label, vr.is)) && (i.kind === void 0 || xr.is(i.kind)) && i.textEdits === void 0 || _.typedArray(i.textEdits, At.is) && (i.tooltip === void 0 || _.string(i.tooltip) || jt.is(i.tooltip)) && (i.paddingLeft === void 0 || _.boolean(i.paddingLeft)) && (i.paddingRight === void 0 || _.boolean(i.paddingRight));
  }
  e.is = n;
})(S1 || (S1 = {}));
var A1;
(function(e) {
  function t(n) {
    return { kind: "snippet", value: n };
  }
  e.createSnippet = t;
})(A1 || (A1 = {}));
var N1;
(function(e) {
  function t(n, r, i, s) {
    return { insertText: n, filterText: r, range: i, command: s };
  }
  e.create = t;
})(N1 || (N1 = {}));
var R1;
(function(e) {
  function t(n) {
    return { items: n };
  }
  e.create = t;
})(R1 || (R1 = {}));
var y1;
(function(e) {
  e.Invoked = 0, e.Automatic = 1;
})(y1 || (y1 = {}));
var E1;
(function(e) {
  function t(n, r) {
    return { range: n, text: r };
  }
  e.create = t;
})(E1 || (E1 = {}));
var k1;
(function(e) {
  function t(n, r) {
    return { triggerKind: n, selectedCompletionInfo: r };
  }
  e.create = t;
})(k1 || (k1 = {}));
var M1;
(function(e) {
  function t(n) {
    const r = n;
    return _.objectLiteral(r) && ur.is(r.uri) && _.string(r.name);
  }
  e.is = t;
})(M1 || (M1 = {}));
var P1;
(function(e) {
  function t(s, a, o, l) {
    return new $u(s, a, o, l);
  }
  e.create = t;
  function n(s) {
    let a = s;
    return !!(_.defined(a) && _.string(a.uri) && (_.undefined(a.languageId) || _.string(a.languageId)) && _.uinteger(a.lineCount) && _.func(a.getText) && _.func(a.positionAt) && _.func(a.offsetAt));
  }
  e.is = n;
  function r(s, a) {
    let o = s.getText(), l = i(a, (h, f) => {
      let m = h.range.start.line - f.range.start.line;
      return m === 0 ? h.range.start.character - f.range.start.character : m;
    }), u = o.length;
    for (let h = l.length - 1; h >= 0; h--) {
      let f = l[h], m = s.offsetAt(f.range.start), d = s.offsetAt(f.range.end);
      if (d <= u)
        o = o.substring(0, m) + f.newText + o.substring(d, o.length);
      else
        throw new Error("Overlapping edit");
      u = m;
    }
    return o;
  }
  e.applyEdits = r;
  function i(s, a) {
    if (s.length <= 1)
      return s;
    const o = s.length / 2 | 0, l = s.slice(0, o), u = s.slice(o);
    i(l, a), i(u, a);
    let h = 0, f = 0, m = 0;
    for (; h < l.length && f < u.length; )
      a(l[h], u[f]) <= 0 ? s[m++] = l[h++] : s[m++] = u[f++];
    for (; h < l.length; )
      s[m++] = l[h++];
    for (; f < u.length; )
      s[m++] = u[f++];
    return s;
  }
})(P1 || (P1 = {}));
var $u = class {
  constructor(e, t, n, r) {
    this._uri = e, this._languageId = t, this._version = n, this._content = r, this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(e) {
    if (e) {
      let t = this.offsetAt(e.start), n = this.offsetAt(e.end);
      return this._content.substring(t, n);
    }
    return this._content;
  }
  update(e, t) {
    this._content = e.text, this._version = t, this._lineOffsets = void 0;
  }
  getLineOffsets() {
    if (this._lineOffsets === void 0) {
      let e = [], t = this._content, n = !0;
      for (let r = 0; r < t.length; r++) {
        n && (e.push(r), n = !1);
        let i = t.charAt(r);
        n = i === "\r" || i === `
`, i === "\r" && r + 1 < t.length && t.charAt(r + 1) === `
` && r++;
      }
      n && t.length > 0 && e.push(t.length), this._lineOffsets = e;
    }
    return this._lineOffsets;
  }
  positionAt(e) {
    e = Math.max(Math.min(e, this._content.length), 0);
    let t = this.getLineOffsets(), n = 0, r = t.length;
    if (r === 0)
      return Re.create(0, e);
    for (; n < r; ) {
      let s = Math.floor((n + r) / 2);
      t[s] > e ? r = s : n = s + 1;
    }
    let i = n - 1;
    return Re.create(i, e - t[i]);
  }
  offsetAt(e) {
    let t = this.getLineOffsets();
    if (e.line >= t.length)
      return this._content.length;
    if (e.line < 0)
      return 0;
    let n = t[e.line], r = e.line + 1 < t.length ? t[e.line + 1] : this._content.length;
    return Math.max(Math.min(n + e.character, r), n);
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
}, _;
(function(e) {
  const t = Object.prototype.toString;
  function n(d) {
    return typeof d < "u";
  }
  e.defined = n;
  function r(d) {
    return typeof d > "u";
  }
  e.undefined = r;
  function i(d) {
    return d === !0 || d === !1;
  }
  e.boolean = i;
  function s(d) {
    return t.call(d) === "[object String]";
  }
  e.string = s;
  function a(d) {
    return t.call(d) === "[object Number]";
  }
  e.number = a;
  function o(d, p, b) {
    return t.call(d) === "[object Number]" && p <= d && d <= b;
  }
  e.numberRange = o;
  function l(d) {
    return t.call(d) === "[object Number]" && -2147483648 <= d && d <= 2147483647;
  }
  e.integer = l;
  function u(d) {
    return t.call(d) === "[object Number]" && 0 <= d && d <= 2147483647;
  }
  e.uinteger = u;
  function h(d) {
    return t.call(d) === "[object Function]";
  }
  e.func = h;
  function f(d) {
    return d !== null && typeof d == "object";
  }
  e.objectLiteral = f;
  function m(d, p) {
    return Array.isArray(d) && d.every(p);
  }
  e.typedArray = m;
})(_ || (_ = {}));
var $1 = class wr {
  constructor(t, n, r, i) {
    this._uri = t, this._languageId = n, this._version = r, this._content = i, this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(t) {
    if (t) {
      const n = this.offsetAt(t.start), r = this.offsetAt(t.end);
      return this._content.substring(n, r);
    }
    return this._content;
  }
  update(t, n) {
    for (let r of t)
      if (wr.isIncremental(r)) {
        const i = ba(r.range), s = this.offsetAt(i.start), a = this.offsetAt(i.end);
        this._content = this._content.substring(0, s) + r.text + this._content.substring(a, this._content.length);
        const o = Math.max(i.start.line, 0), l = Math.max(i.end.line, 0);
        let u = this._lineOffsets;
        const h = F1(r.text, !1, s);
        if (l - o === h.length)
          for (let m = 0, d = h.length; m < d; m++)
            u[m + o + 1] = h[m];
        else
          h.length < 1e4 ? u.splice(o + 1, l - o, ...h) : this._lineOffsets = u = u.slice(0, o + 1).concat(h, u.slice(l + 1));
        const f = r.text.length - (a - s);
        if (f !== 0)
          for (let m = o + 1 + h.length, d = u.length; m < d; m++)
            u[m] = u[m] + f;
      } else if (wr.isFull(r))
        this._content = r.text, this._lineOffsets = void 0;
      else
        throw new Error("Unknown change event received");
    this._version = n;
  }
  getLineOffsets() {
    return this._lineOffsets === void 0 && (this._lineOffsets = F1(this._content, !0)), this._lineOffsets;
  }
  positionAt(t) {
    t = Math.max(Math.min(t, this._content.length), 0);
    let n = this.getLineOffsets(), r = 0, i = n.length;
    if (i === 0)
      return { line: 0, character: t };
    for (; r < i; ) {
      let a = Math.floor((r + i) / 2);
      n[a] > t ? i = a : r = a + 1;
    }
    let s = r - 1;
    return { line: s, character: t - n[s] };
  }
  offsetAt(t) {
    let n = this.getLineOffsets();
    if (t.line >= n.length)
      return this._content.length;
    if (t.line < 0)
      return 0;
    let r = n[t.line], i = t.line + 1 < n.length ? n[t.line + 1] : this._content.length;
    return Math.max(Math.min(r + t.character, i), r);
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
  static isIncremental(t) {
    let n = t;
    return n != null && typeof n.text == "string" && n.range !== void 0 && (n.rangeLength === void 0 || typeof n.rangeLength == "number");
  }
  static isFull(t) {
    let n = t;
    return n != null && typeof n.text == "string" && n.range === void 0 && n.rangeLength === void 0;
  }
}, D1;
(function(e) {
  function t(i, s, a, o) {
    return new $1(i, s, a, o);
  }
  e.create = t;
  function n(i, s, a) {
    if (i instanceof $1)
      return i.update(s, a), i;
    throw new Error("TextDocument.update: document must be created by TextDocument.create");
  }
  e.update = n;
  function r(i, s) {
    let a = i.getText(), o = Lr(s.map(Du), (h, f) => {
      let m = h.range.start.line - f.range.start.line;
      return m === 0 ? h.range.start.character - f.range.start.character : m;
    }), l = 0;
    const u = [];
    for (const h of o) {
      let f = i.offsetAt(h.range.start);
      if (f < l)
        throw new Error("Overlapping edit");
      f > l && u.push(a.substring(l, f)), h.newText.length && u.push(h.newText), l = i.offsetAt(h.range.end);
    }
    return u.push(a.substr(l)), u.join("");
  }
  e.applyEdits = r;
})(D1 || (D1 = {}));
function Lr(e, t) {
  if (e.length <= 1)
    return e;
  const n = e.length / 2 | 0, r = e.slice(0, n), i = e.slice(n);
  Lr(r, t), Lr(i, t);
  let s = 0, a = 0, o = 0;
  for (; s < r.length && a < i.length; )
    t(r[s], i[a]) <= 0 ? e[o++] = r[s++] : e[o++] = i[a++];
  for (; s < r.length; )
    e[o++] = r[s++];
  for (; a < i.length; )
    e[o++] = i[a++];
  return e;
}
function F1(e, t, n = 0) {
  const r = t ? [n] : [];
  for (let i = 0; i < e.length; i++) {
    let s = e.charCodeAt(i);
    (s === 13 || s === 10) && (s === 13 && i + 1 < e.length && e.charCodeAt(i + 1) === 10 && i++, r.push(n + i + 1));
  }
  return r;
}
function ba(e) {
  const t = e.start, n = e.end;
  return t.line > n.line || t.line === n.line && t.character > n.character ? { start: n, end: t } : e;
}
function Du(e) {
  const t = ba(e.range);
  return t !== e.range ? { newText: e.newText, range: t } : e;
}
var I1;
(function(e) {
  e.LATEST = {
    textDocument: {
      completion: {
        completionItem: {
          documentationFormat: [tt.Markdown, tt.PlainText]
        }
      },
      hover: {
        contentFormat: [tt.Markdown, tt.PlainText]
      }
    }
  };
})(I1 || (I1 = {}));
var V1;
(function(e) {
  e[e.Unknown = 0] = "Unknown", e[e.File = 1] = "File", e[e.Directory = 2] = "Directory", e[e.SymbolicLink = 64] = "SymbolicLink";
})(V1 || (V1 = {}));
g("Creates a Color from red, green, and blue values."), g("Creates a Color from red, green, blue, and alpha values."), g("Creates a Color from the red, green, and blue values of another Color."), g("Creates a Color from hue, saturation, and lightness values."), g("Creates a Color from hue, saturation, lightness, and alpha values."), g("Creates a Color from the hue, saturation, and lightness values of another Color."), g("Creates a Color from hue, white, and black values."), g("Creates a Color from the hue, white, and black values of another Color."), g("Creates a Color from lightness, a, and b values."), g("Creates a Color from the lightness, a, and b values of another Color."), g("Creates a Color from lightness, a, and b values."), g("Creates a Color from the lightness, a, and b values of another Color."), g("Creates a Color from lightness, chroma, and hue values."), g("Creates a Color from the lightness, chroma, and hue values of another Color."), g("Creates a Color from lightness, chroma, and hue values."), g("Creates a Color from the lightness, chroma, and hue values of another Color."), g("Creates a Color in a specific color space from red, green, and blue values."), g("Creates a Color in a specific color space from the red, green, and blue values of another Color."), g("Mix two colors together in a rectangular color space."), g("Mix two colors together in a polar color space.");
var Fu = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgrey: "#a9a9a9",
  darkgreen: "#006400",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  grey: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavender: "#e6e6fa",
  lavenderblush: "#fff0f5",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgrey: "#d3d3d3",
  lightgreen: "#90ee90",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370d8",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#d87093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  red: "#ff0000",
  rebeccapurple: "#663399",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
new RegExp(`^(${Object.keys(Fu).join("|")})$`, "i");
var Iu = {
  currentColor: "The value of the 'color' property. The computed value of the 'currentColor' keyword is the computed value of the 'color' property. If the 'currentColor' keyword is set on the 'color' property itself, it is treated as 'color:inherit' at parse time.",
  transparent: "Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value."
};
new RegExp(`^(${Object.keys(Iu).join("|")})$`, "i");
(() => {
  var e = { 470: (i) => {
    function s(l) {
      if (typeof l != "string")
        throw new TypeError("Path must be a string. Received " + JSON.stringify(l));
    }
    function a(l, u) {
      for (var h, f = "", m = 0, d = -1, p = 0, b = 0; b <= l.length; ++b) {
        if (b < l.length)
          h = l.charCodeAt(b);
        else {
          if (h === 47)
            break;
          h = 47;
        }
        if (h === 47) {
          if (!(d === b - 1 || p === 1))
            if (d !== b - 1 && p === 2) {
              if (f.length < 2 || m !== 2 || f.charCodeAt(f.length - 1) !== 46 || f.charCodeAt(f.length - 2) !== 46) {
                if (f.length > 2) {
                  var N = f.lastIndexOf("/");
                  if (N !== f.length - 1) {
                    N === -1 ? (f = "", m = 0) : m = (f = f.slice(0, N)).length - 1 - f.lastIndexOf("/"), d = b, p = 0;
                    continue;
                  }
                } else if (f.length === 2 || f.length === 1) {
                  f = "", m = 0, d = b, p = 0;
                  continue;
                }
              }
              u && (f.length > 0 ? f += "/.." : f = "..", m = 2);
            } else
              f.length > 0 ? f += "/" + l.slice(d + 1, b) : f = l.slice(d + 1, b), m = b - d - 1;
          d = b, p = 0;
        } else
          h === 46 && p !== -1 ? ++p : p = -1;
      }
      return f;
    }
    var o = { resolve: function() {
      for (var l, u = "", h = !1, f = arguments.length - 1; f >= -1 && !h; f--) {
        var m;
        f >= 0 ? m = arguments[f] : (l === void 0 && (l = process.cwd()), m = l), s(m), m.length !== 0 && (u = m + "/" + u, h = m.charCodeAt(0) === 47);
      }
      return u = a(u, !h), h ? u.length > 0 ? "/" + u : "/" : u.length > 0 ? u : ".";
    }, normalize: function(l) {
      if (s(l), l.length === 0)
        return ".";
      var u = l.charCodeAt(0) === 47, h = l.charCodeAt(l.length - 1) === 47;
      return (l = a(l, !u)).length !== 0 || u || (l = "."), l.length > 0 && h && (l += "/"), u ? "/" + l : l;
    }, isAbsolute: function(l) {
      return s(l), l.length > 0 && l.charCodeAt(0) === 47;
    }, join: function() {
      if (arguments.length === 0)
        return ".";
      for (var l, u = 0; u < arguments.length; ++u) {
        var h = arguments[u];
        s(h), h.length > 0 && (l === void 0 ? l = h : l += "/" + h);
      }
      return l === void 0 ? "." : o.normalize(l);
    }, relative: function(l, u) {
      if (s(l), s(u), l === u || (l = o.resolve(l)) === (u = o.resolve(u)))
        return "";
      for (var h = 1; h < l.length && l.charCodeAt(h) === 47; ++h)
        ;
      for (var f = l.length, m = f - h, d = 1; d < u.length && u.charCodeAt(d) === 47; ++d)
        ;
      for (var p = u.length - d, b = m < p ? m : p, N = -1, L = 0; L <= b; ++L) {
        if (L === b) {
          if (p > b) {
            if (u.charCodeAt(d + L) === 47)
              return u.slice(d + L + 1);
            if (L === 0)
              return u.slice(d + L);
          } else
            m > b && (l.charCodeAt(h + L) === 47 ? N = L : L === 0 && (N = 0));
          break;
        }
        var C = l.charCodeAt(h + L);
        if (C !== u.charCodeAt(d + L))
          break;
        C === 47 && (N = L);
      }
      var R = "";
      for (L = h + N + 1; L <= f; ++L)
        L !== f && l.charCodeAt(L) !== 47 || (R.length === 0 ? R += ".." : R += "/..");
      return R.length > 0 ? R + u.slice(d + N) : (d += N, u.charCodeAt(d) === 47 && ++d, u.slice(d));
    }, _makeLong: function(l) {
      return l;
    }, dirname: function(l) {
      if (s(l), l.length === 0)
        return ".";
      for (var u = l.charCodeAt(0), h = u === 47, f = -1, m = !0, d = l.length - 1; d >= 1; --d)
        if ((u = l.charCodeAt(d)) === 47) {
          if (!m) {
            f = d;
            break;
          }
        } else
          m = !1;
      return f === -1 ? h ? "/" : "." : h && f === 1 ? "//" : l.slice(0, f);
    }, basename: function(l, u) {
      if (u !== void 0 && typeof u != "string")
        throw new TypeError('"ext" argument must be a string');
      s(l);
      var h, f = 0, m = -1, d = !0;
      if (u !== void 0 && u.length > 0 && u.length <= l.length) {
        if (u.length === l.length && u === l)
          return "";
        var p = u.length - 1, b = -1;
        for (h = l.length - 1; h >= 0; --h) {
          var N = l.charCodeAt(h);
          if (N === 47) {
            if (!d) {
              f = h + 1;
              break;
            }
          } else
            b === -1 && (d = !1, b = h + 1), p >= 0 && (N === u.charCodeAt(p) ? --p == -1 && (m = h) : (p = -1, m = b));
        }
        return f === m ? m = b : m === -1 && (m = l.length), l.slice(f, m);
      }
      for (h = l.length - 1; h >= 0; --h)
        if (l.charCodeAt(h) === 47) {
          if (!d) {
            f = h + 1;
            break;
          }
        } else
          m === -1 && (d = !1, m = h + 1);
      return m === -1 ? "" : l.slice(f, m);
    }, extname: function(l) {
      s(l);
      for (var u = -1, h = 0, f = -1, m = !0, d = 0, p = l.length - 1; p >= 0; --p) {
        var b = l.charCodeAt(p);
        if (b !== 47)
          f === -1 && (m = !1, f = p + 1), b === 46 ? u === -1 ? u = p : d !== 1 && (d = 1) : u !== -1 && (d = -1);
        else if (!m) {
          h = p + 1;
          break;
        }
      }
      return u === -1 || f === -1 || d === 0 || d === 1 && u === f - 1 && u === h + 1 ? "" : l.slice(u, f);
    }, format: function(l) {
      if (l === null || typeof l != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof l);
      return function(u, h) {
        var f = h.dir || h.root, m = h.base || (h.name || "") + (h.ext || "");
        return f ? f === h.root ? f + m : f + "/" + m : m;
      }(0, l);
    }, parse: function(l) {
      s(l);
      var u = { root: "", dir: "", base: "", ext: "", name: "" };
      if (l.length === 0)
        return u;
      var h, f = l.charCodeAt(0), m = f === 47;
      m ? (u.root = "/", h = 1) : h = 0;
      for (var d = -1, p = 0, b = -1, N = !0, L = l.length - 1, C = 0; L >= h; --L)
        if ((f = l.charCodeAt(L)) !== 47)
          b === -1 && (N = !1, b = L + 1), f === 46 ? d === -1 ? d = L : C !== 1 && (C = 1) : d !== -1 && (C = -1);
        else if (!N) {
          p = L + 1;
          break;
        }
      return d === -1 || b === -1 || C === 0 || C === 1 && d === b - 1 && d === p + 1 ? b !== -1 && (u.base = u.name = p === 0 && m ? l.slice(1, b) : l.slice(p, b)) : (p === 0 && m ? (u.name = l.slice(1, d), u.base = l.slice(1, b)) : (u.name = l.slice(p, d), u.base = l.slice(p, b)), u.ext = l.slice(d, b)), p > 0 ? u.dir = l.slice(0, p - 1) : m && (u.dir = "/"), u;
    }, sep: "/", delimiter: ":", win32: null, posix: null };
    o.posix = o, i.exports = o;
  } }, t = {};
  function n(i) {
    var s = t[i];
    if (s !== void 0)
      return s.exports;
    var a = t[i] = { exports: {} };
    return e[i](a, a.exports, n), a.exports;
  }
  n.d = (i, s) => {
    for (var a in s)
      n.o(s, a) && !n.o(i, a) && Object.defineProperty(i, a, { enumerable: !0, get: s[a] });
  }, n.o = (i, s) => Object.prototype.hasOwnProperty.call(i, s), n.r = (i) => {
    typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(i, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(i, "__esModule", { value: !0 });
  };
  var r = {};
  (() => {
    let i;
    n.r(r), n.d(r, { URI: () => m, Utils: () => Q }), typeof process == "object" ? i = process.platform === "win32" : typeof navigator == "object" && (i = navigator.userAgent.indexOf("Windows") >= 0);
    const s = /^\w[\w\d+.-]*$/, a = /^\//, o = /^\/\//;
    function l(k, v) {
      if (!k.scheme && v)
        throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${k.authority}", path: "${k.path}", query: "${k.query}", fragment: "${k.fragment}"}`);
      if (k.scheme && !s.test(k.scheme))
        throw new Error("[UriError]: Scheme contains illegal characters.");
      if (k.path) {
        if (k.authority) {
          if (!a.test(k.path))
            throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
        } else if (o.test(k.path))
          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
      }
    }
    const u = "", h = "/", f = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
    class m {
      constructor(v, w, x, E, y, M = !1) {
        qe(this, "scheme");
        qe(this, "authority");
        qe(this, "path");
        qe(this, "query");
        qe(this, "fragment");
        typeof v == "object" ? (this.scheme = v.scheme || u, this.authority = v.authority || u, this.path = v.path || u, this.query = v.query || u, this.fragment = v.fragment || u) : (this.scheme = /* @__PURE__ */ function(I, V) {
          return I || V ? I : "file";
        }(v, M), this.authority = w || u, this.path = function(I, V) {
          switch (I) {
            case "https":
            case "http":
            case "file":
              V ? V[0] !== h && (V = h + V) : V = h;
          }
          return V;
        }(this.scheme, x || u), this.query = E || u, this.fragment = y || u, l(this, M));
      }
      static isUri(v) {
        return v instanceof m || !!v && typeof v.authority == "string" && typeof v.fragment == "string" && typeof v.path == "string" && typeof v.query == "string" && typeof v.scheme == "string" && typeof v.fsPath == "string" && typeof v.with == "function" && typeof v.toString == "function";
      }
      get fsPath() {
        return C(this);
      }
      with(v) {
        if (!v)
          return this;
        let { scheme: w, authority: x, path: E, query: y, fragment: M } = v;
        return w === void 0 ? w = this.scheme : w === null && (w = u), x === void 0 ? x = this.authority : x === null && (x = u), E === void 0 ? E = this.path : E === null && (E = u), y === void 0 ? y = this.query : y === null && (y = u), M === void 0 ? M = this.fragment : M === null && (M = u), w === this.scheme && x === this.authority && E === this.path && y === this.query && M === this.fragment ? this : new p(w, x, E, y, M);
      }
      static parse(v, w = !1) {
        const x = f.exec(v);
        return x ? new p(x[2] || u, P(x[4] || u), P(x[5] || u), P(x[7] || u), P(x[9] || u), w) : new p(u, u, u, u, u);
      }
      static file(v) {
        let w = u;
        if (i && (v = v.replace(/\\/g, h)), v[0] === h && v[1] === h) {
          const x = v.indexOf(h, 2);
          x === -1 ? (w = v.substring(2), v = h) : (w = v.substring(2, x), v = v.substring(x) || h);
        }
        return new p("file", w, v, u, u);
      }
      static from(v) {
        const w = new p(v.scheme, v.authority, v.path, v.query, v.fragment);
        return l(w, !0), w;
      }
      toString(v = !1) {
        return R(this, v);
      }
      toJSON() {
        return this;
      }
      static revive(v) {
        if (v) {
          if (v instanceof m)
            return v;
          {
            const w = new p(v);
            return w._formatted = v.external, w._fsPath = v._sep === d ? v.fsPath : null, w;
          }
        }
        return v;
      }
    }
    const d = i ? 1 : void 0;
    class p extends m {
      constructor() {
        super(...arguments);
        qe(this, "_formatted", null);
        qe(this, "_fsPath", null);
      }
      get fsPath() {
        return this._fsPath || (this._fsPath = C(this)), this._fsPath;
      }
      toString(w = !1) {
        return w ? R(this, !0) : (this._formatted || (this._formatted = R(this, !1)), this._formatted);
      }
      toJSON() {
        const w = { $mid: 1 };
        return this._fsPath && (w.fsPath = this._fsPath, w._sep = d), this._formatted && (w.external = this._formatted), this.path && (w.path = this.path), this.scheme && (w.scheme = this.scheme), this.authority && (w.authority = this.authority), this.query && (w.query = this.query), this.fragment && (w.fragment = this.fragment), w;
      }
    }
    const b = { 58: "%3A", 47: "%2F", 63: "%3F", 35: "%23", 91: "%5B", 93: "%5D", 64: "%40", 33: "%21", 36: "%24", 38: "%26", 39: "%27", 40: "%28", 41: "%29", 42: "%2A", 43: "%2B", 44: "%2C", 59: "%3B", 61: "%3D", 32: "%20" };
    function N(k, v, w) {
      let x, E = -1;
      for (let y = 0; y < k.length; y++) {
        const M = k.charCodeAt(y);
        if (M >= 97 && M <= 122 || M >= 65 && M <= 90 || M >= 48 && M <= 57 || M === 45 || M === 46 || M === 95 || M === 126 || v && M === 47 || w && M === 91 || w && M === 93 || w && M === 58)
          E !== -1 && (x += encodeURIComponent(k.substring(E, y)), E = -1), x !== void 0 && (x += k.charAt(y));
        else {
          x === void 0 && (x = k.substr(0, y));
          const I = b[M];
          I !== void 0 ? (E !== -1 && (x += encodeURIComponent(k.substring(E, y)), E = -1), x += I) : E === -1 && (E = y);
        }
      }
      return E !== -1 && (x += encodeURIComponent(k.substring(E))), x !== void 0 ? x : k;
    }
    function L(k) {
      let v;
      for (let w = 0; w < k.length; w++) {
        const x = k.charCodeAt(w);
        x === 35 || x === 63 ? (v === void 0 && (v = k.substr(0, w)), v += b[x]) : v !== void 0 && (v += k[w]);
      }
      return v !== void 0 ? v : k;
    }
    function C(k, v) {
      let w;
      return w = k.authority && k.path.length > 1 && k.scheme === "file" ? `//${k.authority}${k.path}` : k.path.charCodeAt(0) === 47 && (k.path.charCodeAt(1) >= 65 && k.path.charCodeAt(1) <= 90 || k.path.charCodeAt(1) >= 97 && k.path.charCodeAt(1) <= 122) && k.path.charCodeAt(2) === 58 ? k.path[1].toLowerCase() + k.path.substr(2) : k.path, i && (w = w.replace(/\//g, "\\")), w;
    }
    function R(k, v) {
      const w = v ? L : N;
      let x = "", { scheme: E, authority: y, path: M, query: I, fragment: V } = k;
      if (E && (x += E, x += ":"), (y || E === "file") && (x += h, x += h), y) {
        let O = y.indexOf("@");
        if (O !== -1) {
          const te = y.substr(0, O);
          y = y.substr(O + 1), O = te.lastIndexOf(":"), O === -1 ? x += w(te, !1, !1) : (x += w(te.substr(0, O), !1, !1), x += ":", x += w(te.substr(O + 1), !1, !0)), x += "@";
        }
        y = y.toLowerCase(), O = y.lastIndexOf(":"), O === -1 ? x += w(y, !1, !0) : (x += w(y.substr(0, O), !1, !0), x += y.substr(O));
      }
      if (M) {
        if (M.length >= 3 && M.charCodeAt(0) === 47 && M.charCodeAt(2) === 58) {
          const O = M.charCodeAt(1);
          O >= 65 && O <= 90 && (M = `/${String.fromCharCode(O + 32)}:${M.substr(3)}`);
        } else if (M.length >= 2 && M.charCodeAt(1) === 58) {
          const O = M.charCodeAt(0);
          O >= 65 && O <= 90 && (M = `${String.fromCharCode(O + 32)}:${M.substr(2)}`);
        }
        x += w(M, !0, !1);
      }
      return I && (x += "?", x += w(I, !1, !1)), V && (x += "#", x += v ? V : N(V, !1, !1)), x;
    }
    function S(k) {
      try {
        return decodeURIComponent(k);
      } catch {
        return k.length > 3 ? k.substr(0, 3) + S(k.substr(3)) : k;
      }
    }
    const A = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
    function P(k) {
      return k.match(A) ? k.replace(A, (v) => S(v)) : k;
    }
    var $ = n(470);
    const D = $.posix || $, q = "/";
    var Q;
    (function(k) {
      k.joinPath = function(v, ...w) {
        return v.with({ path: D.join(v.path, ...w) });
      }, k.resolvePath = function(v, ...w) {
        let x = v.path, E = !1;
        x[0] !== q && (x = q + x, E = !0);
        let y = D.resolve(x, ...w);
        return E && y[0] === q && !v.authority && (y = y.substring(1)), v.with({ path: y });
      }, k.dirname = function(v) {
        if (v.path.length === 0 || v.path === q)
          return v;
        let w = D.dirname(v.path);
        return w.length === 1 && w.charCodeAt(0) === 46 && (w = ""), v.with({ path: w });
      }, k.basename = function(v) {
        return D.basename(v.path);
      }, k.extname = function(v) {
        return D.extname(v.path);
      };
    })(Q || (Q = {}));
  })();
})();
ke.Snippet;
var U1;
(function(e) {
  e.Enums = " ", e.Normal = "d", e.VendorPrefixed = "x", e.Term = "y", e.Variable = "z";
})(U1 || (U1 = {}));
var B1;
(function(e) {
  function t(r, i) {
    return i + n(r) + i;
  }
  e.ensure = t;
  function n(r) {
    const i = r.match(/^['"](.*)["']$/);
    return i ? i[1] : r;
  }
  e.remove = n;
})(B1 || (B1 = {}));
var ct = Ht.Warning, q1 = Ht.Error, Se = Ht.Ignore, ae = class {
  constructor(e, t, n) {
    this.id = e, this.message = t, this.defaultValue = n;
  }
}, Vu = class {
  constructor(e, t, n) {
    this.id = e, this.message = t, this.defaultValue = n;
  }
};
new ae("compatibleVendorPrefixes", g("When using a vendor-specific prefix make sure to also include all other vendor-specific properties"), Se), new ae("vendorPrefix", g("When using a vendor-specific prefix also include the standard property"), ct), new ae("duplicateProperties", g("Do not use duplicate style definitions"), Se), new ae("emptyRules", g("Do not use empty rulesets"), ct), new ae("importStatement", g("Import statements do not load in parallel"), Se), new ae("boxModel", g("Do not use width or height when using padding or border"), Se), new ae("universalSelector", g("The universal selector (*) is known to be slow"), Se), new ae("zeroUnits", g("No unit for zero needed"), Se), new ae("fontFaceProperties", g("@font-face rule must define 'src' and 'font-family' properties"), ct), new ae("hexColorLength", g("Hex colors must consist of three, four, six or eight hex numbers"), q1), new ae("argumentsInColorFunction", g("Invalid number of parameters"), q1), new ae("unknownProperties", g("Unknown property."), ct), new ae("unknownAtRules", g("Unknown at-rule."), ct), new ae("ieHack", g("IE hacks are only necessary when supporting IE7 and older"), Se), new ae("unknownVendorSpecificProperties", g("Unknown vendor specific property."), Se), new ae("propertyIgnoredDueToDisplay", g("Property is ignored due to the display."), ct), new ae("important", g("Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."), Se), new ae("float", g("Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."), Se), new ae("idSelector", g("Selectors should not contain IDs because these rules are too tightly coupled with the HTML."), Se);
new Vu("validProperties", g("A list of properties that are not validated against the `unknownProperties` rule."), []);
j.CustomToken;
var In = class {
  constructor(e, t) {
    this.id = e, this.message = t;
  }
};
new In("scss-fromexpected", g("'from' expected")), new In("scss-throughexpected", g("'through' or 'to' expected")), new In("scss-fromexpected", g("'in' expected"));
var Fe = g("Sass documentation");
g("Gets the red component of a color."), g("Gets the green component of a color."), g("Gets the blue component of a color."), g("Mixes two colors together."), g("Gets the hue component of a color."), g("Gets the saturation component of a color."), g("Gets the lightness component of a color."), g("Changes the hue of a color."), g("Makes a color lighter."), g("Makes a color darker."), g("Makes a color more saturated."), g("Makes a color less saturated."), g("Converts a color to grayscale."), g("Returns the complement of a color."), g("Returns the inverse of a color."), g("Gets the opacity component of a color."), g("Changes the alpha component for a color."), g("Makes a color more opaque."), g("Makes a color more opaque."), g("Makes a color more transparent."), g("Makes a color more transparent."), g("Increases or decreases one or more components of a color."), g("Fluidly scales one or more properties of a color."), g("Changes one or more properties of a color."), g("Converts a color into the format understood by IE filters.");
g("Nests selector beneath one another like they would be nested in the stylesheet."), g("Appends selectors to one another without spaces in between."), g("Extends $extendee with $extender within $selector."), g("Replaces $original with $replacement within $selector."), g("Unifies two selectors to produce a selector that matches elements matched by both."), g("Returns whether $super matches all the elements $sub does, and possibly more."), g("Returns the simple selectors that comprise a compound selector."), g("Parses a selector into the format returned by &.");
g("Removes quotes from a string."), g("Adds quotes to a string."), g("Returns the number of characters in a string."), g("Inserts $insert into $string at $index."), g("Returns the index of the first occurance of $substring in $string."), g("Extracts a substring from $string."), g("Converts a string to upper case."), g("Converts a string to lower case."), g("Converts a unitless number to a percentage."), g("Rounds a number to the nearest whole number."), g("Rounds a number up to the next whole number."), g("Rounds a number down to the previous whole number."), g("Returns the absolute value of a number."), g("Finds the minimum of several numbers."), g("Finds the maximum of several numbers."), g("Returns a random number."), g("Returns the length of a list."), g("Returns a specific item in a list."), g("Replaces the nth item in a list."), g("Joins together two lists into one."), g("Appends a single value onto the end of a list."), g("Combines several lists into a single multidimensional list."), g("Returns the position of a value within a list."), g("Returns the separator of a list."), g("Returns the value in a map associated with a given key."), g("Merges two maps together into a new map."), g("Returns a new map with keys removed."), g("Returns a list of all keys in a map."), g("Returns a list of all values in a map."), g("Returns whether a map has a value associated with a given key."), g("Returns the keywords passed to a function that takes variable arguments."), g("Returns whether a feature exists in the current Sass runtime."), g("Returns whether a variable with the given name exists in the current scope."), g("Returns whether a variable with the given name exists in the global scope."), g("Returns whether a function with the given name exists."), g("Returns whether a mixin with the given name exists."), g("Returns the string representation of a value as it would be represented in Sass."), g("Returns the type of a value."), g("Returns the unit(s) associated with a number."), g("Returns whether a number has units."), g("Returns whether two numbers can be added, subtracted, or compared."), g("Dynamically calls a Sass function.");
g("Inherits the styles of another selector."), fe.Keyword, g("Causes one or more rules to be emitted at the root of the document."), fe.Keyword, g("Prints the value of an expression to the standard error output stream. Useful for debugging complicated Sass files."), fe.Keyword, g("Prints the value of an expression to the standard error output stream. Useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. Warnings can be turned off with the `--quiet` command-line option or the `:quiet` Sass option."), fe.Keyword, g("Throws the value of an expression as a fatal error with stack trace. Useful for validating arguments to mixins and functions."), fe.Keyword, g("Includes the body if the expression does not evaluate to `false` or `null`."), ke.Snippet, fe.Keyword, g("For loop that repeatedly outputs a set of styles for each `$var` in the `from/through` or `from/to` clause."), ke.Snippet, fe.Keyword, g("Each loop that sets `$var` to each item in the list or map, then outputs the styles it contains using that value of `$var`."), ke.Snippet, fe.Keyword, g("While loop that takes an expression and repeatedly outputs the nested styles until the statement evaluates to `false`."), ke.Snippet, fe.Keyword, g("Defines styles that can be re-used throughout the stylesheet with `@include`."), ke.Snippet, fe.Keyword, g("Includes the styles defined by another mixin into the current rule."), fe.Keyword, g("Defines complex operations that can be re-used throughout stylesheets."), fe.Keyword;
g("Loads mixins, functions, and variables from other Sass stylesheets as 'modules', and combines CSS from multiple stylesheets together."), ke.Snippet, fe.Keyword, g("Loads a Sass stylesheet and makes its mixins, functions, and variables available when this stylesheet is loaded with the @use rule."), ke.Snippet, fe.Keyword;
g("Provides functions that operate on numbers."), g("Makes it easy to combine, search, or split apart strings."), g("Generates new colors based on existing ones, making it easy to build color themes."), g("Lets you access and modify values in lists."), g("Makes it possible to look up the value associated with a key in a map, and much more."), g("Provides access to Sass’s powerful selector engine."), g("Exposes the details of Sass’s inner workings.");
j.CustomToken;
g("returns one of two values depending on a condition."), g('"store" a boolean test for later evaluation in a guard or if().'), g("returns the number of elements in a value list"), g("returns a value at the specified position in the list"), g("generate a list spanning a range of values"), g("bind the evaluation of a ruleset to each member of a list."), g("URL encodes a string"), g("escape string content"), g("string replace"), g("remove or change the unit of a dimension"), g("parses a string to a color"), g("converts numbers from one type into another"), g("inlines a resource and falls back to `url()`"), g("absolute value of a number"), g("arccosine - inverse of cosine function"), g("arcsine - inverse of sine function"), g("rounds up to an integer"), g("cosine function"), g("rounds down to an integer"), g("converts to a %, e.g. 0.5 > 50%"), g("rounds a number to a number of places"), g("calculates square root of a number"), g("sine function"), g("tangent function"), g("arctangent - inverse of tangent function"), g("returns pi"), g("first argument raised to the power of the second argument"), g("first argument modulus second argument"), g("returns the lowest of one or more values"), g("returns the lowest of one or more values");
g("creates a #AARRGGBB"), g("creates a color"), g("creates a color"), g("creates a color"), g("creates a color"), g("returns the `hue` channel of `@color` in the HSL space"), g("returns the `saturation` channel of `@color` in the HSL space"), g("returns the `lightness` channel of `@color` in the HSL space"), g("returns the `hue` channel of `@color` in the HSV space"), g("returns the `saturation` channel of `@color` in the HSV space"), g("returns the `value` channel of `@color` in the HSV space"), g("returns the `red` channel of `@color`"), g("returns the `green` channel of `@color`"), g("returns the `blue` channel of `@color`"), g("returns the `alpha` channel of `@color`"), g("returns the `luma` value (perceptual brightness) of `@color`"), g("return `@color` 10% points more saturated"), g("return `@color` 10% points less saturated"), g("return `@color` 10% points lighter"), g("return `@color` 10% points darker"), g("return `@color` 10% points less transparent"), g("return `@color` 10% points more transparent"), g("return `@color` with 50% transparency"), g("return `@color` with a 10 degree larger in hue"), g("return a mix of `@color1` and `@color2`"), g("returns a grey, 100% desaturated color"), g("return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes");
(function() {
  var e = [
    ,
    ,
    /* 2 */
    /***/
    function(r) {
      function i(o) {
        this.__parent = o, this.__character_count = 0, this.__indent_count = -1, this.__alignment_count = 0, this.__wrap_point_index = 0, this.__wrap_point_character_count = 0, this.__wrap_point_indent_count = -1, this.__wrap_point_alignment_count = 0, this.__items = [];
      }
      i.prototype.clone_empty = function() {
        var o = new i(this.__parent);
        return o.set_indent(this.__indent_count, this.__alignment_count), o;
      }, i.prototype.item = function(o) {
        return o < 0 ? this.__items[this.__items.length + o] : this.__items[o];
      }, i.prototype.has_match = function(o) {
        for (var l = this.__items.length - 1; l >= 0; l--)
          if (this.__items[l].match(o))
            return !0;
        return !1;
      }, i.prototype.set_indent = function(o, l) {
        this.is_empty() && (this.__indent_count = o || 0, this.__alignment_count = l || 0, this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count));
      }, i.prototype._set_wrap_point = function() {
        this.__parent.wrap_line_length && (this.__wrap_point_index = this.__items.length, this.__wrap_point_character_count = this.__character_count, this.__wrap_point_indent_count = this.__parent.next_line.__indent_count, this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count);
      }, i.prototype._should_wrap = function() {
        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
      }, i.prototype._allow_wrap = function() {
        if (this._should_wrap()) {
          this.__parent.add_new_line();
          var o = this.__parent.current_line;
          return o.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count), o.__items = this.__items.slice(this.__wrap_point_index), this.__items = this.__items.slice(0, this.__wrap_point_index), o.__character_count += this.__character_count - this.__wrap_point_character_count, this.__character_count = this.__wrap_point_character_count, o.__items[0] === " " && (o.__items.splice(0, 1), o.__character_count -= 1), !0;
        }
        return !1;
      }, i.prototype.is_empty = function() {
        return this.__items.length === 0;
      }, i.prototype.last = function() {
        return this.is_empty() ? null : this.__items[this.__items.length - 1];
      }, i.prototype.push = function(o) {
        this.__items.push(o);
        var l = o.lastIndexOf(`
`);
        l !== -1 ? this.__character_count = o.length - l : this.__character_count += o.length;
      }, i.prototype.pop = function() {
        var o = null;
        return this.is_empty() || (o = this.__items.pop(), this.__character_count -= o.length), o;
      }, i.prototype._remove_indent = function() {
        this.__indent_count > 0 && (this.__indent_count -= 1, this.__character_count -= this.__parent.indent_size);
      }, i.prototype._remove_wrap_indent = function() {
        this.__wrap_point_indent_count > 0 && (this.__wrap_point_indent_count -= 1);
      }, i.prototype.trim = function() {
        for (; this.last() === " "; )
          this.__items.pop(), this.__character_count -= 1;
      }, i.prototype.toString = function() {
        var o = "";
        return this.is_empty() ? this.__parent.indent_empty_lines && (o = this.__parent.get_indent_string(this.__indent_count)) : (o = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count), o += this.__items.join("")), o;
      };
      function s(o, l) {
        this.__cache = [""], this.__indent_size = o.indent_size, this.__indent_string = o.indent_char, o.indent_with_tabs || (this.__indent_string = new Array(o.indent_size + 1).join(o.indent_char)), l = l || "", o.indent_level > 0 && (l = new Array(o.indent_level + 1).join(this.__indent_string)), this.__base_string = l, this.__base_string_length = l.length;
      }
      s.prototype.get_indent_size = function(o, l) {
        var u = this.__base_string_length;
        return l = l || 0, o < 0 && (u = 0), u += o * this.__indent_size, u += l, u;
      }, s.prototype.get_indent_string = function(o, l) {
        var u = this.__base_string;
        return l = l || 0, o < 0 && (o = 0, u = ""), l += o * this.__indent_size, this.__ensure_cache(l), u += this.__cache[l], u;
      }, s.prototype.__ensure_cache = function(o) {
        for (; o >= this.__cache.length; )
          this.__add_column();
      }, s.prototype.__add_column = function() {
        var o = this.__cache.length, l = 0, u = "";
        this.__indent_size && o >= this.__indent_size && (l = Math.floor(o / this.__indent_size), o -= l * this.__indent_size, u = new Array(l + 1).join(this.__indent_string)), o && (u += new Array(o + 1).join(" ")), this.__cache.push(u);
      };
      function a(o, l) {
        this.__indent_cache = new s(o, l), this.raw = !1, this._end_with_newline = o.end_with_newline, this.indent_size = o.indent_size, this.wrap_line_length = o.wrap_line_length, this.indent_empty_lines = o.indent_empty_lines, this.__lines = [], this.previous_line = null, this.current_line = null, this.next_line = new i(this), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1, this.__add_outputline();
      }
      a.prototype.__add_outputline = function() {
        this.previous_line = this.current_line, this.current_line = this.next_line.clone_empty(), this.__lines.push(this.current_line);
      }, a.prototype.get_line_number = function() {
        return this.__lines.length;
      }, a.prototype.get_indent_string = function(o, l) {
        return this.__indent_cache.get_indent_string(o, l);
      }, a.prototype.get_indent_size = function(o, l) {
        return this.__indent_cache.get_indent_size(o, l);
      }, a.prototype.is_empty = function() {
        return !this.previous_line && this.current_line.is_empty();
      }, a.prototype.add_new_line = function(o) {
        return this.is_empty() || !o && this.just_added_newline() ? !1 : (this.raw || this.__add_outputline(), !0);
      }, a.prototype.get_code = function(o) {
        this.trim(!0);
        var l = this.current_line.pop();
        l && (l[l.length - 1] === `
` && (l = l.replace(/\n+$/g, "")), this.current_line.push(l)), this._end_with_newline && this.__add_outputline();
        var u = this.__lines.join(`
`);
        return o !== `
` && (u = u.replace(/[\n]/g, o)), u;
      }, a.prototype.set_wrap_point = function() {
        this.current_line._set_wrap_point();
      }, a.prototype.set_indent = function(o, l) {
        return o = o || 0, l = l || 0, this.next_line.set_indent(o, l), this.__lines.length > 1 ? (this.current_line.set_indent(o, l), !0) : (this.current_line.set_indent(), !1);
      }, a.prototype.add_raw_token = function(o) {
        for (var l = 0; l < o.newlines; l++)
          this.__add_outputline();
        this.current_line.set_indent(-1), this.current_line.push(o.whitespace_before), this.current_line.push(o.text), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = !1;
      }, a.prototype.add_token = function(o) {
        this.__add_space_before_token(), this.current_line.push(o), this.space_before_token = !1, this.non_breaking_space = !1, this.previous_token_wrapped = this.current_line._allow_wrap();
      }, a.prototype.__add_space_before_token = function() {
        this.space_before_token && !this.just_added_newline() && (this.non_breaking_space || this.set_wrap_point(), this.current_line.push(" "));
      }, a.prototype.remove_indent = function(o) {
        for (var l = this.__lines.length; o < l; )
          this.__lines[o]._remove_indent(), o++;
        this.current_line._remove_wrap_indent();
      }, a.prototype.trim = function(o) {
        for (o = o === void 0 ? !1 : o, this.current_line.trim(); o && this.__lines.length > 1 && this.current_line.is_empty(); )
          this.__lines.pop(), this.current_line = this.__lines[this.__lines.length - 1], this.current_line.trim();
        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
      }, a.prototype.just_added_newline = function() {
        return this.current_line.is_empty();
      }, a.prototype.just_added_blankline = function() {
        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
      }, a.prototype.ensure_empty_line_above = function(o, l) {
        for (var u = this.__lines.length - 2; u >= 0; ) {
          var h = this.__lines[u];
          if (h.is_empty())
            break;
          if (h.item(0).indexOf(o) !== 0 && h.item(-1) !== l) {
            this.__lines.splice(u + 1, 0, new i(this)), this.previous_line = this.__lines[this.__lines.length - 2];
            break;
          }
          u--;
        }
      }, r.exports.Output = a;
    },
    ,
    ,
    ,
    /* 6 */
    /***/
    function(r) {
      function i(o, l) {
        this.raw_options = s(o, l), this.disabled = this._get_boolean("disabled"), this.eol = this._get_characters("eol", "auto"), this.end_with_newline = this._get_boolean("end_with_newline"), this.indent_size = this._get_number("indent_size", 4), this.indent_char = this._get_characters("indent_char", " "), this.indent_level = this._get_number("indent_level"), this.preserve_newlines = this._get_boolean("preserve_newlines", !0), this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786), this.preserve_newlines || (this.max_preserve_newlines = 0), this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	"), this.indent_with_tabs && (this.indent_char = "	", this.indent_size === 1 && (this.indent_size = 4)), this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char")), this.indent_empty_lines = this._get_boolean("indent_empty_lines"), this.templating = this._get_selection_list("templating", ["auto", "none", "angular", "django", "erb", "handlebars", "php", "smarty"], ["auto"]);
      }
      i.prototype._get_array = function(o, l) {
        var u = this.raw_options[o], h = l || [];
        return typeof u == "object" ? u !== null && typeof u.concat == "function" && (h = u.concat()) : typeof u == "string" && (h = u.split(/[^a-zA-Z0-9_\/\-]+/)), h;
      }, i.prototype._get_boolean = function(o, l) {
        var u = this.raw_options[o], h = u === void 0 ? !!l : !!u;
        return h;
      }, i.prototype._get_characters = function(o, l) {
        var u = this.raw_options[o], h = l || "";
        return typeof u == "string" && (h = u.replace(/\\r/, "\r").replace(/\\n/, `
`).replace(/\\t/, "	")), h;
      }, i.prototype._get_number = function(o, l) {
        var u = this.raw_options[o];
        l = parseInt(l, 10), isNaN(l) && (l = 0);
        var h = parseInt(u, 10);
        return isNaN(h) && (h = l), h;
      }, i.prototype._get_selection = function(o, l, u) {
        var h = this._get_selection_list(o, l, u);
        if (h.length !== 1)
          throw new Error(
            "Invalid Option Value: The option '" + o + `' can only be one of the following values:
` + l + `
You passed in: '` + this.raw_options[o] + "'"
          );
        return h[0];
      }, i.prototype._get_selection_list = function(o, l, u) {
        if (!l || l.length === 0)
          throw new Error("Selection list cannot be empty.");
        if (u = u || [l[0]], !this._is_valid_selection(u, l))
          throw new Error("Invalid Default Value!");
        var h = this._get_array(o, u);
        if (!this._is_valid_selection(h, l))
          throw new Error(
            "Invalid Option Value: The option '" + o + `' can contain only the following values:
` + l + `
You passed in: '` + this.raw_options[o] + "'"
          );
        return h;
      }, i.prototype._is_valid_selection = function(o, l) {
        return o.length && l.length && !o.some(function(u) {
          return l.indexOf(u) === -1;
        });
      };
      function s(o, l) {
        var u = {};
        o = a(o);
        var h;
        for (h in o)
          h !== l && (u[h] = o[h]);
        if (l && o[l])
          for (h in o[l])
            u[h] = o[l][h];
        return u;
      }
      function a(o) {
        var l = {}, u;
        for (u in o) {
          var h = u.replace(/-/g, "_");
          l[h] = o[u];
        }
        return l;
      }
      r.exports.Options = i, r.exports.normalizeOpts = a, r.exports.mergeOpts = s;
    },
    ,
    /* 8 */
    /***/
    function(r) {
      var i = RegExp.prototype.hasOwnProperty("sticky");
      function s(a) {
        this.__input = a || "", this.__input_length = this.__input.length, this.__position = 0;
      }
      s.prototype.restart = function() {
        this.__position = 0;
      }, s.prototype.back = function() {
        this.__position > 0 && (this.__position -= 1);
      }, s.prototype.hasNext = function() {
        return this.__position < this.__input_length;
      }, s.prototype.next = function() {
        var a = null;
        return this.hasNext() && (a = this.__input.charAt(this.__position), this.__position += 1), a;
      }, s.prototype.peek = function(a) {
        var o = null;
        return a = a || 0, a += this.__position, a >= 0 && a < this.__input_length && (o = this.__input.charAt(a)), o;
      }, s.prototype.__match = function(a, o) {
        a.lastIndex = o;
        var l = a.exec(this.__input);
        return l && !(i && a.sticky) && l.index !== o && (l = null), l;
      }, s.prototype.test = function(a, o) {
        return o = o || 0, o += this.__position, o >= 0 && o < this.__input_length ? !!this.__match(a, o) : !1;
      }, s.prototype.testChar = function(a, o) {
        var l = this.peek(o);
        return a.lastIndex = 0, l !== null && a.test(l);
      }, s.prototype.match = function(a) {
        var o = this.__match(a, this.__position);
        return o ? this.__position += o[0].length : o = null, o;
      }, s.prototype.read = function(a, o, l) {
        var u = "", h;
        return a && (h = this.match(a), h && (u += h[0])), o && (h || !a) && (u += this.readUntil(o, l)), u;
      }, s.prototype.readUntil = function(a, o) {
        var l = "", u = this.__position;
        a.lastIndex = this.__position;
        var h = a.exec(this.__input);
        return h ? (u = h.index, o && (u += h[0].length)) : u = this.__input_length, l = this.__input.substring(this.__position, u), this.__position = u, l;
      }, s.prototype.readUntilAfter = function(a) {
        return this.readUntil(a, !0);
      }, s.prototype.get_regexp = function(a, o) {
        var l = null, u = "g";
        return o && i && (u = "y"), typeof a == "string" && a !== "" ? l = new RegExp(a, u) : a && (l = new RegExp(a.source, u)), l;
      }, s.prototype.get_literal_regexp = function(a) {
        return RegExp(a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
      }, s.prototype.peekUntilAfter = function(a) {
        var o = this.__position, l = this.readUntilAfter(a);
        return this.__position = o, l;
      }, s.prototype.lookBack = function(a) {
        var o = this.__position - 1;
        return o >= a.length && this.__input.substring(o - a.length, o).toLowerCase() === a;
      }, r.exports.InputScanner = s;
    },
    ,
    ,
    ,
    ,
    /* 13 */
    /***/
    function(r) {
      function i(s, a) {
        s = typeof s == "string" ? s : s.source, a = typeof a == "string" ? a : a.source, this.__directives_block_pattern = new RegExp(s + / beautify( \w+[:]\w+)+ /.source + a, "g"), this.__directive_pattern = / (\w+)[:](\w+)/g, this.__directives_end_ignore_pattern = new RegExp(s + /\sbeautify\signore:end\s/.source + a, "g");
      }
      i.prototype.get_directives = function(s) {
        if (!s.match(this.__directives_block_pattern))
          return null;
        var a = {};
        this.__directive_pattern.lastIndex = 0;
        for (var o = this.__directive_pattern.exec(s); o; )
          a[o[1]] = o[2], o = this.__directive_pattern.exec(s);
        return a;
      }, i.prototype.readIgnored = function(s) {
        return s.readUntilAfter(this.__directives_end_ignore_pattern);
      }, r.exports.Directives = i;
    },
    ,
    /* 15 */
    /***/
    function(r, i, s) {
      var a = s(16).Beautifier, o = s(17).Options;
      function l(u, h) {
        var f = new a(u, h);
        return f.beautify();
      }
      r.exports = l, r.exports.defaultOptions = function() {
        return new o();
      };
    },
    /* 16 */
    /***/
    function(r, i, s) {
      var a = s(17).Options, o = s(2).Output, l = s(8).InputScanner, u = s(13).Directives, h = new u(/\/\*/, /\*\//), f = /\r\n|[\r\n]/, m = /\r\n|[\r\n]/g, d = /\s/, p = /(?:\s|\n)+/g, b = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g, N = /\/\/(?:[^\n\r\u2028\u2029]*)/g;
      function L(C, R) {
        this._source_text = C || "", this._options = new a(R), this._ch = null, this._input = null, this.NESTED_AT_RULE = {
          page: !0,
          "font-face": !0,
          keyframes: !0,
          // also in CONDITIONAL_GROUP_RULE below
          media: !0,
          supports: !0,
          document: !0
        }, this.CONDITIONAL_GROUP_RULE = {
          media: !0,
          supports: !0,
          document: !0
        }, this.NON_SEMICOLON_NEWLINE_PROPERTY = [
          "grid-template-areas",
          "grid-template"
        ];
      }
      L.prototype.eatString = function(C) {
        var R = "";
        for (this._ch = this._input.next(); this._ch; ) {
          if (R += this._ch, this._ch === "\\")
            R += this._input.next();
          else if (C.indexOf(this._ch) !== -1 || this._ch === `
`)
            break;
          this._ch = this._input.next();
        }
        return R;
      }, L.prototype.eatWhitespace = function(C) {
        for (var R = d.test(this._input.peek()), S = 0; d.test(this._input.peek()); )
          this._ch = this._input.next(), C && this._ch === `
` && (S === 0 || S < this._options.max_preserve_newlines) && (S++, this._output.add_new_line(!0));
        return R;
      }, L.prototype.foundNestedPseudoClass = function() {
        for (var C = 0, R = 1, S = this._input.peek(R); S; ) {
          if (S === "{")
            return !0;
          if (S === "(")
            C += 1;
          else if (S === ")") {
            if (C === 0)
              return !1;
            C -= 1;
          } else if (S === ";" || S === "}")
            return !1;
          R++, S = this._input.peek(R);
        }
        return !1;
      }, L.prototype.print_string = function(C) {
        this._output.set_indent(this._indentLevel), this._output.non_breaking_space = !0, this._output.add_token(C);
      }, L.prototype.preserveSingleSpace = function(C) {
        C && (this._output.space_before_token = !0);
      }, L.prototype.indent = function() {
        this._indentLevel++;
      }, L.prototype.outdent = function() {
        this._indentLevel > 0 && this._indentLevel--;
      }, L.prototype.beautify = function() {
        if (this._options.disabled)
          return this._source_text;
        var C = this._source_text, R = this._options.eol;
        R === "auto" && (R = `
`, C && f.test(C || "") && (R = C.match(f)[0])), C = C.replace(m, `
`);
        var S = C.match(/^[\t ]*/)[0];
        this._output = new o(this._options, S), this._input = new l(C), this._indentLevel = 0, this._nestedLevel = 0, this._ch = null;
        for (var A = 0, P = !1, $ = !1, D = !1, q = !1, Q = !1, k = this._ch, v = !1, w, x, E; w = this._input.read(p), x = w !== "", E = k, this._ch = this._input.next(), this._ch === "\\" && this._input.hasNext() && (this._ch += this._input.next()), k = this._ch, this._ch; )
          if (this._ch === "/" && this._input.peek() === "*") {
            this._output.add_new_line(), this._input.back();
            var y = this._input.read(b), M = h.get_directives(y);
            M && M.ignore === "start" && (y += h.readIgnored(this._input)), this.print_string(y), this.eatWhitespace(!0), this._output.add_new_line();
          } else if (this._ch === "/" && this._input.peek() === "/")
            this._output.space_before_token = !0, this._input.back(), this.print_string(this._input.read(N)), this.eatWhitespace(!0);
          else if (this._ch === "$") {
            this.preserveSingleSpace(x), this.print_string(this._ch);
            var I = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
            I.match(/[ :]$/) && (I = this.eatString(": ").replace(/\s+$/, ""), this.print_string(I), this._output.space_before_token = !0), A === 0 && I.indexOf(":") !== -1 && ($ = !0, this.indent());
          } else if (this._ch === "@")
            if (this.preserveSingleSpace(x), this._input.peek() === "{")
              this.print_string(this._ch + this.eatString("}"));
            else {
              this.print_string(this._ch);
              var V = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
              V.match(/[ :]$/) && (V = this.eatString(": ").replace(/\s+$/, ""), this.print_string(V), this._output.space_before_token = !0), A === 0 && V.indexOf(":") !== -1 ? ($ = !0, this.indent()) : V in this.NESTED_AT_RULE ? (this._nestedLevel += 1, V in this.CONDITIONAL_GROUP_RULE && (D = !0)) : A === 0 && !$ && (q = !0);
            }
          else if (this._ch === "#" && this._input.peek() === "{")
            this.preserveSingleSpace(x), this.print_string(this._ch + this.eatString("}"));
          else if (this._ch === "{")
            $ && ($ = !1, this.outdent()), q = !1, D ? (D = !1, P = this._indentLevel >= this._nestedLevel) : P = this._indentLevel >= this._nestedLevel - 1, this._options.newline_between_rules && P && this._output.previous_line && this._output.previous_line.item(-1) !== "{" && this._output.ensure_empty_line_above("/", ","), this._output.space_before_token = !0, this._options.brace_style === "expand" ? (this._output.add_new_line(), this.print_string(this._ch), this.indent(), this._output.set_indent(this._indentLevel)) : (E === "(" ? this._output.space_before_token = !1 : E !== "," && this.indent(), this.print_string(this._ch)), this.eatWhitespace(!0), this._output.add_new_line();
          else if (this._ch === "}")
            this.outdent(), this._output.add_new_line(), E === "{" && this._output.trim(!0), $ && (this.outdent(), $ = !1), this.print_string(this._ch), P = !1, this._nestedLevel && this._nestedLevel--, this.eatWhitespace(!0), this._output.add_new_line(), this._options.newline_between_rules && !this._output.just_added_blankline() && this._input.peek() !== "}" && this._output.add_new_line(!0), this._input.peek() === ")" && (this._output.trim(!0), this._options.brace_style === "expand" && this._output.add_new_line(!0));
          else if (this._ch === ":") {
            for (var O = 0; O < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; O++)
              if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[O])) {
                v = !0;
                break;
              }
            (P || D) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !q && A === 0 ? (this.print_string(":"), $ || ($ = !0, this._output.space_before_token = !0, this.eatWhitespace(!0), this.indent())) : (this._input.lookBack(" ") && (this._output.space_before_token = !0), this._input.peek() === ":" ? (this._ch = this._input.next(), this.print_string("::")) : this.print_string(":"));
          } else if (this._ch === '"' || this._ch === "'") {
            var te = E === '"' || E === "'";
            this.preserveSingleSpace(te || x), this.print_string(this._ch + this.eatString(this._ch)), this.eatWhitespace(!0);
          } else if (this._ch === ";")
            v = !1, A === 0 ? ($ && (this.outdent(), $ = !1), q = !1, this.print_string(this._ch), this.eatWhitespace(!0), this._input.peek() !== "/" && this._output.add_new_line()) : (this.print_string(this._ch), this.eatWhitespace(!0), this._output.space_before_token = !0);
          else if (this._ch === "(")
            if (this._input.lookBack("url"))
              this.print_string(this._ch), this.eatWhitespace(), A++, this.indent(), this._ch = this._input.next(), this._ch === ")" || this._ch === '"' || this._ch === "'" ? this._input.back() : this._ch && (this.print_string(this._ch + this.eatString(")")), A && (A--, this.outdent()));
            else {
              var Pe = !1;
              this._input.lookBack("with") && (Pe = !0), this.preserveSingleSpace(x || Pe), this.print_string(this._ch), $ && E === "$" && this._options.selector_separator_newline ? (this._output.add_new_line(), Q = !0) : (this.eatWhitespace(), A++, this.indent());
            }
          else if (this._ch === ")")
            A && (A--, this.outdent()), Q && this._input.peek() === ";" && this._options.selector_separator_newline && (Q = !1, this.outdent(), this._output.add_new_line()), this.print_string(this._ch);
          else if (this._ch === ",")
            this.print_string(this._ch), this.eatWhitespace(!0), this._options.selector_separator_newline && (!$ || Q) && A === 0 && !q ? this._output.add_new_line() : this._output.space_before_token = !0;
          else if ((this._ch === ">" || this._ch === "+" || this._ch === "~") && !$ && A === 0)
            this._options.space_around_combinator ? (this._output.space_before_token = !0, this.print_string(this._ch), this._output.space_before_token = !0) : (this.print_string(this._ch), this.eatWhitespace(), this._ch && d.test(this._ch) && (this._ch = ""));
          else if (this._ch === "]")
            this.print_string(this._ch);
          else if (this._ch === "[")
            this.preserveSingleSpace(x), this.print_string(this._ch);
          else if (this._ch === "=")
            this.eatWhitespace(), this.print_string("="), d.test(this._ch) && (this._ch = "");
          else if (this._ch === "!" && !this._input.lookBack("\\"))
            this._output.space_before_token = !0, this.print_string(this._ch);
          else {
            var it = E === '"' || E === "'";
            this.preserveSingleSpace(it || x), this.print_string(this._ch), !this._output.just_added_newline() && this._input.peek() === `
` && v && this._output.add_new_line();
          }
        var $e = this._output.get_code(R);
        return $e;
      }, r.exports.Beautifier = L;
    },
    /* 17 */
    /***/
    function(r, i, s) {
      var a = s(6).Options;
      function o(l) {
        a.call(this, l, "css"), this.selector_separator_newline = this._get_boolean("selector_separator_newline", !0), this.newline_between_rules = this._get_boolean("newline_between_rules", !0);
        var u = this._get_boolean("space_around_selector_separator");
        this.space_around_combinator = this._get_boolean("space_around_combinator") || u;
        var h = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
        this.brace_style = "collapse";
        for (var f = 0; f < h.length; f++)
          h[f] !== "expand" ? this.brace_style = "collapse" : this.brace_style = h[f];
      }
      o.prototype = new a(), r.exports.Options = o;
    }
    /******/
  ], t = {};
  function n(r) {
    var i = t[r];
    if (i !== void 0)
      return i.exports;
    var s = t[r] = {
      /******/
      // no module.id needed
      /******/
      // no module.loaded needed
      /******/
      exports: {}
      /******/
    };
    return e[r](s, s.exports, n), s.exports;
  }
  n(15);
})();
self.onmessage = () => {
  pa();
};


//# sourceMappingURL=vendors-node_modules_monaco-editor-wrapper_dist_workers_cssWorker-es_js.immt_editor.js.map