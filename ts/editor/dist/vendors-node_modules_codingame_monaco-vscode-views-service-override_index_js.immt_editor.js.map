{"version":3,"file":"vendors-node_modules_codingame_monaco-vscode-views-service-override_index_js.immt_editor.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAgO;AAC1E;AACA;AAC7C;AACtB;AACgB;AACsO;AACzP;AACqB;AACpB;AACkC;AACR;AACQ;AAChC;AACF;AACmB;AACgC;AACM;;;;;;;;;;;;;;;;;;;ACjB1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CE;AAC0B;AACH;AACe;AACK;AACpB;AACsC;AAC1C;AAC6B;AACrD;AAC6B;AACoB;AAChB;AACQ;AACK;AACO;AAClB;AACC;AACpB;AAC+B;AACtB;AACzB;AACuC;AACP;AAClC;AACxB;;AAE1C;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC;AACA,wBAAwB,6EAAU;AAClC,mCAAmC,mDAAW;AAC9C,0BAA0B,sEAAK;AAC/B,mCAAmC,sEAAK;AACxC;AACA;AACA,yBAAyB,mDAAW;AACpC,kCAAkC,mDAAW;AAC7C,wBAAwB,mDAAW;AACnC,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA;AACA;AACA;AACA,2BAA2B,sEAAK;AAChC,sBAAsB,mDAAW;AACjC,gCAAgC,sEAAK;AACrC,6BAA6B,sEAAK;AAClC,uCAAuC,sEAAK;AAC5C,iCAAiC,sEAAK;AACtC,gCAAgC,sEAAK;AACrC,gCAAgC,sEAAK;AACrC,gCAAgC,sEAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAW;AAC3C,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC;AACA;AACA;AACA;AACA,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,2BAA2B,mDAAW;AACtC,4BAA4B,mDAAW;AACvC,+BAA+B,mDAAW;AAC1C,8BAA8B,mDAAW;AACzC;AACA;AACA;AACA;AACA,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,6GAAkB,KAAK,+GAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAK;AACvC,0CAA0C,sEAAK;AAC/C,0BAA0B,sEAAK;AAC/B,yBAAyB,sEAAK;AAC9B;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC,yBAAyB,mDAAW;AACpC,wBAAwB,mDAAW;AACnC,qBAAqB,mDAAW;AAChC,wBAAwB,mDAAW;AACnC,qBAAqB,mDAAW;AAChC;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAa;AACrC;AACA;AACA,YAAY,iHAAgB;AAC5B;AACA;AACA,yBAAyB,+FAAqB,YAAY,uFAAa;AACvE;AACA;AACA;AACA;AACA,4BAA4B,6GAAkB,KAAK,0GAAkB;AACrE,qEAAqE,6GAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,uGAAU;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8GAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4GAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6GAAkB,KAAK,0GAAkB;AAC3E,sEAAsE,iHAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAU;AAChC,MAAM,2EAAO,IAAI,gIAAoB;AACrC,MAAM,2EAAO,IAAI,gHAAqB;AACtC,MAAM,2EAAO,IAAI,+FAAY;AAC7B,MAAM,2EAAO,IAAI,wHAAqB;AACtC,MAAM,2EAAO,IAAI,mHAAwB;AACzC,MAAM,2EAAO,IAAI,kHAAmB;AACpC,MAAM,2EAAO,IAAI,oIAAsB;AACvC,MAAM,2EAAO,IAAI,6HAA6B;AAC9C,MAAM,2EAAO,KAAK,wGAAY;AAC9B,MAAM,2EAAO,KAAK,8HAAkB;AACpC,MAAM,2EAAO,KAAK,sGAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAK;AACvC;AACA;AACA;AACA;AACA;AACA,0CAA0C,sEAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,8EAAU;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC;AACA,wBAAwB,6EAAU;AAClC;AACA,mCAAmC,sEAAK;AACxC;AACA;AACA,kCAAkC,mDAAW;AAC7C,wBAAwB,mDAAW;AACnC,sBAAsB,mDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAO;AAC5C;AACA;AACA,4CAA4C,wEAAO;AACnD;AACA,iCAAiC,sEAAK;AACtC,qCAAqC,wEAAO;AAC5C;AACA,gCAAgC,sEAAK;AACrC,qCAAqC,wEAAO;AAC5C;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sHAAuB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,2BAA2B,mDAAW;AACtC,4BAA4B,mDAAW;AACvC,+BAA+B,mDAAW;AAC1C,8BAA8B,mDAAW;AACzC;AACA;AACA;AACA;AACA,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA,oEAAoE,sHAAuB;AAC3F;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,wFAAkB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oEAAoE,sHAAuB;AAC3F;AACA;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB,sEAAK;AAC9B;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8EAAU;AAC5D,MAAM,2EAAO,IAAI,gHAAqB;AACtC,MAAM,2EAAO,IAAI,+GAAkB;AACnC;AACA,wFAAwF,8EAAU;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wEAAO;AAClD,sCAAsC,sEAAK;AAC3C,kCAAkC,wEAAO;AACzC,6BAA6B,sEAAK;AAClC,qCAAqC,wEAAO;AAC5C,gCAAgC,sEAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6GAAkB,KAAK,0GAAkB;AAC/E;AACA,sCAAsC,6GAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6GAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8EAAU;AAC9C,MAAM,2EAAO,IAAI,gHAAqB;AACtC;;AAEmG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrpBP;AACvB;AACW;AACY;AAChC;AACuB;AACL;AACuB;AACA;AAC9C;AACS;AACmD;AACM;AACtC;AACA;AACP;AACO;AACiB;AACR;AACJ;AACQ;AACf;AACO;AACS;AACN;AACC;AACQ;AACA;AACb;AACN;AAC0B;AACQ;AAC1B;AAC0B;AAChB;AAClB;AAC7B;;AAEpD,iCAAiC,mGAAU;AAC3C;AACA,yBAAyB,8GAAkB,KAAK,4GAAiB,GAAG,8GAAkB,KAAK,uGAAa,GAAG,8GAAkB,KAAK,sGAAe;AACjJ;AACA;AACA;AACA;AACA;AACA,kDAAkD,qFAAiB;AACnE;AACA;AACA;AACA;AACA;AACA,4CAA4C,+GAAoB;AAChE;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,oFAAe;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAe;AACvB;AACA;AACA,qCAAqC,qFAAgB;AACrD,QAAQ,uEAAI;AACZ;AACA;AACA;AACA,0BAA0B,oFAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8FAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wFAAQ,IAAI,uFAAgB,iCAAiC,4FAAoB,4DAA4D,sGAAc;AACxK;AACA;AACA,WAAW,mEAAiB;AAC5B,qDAAqD,oIAAsB;AAC3E;AACA,KAAK;AACL;AACA;AACA,aAAa,wFAAQ,IAAI,uFAAgB;AACzC;AACA,gCAAgC,wFAAQ,IAAI,+EAAU;AACtD,uBAAuB,wFAAQ,IAAI,+EAAU;AAC7C;AACA,6CAA6C,iEAAG;AAChD;AACA;AACA;AACA,qBAAqB,6CAA6C;AAClE;AACA,gCAAgC,sGAAc,CAAC,+GAAiB;AAChE;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gCAAgC,sGAAc,eAAe,6FAAQ;AACrE;AACA;AACA;AACA,wDAAwD,+GAAoB;AAC5E;AACA;AACA,qBAAqB;AACrB,qCAAqC,oEAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oFAAe;AACvC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,kDAAkD,2GAAkB;AACpE;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iDAAiD,qFAAgB;AACjE,oBAAoB,uEAAI;AACxB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mFAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iCAAiC,kGAAe,eAAe,sFAAO;AACtE;AACA;AACA;AACA,6BAA6B,6CAA6C;AAC1E,8BAA8B,uGAAU;AACxC;AACA;AACA,gCAAgC,qFAAM;AACtC,oCAAoC,mGAAc;AAClD;AACA;AACA,yBAAyB;AACzB;AACA,gCAAgC,qFAAM;AACtC;AACA;AACA;AACA,gDAAgD,0EAAO;AACvD,iBAAiB;AACjB,yDAAyD;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,8GAAkB,KAAK,8HAAuB;AACzD;AACA;AACA,IAAI,8GAAkB,KAAK,8HAAuB;AAClD;AACA;AACA,WAAW,8GAAkB,KAAK,8HAAuB;AACzD;AACA;AACA,WAAW,8GAAkB,KAAK,8HAAuB;AACzD;AACA;AACA,WAAW,8GAAkB,KAAK,8HAAuB;AACzD;AACA;AACA,WAAW,8GAAkB,KAAK,8HAAuB;AACzD;;AAEuU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjT9P;AAC0B;AACP;AACH;AACY;AACqC;AACA;AACY;AAC1B;AAC0B;AAClB;AACA;AAC7E;AACkD;AACY;AACZ;AACR;AACd;AACiB;AACD;AACR;AACP;AACY;AACW;AAC8C;AAC1E;AACf;AAC6C;AAC/C;AACA;AACyC;AACX;AACY;AACK;AAC9C;AAC8D;AACY;AAC9C;AACF;AACA;AACA;AACpC;AACoR;AACzP;AACqB;AACpB;AACkC;AACR;AACQ;AAChC;AACF;AACmB;;AAEpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,6GAAkB,KAAK,2GAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sBAAsB,6GAAkB,KAAK,gIAAoB;AACjE;AACA;AACA,wDAAwD,gFAAiC;AACzF;AACA,kDAAkD,oJAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAU;AAC9B,MAAM,2EAAO,IAAI,+GAAqB;AACtC;AACA;AACA,oEAAiB;AACjB,kDAAkD,sIAAyB;AAC3E,+CAA+C,mGAAsB;AACrE,0CAA0C,sHAAiB;AAC3D,wCAAwC,sGAAe;AACvD,4CAA4C,gIAAoB;AAChE,uCAAuC,oHAAc;AACrD,oCAAoC,0FAAW;AAC/C,0CAA0C,wHAAiB;AAC3D,4CAA4C,kHAAmB;AAC/D,wCAAwC,mHAAwB;AAChE,8CAA8C,wHAAqB;AACnE,qCAAqC,+FAAY;AACjD,kDAAkD,wIAAyB;AAC3E,uCAAuC,2GAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAG;AACpC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB,iDAAiD;AACjE;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2GAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8EAAQ,OAAO,yFAAc;AAC9D;AACA,gBAAgB,gGAAqB;AACrC,gBAAgB,gGAAqB;AACrC,gBAAgB,gGAAqB;AACrC,gBAAgB,gGAAqB;AACrC;AACA;AACA;AACA,sCAAsC,oCAAoC;AAC1E,sCAAsC,oCAAoC;AAC1E,oCAAoC,oCAAoC;AACxE,sCAAsC,oCAAoC;AAC1E,uCAAuC;AACvC;AACA;AACA;AACA;AACA,gCAAgC,8EAAQ,OAAO,yFAAc;AAC7D;AACA;AACA;AACA;AACA,wCAAwC,mCAAmC;AAC3E,wCAAwC,mCAAmC;AAC3E,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,sDAAsD,yFAAc;AACpE,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yEAAK;AACrB,4DAA4D,oJAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8IAAS;AACvE;AACA;AACA;AACA,8DAA8D,oKAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+DAA+D;AAChF,UAAU,sEAAsE;AAChF,UAAU,oEAAoE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mHAAgB;AAC3D;AACA,kDAAkD,mHAAgB;AAClE;AACA,+CAA+C,mHAAgB;AAC/D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ;AACA,QAAQ,+EAAI;AACZ;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,qBAAqB;AACzG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8CAA8C,+EAAI;AAClD,mEAAmE,+EAAI;AACvE;AACA,YAAY,+EAAI;AAChB,SAAS;AACT,KAAK;AACL;AACA;AACA,YAAY,+EAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+EAAI;AAChB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ;AACA;AACA;AACA;AACA,QAAQ,+EAAI;AACZ,KAAK;AACL,UAAU,yEAAQ;AAClB,UAAU,yEAAQ;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,WAAW,kGAAoB;AAC/B,WAAW,kGAAoB;AAC/B;AACA;AACA,SAAS;AACT,WAAW,kGAAoB;AAC/B;AACA,SAAS;AACT,WAAW,gIAAoB,mBAAmB,sGAAc;AAChE,WAAW,oHAAc,mBAAmB,sGAAc,CAAC,kEAAmB;AAC9E;AACA;;AAEoO","sources":["webpack://immt-editor/./node_modules/@codingame/monaco-vscode-views-service-override/index.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-views-service-override/tools.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-views-service-override/tools/editor.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-views-service-override/tools/views.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-views-service-override/views.js"],"sourcesContent":["export { attachPart, default, isEditorPartVisible, onPartVisibilityChange, renderActivitybarPar, renderAuxiliaryPart, renderEditorPart, renderPanelPart, renderPart, renderSidebarPart, renderStatusBarPart } from './views.js';\nexport { ActivityService } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/services/activity/browser/activityService';\nexport { ActivitybarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/activitybar/activitybarPart';\nexport { GroupOrientation } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService';\nexport { EditorInputCapabilities } from 'vscode/vscode/vs/workbench/common/editor';\nexport { Parts, Position } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService';\nexport { EditorPane, SimpleEditorInput, SimpleEditorPane, getPanelPosition, getSideBarPosition, isPartVisibile, onDidChangePanelPosition, onDidChangeSideBarPosition, registerCustomView, registerEditor, registerEditorPane, registerEditorSerializer, setPartVisibility, viewContainerRegistry, viewRegistry } from './tools/views.js';\nexport { ViewContainerLocation } from 'vscode/vscode/vs/workbench/common/views';\nexport { ViewPaneContainer } from 'vscode/vscode/vs/workbench/browser/parts/views/viewPaneContainer';\nexport { ConfirmResult } from 'vscode/vscode/vs/platform/dialogs/common/dialogs';\nexport { RegisteredEditorPriority } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService';\nexport { AbstractResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/resourceEditorInput';\nexport { AbstractTextResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/textResourceEditorInput';\nexport { EditorInput } from 'vscode/vscode/vs/workbench/common/editor/editorInput';\nexport { SplitView } from 'vscode/vscode/vs/base/browser/ui/splitview/splitview';\nexport { DomScrollableElement } from 'vscode/vscode/vs/base/browser/ui/scrollbar/scrollableElement';\nexport { PanelPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/panel/panelPart';\nexport { SidebarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/sidebar/sidebarPart';\n","function unsupported() {\n    throw new Error('unsupported');\n}\nfunction memoized(fct) {\n    let v = null;\n    return (...args) => {\n        if (v == null) {\n            v = fct(...args);\n        }\n        return v;\n    };\n}\nfunction memoizedConstructor(ctor) {\n    return new Proxy(ctor, {\n        construct: memoized((target, args) => {\n            return Reflect.construct(ctor, args);\n        })\n    });\n}\nasync function sleep(duration) {\n    await new Promise((resolve) => setTimeout(resolve, duration));\n}\nfunction throttle(fct, merge, delay) {\n    let lastPromise = Promise.resolve();\n    let toConsume = null;\n    return async (param) => {\n        if (toConsume == null) {\n            toConsume = param;\n            lastPromise = lastPromise\n                .then(async () => await sleep(delay))\n                .then(async () => {\n                const _toConsume = toConsume;\n                toConsume = null;\n                await fct(_toConsume);\n            });\n        }\n        else {\n            toConsume = merge(toConsume, param);\n        }\n        await lastPromise;\n    };\n}\n\nexport { memoized, memoizedConstructor, sleep, throttle, unsupported };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { StandaloneServices } from 'vscode/vscode/vs/editor/standalone/browser/standaloneServices';\nimport { ICodeEditorService } from 'vscode/vscode/vs/editor/browser/services/codeEditorService';\nimport { isPreferredGroup, SIDE_GROUP } from 'vscode/vscode/vs/workbench/services/editor/common/editorService';\nimport { isEditorInput, isResourceEditorInput, EditorCloseContext } from 'vscode/vscode/vs/workbench/common/editor';\nimport { applyTextEditorOptions } from 'vscode/vscode/vs/workbench/common/editor/editorOptions';\nimport { DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS } from 'vscode/vscode/vs/workbench/browser/parts/editor/editor';\nimport { ITextModelService } from 'vscode/vscode/vs/editor/common/services/resolverService';\nimport { StandaloneEditor, StandaloneCodeEditor } from 'vscode/vscode/vs/editor/standalone/browser/standaloneCodeEditor';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { EditorService } from 'vscode/vscode/vs/workbench/services/editor/browser/editorService';\nimport { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { IWorkspaceTrustRequestService } from 'vscode/vscode/vs/platform/workspace/common/workspaceTrust.service';\nimport { IEditorResolverService } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService.service';\nimport { IUriIdentityService } from 'vscode/vscode/vs/platform/uriIdentity/common/uriIdentity.service';\nimport { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace.service';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';\nimport { ITextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService.service';\nimport { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';\nimport { Event, Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { TextResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/textResourceEditorInput';\nimport { IContextKeyService } from 'vscode/vscode/vs/platform/contextkey/common/contextkey.service';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { unsupported } from '../tools.js';\n\nvar StandaloneEditorGroup_1;\nclass EmptyEditorGroup {\n    constructor() {\n        this.selectedEditors = [];\n        this.isSelected = () => false;\n        this.setSelection = unsupported;\n        this.isTransient = () => false;\n        this.windowId = mainWindow.vscodeWindowId;\n        this.createEditorActions = unsupported;\n        this.onDidFocus = Event.None;\n        this.onDidOpenEditorFail = Event.None;\n        this.whenRestored = Promise.resolve();\n        this.disposed = false;\n        this.setActive = unsupported;\n        this.notifyIndexChanged = unsupported;\n        this.relayout = unsupported;\n        this.dispose = unsupported;\n        this.toJSON = unsupported;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChange = Event.None;\n        this.layout = unsupported;\n        this.onDidModelChange = Event.None;\n        this.onWillDispose = Event.None;\n        this.onDidActiveEditorChange = Event.None;\n        this.onWillCloseEditor = Event.None;\n        this.onDidCloseEditor = Event.None;\n        this.onWillMoveEditor = Event.None;\n        this.onWillOpenEditor = Event.None;\n        this.id = 0;\n        this.index = 0;\n        this.label = 'main';\n        this.ariaLabel = 'main';\n        this.activeEditorPane = undefined;\n        this.activeEditor = null;\n        this.previewEditor = null;\n        this.count = 0;\n        this.isEmpty = false;\n        this.isLocked = false;\n        this.stickyCount = 0;\n        this.editors = [];\n        this.getEditors = () => [];\n        this.findEditors = () => [];\n        this.getEditorByIndex = () => undefined;\n        this.getIndexOfEditor = unsupported;\n        this.openEditor = unsupported;\n        this.openEditors = unsupported;\n        this.isPinned = () => false;\n        this.isSticky = () => false;\n        this.isActive = () => false;\n        this.contains = () => false;\n        this.moveEditor = unsupported;\n        this.moveEditors = unsupported;\n        this.copyEditor = unsupported;\n        this.copyEditors = unsupported;\n        this.closeEditor = unsupported;\n        this.closeEditors = unsupported;\n        this.closeAllEditors = unsupported;\n        this.replaceEditors = unsupported;\n        this.pinEditor = () => { };\n        this.stickEditor = () => { };\n        this.unstickEditor = () => { };\n        this.lock = () => { };\n        this.isFirst = unsupported;\n        this.isLast = unsupported;\n    }\n    get groupsView() {\n        return unsupported();\n    }\n    notifyLabelChanged() { }\n    get titleHeight() {\n        return unsupported();\n    }\n    get element() {\n        return unsupported();\n    }\n    get scopedContextKeyService() {\n        return StandaloneServices.get(IContextKeyService);\n    }\n    focus() {\n    }\n}\nconst fakeActiveGroup = new EmptyEditorGroup();\nclass SimpleEditorPane {\n    constructor(editor) {\n        this.editor = editor;\n        this.onDidChangeControl = Event.None;\n        this.onDidChangeSizeConstraints = Event.None;\n        this.onDidFocus = Event.None;\n        this.onDidBlur = Event.None;\n        this.input = undefined;\n        this.options = undefined;\n        this.group = fakeActiveGroup;\n        this.scopedContextKeyService = undefined;\n        this.getViewState = unsupported;\n        this.isVisible = unsupported;\n        this.hasFocus = unsupported;\n        this.getId = unsupported;\n        this.getTitle = unsupported;\n        this.focus = unsupported;\n    }\n    get minimumWidth() {\n        return DEFAULT_EDITOR_MIN_DIMENSIONS.width;\n    }\n    get maximumWidth() {\n        return DEFAULT_EDITOR_MAX_DIMENSIONS.width;\n    }\n    get minimumHeight() {\n        return DEFAULT_EDITOR_MIN_DIMENSIONS.height;\n    }\n    get maximumHeight() {\n        return DEFAULT_EDITOR_MAX_DIMENSIONS.height;\n    }\n    getControl() {\n        return this.editor;\n    }\n}\nfunction wrapOpenEditor(textModelService, defaultBehavior, fallbackBahavior) {\n    async function openEditor(editor, optionsOrPreferredGroup, preferredGroup) {\n        const options = isEditorInput(editor)\n            ? optionsOrPreferredGroup\n            : editor.options;\n        if (isPreferredGroup(optionsOrPreferredGroup)) {\n            preferredGroup = optionsOrPreferredGroup;\n        }\n        const resource = isResourceEditorInput(editor) || isEditorInput(editor) ? editor.resource : undefined;\n        if (resource == null || !textModelService.canHandleResource(resource)) {\n            return await defaultBehavior(editor, optionsOrPreferredGroup, preferredGroup);\n        }\n        let modelEditor;\n        const codeEditors = StandaloneServices.get(ICodeEditorService).listCodeEditors();\n        modelEditor = codeEditors.find((editor) => editor instanceof StandaloneEditor &&\n            editor.getModel() != null &&\n            ( editor.getModel().uri.toString()) === ( resource.toString()));\n        if (modelEditor == null) {\n            const defaultBehaviorResult = await defaultBehavior(\n            editor,\n            optionsOrPreferredGroup, preferredGroup);\n            if (defaultBehaviorResult != null) {\n                return defaultBehaviorResult;\n            }\n            const modelRef = await textModelService.createModelReference(resource);\n            modelEditor = await fallbackBahavior?.(modelRef, options, preferredGroup === SIDE_GROUP);\n            if (modelEditor == null) {\n                modelRef.dispose();\n                return undefined;\n            }\n        }\n        if (options != null) {\n            applyTextEditorOptions(options, modelEditor, 1 );\n        }\n        if (!(options?.preserveFocus ?? false)) {\n            modelEditor.focus();\n            modelEditor.getContainerDomNode().scrollIntoView();\n        }\n        return new SimpleEditorPane(modelEditor);\n    }\n    return openEditor;\n}\nlet MonacoEditorService = class MonacoEditorService extends EditorService {\n    constructor(_openEditorFallback, _isEditorPartVisible, _editorGroupService, instantiationService, fileService, configurationService, contextService, uriIdentityService, editorResolverService, workspaceTrustRequestService, hostService, textEditorService, textModelService) {\n        super(undefined, _editorGroupService, instantiationService, fileService, configurationService, contextService, uriIdentityService, editorResolverService, workspaceTrustRequestService, hostService, textEditorService);\n        this._isEditorPartVisible = _isEditorPartVisible;\n        this.openEditor = wrapOpenEditor(textModelService, this.openEditor.bind(this), _openEditorFallback);\n    }\n    get activeTextEditorControl() {\n        const focusedCodeEditor = StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor();\n        if (focusedCodeEditor != null && focusedCodeEditor instanceof StandaloneCodeEditor) {\n            return focusedCodeEditor;\n        }\n        return super.activeTextEditorControl;\n    }\n    async openEditor(editor, optionsOrPreferredGroup, preferredGroup) {\n        if (!this._isEditorPartVisible()) {\n            return undefined;\n        }\n        return await super.openEditor(editor, optionsOrPreferredGroup, preferredGroup);\n    }\n};\nMonacoEditorService = __decorate([\n    ( __param(2, IEditorGroupsService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IFileService)),\n    ( __param(5, IConfigurationService)),\n    ( __param(6, IWorkspaceContextService)),\n    ( __param(7, IUriIdentityService)),\n    ( __param(8, IEditorResolverService)),\n    ( __param(9, IWorkspaceTrustRequestService)),\n    ( __param(10, IHostService)),\n    ( __param(11, ITextEditorService)),\n    ( __param(12, ITextModelService))\n], MonacoEditorService);\nclass StandaloneEditorPane {\n    constructor(editor, input, group) {\n        this.editor = editor;\n        this.input = input;\n        this.group = group;\n        this.onDidChangeControl = Event.None;\n        this.options = undefined;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChangeSizeConstraints = Event.None;\n        this.scopedContextKeyService = undefined;\n        this.onDidFocus = this.editor.onDidFocusEditorWidget;\n        this.onDidBlur = this.editor.onDidBlurEditorWidget;\n    }\n    getControl() {\n        return this.editor;\n    }\n    getViewState() {\n        return undefined;\n    }\n    isVisible() {\n        return true;\n    }\n    hasFocus() {\n        return this.editor.hasWidgetFocus();\n    }\n    getId() {\n        return this.editor.getId();\n    }\n    getTitle() {\n        return undefined;\n    }\n    focus() {\n        this.editor.focus();\n    }\n}\nlet StandaloneEditorGroup = StandaloneEditorGroup_1 = class StandaloneEditorGroup extends Disposable {\n    constructor(editor, instantiationService, scopedContextKeyService) {\n        super();\n        this.editor = editor;\n        this.scopedContextKeyService = scopedContextKeyService;\n        this.active = false;\n        this.selectedEditors = [];\n        this.isSelected = () => false;\n        this.setSelection = unsupported;\n        this.isTransient = () => false;\n        this.windowId = mainWindow.vscodeWindowId;\n        this.onDidFocus = this.editor.onDidFocusEditorWidget;\n        this.onDidOpenEditorFail = Event.None;\n        this.whenRestored = Promise.resolve();\n        this.disposed = false;\n        this.notifyIndexChanged = unsupported;\n        this.relayout = unsupported;\n        this.toJSON = unsupported;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChange = this.editor.onDidLayoutChange;\n        this.layout = () => this.editor.layout();\n        this._onDidModelChange = new Emitter();\n        this.onDidModelChange = this._onDidModelChange.event;\n        this.onWillDispose = this.editor.onDidDispose;\n        this._onDidActiveEditorChange = new Emitter();\n        this.onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n        this.onWillCloseEditor = Event.None;\n        this._onDidCloseEditor = new Emitter();\n        this.onDidCloseEditor = this._onDidCloseEditor.event;\n        this.onWillMoveEditor = Event.None;\n        this._onWillOpenEditor = new Emitter();\n        this.onWillOpenEditor = this._onWillOpenEditor.event;\n        this.id = --StandaloneEditorGroup_1.idCounter;\n        this.index = -1;\n        this.label = `standalone editor ${-this.id}`;\n        this.ariaLabel = `standalone editor ${-this.id}`;\n        this.previewEditor = null;\n        this.isLocked = true;\n        this.stickyCount = 0;\n        this.getEditors = () => this.editors;\n        this.findEditors = (resource) => this.pane != null && ( resource.toString()) === ( this.pane.input.resource.toString())\n            ? [this.pane.input]\n            : [];\n        this.getEditorByIndex = (index) => this.pane != null && index === 0 ? this.pane.input : undefined;\n        this.getIndexOfEditor = (editorInput) => this.pane != null && this.pane.input === editorInput ? 0 : -1;\n        this.openEditor = async (editor) => {\n            if (editor.isDisposed()) {\n                return undefined;\n            }\n            if (editor instanceof TextResourceEditorInput &&\n                ( editor.resource.toString()) === this.pane?.input.resource.toString()) {\n                this.focus();\n                return this.pane;\n            }\n            return undefined;\n        };\n        this.openEditors = async (editors) => {\n            if (editors.length === 1) {\n                return await this.openEditor(editors[0].editor);\n            }\n            return undefined;\n        };\n        this.isPinned = () => false;\n        this.isSticky = () => false;\n        this.isActive = () => this.editor.hasWidgetFocus();\n        this.contains = (candidate) => {\n            return this.pane != null && this.pane.input === candidate;\n        };\n        this.moveEditor = unsupported;\n        this.moveEditors = unsupported;\n        this.copyEditor = unsupported;\n        this.copyEditors = unsupported;\n        this.closeEditor = unsupported;\n        this.closeEditors = unsupported;\n        this.closeAllEditors = unsupported;\n        this.replaceEditors = unsupported;\n        this.pinEditor = () => { };\n        this.stickEditor = () => { };\n        this.unstickEditor = () => { };\n        this.lock = () => { };\n        this.isFirst = unsupported;\n        this.isLast = unsupported;\n        const onNewModel = (uri) => {\n            const editorInput = instantiationService.createInstance(TextResourceEditorInput, uri, undefined, undefined, undefined, undefined);\n            this._onWillOpenEditor.fire({\n                editor: editorInput,\n                groupId: this.id\n            });\n            this.pane = new StandaloneEditorPane(editor, editorInput, this);\n            this._onDidModelChange.fire({\n                kind: 5 ,\n                editor: editorInput,\n                editorIndex: 0\n            });\n            this._onDidActiveEditorChange.fire({\n                editor: editorInput\n            });\n        };\n        const onRemovedModel = (uri) => {\n            if (this.pane != null && ( this.pane.input.resource.toString()) === ( uri.toString())) {\n                const pane = this.pane;\n                this.pane = undefined;\n                this._onDidModelChange.fire({\n                    kind: 6 ,\n                    editorIndex: 0\n                });\n                this._onDidActiveEditorChange.fire({\n                    editor: undefined\n                });\n                this._onDidCloseEditor.fire({\n                    context: EditorCloseContext.UNKNOWN,\n                    editor: pane.input,\n                    groupId: this.id,\n                    index: 0,\n                    sticky: false\n                });\n            }\n        };\n        editor.onDidChangeModel((e) => {\n            if (e.oldModelUrl != null) {\n                onRemovedModel(e.oldModelUrl);\n            }\n            if (e.newModelUrl != null) {\n                onNewModel(e.newModelUrl);\n            }\n        });\n        this._register({\n            dispose: () => {\n                const model = editor.getModel();\n                if (model != null) {\n                    onRemovedModel(model.uri);\n                }\n            }\n        });\n        const currentModel = editor.getModel();\n        if (currentModel != null) {\n            const editorInput = instantiationService.createInstance(TextResourceEditorInput, currentModel.uri, undefined, undefined, undefined, undefined);\n            this.pane = new StandaloneEditorPane(editor, editorInput, this);\n        }\n    }\n    get groupsView() {\n        return unsupported();\n    }\n    notifyLabelChanged() { }\n    createEditorActions() {\n        return {\n            actions: {\n                primary: [],\n                secondary: []\n            },\n            onDidChange: Event.None\n        };\n    }\n    get titleHeight() {\n        return unsupported();\n    }\n    setActive(isActive) {\n        this.active = isActive;\n    }\n    get element() {\n        return this.editor.getContainerDomNode();\n    }\n    get activeEditorPane() {\n        return this.pane;\n    }\n    get activeEditor() {\n        return this.pane?.input ?? null;\n    }\n    get count() {\n        return this.pane != null ? 1 : 0;\n    }\n    get isEmpty() {\n        return this.pane == null;\n    }\n    get editors() {\n        return this.pane != null ? [this.pane.input] : [];\n    }\n    focus() {\n        this.editor.focus();\n        this.editor.getContainerDomNode().scrollIntoView();\n    }\n};\nStandaloneEditorGroup.idCounter = 0;\nStandaloneEditorGroup = StandaloneEditorGroup_1 = __decorate([\n    ( __param(1, IInstantiationService)),\n    ( __param(2, IContextKeyService))\n], StandaloneEditorGroup);\nlet MonacoDelegateEditorGroupsService = class MonacoDelegateEditorGroupsService extends Disposable {\n    constructor(delegate, emptyDelegate, instantiationService) {\n        super();\n        this.delegate = delegate;\n        this.instantiationService = instantiationService;\n        this._serviceBrand = undefined;\n        this.additionalGroups = [];\n        this.activeGroupOverride = undefined;\n        this.onDidCreateAuxiliaryEditorPart = this.delegate.onDidCreateAuxiliaryEditorPart;\n        this.onDidChangeGroupMaximized = this.delegate.onDidChangeGroupMaximized;\n        this._onDidChangeActiveGroup = new Emitter();\n        this.onDidChangeActiveGroup = Event.any(this._onDidChangeActiveGroup.event, this.delegate.onDidChangeActiveGroup);\n        this._onDidAddGroup = new Emitter();\n        this.onDidAddGroup = Event.any(this._onDidAddGroup.event, this.delegate.onDidAddGroup);\n        this._onDidRemoveGroup = new Emitter();\n        this.onDidRemoveGroup = Event.any(this._onDidRemoveGroup.event, this.delegate.onDidRemoveGroup);\n        this.onDidMoveGroup = this.delegate.onDidMoveGroup;\n        this.onDidActivateGroup = this.delegate.onDidActivateGroup;\n        this.onDidChangeGroupIndex = this.delegate.onDidChangeGroupIndex;\n        this.onDidChangeGroupLocked = this.delegate.onDidChangeGroupLocked;\n        this.getLayout = () => {\n            return this.delegate.getLayout();\n        };\n        this.getGroups = (order) => {\n            return [...this.delegate.getGroups(order), ...this.additionalGroups];\n        };\n        this.getGroup = (identifier) => {\n            return (this.delegate.getGroup(identifier) ??\n                this.additionalGroups.find((group) => group.id === identifier));\n        };\n        this.activateGroup = (...args) => {\n            return this.delegate.activateGroup(...args);\n        };\n        this.getSize = (...args) => {\n            return this.delegate.getSize(...args);\n        };\n        this.setSize = (...args) => {\n            return this.delegate.setSize(...args);\n        };\n        this.arrangeGroups = (...args) => {\n            return this.delegate.arrangeGroups(...args);\n        };\n        this.applyLayout = (...args) => {\n            return this.delegate.applyLayout(...args);\n        };\n        this.setGroupOrientation = (...args) => {\n            return this.delegate.setGroupOrientation(...args);\n        };\n        this.findGroup = (...args) => {\n            return this.delegate.findGroup(...args);\n        };\n        this.addGroup = (...args) => {\n            return this.delegate.addGroup(...args);\n        };\n        this.removeGroup = (...args) => {\n            return this.delegate.removeGroup(...args);\n        };\n        this.moveGroup = (...args) => {\n            return this.delegate.moveGroup(...args);\n        };\n        this.mergeGroup = (...args) => {\n            return this.delegate.mergeGroup(...args);\n        };\n        this.mergeAllGroups = (...args) => {\n            return this.delegate.mergeAllGroups(...args);\n        };\n        this.copyGroup = (...args) => {\n            return this.delegate.copyGroup(...args);\n        };\n        this.onDidChangeEditorPartOptions = this.delegate.onDidChangeEditorPartOptions;\n        setTimeout(() => {\n            const codeEditorService = StandaloneServices.get(ICodeEditorService);\n            const handleCodeEditor = (editor) => {\n                if (editor instanceof StandaloneEditor) {\n                    let timeout;\n                    const updateActiveGroup = (editor) => {\n                        const newActiveGroup = editor != null\n                            ? this.additionalGroups.find((group) => group.editor === editor)\n                            : undefined;\n                        if (this.activeGroupOverride !== newActiveGroup) {\n                            this.activeGroupOverride = newActiveGroup;\n                            this._onDidChangeActiveGroup.fire(this.activeGroup);\n                        }\n                    };\n                    const removeActiveGroup = (editor) => {\n                        if (!emptyDelegate &&\n                            this.activeGroupOverride ===\n                                this.additionalGroups.find((group) => group.editor === editor)) {\n                            updateActiveGroup(undefined);\n                        }\n                    };\n                    const onEditorFocused = () => {\n                        if (timeout != null)\n                            window.clearTimeout(timeout);\n                        updateActiveGroup(editor);\n                    };\n                    const onEditorBlurred = () => {\n                        if (timeout != null)\n                            window.clearTimeout(timeout);\n                        timeout = window.setTimeout(() => {\n                            timeout = undefined;\n                            removeActiveGroup(editor);\n                        }, 100);\n                    };\n                    editor.onDidDispose(() => {\n                        removeActiveGroup(editor);\n                    });\n                    editor.onDidFocusEditorText(onEditorFocused);\n                    editor.onDidFocusEditorWidget(onEditorFocused);\n                    editor.onDidBlurEditorText(onEditorBlurred);\n                    editor.onDidBlurEditorWidget(onEditorBlurred);\n                    if (editor.hasWidgetFocus()) {\n                        onEditorFocused();\n                    }\n                    const newGroup = instantiationService.createInstance(StandaloneEditorGroup, editor);\n                    this.additionalGroups.push(newGroup);\n                    this._onDidAddGroup.fire(newGroup);\n                }\n            };\n            const handleCodeEditorRemoved = (editor) => {\n                if (editor instanceof StandaloneEditor) {\n                    const removedGroup = this.additionalGroups.find((group) => group.editor === editor);\n                    if (removedGroup != null) {\n                        removedGroup.dispose();\n                        if (this.activeGroupOverride === removedGroup) {\n                            this.activeGroupOverride = undefined;\n                            this._onDidChangeActiveGroup.fire(this.activeGroup);\n                        }\n                        this.additionalGroups = this.additionalGroups.filter((group) => group !== removedGroup);\n                        this._onDidRemoveGroup.fire(removedGroup);\n                    }\n                }\n            };\n            this._register(codeEditorService.onCodeEditorAdd(handleCodeEditor));\n            this._register(codeEditorService.onCodeEditorRemove(handleCodeEditorRemoved));\n            codeEditorService.listCodeEditors().forEach(handleCodeEditor);\n        });\n    }\n    getScopedInstantiationService() {\n        return this.instantiationService;\n    }\n    registerContextKeyProvider(provider) {\n        return this.delegate.registerContextKeyProvider(provider);\n    }\n    saveWorkingSet(name) {\n        return this.delegate.saveWorkingSet(name);\n    }\n    getWorkingSets() {\n        return this.delegate.getWorkingSets();\n    }\n    applyWorkingSet(workingSet) {\n        return this.delegate.applyWorkingSet(workingSet);\n    }\n    deleteWorkingSet(workingSet) {\n        return this.delegate.deleteWorkingSet(workingSet);\n    }\n    get isReady() {\n        return this.delegate.isReady;\n    }\n    get whenReady() {\n        return this.delegate.whenReady;\n    }\n    get whenRestored() {\n        return this.delegate.whenRestored;\n    }\n    get hasRestorableState() {\n        return this.delegate.hasRestorableState;\n    }\n    get parts() {\n        return this.delegate.parts;\n    }\n    createAuxiliaryEditorPart(options) {\n        return this.delegate.createAuxiliaryEditorPart(options);\n    }\n    get mainPart() {\n        return this.delegate.mainPart;\n    }\n    getPart(container) {\n        return this.delegate.getPart(container);\n    }\n    toggleMaximizeGroup(group) {\n        return this.delegate.toggleMaximizeGroup(group);\n    }\n    toggleExpandGroup(group) {\n        return this.delegate.toggleExpandGroup(group);\n    }\n    createEditorDropTarget(container, delegate) {\n        return this.delegate.createEditorDropTarget(container, delegate);\n    }\n    get groups() {\n        return [...this.additionalGroups, ...this.delegate.groups];\n    }\n    get activeGroup() {\n        return this.activeGroupOverride ?? this.delegate.activeGroup;\n    }\n    get sideGroup() {\n        return this.delegate.sideGroup;\n    }\n    get count() {\n        return this.delegate.count + this.additionalGroups.length;\n    }\n    get orientation() {\n        return this.delegate.orientation;\n    }\n    get partOptions() {\n        return this.delegate.partOptions;\n    }\n};\nMonacoDelegateEditorGroupsService = __decorate([\n    ( __param(2, IInstantiationService))\n], MonacoDelegateEditorGroupsService);\n\nexport { MonacoDelegateEditorGroupsService, MonacoEditorService, fakeActiveGroup, wrapOpenEditor };\n","import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport { Extensions } from 'vscode/vscode/vs/workbench/common/views';\nexport { ViewContainerLocation } from 'vscode/vscode/vs/workbench/common/views';\nimport { MutableDisposable, DisposableStore } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { size, $ } from 'vscode/vscode/vs/base/browser/dom';\nimport { ViewPane } from 'vscode/vscode/vs/workbench/browser/parts/views/viewPane';\nimport { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';\nimport { ViewPaneContainer } from 'vscode/vscode/vs/workbench/browser/parts/views/viewPaneContainer';\nexport { ViewPaneContainer } from 'vscode/vscode/vs/workbench/browser/parts/views/viewPaneContainer';\nimport { URI } from 'vscode/vscode/vs/base/common/uri';\nimport { Codicon } from 'vscode/vscode/vs/base/common/codicons';\nexport { RegisteredEditorPriority } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService';\nimport { IEditorResolverService } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService.service';\nimport { EditorInput } from 'vscode/vscode/vs/workbench/common/editor/editorInput';\nexport { EditorInput } from 'vscode/vscode/vs/workbench/common/editor/editorInput';\nimport { EditorExtensions } from 'vscode/vscode/vs/workbench/common/editor';\nexport { EditorInputCapabilities } from 'vscode/vscode/vs/workbench/common/editor';\nimport { registerAction2, Action2, MenuId } from 'vscode/vscode/vs/platform/actions/common/actions';\nimport { Categories } from 'vscode/vscode/vs/platform/action/common/actionCommonCategories';\nimport { ContextKeyExpr } from 'vscode/vscode/vs/platform/contextkey/common/contextkey';\nimport { BaseActionViewItem } from 'vscode/vscode/vs/base/browser/ui/actionbar/actionViewItems';\nimport { EditorPaneDescriptor } from 'vscode/vscode/vs/workbench/browser/editor';\nimport { EditorPane } from 'vscode/vscode/vs/workbench/browser/parts/editor/editorPane';\nimport { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { IThemeService } from 'vscode/vscode/vs/platform/theme/common/themeService.service';\nimport { DomScrollableElement } from 'vscode/vscode/vs/base/browser/ui/scrollbar/scrollableElement';\nexport { DomScrollableElement } from 'vscode/vscode/vs/base/browser/ui/scrollbar/scrollableElement';\nimport { assertIsDefined, assertAllDefined } from 'vscode/vscode/vs/base/common/types';\nexport { ConfirmResult } from 'vscode/vscode/vs/platform/dialogs/common/dialogs';\nexport { AbstractResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/resourceEditorInput';\nexport { AbstractTextResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/textResourceEditorInput';\nexport { Parts } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService';\nimport { IWorkbenchLayoutService } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService.service';\nimport { StandaloneServices } from 'vscode/vscode/vs/editor/standalone/browser/standaloneServices';\nexport { SplitView } from 'vscode/vscode/vs/base/browser/ui/splitview/splitview';\nimport { withReadyServices } from 'vscode/services';\n\nclass InjectedEditorPane extends EditorPane {\n    constructor(id, group) {\n        super(id, group, StandaloneServices.get(ITelemetryService), StandaloneServices.get(IThemeService), StandaloneServices.get(IStorageService));\n    }\n}\nclass SimpleEditorPane extends InjectedEditorPane {\n    constructor() {\n        super(...arguments);\n        this.inputDisposable = this._register(new MutableDisposable());\n    }\n    createEditor(parent) {\n        this.container = this.initialize();\n        this.wrapper = document.createElement('div');\n        this.wrapper.append(this.container);\n        this.scrollbar = this._register(new DomScrollableElement(this.wrapper, {\n            horizontal: 1 ,\n            vertical: 1\n        }));\n        parent.appendChild(this.scrollbar.getDomNode());\n        const observer = new ResizeObserver(() => {\n            assertIsDefined(this.scrollbar).scanDomNode();\n        });\n        observer.observe(this.container);\n        this._register({\n            dispose() {\n                observer.disconnect();\n            }\n        });\n    }\n    async setInput(input, editorOptions, context, token) {\n        await super.setInput(input, editorOptions, context, token);\n        if (token.isCancellationRequested) {\n            return;\n        }\n        this.inputDisposable.value = await this.renderInput?.(input, editorOptions, context, token);\n        assertIsDefined(this.scrollbar).scanDomNode();\n    }\n    layout(dimension) {\n        const [wrapper, scrollbar] = assertAllDefined(this.wrapper, this.scrollbar);\n        size(wrapper, dimension.width, dimension.height);\n        scrollbar.scanDomNode();\n    }\n    focus() {\n        const container = assertIsDefined(this.container);\n        container.focus();\n    }\n    clearInput() {\n        this.inputDisposable.clear();\n        super.clearInput();\n    }\n}\nclass SimpleEditorInput extends EditorInput {\n    constructor(resource, closeHandler) {\n        super();\n        this.closeHandler = closeHandler;\n        this.dirty = false;\n        this._capabilities = 0;\n        this.resource = resource;\n    }\n    get capabilities() {\n        return this._capabilities;\n    }\n    addCapability(capability) {\n        this._capabilities |= capability;\n        this._onDidChangeCapabilities.fire();\n    }\n    removeCapability(capability) {\n        this._capabilities &= ~capability;\n        this._onDidChangeCapabilities.fire();\n    }\n    get editorId() {\n        return this.typeId;\n    }\n    setName(name) {\n        this.name = name;\n        this._onDidChangeLabel.fire();\n    }\n    setTitle(title) {\n        this.title = title;\n        this._onDidChangeLabel.fire();\n    }\n    setDescription(description) {\n        this.description = description;\n        this._onDidChangeLabel.fire();\n    }\n    getLabelValue(label, verbosity) {\n        if (typeof label === 'string') {\n            return label;\n        }\n        switch (verbosity) {\n            case 0 :\n                return label.short;\n            case 2 :\n                return label.long;\n            case 1 :\n            default:\n                return label.medium;\n        }\n    }\n    getName() {\n        return this.name ?? 'Unnamed';\n    }\n    getTitle(verbosity) {\n        return this.getLabelValue(this.title ?? this.getName(), verbosity);\n    }\n    getDescription(verbosity) {\n        return this.getLabelValue(this.description ?? this.getName(), verbosity);\n    }\n    isDirty() {\n        return this.dirty;\n    }\n    setDirty(dirty) {\n        this.dirty = dirty;\n        this._onDidChangeDirty.fire();\n    }\n    toUntyped() {\n        if (this.resource == null) {\n            return undefined;\n        }\n        return {\n            resource: this.resource\n        };\n    }\n}\nfunction registerEditorPane(typeId, name, ctor, inputCtors) {\n    return ( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(ctor, typeId, name), ( inputCtors.map((ctor) => new SyncDescriptor(ctor))));\n}\nfunction registerEditor(globPattern, editorInfo, editorOptions, factory) {\n    return withReadyServices((servicesAccessor) => {\n        const resolverService = servicesAccessor.get(IEditorResolverService);\n        return resolverService.registerEditor(globPattern, editorInfo, editorOptions, factory);\n    });\n}\nfunction registerEditorSerializer(editorTypeId, ctor) {\n    return ( Registry.as(EditorExtensions.EditorFactory)).registerEditorSerializer(editorTypeId, ctor);\n}\nconst viewContainerRegistry = ( Registry.as(Extensions.ViewContainersRegistry));\nconst viewRegistry = ( Registry.as(Extensions.ViewsRegistry));\nfunction registerCustomView(options) {\n    const iconUrl = options.icon != null ? ( URI.parse(options.icon)) : undefined;\n    const viewContainer = options.viewContainer ??\n        viewContainerRegistry.registerViewContainer({\n            id: options.id,\n            title: { value: options.name, original: options.name },\n            order: options.order,\n            ctorDescriptor: new SyncDescriptor(ViewPaneContainer, [\n                options.id,\n                { mergeViewWithContainerWhenSingleView: true }\n            ]),\n            hideIfEmpty: true,\n            icon: iconUrl\n        }, options.location, {\n            isDefault: options.default\n        });\n    const views = [\n        {\n            id: options.id,\n            name: {\n                value: options.name,\n                original: options.name\n            },\n            ctorDescriptor: new SyncDescriptor(class extends ViewPane {\n                renderBody(container) {\n                    super.renderBody(container);\n                    this.wrapper = document.createElement('div');\n                    this.scrollbar = this._register(new DomScrollableElement(this.wrapper, {\n                        horizontal: 1 ,\n                        vertical: 1\n                    }));\n                    this.container = $('.view-pane-content');\n                    this.container.style.display = 'flex';\n                    this.container.style.alignItems = 'stretch';\n                    this._register(options.renderBody(this.container, this.scrollbar));\n                    this.wrapper.append(this.container);\n                    container.appendChild(this.scrollbar.getDomNode());\n                    const observer = new ResizeObserver(() => {\n                        assertIsDefined(this.scrollbar).scanDomNode();\n                    });\n                    observer.observe(this.container);\n                    this._register({\n                        dispose() {\n                            observer.disconnect();\n                        }\n                    });\n                }\n                getActionViewItem(action, actionOptions) {\n                    const customAction = (options.actions ?? []).find((customAction) => customAction.id === action.id);\n                    if (customAction?.render != null) {\n                        return new (class extends BaseActionViewItem {\n                            constructor() {\n                                super(null, action);\n                                this.render = customAction.render;\n                            }\n                        })();\n                    }\n                    return super.getActionViewItem(action, actionOptions);\n                }\n                layoutBody(height, width) {\n                    const [wrapper, scrollbar] = assertAllDefined(this.wrapper, this.scrollbar);\n                    size(wrapper, width, height);\n                    scrollbar.scanDomNode();\n                }\n            }),\n            canMoveView: options.canMoveView ?? true,\n            canToggleVisibility: options.canToggleVisibility ?? false,\n            hideByDefault: options.hideByDefault ?? false,\n            collapsed: options.collapsed ?? false,\n            order: options.order,\n            containerIcon: iconUrl\n        }\n    ];\n    viewRegistry.registerViews(views, viewContainer);\n    const disposableCollection = new DisposableStore();\n    disposableCollection.add({\n        dispose() {\n            viewRegistry.deregisterViews(views, viewContainer);\n            if (options.viewContainer == null) {\n                viewContainerRegistry.deregisterViewContainer(viewContainer);\n            }\n        }\n    });\n    for (const action of options.actions ?? []) {\n        disposableCollection.add(registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: action.id,\n                    title: { value: action.title, original: action.title },\n                    category: Categories.View,\n                    menu: [\n                        {\n                            id: MenuId.ViewTitle,\n                            when: ( ContextKeyExpr.equals('view', options.id)),\n                            group: 'navigation',\n                            order: action.order\n                        },\n                        {\n                            id: MenuId.CommandPalette\n                        }\n                    ],\n                    tooltip: action.tooltip,\n                    icon: action.icon != null ? Codicon[action.icon] : undefined\n                });\n                this.run = action.run ?? (async () => { });\n            }\n        }));\n    }\n    return disposableCollection;\n}\nfunction isPartVisibile(part) {\n    return StandaloneServices.get(IWorkbenchLayoutService).isVisible(part, window);\n}\nfunction setPartVisibility(part, visible) {\n    StandaloneServices.get(IWorkbenchLayoutService).setPartHidden(!visible, part, window);\n}\nconst onDidChangePanelPosition = (listener) => {\n    return StandaloneServices.get(IWorkbenchLayoutService).onDidChangePanelPosition(listener);\n};\nfunction getPanelPosition() {\n    return StandaloneServices.get(IWorkbenchLayoutService).getPanelPosition();\n}\nconst onDidChangeSideBarPosition = (listener) => {\n    return StandaloneServices.get(IWorkbenchLayoutService).onDidChangeSideBarPosition(listener);\n};\nfunction getSideBarPosition() {\n    return StandaloneServices.get(IWorkbenchLayoutService).getSideBarPosition();\n}\n\nexport { InjectedEditorPane as EditorPane, SimpleEditorInput, SimpleEditorPane, getPanelPosition, getSideBarPosition, isPartVisibile, onDidChangePanelPosition, onDidChangeSideBarPosition, registerCustomView, registerEditor, registerEditorPane, registerEditorSerializer, setPartVisibility, viewContainerRegistry, viewRegistry };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { StandaloneServices } from 'vscode/vscode/vs/editor/standalone/browser/standaloneServices';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport { IViewDescriptorService } from 'vscode/vscode/vs/workbench/common/views.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { SidebarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/sidebar/sidebarPart';\nexport { SidebarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/sidebar/sidebarPart';\nexport { ActivityService } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/services/activity/browser/activityService';\nimport { IPaneCompositePartService } from 'vscode/vscode/vs/workbench/services/panecomposite/browser/panecomposite.service';\nexport { ActivitybarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/activitybar/activitybarPart';\nimport { PanelPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/panel/panelPart';\nexport { PanelPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/panel/panelPart';\nimport { URI } from 'vscode/vscode/vs/base/common/uri';\nexport { GroupOrientation } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService.service';\nimport { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';\nimport { pathsToEditors, isResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor';\nexport { EditorInputCapabilities } from 'vscode/vscode/vs/workbench/common/editor';\nimport { positionToString } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService';\nexport { Parts, Position } from 'vscode/vscode/vs/workbench/services/layout/browser/layoutService';\nimport { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';\nimport { ILayoutService } from 'vscode/vscode/vs/platform/layout/browser/layoutService.service';\nimport { ILifecycleService } from 'vscode/vscode/vs/workbench/services/lifecycle/common/lifecycle.service';\nimport { AuxiliaryBarPart } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart';\nimport { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';\nimport { mark } from 'vscode/vscode/vs/base/common/performance';\nimport { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions.service';\nimport { Promises } from 'vscode/vscode/vs/base/common/async';\nimport { isWeb } from 'vscode/vscode/vs/base/common/platform';\nimport { IEnvironmentService } from 'vscode/vscode/vs/platform/environment/common/environment.service';\nimport { isTemporaryWorkspace } from 'vscode/vscode/vs/platform/workspace/common/workspace';\nimport { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace.service';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { coalesce } from 'vscode/vscode/vs/base/common/arrays';\nimport { IWorkingCopyBackupService } from 'vscode/vscode/vs/workbench/services/workingCopy/common/workingCopyBackup.service';\nimport { EditorParts } from '@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/browser/parts/editor/editorParts';\nimport { MonacoDelegateEditorGroupsService, MonacoEditorService } from './tools/editor.js';\nimport getServiceOverride$2 from '@codingame/monaco-vscode-quickaccess-service-override';\nimport getServiceOverride$3 from '@codingame/monaco-vscode-keybindings-service-override';\nimport getServiceOverride$1 from '@codingame/monaco-vscode-view-common-service-override';\nimport { onRenderWorkbench } from 'vscode/lifecycle';\nexport { EditorPane, SimpleEditorInput, SimpleEditorPane, getPanelPosition, getSideBarPosition, isPartVisibile, onDidChangePanelPosition, onDidChangeSideBarPosition, registerCustomView, registerEditor, registerEditorPane, registerEditorSerializer, setPartVisibility, viewContainerRegistry, viewRegistry } from './tools/views.js';\nexport { ViewContainerLocation } from 'vscode/vscode/vs/workbench/common/views';\nexport { ViewPaneContainer } from 'vscode/vscode/vs/workbench/browser/parts/views/viewPaneContainer';\nexport { ConfirmResult } from 'vscode/vscode/vs/platform/dialogs/common/dialogs';\nexport { RegisteredEditorPriority } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService';\nexport { AbstractResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/resourceEditorInput';\nexport { AbstractTextResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/textResourceEditorInput';\nexport { EditorInput } from 'vscode/vscode/vs/workbench/common/editor/editorInput';\nexport { SplitView } from 'vscode/vscode/vs/base/browser/ui/splitview/splitview';\nexport { DomScrollableElement } from 'vscode/vscode/vs/base/browser/ui/scrollbar/scrollableElement';\n\nfunction createPart(id, role, classes) {\n    const part = document.createElement(role === 'status' ? 'footer'  : 'div');\n    part.classList.add('part', 'monaco-workbench-part', ...classes);\n    part.id = id;\n    part.setAttribute('role', role);\n    if (role === 'status') {\n        part.setAttribute('aria-live', 'off');\n    }\n    return part;\n}\nfunction layoutPart(part) {\n    const parent = part.getContainer()?.parentNode;\n    if (parent == null) {\n        return;\n    }\n    part.layout(Math.max(part.minimumWidth, Math.min(part.maximumWidth, parent.offsetWidth)), Math.max(part.minimumHeight, Math.min(part.maximumHeight, parent.offsetHeight)), parent.offsetTop, parent.offsetLeft);\n}\nfunction renderPart(partContainer, part) {\n    partContainer.oncontextmenu = () => false;\n    function layout() {\n        layoutPart(part);\n    }\n    part.onDidVisibilityChange((visible) => {\n        if (visible) {\n            layout();\n        }\n    });\n    layout();\n}\nfunction getPart(part) {\n    return StandaloneServices.get(ILayoutService).getPart(part);\n}\nfunction _attachPart(part, container) {\n    container.append(part.getContainer());\n    const observer = new ResizeObserver(() => layoutPart(part));\n    observer.observe(container);\n    return {\n        dispose() {\n            return observer.disconnect();\n        }\n    };\n}\nfunction attachPart(part, container) {\n    const _part = getPart(part);\n    if (_part == null) {\n        throw new Error('Part not found');\n    }\n    return _attachPart(_part, container);\n}\nfunction onPartVisibilityChange(part, listener) {\n    const _part = getPart(part);\n    if (_part == null) {\n        throw new Error('Part not found');\n    }\n    return _part.onDidVisibilityChange(listener);\n}\nfunction renderActivitybarPar(container) {\n    return attachPart(\"workbench.parts.activitybar\" , container);\n}\nfunction renderSidebarPart(container) {\n    return attachPart(\"workbench.parts.sidebar\" , container);\n}\nfunction renderPanelPart(container) {\n    return attachPart(\"workbench.parts.panel\" , container);\n}\nfunction renderAuxiliaryPart(container) {\n    return attachPart(\"workbench.parts.auxiliarybar\" , container);\n}\nfunction renderEditorPart(container) {\n    return attachPart(\"workbench.parts.editor\" , container);\n}\nfunction renderStatusBarPart(container) {\n    return attachPart(\"workbench.parts.statusbar\" , container);\n}\nfunction isElementVisible(el) {\n    if (!el.isConnected) {\n        return false;\n    }\n    if (el.checkVisibility != null) {\n        return el.checkVisibility({\n            checkOpacity: true,\n            checkVisibilityCSS: true\n        });\n    }\n    return el.offsetHeight > 0 && el.offsetWidth > 0;\n}\nfunction isEditorPartVisible() {\n    const container = StandaloneServices.get(IEditorGroupsService).mainPart.getContainer();\n    return container != null && isElementVisible(container);\n}\nlet MonacoEditorParts = class MonacoEditorParts extends MonacoDelegateEditorGroupsService {\n    constructor(instantiationService) {\n        super(instantiationService.createInstance(EditorParts), false, instantiationService);\n        this.restoreGroup = (...args) => {\n            return this.delegate.restoreGroup(...args);\n        };\n    }\n    getId() {\n        return 'standalone';\n    }\n    updateStyles() { }\n    registerPart(part) {\n        return this.delegate.registerPart(part);\n    }\n    bind(contextKey, group) {\n        return this.delegate.bind(contextKey, group);\n    }\n    get activePart() {\n        return this.delegate.activePart;\n    }\n};\nMonacoEditorParts = __decorate([\n    ( __param(0, IInstantiationService))\n], MonacoEditorParts);\nlet transformInitializationState = (state) => state;\nonRenderWorkbench(async (accessor) => {\n    const paneCompositePartService = accessor.get(IPaneCompositePartService);\n    const viewDescriptorService = accessor.get(IViewDescriptorService);\n    const lifecycleService = accessor.get(ILifecycleService);\n    const storageService = accessor.get(IStorageService);\n    const editorGroupService = accessor.get(IEditorGroupsService);\n    const editorService = accessor.get(IEditorService);\n    const logService = accessor.get(ILogService);\n    const extensionService = accessor.get(IExtensionService);\n    const environmentService = accessor.get(IEnvironmentService);\n    const contextService = accessor.get(IWorkspaceContextService);\n    const configurationService = accessor.get(IConfigurationService);\n    const fileService = accessor.get(IFileService);\n    const workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n    const layoutService = accessor.get(ILayoutService);\n    function getInitialEditorsState() {\n        const defaultLayout = environmentService.options?.defaultLayout;\n        if (((defaultLayout?.editors != null && defaultLayout.editors.length > 0) ||\n            defaultLayout?.layout?.editors != null) &&\n            ((defaultLayout.force ?? false) || storageService.isNew(1 ))) {\n            return {\n                layout: defaultLayout.layout?.editors,\n                filesToOpenOrCreate: defaultLayout.editors?.map((editor) => {\n                    return {\n                        viewColumn: editor.viewColumn,\n                        fileUri: URI.revive(editor.uri),\n                        openOnlyIfExists: editor.openOnlyIfExists,\n                        options: editor.options\n                    };\n                })\n            };\n        }\n        const { filesToOpenOrCreate, filesToDiff, filesToMerge } = environmentService;\n        if (filesToOpenOrCreate != null || filesToDiff != null || filesToMerge != null) {\n            return { filesToOpenOrCreate, filesToDiff, filesToMerge };\n        }\n        return undefined;\n    }\n    function getDefaultLayoutViews(environmentService, storageService) {\n        const defaultLayout = environmentService.options?.defaultLayout;\n        if (defaultLayout == null) {\n            return undefined;\n        }\n        if (!(defaultLayout.force ?? false) && !storageService.isNew(1 )) {\n            return undefined;\n        }\n        const { views } = defaultLayout;\n        if (views != null && views.length > 0) {\n            return ( views.map((view) => view.id));\n        }\n        return undefined;\n    }\n    function shouldRestoreEditors(contextService, initialEditorsState) {\n        if (isTemporaryWorkspace(contextService.getWorkspace())) {\n            return false;\n        }\n        const forceRestoreEditors = configurationService.getValue('window.restoreWindows') === 'preserve';\n        return !!forceRestoreEditors || initialEditorsState === undefined;\n    }\n    async function resolveEditorsToOpen(fileService, initialEditorsState) {\n        if (initialEditorsState != null) {\n            const filesToMerge = coalesce(await pathsToEditors(initialEditorsState.filesToMerge, fileService, logService));\n            if (filesToMerge.length === 4 &&\n                isResourceEditorInput(filesToMerge[0]) &&\n                isResourceEditorInput(filesToMerge[1]) &&\n                isResourceEditorInput(filesToMerge[2]) &&\n                isResourceEditorInput(filesToMerge[3])) {\n                return [\n                    {\n                        editor: {\n                            input1: { resource: filesToMerge[0].resource },\n                            input2: { resource: filesToMerge[1].resource },\n                            base: { resource: filesToMerge[2].resource },\n                            result: { resource: filesToMerge[3].resource },\n                            options: { pinned: true }\n                        }\n                    }\n                ];\n            }\n            const filesToDiff = coalesce(await pathsToEditors(initialEditorsState.filesToDiff, fileService, logService));\n            if (filesToDiff.length === 2) {\n                return [\n                    {\n                        editor: {\n                            original: { resource: filesToDiff[0].resource },\n                            modified: { resource: filesToDiff[1].resource },\n                            options: { pinned: true }\n                        }\n                    }\n                ];\n            }\n            const filesToOpenOrCreate = [];\n            const resolvedFilesToOpenOrCreate = await pathsToEditors(initialEditorsState.filesToOpenOrCreate, fileService, logService);\n            for (let i = 0; i < resolvedFilesToOpenOrCreate.length; i++) {\n                const resolvedFileToOpenOrCreate = resolvedFilesToOpenOrCreate[i];\n                if (resolvedFileToOpenOrCreate != null) {\n                    filesToOpenOrCreate.push({\n                        editor: resolvedFileToOpenOrCreate,\n                        viewColumn: initialEditorsState.filesToOpenOrCreate?.[i].viewColumn\n                    });\n                }\n            }\n            return filesToOpenOrCreate;\n        }\n        else if (contextService.getWorkbenchState() === 1  &&\n            configurationService.getValue('workbench.startupEditor') === 'newUntitledFile') {\n            if (editorGroupService.mainPart.hasRestorableState) {\n                return [];\n            }\n            const hasBackups = await workingCopyBackupService.hasBackups();\n            if (hasBackups) {\n                return [];\n            }\n            return [\n                {\n                    editor: { resource: undefined }\n                }\n            ];\n        }\n        return [];\n    }\n    const initialEditorsState = getInitialEditorsState();\n    if (initialEditorsState != null) {\n        logService.info('Initial editor state', initialEditorsState);\n    }\n    let initialLayoutState = {\n        layout: {\n            editors: initialEditorsState?.layout\n        },\n        editor: {\n            restoreEditors: shouldRestoreEditors(contextService, initialEditorsState),\n            editorsToOpen: resolveEditorsToOpen(fileService, initialEditorsState)\n        },\n        views: {\n            defaults: getDefaultLayoutViews(environmentService, storageService),\n            containerToRestore: {}\n        }\n    };\n    function getDefaultViewContainer(location) {\n        return (viewDescriptorService.getDefaultViewContainer(location) ??\n            viewDescriptorService.getViewContainersByLocation(location)[0]);\n    }\n    function initLayoutState() {\n        if (layoutService.isVisible(\"workbench.parts.sidebar\" )) {\n            let viewContainerToRestore;\n            if (!environmentService.isBuilt ||\n                lifecycleService.startupKind === 3  ||\n                isWeb) {\n                viewContainerToRestore = storageService.get(SidebarPart.activeViewletSettingsKey, 1 , getDefaultViewContainer(0 )?.id);\n            }\n            else {\n                viewContainerToRestore = getDefaultViewContainer(0 )?.id;\n            }\n            initialLayoutState.views.containerToRestore.sideBar = viewContainerToRestore;\n        }\n        if (layoutService.isVisible(\"workbench.parts.panel\" )) {\n            const viewContainerToRestore = storageService.get(PanelPart.activePanelSettingsKey, 1 , getDefaultViewContainer(1 )?.id);\n            initialLayoutState.views.containerToRestore.panel = viewContainerToRestore;\n        }\n        if (layoutService.isVisible(\"workbench.parts.auxiliarybar\" )) {\n            const viewContainerToRestore = storageService.get(AuxiliaryBarPart.activePanelSettingsKey, 1 , getDefaultViewContainer(2 )?.id);\n            initialLayoutState.views.containerToRestore.auxiliaryBar = viewContainerToRestore;\n        }\n    }\n    initLayoutState();\n    initialLayoutState = transformInitializationState(initialLayoutState);\n    if (initialLayoutState.views.containerToRestore.sideBar == null) {\n        layoutService.setPartHidden(true, \"workbench.parts.sidebar\" );\n    }\n    if (initialLayoutState.views.containerToRestore.panel == null) {\n        layoutService.setPartHidden(true, \"workbench.parts.panel\" );\n    }\n    if (initialLayoutState.views.containerToRestore.auxiliaryBar == null) {\n        layoutService.setPartHidden(true, \"workbench.parts.auxiliarybar\" );\n    }\n    const invisibleContainer = document.createElement('div');\n    invisibleContainer.style.display = 'none';\n    document.body.append(invisibleContainer);\n    for (const { id, role, classes, options, getPosition, onDidChangePosition } of [\n        { id: \"workbench.parts.titlebar\" , role: 'none', classes: ['titlebar'] },\n        { id: \"workbench.parts.banner\" , role: 'banner', classes: ['banner'] },\n        {\n            id: \"workbench.parts.activitybar\" ,\n            role: 'none',\n            classes: ['activitybar'],\n            getPosition: () => layoutService.getSideBarPosition(),\n            onDidChangePosition: layoutService.onDidChangeSideBarPosition\n        },\n        {\n            id: \"workbench.parts.sidebar\" ,\n            role: 'none',\n            classes: ['sidebar'],\n            getPosition: () => layoutService.getSideBarPosition(),\n            onDidChangePosition: layoutService.onDidChangeSideBarPosition\n        },\n        {\n            id: \"workbench.parts.editor\" ,\n            role: 'main',\n            classes: ['editor'],\n            options: { restorePreviousState: initialLayoutState.editor.restoreEditors }\n        },\n        {\n            id: \"workbench.parts.panel\" ,\n            role: 'none',\n            classes: ['panel', 'basepanel'],\n            getPosition: () => layoutService.getPanelPosition(),\n            onDidChangePosition: layoutService.onDidChangePanelPosition\n        },\n        {\n            id: \"workbench.parts.auxiliarybar\" ,\n            role: 'none',\n            classes: ['auxiliarybar', 'basepanel'],\n            getPosition: () => layoutService.getSideBarPosition() === 0  ? 1  : 0 ,\n            onDidChangePosition: layoutService.onDidChangeSideBarPosition\n        },\n        { id: \"workbench.parts.statusbar\" , role: 'status', classes: ['statusbar'] }\n    ]) {\n        const part = layoutService.getPart(id);\n        if (part != null) {\n            const partContainer = createPart(id, role, classes);\n            part.create(partContainer, options);\n            renderPart(partContainer, part);\n            part.layout(9999, 9999, 0, 0);\n            invisibleContainer.append(partContainer);\n            if (getPosition != null) {\n                let position = getPosition();\n                part.element.classList.add(positionToString(position));\n                onDidChangePosition?.(() => {\n                    part.element.classList.remove(positionToString(position));\n                    position = getPosition();\n                    part.element.classList.add(positionToString(position));\n                });\n            }\n        }\n    }\n    const layoutReadyPromises = [];\n    const layoutRestoredPromises = [];\n    layoutReadyPromises.push((async () => {\n        mark('code/willRestoreEditors');\n        await editorGroupService.mainPart.whenReady;\n        mark('code/restoreEditors/editorGroupsReady');\n        if (initialLayoutState.layout?.editors != null) {\n            editorGroupService.applyLayout(initialLayoutState.layout.editors);\n        }\n        const editors = await initialLayoutState.editor.editorsToOpen;\n        mark('code/restoreEditors/editorsToOpenResolved');\n        let openEditorsPromise;\n        if (editors.length > 0) {\n            const editorGroupsInVisualOrder = editorGroupService.getGroups(2 );\n            const mapEditorsToGroup = new Map();\n            for (const editor of editors) {\n                const group = editorGroupsInVisualOrder[(editor.viewColumn ?? 1) - 1];\n                let editorsByGroup = mapEditorsToGroup.get(group.id);\n                if (editorsByGroup == null) {\n                    editorsByGroup = new Set();\n                    mapEditorsToGroup.set(group.id, editorsByGroup);\n                }\n                editorsByGroup.add(editor.editor);\n            }\n            openEditorsPromise = Promise.all(( Array.from(mapEditorsToGroup).map(async ([groupId, editors]) => {\n                try {\n                    await editorService.openEditors(Array.from(editors), groupId, { validateTrust: true });\n                }\n                catch (error) {\n                    logService.error(error);\n                }\n            })));\n        }\n        layoutRestoredPromises.push(Promise.all([\n            openEditorsPromise?.finally(() => mark('code/restoreEditors/editorsOpened')),\n            editorGroupService.mainPart.whenRestored.finally(() => mark('code/restoreEditors/editorGroupsRestored'))\n        ]).finally(() => {\n            mark('code/didRestoreEditors');\n        }));\n    })());\n    const restoreDefaultViewsPromise = (async () => {\n        if (initialLayoutState.views.defaults != null && initialLayoutState.views.defaults.length > 0) {\n            mark('code/willOpenDefaultViews');\n            const locationsRestored = [];\n            const tryOpenView = (view) => {\n                const location = viewDescriptorService.getViewLocationById(view.id);\n                if (location !== null) {\n                    const container = viewDescriptorService.getViewContainerByViewId(view.id);\n                    if (container != null) {\n                        if (view.order >= (locationsRestored[location]?.order ?? 0)) {\n                            locationsRestored[location] = { id: container.id, order: view.order };\n                        }\n                        const containerModel = viewDescriptorService.getViewContainerModel(container);\n                        containerModel.setCollapsed(view.id, false);\n                        containerModel.setVisible(view.id, true);\n                        return true;\n                    }\n                }\n                return false;\n            };\n            const defaultViews = ( [...initialLayoutState.views.defaults]\n                .reverse()\n                .map((v, index) => ({ id: v, order: index })));\n            let i = defaultViews.length;\n            while (i > 0) {\n                i--;\n                if (tryOpenView(defaultViews[i])) {\n                    defaultViews.splice(i, 1);\n                }\n            }\n            if (defaultViews.length > 0) {\n                await extensionService.whenInstalledExtensionsRegistered();\n                let i = defaultViews.length;\n                while (i > 0) {\n                    i--;\n                    if (tryOpenView(defaultViews[i])) {\n                        defaultViews.splice(i, 1);\n                    }\n                }\n            }\n            if (locationsRestored[0 ] != null) {\n                initialLayoutState.views.containerToRestore.sideBar =\n                    locationsRestored[0 ].id;\n            }\n            if (locationsRestored[1 ] != null) {\n                initialLayoutState.views.containerToRestore.panel =\n                    locationsRestored[1 ].id;\n            }\n            if (locationsRestored[2 ] != null) {\n                initialLayoutState.views.containerToRestore.auxiliaryBar =\n                    locationsRestored[2 ].id;\n            }\n            mark('code/didOpenDefaultViews');\n        }\n    })();\n    layoutReadyPromises.push(restoreDefaultViewsPromise);\n    layoutReadyPromises.push((async () => {\n        await restoreDefaultViewsPromise;\n        if (initialLayoutState.views.containerToRestore.sideBar == null) {\n            return;\n        }\n        mark('code/willRestoreViewlet');\n        const viewlet = await paneCompositePartService.openPaneComposite(initialLayoutState.views.containerToRestore.sideBar, 0 );\n        if (viewlet == null) {\n            await paneCompositePartService.openPaneComposite(getDefaultViewContainer(0 )?.id, 0 );\n        }\n        mark('code/didRestoreViewlet');\n    })());\n    layoutReadyPromises.push((async () => {\n        await restoreDefaultViewsPromise;\n        if (initialLayoutState.views.containerToRestore.panel == null) {\n            return;\n        }\n        mark('code/willRestorePanel');\n        const panel = await paneCompositePartService.openPaneComposite(initialLayoutState.views.containerToRestore.panel, 1 );\n        if (panel == null) {\n            await paneCompositePartService.openPaneComposite(getDefaultViewContainer(1 )?.id, 1 );\n        }\n        mark('code/didRestorePanel');\n    })());\n    layoutReadyPromises.push((async () => {\n        await restoreDefaultViewsPromise;\n        if (initialLayoutState.views.containerToRestore.auxiliaryBar == null) {\n            return;\n        }\n        mark('code/willRestoreAuxiliaryBar');\n        const panel = await paneCompositePartService.openPaneComposite(initialLayoutState.views.containerToRestore.auxiliaryBar, 2 );\n        if (panel == null) {\n            await paneCompositePartService.openPaneComposite(getDefaultViewContainer(2 )?.id, 2 );\n        }\n        mark('code/didRestoreAuxiliaryBar');\n    })());\n    await Promises.settled(layoutReadyPromises);\n    await Promises.settled(layoutRestoredPromises);\n});\nfunction getServiceOverride(openEditorFallback, _webviewIframeAlternateDomains, initializationStateOrRestoreEditors) {\n    if (initializationStateOrRestoreEditors != null) {\n        transformInitializationState =\n            typeof initializationStateOrRestoreEditors === 'boolean'\n                ? (state) => ({\n                    ...state,\n                    editor: {\n                        ...state.editor,\n                        restoreEditors: initializationStateOrRestoreEditors\n                    }\n                })\n                : initializationStateOrRestoreEditors;\n    }\n    return {\n        ...getServiceOverride$1(_webviewIframeAlternateDomains),\n        ...getServiceOverride$2({\n            isKeybindingConfigurationVisible: isEditorPartVisible,\n            shouldUseGlobalPicker: isEditorPartVisible\n        }),\n        ...getServiceOverride$3({\n            shouldUseGlobalKeybindings: isEditorPartVisible\n        }),\n        [( IEditorGroupsService.toString())]: new SyncDescriptor(MonacoEditorParts, [], false),\n        [( IEditorService.toString())]: new SyncDescriptor(MonacoEditorService, [openEditorFallback, isEditorPartVisible], false)\n    };\n}\n\nexport { attachPart, getServiceOverride as default, isEditorPartVisible, onPartVisibilityChange, renderActivitybarPar, renderAuxiliaryPart, renderEditorPart, renderPanelPart, renderPart, renderSidebarPart, renderStatusBarPart };\n"],"names":[],"sourceRoot":""}