{"version":3,"file":"vendors-node_modules_codingame_monaco-vscode-editor-service-override_index_js.immt_editor.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyE;AACd;AACqC;AACS;AACA;AACb;AACc;AACS;AACE;AAChB;AACA;AACnC;AAC0C;AACnE;AAC8C;AACS;AACnB;;AAE7E;AACA;AACA,6BAA6B,qEAAK;AAClC;AACA,wBAAwB,6EAAU;AAClC,2BAA2B,qEAAK;AAChC,2BAA2B,qEAAK;AAChC;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC,gCAAgC,mDAAW;AAC3C,kCAAkC,mDAAW;AAC7C,sCAAsC,qEAAK;AAC3C,6BAA6B,qEAAK;AAClC,gCAAgC,qEAAK;AACrC,8BAA8B,qEAAK;AACnC,kCAAkC,qEAAK;AACvC,qCAAqC,qEAAK;AAC1C,sCAAsC,qEAAK;AAC3C,yCAAyC,qEAAK;AAC9C,2BAA2B,8DAAe;AAC1C,uBAAuB,8DAAe;AACtC;AACA;AACA;AACA;AACA,6BAA6B,mDAAW;AACxC,uBAAuB,mDAAW;AAClC,uBAAuB,mDAAW;AAClC,6BAA6B,mDAAW;AACxC,mCAAmC,mDAAW;AAC9C,iCAAiC,mDAAW;AAC5C,2BAA2B,mDAAW;AACtC,yBAAyB,mDAAW;AACpC,mCAAmC,mDAAW;AAC9C;AACA,wBAAwB,mDAAW;AACnC,2BAA2B,mDAAW;AACtC,yBAAyB,mDAAW;AACpC,0BAA0B,mDAAW;AACrC,8BAA8B,mDAAW;AACzC,yBAAyB,mDAAW;AACpC,2BAA2B,gHAA2B;AACtD,4CAA4C,qEAAK;AACjD,sCAAsC,mDAAW;AACjD;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA;AACA,6CAA6C,mDAAW;AACxD,0CAA0C,mDAAW;AACrD,8BAA8B,mDAAW;AACzC,8BAA8B,mDAAW;AACzC,+BAA+B,mDAAW;AAC1C,gCAAgC,mDAAW;AAC3C,8CAA8C,qEAAK;AACnD;AACA;AACA;AACA,uBAAuB,mDAAW;AAClC,yCAAyC,mDAAW;AACpD,yCAAyC,qEAAK;AAC9C,mCAAmC,mDAAW;AAC9C,iCAAiC,mDAAW;AAC5C,2BAA2B,gHAA2B;AACtD,sCAAsC,mDAAW;AACjD;AACA,yBAAyB,mDAAW;AACpC,sCAAsC,qEAAK;AAC3C,6BAA6B,qEAAK;AAClC,gCAAgC,qEAAK;AACrC,8BAA8B,qEAAK;AACnC,kCAAkC,qEAAK;AACvC,2BAA2B,qEAAK;AAChC,2BAA2B,qEAAK;AAChC,qCAAqC,qEAAK;AAC1C,sCAAsC,qEAAK;AAC3C,2BAA2B,8DAAe;AAC1C,uBAAuB,8DAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAW;AACxC,uBAAuB,mDAAW;AAClC,uBAAuB,mDAAW;AAClC,6BAA6B,mDAAW;AACxC,2BAA2B,mDAAW;AACtC,4BAA4B,mDAAW;AACvC;AACA,mCAAmC,mDAAW;AAC9C;AACA,wBAAwB,mDAAW;AACnC,2BAA2B,mDAAW;AACtC,yBAAyB,mDAAW;AACpC,0BAA0B,mDAAW;AACrC,8BAA8B,mDAAW;AACzC,yBAAyB,mDAAW;AACpC,4CAA4C,qEAAK;AACjD,kCAAkC,mDAAW;AAC7C;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,wEAAwE,gFAAiC;AACzG;AACA;AACA;AACA;AACA,4BAA4B,8EAAU;AACtC,MAAM,2EAAO,IAAI,+GAAqB;AACtC;AACA;AACA;AACA,WAAW,0GAAkB,mBAAmB,sGAAc,CAAC,mHAAiB;AAChF,WAAW,mHAAc,mBAAmB,sGAAc,CAAC,kEAAmB;AAC9E,WAAW,6HAAkB,mBAAmB,sGAAc,CAAC,oHAAiB;AAChF,WAAW,+HAAoB,mBAAmB,sGAAc;AAChE;AACA;;AAE8D;;;;;;;;;;;;;;;;;;AC3JxB;AACkB;;;;;;;;;;;;;;;;;;;ACDxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CE;AAC0B;AACH;AACe;AACK;AACpB;AACsC;AAC1C;AAC6B;AACrD;AAC6B;AACoB;AAChB;AACQ;AACK;AACO;AAClB;AACC;AACpB;AAC+B;AACtB;AACzB;AACuC;AACP;AAClC;AACxB;;AAE1C;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC;AACA,wBAAwB,6EAAU;AAClC,mCAAmC,mDAAW;AAC9C,0BAA0B,sEAAK;AAC/B,mCAAmC,sEAAK;AACxC;AACA;AACA,yBAAyB,mDAAW;AACpC,kCAAkC,mDAAW;AAC7C,wBAAwB,mDAAW;AACnC,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA;AACA;AACA;AACA,2BAA2B,sEAAK;AAChC,sBAAsB,mDAAW;AACjC,gCAAgC,sEAAK;AACrC,6BAA6B,sEAAK;AAClC,uCAAuC,sEAAK;AAC5C,iCAAiC,sEAAK;AACtC,gCAAgC,sEAAK;AACrC,gCAAgC,sEAAK;AACrC,gCAAgC,sEAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAW;AAC3C,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC;AACA;AACA;AACA;AACA,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,2BAA2B,mDAAW;AACtC,4BAA4B,mDAAW;AACvC,+BAA+B,mDAAW;AAC1C,8BAA8B,mDAAW;AACzC;AACA;AACA;AACA;AACA,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA,eAAe,6GAAkB,KAAK,+GAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAK;AACvC,0CAA0C,sEAAK;AAC/C,0BAA0B,sEAAK;AAC/B,yBAAyB,sEAAK;AAC9B;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC,yBAAyB,mDAAW;AACpC,wBAAwB,mDAAW;AACnC,qBAAqB,mDAAW;AAChC,wBAAwB,mDAAW;AACnC,qBAAqB,mDAAW;AAChC;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA,eAAe,iHAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAa;AACrC;AACA;AACA,YAAY,iHAAgB;AAC5B;AACA;AACA,yBAAyB,+FAAqB,YAAY,uFAAa;AACvE;AACA;AACA;AACA;AACA,4BAA4B,6GAAkB,KAAK,0GAAkB;AACrE,qEAAqE,6GAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,uGAAU;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8GAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4GAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6GAAkB,KAAK,0GAAkB;AAC3E,sEAAsE,iHAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAU;AAChC,MAAM,2EAAO,IAAI,gIAAoB;AACrC,MAAM,2EAAO,IAAI,gHAAqB;AACtC,MAAM,2EAAO,IAAI,+FAAY;AAC7B,MAAM,2EAAO,IAAI,wHAAqB;AACtC,MAAM,2EAAO,IAAI,mHAAwB;AACzC,MAAM,2EAAO,IAAI,kHAAmB;AACpC,MAAM,2EAAO,IAAI,oIAAsB;AACvC,MAAM,2EAAO,IAAI,6HAA6B;AAC9C,MAAM,2EAAO,KAAK,wGAAY;AAC9B,MAAM,2EAAO,KAAK,8HAAkB;AACpC,MAAM,2EAAO,KAAK,sGAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAK;AACvC;AACA;AACA;AACA;AACA;AACA,0CAA0C,sEAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,8EAAU;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC;AACA,wBAAwB,6EAAU;AAClC;AACA,mCAAmC,sEAAK;AACxC;AACA;AACA,kCAAkC,mDAAW;AAC7C,wBAAwB,mDAAW;AACnC,sBAAsB,mDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAO;AAC5C;AACA;AACA,4CAA4C,wEAAO;AACnD;AACA,iCAAiC,sEAAK;AACtC,qCAAqC,wEAAO;AAC5C;AACA,gCAAgC,sEAAK;AACrC,qCAAqC,wEAAO;AAC5C;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sHAAuB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,0BAA0B,mDAAW;AACrC,2BAA2B,mDAAW;AACtC,2BAA2B,mDAAW;AACtC,4BAA4B,mDAAW;AACvC,+BAA+B,mDAAW;AAC1C,8BAA8B,mDAAW;AACzC;AACA;AACA;AACA;AACA,uBAAuB,mDAAW;AAClC,sBAAsB,mDAAW;AACjC;AACA,oEAAoE,sHAAuB;AAC3F;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,wFAAkB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oEAAoE,sHAAuB;AAC3F;AACA;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB,sEAAK;AAC9B;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8EAAU;AAC5D,MAAM,2EAAO,IAAI,gHAAqB;AACtC,MAAM,2EAAO,IAAI,+GAAkB;AACnC;AACA,wFAAwF,8EAAU;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wEAAO;AAClD,sCAAsC,sEAAK;AAC3C,kCAAkC,wEAAO;AACzC,6BAA6B,sEAAK;AAClC,qCAAqC,wEAAO;AAC5C,gCAAgC,sEAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6GAAkB,KAAK,0GAAkB;AAC/E;AACA,sCAAsC,6GAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6GAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8EAAU;AAC9C,MAAM,2EAAO,IAAI,gHAAqB;AACtC;;AAEmG","sources":["webpack://immt-editor/./node_modules/@codingame/monaco-vscode-editor-service-override/editor.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-editor-service-override/index.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-editor-service-override/tools.js","webpack://immt-editor/./node_modules/@codingame/monaco-vscode-editor-service-override/tools/editor.js"],"sourcesContent":["import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { Event } from 'vscode/vscode/vs/base/common/event';\nimport { ICodeEditorService } from 'vscode/vscode/vs/editor/browser/services/codeEditorService';\nimport { CodeEditorService } from 'vscode/vscode/vs/workbench/services/editor/browser/codeEditorService';\nimport { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';\nimport { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';\nimport { TextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService';\nimport { ITextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService.service';\nimport { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { DEFAULT_EDITOR_PART_OPTIONS } from 'vscode/vscode/vs/workbench/browser/parts/editor/editor';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { fakeActiveGroup, MonacoDelegateEditorGroupsService, MonacoEditorService } from './tools/editor.js';\nimport { unsupported } from './tools.js';\nimport 'vscode/vscode/vs/workbench/browser/parts/editor/editor.contribution._autosave';\nimport 'vscode/vscode/vs/workbench/contrib/files/browser/files.contribution._fileEditorFactory';\nimport 'vscode/vscode/vs/workbench/contrib/files/browser/fileCommands._save';\n\nclass EmptyEditorPart {\n    constructor() {\n        this.onWillDispose = Event.None;\n        this.hasMaximizedGroup = () => false;\n        this.windowId = mainWindow.vscodeWindowId;\n        this.onDidLayout = Event.None;\n        this.onDidScroll = Event.None;\n        this.isReady = true;\n        this.whenReady = Promise.resolve();\n        this.whenRestored = Promise.resolve();\n        this.hasRestorableState = false;\n        this.centerLayout = unsupported;\n        this.isLayoutCentered = unsupported;\n        this.enforcePartOptions = unsupported;\n        this.onDidChangeActiveGroup = Event.None;\n        this.onDidAddGroup = Event.None;\n        this.onDidRemoveGroup = Event.None;\n        this.onDidMoveGroup = Event.None;\n        this.onDidActivateGroup = Event.None;\n        this.onDidChangeGroupIndex = Event.None;\n        this.onDidChangeGroupLocked = Event.None;\n        this.onDidChangeGroupMaximized = Event.None;\n        this.activeGroup = fakeActiveGroup;\n        this.groups = [fakeActiveGroup];\n        this.count = 0;\n        this.orientation = 0 ;\n        this.getGroups = () => [];\n        this.getGroup = () => undefined;\n        this.activateGroup = unsupported;\n        this.getSize = unsupported;\n        this.setSize = unsupported;\n        this.arrangeGroups = unsupported;\n        this.toggleMaximizeGroup = unsupported;\n        this.toggleExpandGroup = unsupported;\n        this.applyLayout = unsupported;\n        this.getLayout = unsupported;\n        this.setGroupOrientation = unsupported;\n        this.findGroup = () => undefined;\n        this.addGroup = unsupported;\n        this.removeGroup = unsupported;\n        this.moveGroup = unsupported;\n        this.mergeGroup = unsupported;\n        this.mergeAllGroups = unsupported;\n        this.copyGroup = unsupported;\n        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;\n        this.onDidChangeEditorPartOptions = Event.None;\n        this.createEditorDropTarget = unsupported;\n    }\n    get contentDimension() {\n        return unsupported();\n    }\n    get sideGroup() {\n        return unsupported();\n    }\n}\nclass EmptyEditorGroupsService {\n    constructor() {\n        this.getScopedInstantiationService = unsupported;\n        this.registerContextKeyProvider = unsupported;\n        this.saveWorkingSet = unsupported;\n        this.getWorkingSets = unsupported;\n        this.applyWorkingSet = unsupported;\n        this.deleteWorkingSet = unsupported;\n        this.onDidCreateAuxiliaryEditorPart = Event.None;\n        this.mainPart = new EmptyEditorPart();\n        this.activePart = this.mainPart;\n        this.parts = [this.mainPart];\n        this.getPart = unsupported;\n        this.createAuxiliaryEditorPart = unsupported;\n        this.onDidChangeGroupMaximized = Event.None;\n        this.toggleMaximizeGroup = unsupported;\n        this.toggleExpandGroup = unsupported;\n        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;\n        this.createEditorDropTarget = unsupported;\n        this._serviceBrand = undefined;\n        this.getLayout = unsupported;\n        this.onDidChangeActiveGroup = Event.None;\n        this.onDidAddGroup = Event.None;\n        this.onDidRemoveGroup = Event.None;\n        this.onDidMoveGroup = Event.None;\n        this.onDidActivateGroup = Event.None;\n        this.onDidLayout = Event.None;\n        this.onDidScroll = Event.None;\n        this.onDidChangeGroupIndex = Event.None;\n        this.onDidChangeGroupLocked = Event.None;\n        this.activeGroup = fakeActiveGroup;\n        this.groups = [fakeActiveGroup];\n        this.count = 0;\n        this.orientation = 0 ;\n        this.isReady = false;\n        this.whenReady = Promise.resolve();\n        this.whenRestored = Promise.resolve();\n        this.hasRestorableState = false;\n        this.getGroups = () => [];\n        this.getGroup = () => undefined;\n        this.activateGroup = unsupported;\n        this.getSize = unsupported;\n        this.setSize = unsupported;\n        this.arrangeGroups = unsupported;\n        this.applyLayout = unsupported;\n        this.centerLayout = unsupported;\n        this.isLayoutCentered = () => false;\n        this.setGroupOrientation = unsupported;\n        this.findGroup = () => undefined;\n        this.addGroup = unsupported;\n        this.removeGroup = unsupported;\n        this.moveGroup = unsupported;\n        this.mergeGroup = unsupported;\n        this.mergeAllGroups = unsupported;\n        this.copyGroup = unsupported;\n        this.onDidChangeEditorPartOptions = Event.None;\n        this.enforcePartOptions = unsupported;\n    }\n    get contentDimension() {\n        return unsupported();\n    }\n    get sideGroup() {\n        return unsupported();\n    }\n}\nlet MonacoEditorGroupsService = class MonacoEditorGroupsService extends MonacoDelegateEditorGroupsService {\n    constructor(instantiationService) {\n        super(instantiationService.createInstance(EmptyEditorGroupsService), true, instantiationService);\n    }\n};\nMonacoEditorGroupsService = __decorate([\n    ( __param(0, IInstantiationService))\n], MonacoEditorGroupsService);\nfunction getServiceOverride(openEditor) {\n    return {\n        [( ICodeEditorService.toString())]: new SyncDescriptor(CodeEditorService, undefined, true),\n        [( IEditorService.toString())]: new SyncDescriptor(MonacoEditorService, [openEditor, () => false], true),\n        [( ITextEditorService.toString())]: new SyncDescriptor(TextEditorService, [], false),\n        [( IEditorGroupsService.toString())]: new SyncDescriptor(MonacoEditorGroupsService)\n    };\n}\n\nexport { MonacoEditorService, getServiceOverride as default };\n","export { default } from './editor.js';\nexport { MonacoEditorService } from './tools/editor.js';\n","function unsupported() {\n    throw new Error('unsupported');\n}\nfunction memoized(fct) {\n    let v = null;\n    return (...args) => {\n        if (v == null) {\n            v = fct(...args);\n        }\n        return v;\n    };\n}\nfunction memoizedConstructor(ctor) {\n    return new Proxy(ctor, {\n        construct: memoized((target, args) => {\n            return Reflect.construct(ctor, args);\n        })\n    });\n}\nasync function sleep(duration) {\n    await new Promise((resolve) => setTimeout(resolve, duration));\n}\nfunction throttle(fct, merge, delay) {\n    let lastPromise = Promise.resolve();\n    let toConsume = null;\n    return async (param) => {\n        if (toConsume == null) {\n            toConsume = param;\n            lastPromise = lastPromise\n                .then(async () => await sleep(delay))\n                .then(async () => {\n                const _toConsume = toConsume;\n                toConsume = null;\n                await fct(_toConsume);\n            });\n        }\n        else {\n            toConsume = merge(toConsume, param);\n        }\n        await lastPromise;\n    };\n}\n\nexport { memoized, memoizedConstructor, sleep, throttle, unsupported };\n","import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';\nimport { StandaloneServices } from 'vscode/vscode/vs/editor/standalone/browser/standaloneServices';\nimport { ICodeEditorService } from 'vscode/vscode/vs/editor/browser/services/codeEditorService';\nimport { isPreferredGroup, SIDE_GROUP } from 'vscode/vscode/vs/workbench/services/editor/common/editorService';\nimport { isEditorInput, isResourceEditorInput, EditorCloseContext } from 'vscode/vscode/vs/workbench/common/editor';\nimport { applyTextEditorOptions } from 'vscode/vscode/vs/workbench/common/editor/editorOptions';\nimport { DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS } from 'vscode/vscode/vs/workbench/browser/parts/editor/editor';\nimport { ITextModelService } from 'vscode/vscode/vs/editor/common/services/resolverService';\nimport { StandaloneEditor, StandaloneCodeEditor } from 'vscode/vscode/vs/editor/standalone/browser/standaloneCodeEditor';\nimport { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';\nimport { EditorService } from 'vscode/vscode/vs/workbench/services/editor/browser/editorService';\nimport { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService.service';\nimport { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';\nimport { IWorkspaceTrustRequestService } from 'vscode/vscode/vs/platform/workspace/common/workspaceTrust.service';\nimport { IEditorResolverService } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService.service';\nimport { IUriIdentityService } from 'vscode/vscode/vs/platform/uriIdentity/common/uriIdentity.service';\nimport { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace.service';\nimport { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';\nimport { ITextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService.service';\nimport { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';\nimport { Event, Emitter } from 'vscode/vscode/vs/base/common/event';\nimport { TextResourceEditorInput } from 'vscode/vscode/vs/workbench/common/editor/textResourceEditorInput';\nimport { IContextKeyService } from 'vscode/vscode/vs/platform/contextkey/common/contextkey.service';\nimport { mainWindow } from 'vscode/vscode/vs/base/browser/window';\nimport { unsupported } from '../tools.js';\n\nvar StandaloneEditorGroup_1;\nclass EmptyEditorGroup {\n    constructor() {\n        this.selectedEditors = [];\n        this.isSelected = () => false;\n        this.setSelection = unsupported;\n        this.isTransient = () => false;\n        this.windowId = mainWindow.vscodeWindowId;\n        this.createEditorActions = unsupported;\n        this.onDidFocus = Event.None;\n        this.onDidOpenEditorFail = Event.None;\n        this.whenRestored = Promise.resolve();\n        this.disposed = false;\n        this.setActive = unsupported;\n        this.notifyIndexChanged = unsupported;\n        this.relayout = unsupported;\n        this.dispose = unsupported;\n        this.toJSON = unsupported;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChange = Event.None;\n        this.layout = unsupported;\n        this.onDidModelChange = Event.None;\n        this.onWillDispose = Event.None;\n        this.onDidActiveEditorChange = Event.None;\n        this.onWillCloseEditor = Event.None;\n        this.onDidCloseEditor = Event.None;\n        this.onWillMoveEditor = Event.None;\n        this.onWillOpenEditor = Event.None;\n        this.id = 0;\n        this.index = 0;\n        this.label = 'main';\n        this.ariaLabel = 'main';\n        this.activeEditorPane = undefined;\n        this.activeEditor = null;\n        this.previewEditor = null;\n        this.count = 0;\n        this.isEmpty = false;\n        this.isLocked = false;\n        this.stickyCount = 0;\n        this.editors = [];\n        this.getEditors = () => [];\n        this.findEditors = () => [];\n        this.getEditorByIndex = () => undefined;\n        this.getIndexOfEditor = unsupported;\n        this.openEditor = unsupported;\n        this.openEditors = unsupported;\n        this.isPinned = () => false;\n        this.isSticky = () => false;\n        this.isActive = () => false;\n        this.contains = () => false;\n        this.moveEditor = unsupported;\n        this.moveEditors = unsupported;\n        this.copyEditor = unsupported;\n        this.copyEditors = unsupported;\n        this.closeEditor = unsupported;\n        this.closeEditors = unsupported;\n        this.closeAllEditors = unsupported;\n        this.replaceEditors = unsupported;\n        this.pinEditor = () => { };\n        this.stickEditor = () => { };\n        this.unstickEditor = () => { };\n        this.lock = () => { };\n        this.isFirst = unsupported;\n        this.isLast = unsupported;\n    }\n    get groupsView() {\n        return unsupported();\n    }\n    notifyLabelChanged() { }\n    get titleHeight() {\n        return unsupported();\n    }\n    get element() {\n        return unsupported();\n    }\n    get scopedContextKeyService() {\n        return StandaloneServices.get(IContextKeyService);\n    }\n    focus() {\n    }\n}\nconst fakeActiveGroup = new EmptyEditorGroup();\nclass SimpleEditorPane {\n    constructor(editor) {\n        this.editor = editor;\n        this.onDidChangeControl = Event.None;\n        this.onDidChangeSizeConstraints = Event.None;\n        this.onDidFocus = Event.None;\n        this.onDidBlur = Event.None;\n        this.input = undefined;\n        this.options = undefined;\n        this.group = fakeActiveGroup;\n        this.scopedContextKeyService = undefined;\n        this.getViewState = unsupported;\n        this.isVisible = unsupported;\n        this.hasFocus = unsupported;\n        this.getId = unsupported;\n        this.getTitle = unsupported;\n        this.focus = unsupported;\n    }\n    get minimumWidth() {\n        return DEFAULT_EDITOR_MIN_DIMENSIONS.width;\n    }\n    get maximumWidth() {\n        return DEFAULT_EDITOR_MAX_DIMENSIONS.width;\n    }\n    get minimumHeight() {\n        return DEFAULT_EDITOR_MIN_DIMENSIONS.height;\n    }\n    get maximumHeight() {\n        return DEFAULT_EDITOR_MAX_DIMENSIONS.height;\n    }\n    getControl() {\n        return this.editor;\n    }\n}\nfunction wrapOpenEditor(textModelService, defaultBehavior, fallbackBahavior) {\n    async function openEditor(editor, optionsOrPreferredGroup, preferredGroup) {\n        const options = isEditorInput(editor)\n            ? optionsOrPreferredGroup\n            : editor.options;\n        if (isPreferredGroup(optionsOrPreferredGroup)) {\n            preferredGroup = optionsOrPreferredGroup;\n        }\n        const resource = isResourceEditorInput(editor) || isEditorInput(editor) ? editor.resource : undefined;\n        if (resource == null || !textModelService.canHandleResource(resource)) {\n            return await defaultBehavior(editor, optionsOrPreferredGroup, preferredGroup);\n        }\n        let modelEditor;\n        const codeEditors = StandaloneServices.get(ICodeEditorService).listCodeEditors();\n        modelEditor = codeEditors.find((editor) => editor instanceof StandaloneEditor &&\n            editor.getModel() != null &&\n            ( editor.getModel().uri.toString()) === ( resource.toString()));\n        if (modelEditor == null) {\n            const defaultBehaviorResult = await defaultBehavior(\n            editor,\n            optionsOrPreferredGroup, preferredGroup);\n            if (defaultBehaviorResult != null) {\n                return defaultBehaviorResult;\n            }\n            const modelRef = await textModelService.createModelReference(resource);\n            modelEditor = await fallbackBahavior?.(modelRef, options, preferredGroup === SIDE_GROUP);\n            if (modelEditor == null) {\n                modelRef.dispose();\n                return undefined;\n            }\n        }\n        if (options != null) {\n            applyTextEditorOptions(options, modelEditor, 1 );\n        }\n        if (!(options?.preserveFocus ?? false)) {\n            modelEditor.focus();\n            modelEditor.getContainerDomNode().scrollIntoView();\n        }\n        return new SimpleEditorPane(modelEditor);\n    }\n    return openEditor;\n}\nlet MonacoEditorService = class MonacoEditorService extends EditorService {\n    constructor(_openEditorFallback, _isEditorPartVisible, _editorGroupService, instantiationService, fileService, configurationService, contextService, uriIdentityService, editorResolverService, workspaceTrustRequestService, hostService, textEditorService, textModelService) {\n        super(undefined, _editorGroupService, instantiationService, fileService, configurationService, contextService, uriIdentityService, editorResolverService, workspaceTrustRequestService, hostService, textEditorService);\n        this._isEditorPartVisible = _isEditorPartVisible;\n        this.openEditor = wrapOpenEditor(textModelService, this.openEditor.bind(this), _openEditorFallback);\n    }\n    get activeTextEditorControl() {\n        const focusedCodeEditor = StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor();\n        if (focusedCodeEditor != null && focusedCodeEditor instanceof StandaloneCodeEditor) {\n            return focusedCodeEditor;\n        }\n        return super.activeTextEditorControl;\n    }\n    async openEditor(editor, optionsOrPreferredGroup, preferredGroup) {\n        if (!this._isEditorPartVisible()) {\n            return undefined;\n        }\n        return await super.openEditor(editor, optionsOrPreferredGroup, preferredGroup);\n    }\n};\nMonacoEditorService = __decorate([\n    ( __param(2, IEditorGroupsService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IFileService)),\n    ( __param(5, IConfigurationService)),\n    ( __param(6, IWorkspaceContextService)),\n    ( __param(7, IUriIdentityService)),\n    ( __param(8, IEditorResolverService)),\n    ( __param(9, IWorkspaceTrustRequestService)),\n    ( __param(10, IHostService)),\n    ( __param(11, ITextEditorService)),\n    ( __param(12, ITextModelService))\n], MonacoEditorService);\nclass StandaloneEditorPane {\n    constructor(editor, input, group) {\n        this.editor = editor;\n        this.input = input;\n        this.group = group;\n        this.onDidChangeControl = Event.None;\n        this.options = undefined;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChangeSizeConstraints = Event.None;\n        this.scopedContextKeyService = undefined;\n        this.onDidFocus = this.editor.onDidFocusEditorWidget;\n        this.onDidBlur = this.editor.onDidBlurEditorWidget;\n    }\n    getControl() {\n        return this.editor;\n    }\n    getViewState() {\n        return undefined;\n    }\n    isVisible() {\n        return true;\n    }\n    hasFocus() {\n        return this.editor.hasWidgetFocus();\n    }\n    getId() {\n        return this.editor.getId();\n    }\n    getTitle() {\n        return undefined;\n    }\n    focus() {\n        this.editor.focus();\n    }\n}\nlet StandaloneEditorGroup = StandaloneEditorGroup_1 = class StandaloneEditorGroup extends Disposable {\n    constructor(editor, instantiationService, scopedContextKeyService) {\n        super();\n        this.editor = editor;\n        this.scopedContextKeyService = scopedContextKeyService;\n        this.active = false;\n        this.selectedEditors = [];\n        this.isSelected = () => false;\n        this.setSelection = unsupported;\n        this.isTransient = () => false;\n        this.windowId = mainWindow.vscodeWindowId;\n        this.onDidFocus = this.editor.onDidFocusEditorWidget;\n        this.onDidOpenEditorFail = Event.None;\n        this.whenRestored = Promise.resolve();\n        this.disposed = false;\n        this.notifyIndexChanged = unsupported;\n        this.relayout = unsupported;\n        this.toJSON = unsupported;\n        this.minimumWidth = 0;\n        this.maximumWidth = Number.POSITIVE_INFINITY;\n        this.minimumHeight = 0;\n        this.maximumHeight = Number.POSITIVE_INFINITY;\n        this.onDidChange = this.editor.onDidLayoutChange;\n        this.layout = () => this.editor.layout();\n        this._onDidModelChange = new Emitter();\n        this.onDidModelChange = this._onDidModelChange.event;\n        this.onWillDispose = this.editor.onDidDispose;\n        this._onDidActiveEditorChange = new Emitter();\n        this.onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n        this.onWillCloseEditor = Event.None;\n        this._onDidCloseEditor = new Emitter();\n        this.onDidCloseEditor = this._onDidCloseEditor.event;\n        this.onWillMoveEditor = Event.None;\n        this._onWillOpenEditor = new Emitter();\n        this.onWillOpenEditor = this._onWillOpenEditor.event;\n        this.id = --StandaloneEditorGroup_1.idCounter;\n        this.index = -1;\n        this.label = `standalone editor ${-this.id}`;\n        this.ariaLabel = `standalone editor ${-this.id}`;\n        this.previewEditor = null;\n        this.isLocked = true;\n        this.stickyCount = 0;\n        this.getEditors = () => this.editors;\n        this.findEditors = (resource) => this.pane != null && ( resource.toString()) === ( this.pane.input.resource.toString())\n            ? [this.pane.input]\n            : [];\n        this.getEditorByIndex = (index) => this.pane != null && index === 0 ? this.pane.input : undefined;\n        this.getIndexOfEditor = (editorInput) => this.pane != null && this.pane.input === editorInput ? 0 : -1;\n        this.openEditor = async (editor) => {\n            if (editor.isDisposed()) {\n                return undefined;\n            }\n            if (editor instanceof TextResourceEditorInput &&\n                ( editor.resource.toString()) === this.pane?.input.resource.toString()) {\n                this.focus();\n                return this.pane;\n            }\n            return undefined;\n        };\n        this.openEditors = async (editors) => {\n            if (editors.length === 1) {\n                return await this.openEditor(editors[0].editor);\n            }\n            return undefined;\n        };\n        this.isPinned = () => false;\n        this.isSticky = () => false;\n        this.isActive = () => this.editor.hasWidgetFocus();\n        this.contains = (candidate) => {\n            return this.pane != null && this.pane.input === candidate;\n        };\n        this.moveEditor = unsupported;\n        this.moveEditors = unsupported;\n        this.copyEditor = unsupported;\n        this.copyEditors = unsupported;\n        this.closeEditor = unsupported;\n        this.closeEditors = unsupported;\n        this.closeAllEditors = unsupported;\n        this.replaceEditors = unsupported;\n        this.pinEditor = () => { };\n        this.stickEditor = () => { };\n        this.unstickEditor = () => { };\n        this.lock = () => { };\n        this.isFirst = unsupported;\n        this.isLast = unsupported;\n        const onNewModel = (uri) => {\n            const editorInput = instantiationService.createInstance(TextResourceEditorInput, uri, undefined, undefined, undefined, undefined);\n            this._onWillOpenEditor.fire({\n                editor: editorInput,\n                groupId: this.id\n            });\n            this.pane = new StandaloneEditorPane(editor, editorInput, this);\n            this._onDidModelChange.fire({\n                kind: 5 ,\n                editor: editorInput,\n                editorIndex: 0\n            });\n            this._onDidActiveEditorChange.fire({\n                editor: editorInput\n            });\n        };\n        const onRemovedModel = (uri) => {\n            if (this.pane != null && ( this.pane.input.resource.toString()) === ( uri.toString())) {\n                const pane = this.pane;\n                this.pane = undefined;\n                this._onDidModelChange.fire({\n                    kind: 6 ,\n                    editorIndex: 0\n                });\n                this._onDidActiveEditorChange.fire({\n                    editor: undefined\n                });\n                this._onDidCloseEditor.fire({\n                    context: EditorCloseContext.UNKNOWN,\n                    editor: pane.input,\n                    groupId: this.id,\n                    index: 0,\n                    sticky: false\n                });\n            }\n        };\n        editor.onDidChangeModel((e) => {\n            if (e.oldModelUrl != null) {\n                onRemovedModel(e.oldModelUrl);\n            }\n            if (e.newModelUrl != null) {\n                onNewModel(e.newModelUrl);\n            }\n        });\n        this._register({\n            dispose: () => {\n                const model = editor.getModel();\n                if (model != null) {\n                    onRemovedModel(model.uri);\n                }\n            }\n        });\n        const currentModel = editor.getModel();\n        if (currentModel != null) {\n            const editorInput = instantiationService.createInstance(TextResourceEditorInput, currentModel.uri, undefined, undefined, undefined, undefined);\n            this.pane = new StandaloneEditorPane(editor, editorInput, this);\n        }\n    }\n    get groupsView() {\n        return unsupported();\n    }\n    notifyLabelChanged() { }\n    createEditorActions() {\n        return {\n            actions: {\n                primary: [],\n                secondary: []\n            },\n            onDidChange: Event.None\n        };\n    }\n    get titleHeight() {\n        return unsupported();\n    }\n    setActive(isActive) {\n        this.active = isActive;\n    }\n    get element() {\n        return this.editor.getContainerDomNode();\n    }\n    get activeEditorPane() {\n        return this.pane;\n    }\n    get activeEditor() {\n        return this.pane?.input ?? null;\n    }\n    get count() {\n        return this.pane != null ? 1 : 0;\n    }\n    get isEmpty() {\n        return this.pane == null;\n    }\n    get editors() {\n        return this.pane != null ? [this.pane.input] : [];\n    }\n    focus() {\n        this.editor.focus();\n        this.editor.getContainerDomNode().scrollIntoView();\n    }\n};\nStandaloneEditorGroup.idCounter = 0;\nStandaloneEditorGroup = StandaloneEditorGroup_1 = __decorate([\n    ( __param(1, IInstantiationService)),\n    ( __param(2, IContextKeyService))\n], StandaloneEditorGroup);\nlet MonacoDelegateEditorGroupsService = class MonacoDelegateEditorGroupsService extends Disposable {\n    constructor(delegate, emptyDelegate, instantiationService) {\n        super();\n        this.delegate = delegate;\n        this.instantiationService = instantiationService;\n        this._serviceBrand = undefined;\n        this.additionalGroups = [];\n        this.activeGroupOverride = undefined;\n        this.onDidCreateAuxiliaryEditorPart = this.delegate.onDidCreateAuxiliaryEditorPart;\n        this.onDidChangeGroupMaximized = this.delegate.onDidChangeGroupMaximized;\n        this._onDidChangeActiveGroup = new Emitter();\n        this.onDidChangeActiveGroup = Event.any(this._onDidChangeActiveGroup.event, this.delegate.onDidChangeActiveGroup);\n        this._onDidAddGroup = new Emitter();\n        this.onDidAddGroup = Event.any(this._onDidAddGroup.event, this.delegate.onDidAddGroup);\n        this._onDidRemoveGroup = new Emitter();\n        this.onDidRemoveGroup = Event.any(this._onDidRemoveGroup.event, this.delegate.onDidRemoveGroup);\n        this.onDidMoveGroup = this.delegate.onDidMoveGroup;\n        this.onDidActivateGroup = this.delegate.onDidActivateGroup;\n        this.onDidChangeGroupIndex = this.delegate.onDidChangeGroupIndex;\n        this.onDidChangeGroupLocked = this.delegate.onDidChangeGroupLocked;\n        this.getLayout = () => {\n            return this.delegate.getLayout();\n        };\n        this.getGroups = (order) => {\n            return [...this.delegate.getGroups(order), ...this.additionalGroups];\n        };\n        this.getGroup = (identifier) => {\n            return (this.delegate.getGroup(identifier) ??\n                this.additionalGroups.find((group) => group.id === identifier));\n        };\n        this.activateGroup = (...args) => {\n            return this.delegate.activateGroup(...args);\n        };\n        this.getSize = (...args) => {\n            return this.delegate.getSize(...args);\n        };\n        this.setSize = (...args) => {\n            return this.delegate.setSize(...args);\n        };\n        this.arrangeGroups = (...args) => {\n            return this.delegate.arrangeGroups(...args);\n        };\n        this.applyLayout = (...args) => {\n            return this.delegate.applyLayout(...args);\n        };\n        this.setGroupOrientation = (...args) => {\n            return this.delegate.setGroupOrientation(...args);\n        };\n        this.findGroup = (...args) => {\n            return this.delegate.findGroup(...args);\n        };\n        this.addGroup = (...args) => {\n            return this.delegate.addGroup(...args);\n        };\n        this.removeGroup = (...args) => {\n            return this.delegate.removeGroup(...args);\n        };\n        this.moveGroup = (...args) => {\n            return this.delegate.moveGroup(...args);\n        };\n        this.mergeGroup = (...args) => {\n            return this.delegate.mergeGroup(...args);\n        };\n        this.mergeAllGroups = (...args) => {\n            return this.delegate.mergeAllGroups(...args);\n        };\n        this.copyGroup = (...args) => {\n            return this.delegate.copyGroup(...args);\n        };\n        this.onDidChangeEditorPartOptions = this.delegate.onDidChangeEditorPartOptions;\n        setTimeout(() => {\n            const codeEditorService = StandaloneServices.get(ICodeEditorService);\n            const handleCodeEditor = (editor) => {\n                if (editor instanceof StandaloneEditor) {\n                    let timeout;\n                    const updateActiveGroup = (editor) => {\n                        const newActiveGroup = editor != null\n                            ? this.additionalGroups.find((group) => group.editor === editor)\n                            : undefined;\n                        if (this.activeGroupOverride !== newActiveGroup) {\n                            this.activeGroupOverride = newActiveGroup;\n                            this._onDidChangeActiveGroup.fire(this.activeGroup);\n                        }\n                    };\n                    const removeActiveGroup = (editor) => {\n                        if (!emptyDelegate &&\n                            this.activeGroupOverride ===\n                                this.additionalGroups.find((group) => group.editor === editor)) {\n                            updateActiveGroup(undefined);\n                        }\n                    };\n                    const onEditorFocused = () => {\n                        if (timeout != null)\n                            window.clearTimeout(timeout);\n                        updateActiveGroup(editor);\n                    };\n                    const onEditorBlurred = () => {\n                        if (timeout != null)\n                            window.clearTimeout(timeout);\n                        timeout = window.setTimeout(() => {\n                            timeout = undefined;\n                            removeActiveGroup(editor);\n                        }, 100);\n                    };\n                    editor.onDidDispose(() => {\n                        removeActiveGroup(editor);\n                    });\n                    editor.onDidFocusEditorText(onEditorFocused);\n                    editor.onDidFocusEditorWidget(onEditorFocused);\n                    editor.onDidBlurEditorText(onEditorBlurred);\n                    editor.onDidBlurEditorWidget(onEditorBlurred);\n                    if (editor.hasWidgetFocus()) {\n                        onEditorFocused();\n                    }\n                    const newGroup = instantiationService.createInstance(StandaloneEditorGroup, editor);\n                    this.additionalGroups.push(newGroup);\n                    this._onDidAddGroup.fire(newGroup);\n                }\n            };\n            const handleCodeEditorRemoved = (editor) => {\n                if (editor instanceof StandaloneEditor) {\n                    const removedGroup = this.additionalGroups.find((group) => group.editor === editor);\n                    if (removedGroup != null) {\n                        removedGroup.dispose();\n                        if (this.activeGroupOverride === removedGroup) {\n                            this.activeGroupOverride = undefined;\n                            this._onDidChangeActiveGroup.fire(this.activeGroup);\n                        }\n                        this.additionalGroups = this.additionalGroups.filter((group) => group !== removedGroup);\n                        this._onDidRemoveGroup.fire(removedGroup);\n                    }\n                }\n            };\n            this._register(codeEditorService.onCodeEditorAdd(handleCodeEditor));\n            this._register(codeEditorService.onCodeEditorRemove(handleCodeEditorRemoved));\n            codeEditorService.listCodeEditors().forEach(handleCodeEditor);\n        });\n    }\n    getScopedInstantiationService() {\n        return this.instantiationService;\n    }\n    registerContextKeyProvider(provider) {\n        return this.delegate.registerContextKeyProvider(provider);\n    }\n    saveWorkingSet(name) {\n        return this.delegate.saveWorkingSet(name);\n    }\n    getWorkingSets() {\n        return this.delegate.getWorkingSets();\n    }\n    applyWorkingSet(workingSet) {\n        return this.delegate.applyWorkingSet(workingSet);\n    }\n    deleteWorkingSet(workingSet) {\n        return this.delegate.deleteWorkingSet(workingSet);\n    }\n    get isReady() {\n        return this.delegate.isReady;\n    }\n    get whenReady() {\n        return this.delegate.whenReady;\n    }\n    get whenRestored() {\n        return this.delegate.whenRestored;\n    }\n    get hasRestorableState() {\n        return this.delegate.hasRestorableState;\n    }\n    get parts() {\n        return this.delegate.parts;\n    }\n    createAuxiliaryEditorPart(options) {\n        return this.delegate.createAuxiliaryEditorPart(options);\n    }\n    get mainPart() {\n        return this.delegate.mainPart;\n    }\n    getPart(container) {\n        return this.delegate.getPart(container);\n    }\n    toggleMaximizeGroup(group) {\n        return this.delegate.toggleMaximizeGroup(group);\n    }\n    toggleExpandGroup(group) {\n        return this.delegate.toggleExpandGroup(group);\n    }\n    createEditorDropTarget(container, delegate) {\n        return this.delegate.createEditorDropTarget(container, delegate);\n    }\n    get groups() {\n        return [...this.additionalGroups, ...this.delegate.groups];\n    }\n    get activeGroup() {\n        return this.activeGroupOverride ?? this.delegate.activeGroup;\n    }\n    get sideGroup() {\n        return this.delegate.sideGroup;\n    }\n    get count() {\n        return this.delegate.count + this.additionalGroups.length;\n    }\n    get orientation() {\n        return this.delegate.orientation;\n    }\n    get partOptions() {\n        return this.delegate.partOptions;\n    }\n};\nMonacoDelegateEditorGroupsService = __decorate([\n    ( __param(2, IInstantiationService))\n], MonacoDelegateEditorGroupsService);\n\nexport { MonacoDelegateEditorGroupsService, MonacoEditorService, fakeActiveGroup, wrapOpenEditor };\n"],"names":[],"sourceRoot":""}