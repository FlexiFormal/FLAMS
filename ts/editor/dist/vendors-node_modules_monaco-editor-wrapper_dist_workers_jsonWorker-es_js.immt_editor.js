/******/ // The require scope
/******/ var __webpack_require__ = {};
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor-wrapper/dist/workers/jsonWorker-es.js ***!
  \**************************************************************************/
__webpack_require__.r(__webpack_exports__);
var va = Object.defineProperty;
var xa = (e, t, n) => t in e ? va(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;
var Ce = (e, t, n) => xa(e, typeof t != "symbol" ? t + "" : t, n);
class wa {
  constructor() {
    this.listeners = [], this.unexpectedErrorHandler = function(t) {
      setTimeout(() => {
        throw t.stack ? ht.isErrorNoTelemetry(t) ? new ht(t.message + `

` + t.stack) : new Error(t.message + `

` + t.stack) : t;
      }, 0);
    };
  }
  addListener(t) {
    return this.listeners.push(t), () => {
      this._removeListener(t);
    };
  }
  emit(t) {
    this.listeners.forEach((n) => {
      n(t);
    });
  }
  _removeListener(t) {
    this.listeners.splice(this.listeners.indexOf(t), 1);
  }
  setUnexpectedErrorHandler(t) {
    this.unexpectedErrorHandler = t;
  }
  getUnexpectedErrorHandler() {
    return this.unexpectedErrorHandler;
  }
  onUnexpectedError(t) {
    this.unexpectedErrorHandler(t), this.emit(t);
  }
  onUnexpectedExternalError(t) {
    this.unexpectedErrorHandler(t);
  }
}
const _a = new wa();
function yt(e) {
  La(e) || _a.onUnexpectedError(e);
}
function yi(e) {
  if (e instanceof Error) {
    const { name: t, message: n } = e, i = e.stacktrace || e.stack;
    return {
      $isError: !0,
      name: t,
      message: n,
      stack: i,
      noTelemetry: ht.isErrorNoTelemetry(e)
    };
  }
  return e;
}
const Mn = "Canceled";
function La(e) {
  return e instanceof Na ? !0 : e instanceof Error && e.name === Mn && e.message === Mn;
}
class Na extends Error {
  constructor() {
    super(Mn), this.name = this.message;
  }
}
class ht extends Error {
  constructor(t) {
    super(t), this.name = "CodeExpectedError";
  }
  static fromError(t) {
    if (t instanceof ht)
      return t;
    const n = new ht();
    return n.message = t.message, n.stack = t.stack, n;
  }
  static isErrorNoTelemetry(t) {
    return t.name === "CodeExpectedError";
  }
}
class le extends Error {
  constructor(t) {
    super(t || "An unexpected bug occurred."), Object.setPrototypeOf(this, le.prototype);
  }
}
function ya(e, t) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e) {
    const r = t(i);
    let s = n[r];
    s || (s = n[r] = []), s.push(i);
  }
  return n;
}
function Aa(e, t) {
  const n = this;
  let i = !1, r;
  return function() {
    return i || (i = !0, r = e.apply(n, arguments)), r;
  };
}
function ft(e, t) {
  const n = dt(e, t);
  return n === -1 ? void 0 : e[n];
}
function dt(e, t, n = 0, i = e.length) {
  let r = n, s = i;
  for (; r < s; ) {
    const a = Math.floor((r + s) / 2);
    t(e[a]) ? r = a + 1 : s = a;
  }
  return r - 1;
}
function Ra(e, t) {
  const n = kn(e, t);
  return n === e.length ? void 0 : e[n];
}
function kn(e, t, n = 0, i = e.length) {
  let r = n, s = i;
  for (; r < s; ) {
    const a = Math.floor((r + s) / 2);
    t(e[a]) ? s = a : r = a + 1;
  }
  return r;
}
const dn = class dn {
  constructor(t) {
    this._array = t, this._findLastMonotonousLastIdx = 0;
  }
  findLastMonotonous(t) {
    if (dn.assertInvariants) {
      if (this._prevFindLastPredicate) {
        for (const i of this._array)
          if (this._prevFindLastPredicate(i) && !t(i))
            throw new Error(
              "MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate."
            );
      }
      this._prevFindLastPredicate = t;
    }
    const n = dt(this._array, t, this._findLastMonotonousLastIdx);
    return this._findLastMonotonousLastIdx = n + 1, n === -1 ? void 0 : this._array[n];
  }
};
dn.assertInvariants = !1;
let Jt = dn;
function Sa(e, t, n = (i, r) => i === r) {
  if (e === t)
    return !0;
  if (!e || !t || e.length !== t.length)
    return !1;
  for (let i = 0, r = e.length; i < r; i++)
    if (!n(e[i], t[i]))
      return !1;
  return !0;
}
function* Ea(e, t) {
  let n, i;
  for (const r of e)
    i !== void 0 && t(i, r) ? n.push(r) : (n && (yield n), n = [r]), i = r;
  n && (yield n);
}
function Ma(e, t) {
  for (let n = 0; n <= e.length; n++)
    t(n === 0 ? void 0 : e[n - 1], n === e.length ? void 0 : e[n]);
}
function ka(e, t) {
  for (let n = 0; n < e.length; n++)
    t(n === 0 ? void 0 : e[n - 1], e[n], n + 1 === e.length ? void 0 : e[n + 1]);
}
function Ca(e, t) {
  for (const n of t)
    e.push(n);
}
var Cn;
(function(e) {
  function t(s) {
    return s < 0;
  }
  e.isLessThan = t;
  function n(s) {
    return s <= 0;
  }
  e.isLessThanOrEqual = n;
  function i(s) {
    return s > 0;
  }
  e.isGreaterThan = i;
  function r(s) {
    return s === 0;
  }
  e.isNeitherLessOrGreaterThan = r, e.greaterThan = 1, e.lessThan = -1, e.neitherLessOrGreaterThan = 0;
})(Cn || (Cn = {}));
function At(e, t) {
  return (n, i) => t(e(n), e(i));
}
const Rt = (e, t) => e - t;
function Pa(e) {
  return (t, n) => -e(t, n);
}
const st = class st {
  constructor(t) {
    this.iterate = t;
  }
  forEach(t) {
    this.iterate((n) => (t(n), !0));
  }
  toArray() {
    const t = [];
    return this.iterate((n) => (t.push(n), !0)), t;
  }
  filter(t) {
    return new st((n) => this.iterate((i) => t(i) ? n(i) : !0));
  }
  map(t) {
    return new st((n) => this.iterate((i) => n(t(i))));
  }
  some(t) {
    let n = !1;
    return this.iterate((i) => (n = t(i), !n)), n;
  }
  findFirst(t) {
    let n;
    return this.iterate((i) => t(i) ? (n = i, !1) : !0), n;
  }
  findLast(t) {
    let n;
    return this.iterate((i) => (t(i) && (n = i), !0)), n;
  }
  findLastMaxBy(t) {
    let n, i = !0;
    return this.iterate((r) => ((i || Cn.isGreaterThan(t(r, n))) && (i = !1, n = r), !0)), n;
  }
};
st.empty = new st((t) => {
});
let Ai = st;
var Ri, Si;
class Ia {
  constructor(t, n) {
    this.uri = t, this.value = n;
  }
}
function Ta(e) {
  return Array.isArray(e);
}
const We = class We {
  constructor(t, n) {
    if (this[Ri] = "ResourceMap", t instanceof We)
      this.map = new Map(t.map), this.toKey = n ?? We.defaultToKey;
    else if (Ta(t)) {
      this.map = /* @__PURE__ */ new Map(), this.toKey = n ?? We.defaultToKey;
      for (const [i, r] of t)
        this.set(i, r);
    } else
      this.map = /* @__PURE__ */ new Map(), this.toKey = t ?? We.defaultToKey;
  }
  set(t, n) {
    return this.map.set(this.toKey(t), new Ia(t, n)), this;
  }
  get(t) {
    var n;
    return (n = this.map.get(this.toKey(t))) == null ? void 0 : n.value;
  }
  has(t) {
    return this.map.has(this.toKey(t));
  }
  get size() {
    return this.map.size;
  }
  clear() {
    this.map.clear();
  }
  delete(t) {
    return this.map.delete(this.toKey(t));
  }
  forEach(t, n) {
    typeof n < "u" && (t = t.bind(n));
    for (const [i, r] of this.map)
      t(r.value, r.uri, this);
  }
  *values() {
    for (const t of this.map.values())
      yield t.value;
  }
  *keys() {
    for (const t of this.map.values())
      yield t.uri;
  }
  *entries() {
    for (const t of this.map.values())
      yield [t.uri, t.value];
  }
  *[(Ri = Symbol.toStringTag, Symbol.iterator)]() {
    for (const [, t] of this.map)
      yield [t.uri, t.value];
  }
};
We.defaultToKey = (t) => t.toString();
let Pn = We;
class Fa {
  constructor() {
    this[Si] = "LinkedMap", this._map = /* @__PURE__ */ new Map(), this._head = void 0, this._tail = void 0, this._size = 0, this._state = 0;
  }
  clear() {
    this._map.clear(), this._head = void 0, this._tail = void 0, this._size = 0, this._state++;
  }
  isEmpty() {
    return !this._head && !this._tail;
  }
  get size() {
    return this._size;
  }
  get first() {
    var t;
    return (t = this._head) == null ? void 0 : t.value;
  }
  get last() {
    var t;
    return (t = this._tail) == null ? void 0 : t.value;
  }
  has(t) {
    return this._map.has(t);
  }
  get(t, n = 0) {
    const i = this._map.get(t);
    if (i)
      return n !== 0 && this.touch(i, n), i.value;
  }
  set(t, n, i = 0) {
    let r = this._map.get(t);
    if (r)
      r.value = n, i !== 0 && this.touch(r, i);
    else {
      switch (r = { key: t, value: n, next: void 0, previous: void 0 }, i) {
        case 0:
          this.addItemLast(r);
          break;
        case 1:
          this.addItemFirst(r);
          break;
        case 2:
          this.addItemLast(r);
          break;
        default:
          this.addItemLast(r);
          break;
      }
      this._map.set(t, r), this._size++;
    }
    return this;
  }
  delete(t) {
    return !!this.remove(t);
  }
  remove(t) {
    const n = this._map.get(t);
    if (n)
      return this._map.delete(t), this.removeItem(n), this._size--, n.value;
  }
  shift() {
    if (!this._head && !this._tail)
      return;
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    const t = this._head;
    return this._map.delete(t.key), this.removeItem(t), this._size--, t.value;
  }
  forEach(t, n) {
    const i = this._state;
    let r = this._head;
    for (; r; ) {
      if (n ? t.bind(n)(r.value, r.key, this) : t(r.value, r.key, this), this._state !== i)
        throw new Error("LinkedMap got modified during iteration.");
      r = r.next;
    }
  }
  keys() {
    const t = this, n = this._state;
    let i = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (i) {
          const s = { value: i.key, done: !1 };
          return i = i.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  values() {
    const t = this, n = this._state;
    let i = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (i) {
          const s = { value: i.value, done: !1 };
          return i = i.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  entries() {
    const t = this, n = this._state;
    let i = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (t._state !== n)
          throw new Error("LinkedMap got modified during iteration.");
        if (i) {
          const s = { value: [i.key, i.value], done: !1 };
          return i = i.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  [(Si = Symbol.toStringTag, Symbol.iterator)]() {
    return this.entries();
  }
  trimOld(t) {
    if (t >= this.size)
      return;
    if (t === 0) {
      this.clear();
      return;
    }
    let n = this._head, i = this.size;
    for (; n && i > t; )
      this._map.delete(n.key), n = n.next, i--;
    this._head = n, this._size = i, n && (n.previous = void 0), this._state++;
  }
  trimNew(t) {
    if (t >= this.size)
      return;
    if (t === 0) {
      this.clear();
      return;
    }
    let n = this._tail, i = this.size;
    for (; n && i > t; )
      this._map.delete(n.key), n = n.previous, i--;
    this._tail = n, this._size = i, n && (n.next = void 0), this._state++;
  }
  addItemFirst(t) {
    if (!this._head && !this._tail)
      this._tail = t;
    else if (this._head)
      t.next = this._head, this._head.previous = t;
    else
      throw new Error("Invalid list");
    this._head = t, this._state++;
  }
  addItemLast(t) {
    if (!this._head && !this._tail)
      this._head = t;
    else if (this._tail)
      t.previous = this._tail, this._tail.next = t;
    else
      throw new Error("Invalid list");
    this._tail = t, this._state++;
  }
  removeItem(t) {
    if (t === this._head && t === this._tail)
      this._head = void 0, this._tail = void 0;
    else if (t === this._head) {
      if (!t.next)
        throw new Error("Invalid list");
      t.next.previous = void 0, this._head = t.next;
    } else if (t === this._tail) {
      if (!t.previous)
        throw new Error("Invalid list");
      t.previous.next = void 0, this._tail = t.previous;
    } else {
      const n = t.next, i = t.previous;
      if (!n || !i)
        throw new Error("Invalid list");
      n.previous = i, i.next = n;
    }
    t.next = void 0, t.previous = void 0, this._state++;
  }
  touch(t, n) {
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    if (!(n !== 1 && n !== 2)) {
      if (n === 1) {
        if (t === this._head)
          return;
        const i = t.next, r = t.previous;
        t === this._tail ? (r.next = void 0, this._tail = r) : (i.previous = r, r.next = i), t.previous = void 0, t.next = this._head, this._head.previous = t, this._head = t, this._state++;
      } else if (n === 2) {
        if (t === this._tail)
          return;
        const i = t.next, r = t.previous;
        t === this._head ? (i.previous = void 0, this._head = i) : (i.previous = r, r.next = i), t.next = void 0, t.previous = this._tail, this._tail.next = t, this._tail = t, this._state++;
      }
    }
  }
  toJSON() {
    const t = [];
    return this.forEach((n, i) => {
      t.push([i, n]);
    }), t;
  }
  fromJSON(t) {
    this.clear();
    for (const [n, i] of t)
      this.set(n, i);
  }
}
class Da extends Fa {
  constructor(t, n = 1) {
    super(), this._limit = t, this._ratio = Math.min(Math.max(0, n), 1);
  }
  get limit() {
    return this._limit;
  }
  set limit(t) {
    this._limit = t, this.checkTrim();
  }
  get ratio() {
    return this._ratio;
  }
  set ratio(t) {
    this._ratio = Math.min(Math.max(0, t), 1), this.checkTrim();
  }
  get(t, n = 2) {
    return super.get(t, n);
  }
  peek(t) {
    return super.get(t, 0);
  }
  set(t, n) {
    return super.set(t, n, 2), this;
  }
  checkTrim() {
    this.size > this._limit && this.trim(Math.round(this._limit * this._ratio));
  }
}
class Ba extends Da {
  constructor(t, n = 1) {
    super(t, n);
  }
  trim(t) {
    this.trimOld(t);
  }
  set(t, n) {
    return super.set(t, n), this.checkTrim(), this;
  }
}
class O1 {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  add(t, n) {
    let i = this.map.get(t);
    i || (i = /* @__PURE__ */ new Set(), this.map.set(t, i)), i.add(n);
  }
  delete(t, n) {
    const i = this.map.get(t);
    i && (i.delete(n), i.size === 0 && this.map.delete(t));
  }
  forEach(t, n) {
    const i = this.map.get(t);
    i && i.forEach(n);
  }
  get(t) {
    const n = this.map.get(t);
    return n || /* @__PURE__ */ new Set();
  }
}
var Yt;
(function(e) {
  function t(N) {
    return N && typeof N == "object" && typeof N[Symbol.iterator] == "function";
  }
  e.is = t;
  const n = Object.freeze([]);
  function i() {
    return n;
  }
  e.empty = i;
  function* r(N) {
    yield N;
  }
  e.single = r;
  function s(N) {
    return t(N) ? N : r(N);
  }
  e.wrap = s;
  function a(N) {
    return N || n;
  }
  e.from = a;
  function* l(N) {
    for (let y = N.length - 1; y >= 0; y--)
      yield N[y];
  }
  e.reverse = l;
  function u(N) {
    return !N || N[Symbol.iterator]().next().done === !0;
  }
  e.isEmpty = u;
  function c(N) {
    return N[Symbol.iterator]().next().value;
  }
  e.first = c;
  function h(N, y) {
    let C = 0;
    for (const P of N)
      if (y(P, C++))
        return !0;
    return !1;
  }
  e.some = h;
  function f(N, y) {
    for (const C of N)
      if (y(C))
        return C;
  }
  e.find = f;
  function* m(N, y) {
    for (const C of N)
      y(C) && (yield C);
  }
  e.filter = m;
  function* d(N, y) {
    let C = 0;
    for (const P of N)
      yield y(P, C++);
  }
  e.map = d;
  function* g(N, y) {
    let C = 0;
    for (const P of N)
      yield* y(P, C++);
  }
  e.flatMap = g;
  function* b(...N) {
    for (const y of N)
      yield* y;
  }
  e.concat = b;
  function _(N, y, C) {
    let P = C;
    for (const I of N)
      P = y(P, I);
    return P;
  }
  e.reduce = _;
  function* L(N, y, C = N.length) {
    for (y < 0 && (y += N.length), C < 0 ? C += N.length : C > N.length && (C = N.length); y < C; y++)
      yield N[y];
  }
  e.slice = L;
  function A(N, y = Number.POSITIVE_INFINITY) {
    const C = [];
    if (y === 0)
      return [C, N];
    const P = N[Symbol.iterator]();
    for (let I = 0; I < y; I++) {
      const O = P.next();
      if (O.done)
        return [C, e.empty()];
      C.push(O.value);
    }
    return [C, { [Symbol.iterator]() {
      return P;
    } }];
  }
  e.consume = A;
  async function M(N) {
    const y = [];
    for await (const C of N)
      y.push(C);
    return Promise.resolve(y);
  }
  e.asyncToArray = M;
})(Yt || (Yt = {}));
const mn = class mn {
  constructor() {
    this.livingDisposables = /* @__PURE__ */ new Map();
  }
  getDisposableData(t) {
    let n = this.livingDisposables.get(t);
    return n || (n = { parent: null, source: null, isSingleton: !1, value: t, idx: mn.idx++ }, this.livingDisposables.set(t, n)), n;
  }
  trackDisposable(t) {
    const n = this.getDisposableData(t);
    n.source || (n.source = new Error().stack);
  }
  setParent(t, n) {
    const i = this.getDisposableData(t);
    i.parent = n;
  }
  markAsDisposed(t) {
    this.livingDisposables.delete(t);
  }
  markAsSingleton(t) {
    this.getDisposableData(t).isSingleton = !0;
  }
  getRootParent(t, n) {
    const i = n.get(t);
    if (i)
      return i;
    const r = t.parent ? this.getRootParent(this.getDisposableData(t.parent), n) : t;
    return n.set(t, r), r;
  }
  getTrackedDisposables() {
    const t = /* @__PURE__ */ new Map();
    return [...this.livingDisposables.entries()].filter(([, i]) => i.source !== null && !this.getRootParent(i, t).isSingleton).flatMap(([i]) => i);
  }
  computeLeakingDisposables(t = 10, n) {
    let i;
    if (n)
      i = n;
    else {
      const u = /* @__PURE__ */ new Map(), c = [...this.livingDisposables.values()].filter((f) => f.source !== null && !this.getRootParent(f, u).isSingleton);
      if (c.length === 0)
        return;
      const h = new Set(c.map((f) => f.value));
      if (i = c.filter((f) => !(f.parent && h.has(f.parent))), i.length === 0)
        throw new Error("There are cyclic diposable chains!");
    }
    if (!i)
      return;
    function r(u) {
      function c(f, m) {
        for (; f.length > 0 && m.some(
          (d) => typeof d == "string" ? d === f[0] : f[0].match(d)
        ); )
          f.shift();
      }
      const h = u.source.split(`
`).map((f) => f.trim().replace("at ", "")).filter((f) => f !== "");
      return c(h, ["Error", /^trackDisposable \(.*\)$/, /^DisposableTracker.trackDisposable \(.*\)$/]), h.reverse();
    }
    const s = new O1();
    for (const u of i) {
      const c = r(u);
      for (let h = 0; h <= c.length; h++)
        s.add(c.slice(0, h).join(`
`), u);
    }
    i.sort(At((u) => u.idx, Rt));
    let a = "", l = 0;
    for (const u of i.slice(0, t)) {
      l++;
      const c = r(u), h = [];
      for (let f = 0; f < c.length; f++) {
        let m = c[f];
        m = `(shared with ${s.get(c.slice(0, f + 1).join(`
`)).size}/${i.length} leaks) at ${m}`;
        const g = s.get(c.slice(0, f).join(`
`)), b = ya([...g].map((_) => r(_)[f]), (_) => _);
        delete b[c[f]];
        for (const [_, L] of Object.entries(b))
          h.unshift(`    - stacktraces of ${L.length} other leaks continue with ${_}`);
        h.unshift(m);
      }
      a += `


==================== Leaking disposable ${l}/${i.length}: ${u.value.constructor.name} ====================
${h.join(`
`)}
============================================================

`;
    }
    return i.length > t && (a += `


... and ${i.length - t} more leaking disposables

`), { leaks: i, details: a };
  }
};
mn.idx = 0;
let Ei = mn;
function W1(e) {
  if (Yt.is(e)) {
    const t = [];
    for (const n of e)
      if (n)
        try {
          n.dispose();
        } catch (i) {
          t.push(i);
        }
    if (t.length === 1)
      throw t[0];
    if (t.length > 1)
      throw new AggregateError(t, "Encountered errors while disposing of store");
    return Array.isArray(e) ? [] : e;
  } else if (e)
    return e.dispose(), e;
}
function Ua(...e) {
  return Ct(() => W1(e));
}
function Ct(e) {
  return {
    dispose: Aa(() => {
      e();
    })
  };
}
const gn = class gn {
  constructor() {
    this._toDispose = /* @__PURE__ */ new Set(), this._isDisposed = !1;
  }
  dispose() {
    this._isDisposed || (this._isDisposed = !0, this.clear());
  }
  get isDisposed() {
    return this._isDisposed;
  }
  clear() {
    if (this._toDispose.size !== 0)
      try {
        W1(this._toDispose);
      } finally {
        this._toDispose.clear();
      }
  }
  add(t) {
    if (!t)
      return t;
    if (t === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._isDisposed ? gn.DISABLE_DISPOSED_WARNING || console.warn(new Error(
      "Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!"
    ).stack) : this._toDispose.add(t), t;
  }
  delete(t) {
    if (t) {
      if (t === this)
        throw new Error("Cannot dispose a disposable on itself!");
      this._toDispose.delete(t), t.dispose();
    }
  }
  deleteAndLeak(t) {
    t && this._toDispose.has(t) && this._toDispose.delete(t);
  }
};
gn.DISABLE_DISPOSED_WARNING = !1;
let Pt = gn;
const Ni = class Ni {
  constructor() {
    this._store = new Pt(), this._store;
  }
  dispose() {
    this._store.dispose();
  }
  _register(t) {
    if (t === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._store.add(t);
  }
};
Ni.None = Object.freeze({ dispose() {
} });
let mt = Ni;
const at = class at {
  constructor(t) {
    this.element = t, this.next = at.Undefined, this.prev = at.Undefined;
  }
};
at.Undefined = new at(void 0);
let J = at;
class Va {
  constructor() {
    this._first = J.Undefined, this._last = J.Undefined, this._size = 0;
  }
  get size() {
    return this._size;
  }
  isEmpty() {
    return this._first === J.Undefined;
  }
  clear() {
    let t = this._first;
    for (; t !== J.Undefined; ) {
      const n = t.next;
      t.prev = J.Undefined, t.next = J.Undefined, t = n;
    }
    this._first = J.Undefined, this._last = J.Undefined, this._size = 0;
  }
  unshift(t) {
    return this._insert(t, !1);
  }
  push(t) {
    return this._insert(t, !0);
  }
  _insert(t, n) {
    const i = new J(t);
    if (this._first === J.Undefined)
      this._first = i, this._last = i;
    else if (n) {
      const s = this._last;
      this._last = i, i.prev = s, s.next = i;
    } else {
      const s = this._first;
      this._first = i, i.next = s, s.prev = i;
    }
    this._size += 1;
    let r = !1;
    return () => {
      r || (r = !0, this._remove(i));
    };
  }
  shift() {
    if (this._first !== J.Undefined) {
      const t = this._first.element;
      return this._remove(this._first), t;
    }
  }
  pop() {
    if (this._last !== J.Undefined) {
      const t = this._last.element;
      return this._remove(this._last), t;
    }
  }
  _remove(t) {
    if (t.prev !== J.Undefined && t.next !== J.Undefined) {
      const n = t.prev;
      n.next = t.next, t.next.prev = n;
    } else t.prev === J.Undefined && t.next === J.Undefined ? (this._first = J.Undefined, this._last = J.Undefined) : t.next === J.Undefined ? (this._last = this._last.prev, this._last.next = J.Undefined) : t.prev === J.Undefined && (this._first = this._first.next, this._first.prev = J.Undefined);
    this._size -= 1;
  }
  *[Symbol.iterator]() {
    let t = this._first;
    for (; t !== J.Undefined; )
      yield t.element, t = t.next;
  }
}
const qa = globalThis.performance && typeof globalThis.performance.now == "function";
class wn {
  static create(t) {
    return new wn(t);
  }
  constructor(t) {
    this._now = qa && t === !1 ? Date.now : globalThis.performance.now.bind(globalThis.performance), this._startTime = this._now(), this._stopTime = -1;
  }
  stop() {
    this._stopTime = this._now();
  }
  reset() {
    this._startTime = this._now(), this._stopTime = -1;
  }
  elapsed() {
    return this._stopTime !== -1 ? this._stopTime - this._startTime : this._now() - this._startTime;
  }
}
var Zt;
(function(e) {
  e.None = () => mt.None;
  function t(w, v) {
    return m(w, () => {
    }, 0, void 0, !0, void 0, v);
  }
  e.defer = t;
  function n(w) {
    return (v, k = null, R) => {
      let E = !1, D;
      return D = w((V) => {
        if (!E)
          return D ? D.dispose() : E = !0, v.call(k, V);
      }, null, R), E && D.dispose(), D;
    };
  }
  e.once = n;
  function i(w, v) {
    return e.once(e.filter(w, v));
  }
  e.onceIf = i;
  function r(w, v, k) {
    return h((R, E = null, D) => w((V) => R.call(E, v(V)), null, D), k);
  }
  e.map = r;
  function s(w, v, k) {
    return h((R, E = null, D) => w((V) => {
      v(V), R.call(E, V);
    }, null, D), k);
  }
  e.forEach = s;
  function a(w, v, k) {
    return h((R, E = null, D) => w((V) => v(V) && R.call(E, V), null, D), k);
  }
  e.filter = a;
  function l(w) {
    return w;
  }
  e.signal = l;
  function u(...w) {
    return (v, k = null, R) => {
      const E = Ua(...w.map((D) => D((V) => v.call(k, V))));
      return f(E, R);
    };
  }
  e.any = u;
  function c(w, v, k, R) {
    let E = k;
    return r(w, (D) => (E = v(E, D), E), R);
  }
  e.reduce = c;
  function h(w, v) {
    let k;
    const R = {
      onWillAddFirstListener() {
        k = w(E.fire, E);
      },
      onDidRemoveLastListener() {
        k == null || k.dispose();
      }
    }, E = new be(R);
    return v == null || v.add(E), E.event;
  }
  function f(w, v) {
    return v instanceof Array ? v.push(w) : v && v.add(w), w;
  }
  function m(w, v, k = 100, R = !1, E = !1, D, V) {
    let W, te, Je, Ut = 0, $e;
    const ga = {
      leakWarningThreshold: D,
      onWillAddFirstListener() {
        W = w((ba) => {
          Ut++, te = v(te, ba), R && !Je && (Vt.fire(te), te = void 0), $e = () => {
            const pa = te;
            te = void 0, Je = void 0, (!R || Ut > 1) && Vt.fire(pa), Ut = 0;
          }, typeof k == "number" ? (clearTimeout(Je), Je = setTimeout($e, k)) : Je === void 0 && (Je = 0, queueMicrotask($e));
        });
      },
      onWillRemoveListener() {
        E && Ut > 0 && ($e == null || $e());
      },
      onDidRemoveLastListener() {
        $e = void 0, W.dispose();
      }
    }, Vt = new be(ga);
    return V == null || V.add(Vt), Vt.event;
  }
  e.debounce = m;
  function d(w, v = 0, k) {
    return e.debounce(w, (R, E) => R ? (R.push(E), R) : [E], v, void 0, !0, void 0, k);
  }
  e.accumulate = d;
  function g(w, v = (R, E) => R === E, k) {
    let R = !0, E;
    return a(w, (D) => {
      const V = R || !v(D, E);
      return R = !1, E = D, V;
    }, k);
  }
  e.latch = g;
  function b(w, v, k) {
    return [
      e.filter(w, v, k),
      e.filter(w, (R) => !v(R), k)
    ];
  }
  e.split = b;
  function _(w, v = !1, k = [], R) {
    let E = k.slice(), D = w((te) => {
      E ? E.push(te) : W.fire(te);
    });
    R && R.add(D);
    const V = () => {
      E == null || E.forEach((te) => W.fire(te)), E = null;
    }, W = new be({
      onWillAddFirstListener() {
        D || (D = w((te) => W.fire(te)), R && R.add(D));
      },
      onDidAddFirstListener() {
        E && (v ? setTimeout(V) : V());
      },
      onDidRemoveLastListener() {
        D && D.dispose(), D = null;
      }
    });
    return R && R.add(W), W.event;
  }
  e.buffer = _;
  function L(w, v) {
    return (R, E, D) => {
      const V = v(new M());
      return w(function(W) {
        const te = V.evaluate(W);
        te !== A && R.call(E, te);
      }, void 0, D);
    };
  }
  e.chain = L;
  const A = Symbol("HaltChainable");
  class M {
    constructor() {
      this.steps = [];
    }
    map(v) {
      return this.steps.push(v), this;
    }
    forEach(v) {
      return this.steps.push((k) => (v(k), k)), this;
    }
    filter(v) {
      return this.steps.push((k) => v(k) ? k : A), this;
    }
    reduce(v, k) {
      let R = k;
      return this.steps.push((E) => (R = v(R, E), R)), this;
    }
    latch(v = (k, R) => k === R) {
      let k = !0, R;
      return this.steps.push((E) => {
        const D = k || !v(E, R);
        return k = !1, R = E, D ? E : A;
      }), this;
    }
    evaluate(v) {
      for (const k of this.steps)
        if (v = k(v), v === A)
          break;
      return v;
    }
  }
  function N(w, v, k = (R) => R) {
    const R = (...W) => V.fire(k(...W)), E = () => w.on(v, R), D = () => w.removeListener(v, R), V = new be(
      { onWillAddFirstListener: E, onDidRemoveLastListener: D }
    );
    return V.event;
  }
  e.fromNodeEventEmitter = N;
  function y(w, v, k = (R) => R) {
    const R = (...W) => V.fire(k(...W)), E = () => w.addEventListener(v, R), D = () => w.removeEventListener(v, R), V = new be(
      { onWillAddFirstListener: E, onDidRemoveLastListener: D }
    );
    return V.event;
  }
  e.fromDOMEventEmitter = y;
  function C(w) {
    return new Promise((v) => n(w)(v));
  }
  e.toPromise = C;
  function P(w) {
    const v = new be();
    return w.then((k) => {
      v.fire(k);
    }, () => {
      v.fire(void 0);
    }).finally(() => {
      v.dispose();
    }), v.event;
  }
  e.fromPromise = P;
  function I(w, v) {
    return w((k) => v.fire(k));
  }
  e.forward = I;
  function O(w, v, k) {
    return v(k), w((R) => v(R));
  }
  e.runAndSubscribe = O;
  class Z {
    constructor(v, k) {
      this._observable = v, this._counter = 0, this._hasChanged = !1;
      const R = {
        onWillAddFirstListener: () => {
          v.addObserver(this), this._observable.reportChanges();
        },
        onDidRemoveLastListener: () => {
          v.removeObserver(this);
        }
      };
      this.emitter = new be(R), k && k.add(this.emitter);
    }
    beginUpdate(v) {
      this._counter++;
    }
    handlePossibleChange(v) {
    }
    handleChange(v, k) {
      this._hasChanged = !0;
    }
    endUpdate(v) {
      this._counter--, this._counter === 0 && (this._observable.reportChanges(), this._hasChanged && (this._hasChanged = !1, this.emitter.fire(this._observable.get())));
    }
  }
  function S(w, v) {
    return new Z(w, v).emitter.event;
  }
  e.fromObservable = S;
  function x(w) {
    return (v, k, R) => {
      let E = 0, D = !1;
      const V = {
        beginUpdate() {
          E++;
        },
        endUpdate() {
          E--, E === 0 && (w.reportChanges(), D && (D = !1, v.call(k)));
        },
        handlePossibleChange() {
        },
        handleChange() {
          D = !0;
        }
      };
      w.addObserver(V), w.reportChanges();
      const W = {
        dispose() {
          w.removeObserver(V);
        }
      };
      return R instanceof Pt ? R.add(W) : Array.isArray(R) && R.push(W), W;
    };
  }
  e.fromObservableLight = x;
})(Zt || (Zt = {}));
const ot = class ot {
  constructor(t) {
    this.listenerCount = 0, this.invocationCount = 0, this.elapsedOverall = 0, this.durations = [], this.name = `${t}_${ot._idPool++}`, ot.all.add(this);
  }
  start(t) {
    this._stopWatch = new wn(), this.listenerCount = t;
  }
  stop() {
    if (this._stopWatch) {
      const t = this._stopWatch.elapsed();
      this.durations.push(t), this.elapsedOverall += t, this.invocationCount += 1, this._stopWatch = void 0;
    }
  }
};
ot.all = /* @__PURE__ */ new Set(), ot._idPool = 0;
let In = ot, $a = -1;
const bn = class bn {
  constructor(t, n, i = (bn._idPool++).toString(16).padStart(3, "0")) {
    this._errorHandler = t, this.threshold = n, this.name = i, this._warnCountdown = 0;
  }
  dispose() {
    var t;
    (t = this._stacks) == null || t.clear();
  }
  check(t, n) {
    const i = this.threshold;
    if (i <= 0 || n < i)
      return;
    this._stacks || (this._stacks = /* @__PURE__ */ new Map());
    const r = this._stacks.get(t.value) || 0;
    if (this._stacks.set(t.value, r + 1), this._warnCountdown -= 1, this._warnCountdown <= 0) {
      this._warnCountdown = i * 0.5;
      const [s, a] = this.getMostFrequentStack(), l = `[${this.name}] potential listener LEAK detected, having ${n} listeners already. MOST frequent listener (${a}):`;
      console.warn(l), console.warn(s);
      const u = new Oa(l, s);
      this._errorHandler(u);
    }
    return () => {
      const s = this._stacks.get(t.value) || 0;
      this._stacks.set(t.value, s - 1);
    };
  }
  getMostFrequentStack() {
    if (!this._stacks)
      return;
    let t, n = 0;
    for (const [i, r] of this._stacks)
      (!t || n < r) && (t = [i, r], n = r);
    return t;
  }
};
bn._idPool = 1;
let Tn = bn;
class gi {
  static create() {
    const t = new Error();
    return new gi(t.stack ?? "");
  }
  constructor(t) {
    this.value = t;
  }
  print() {
    console.warn(this.value.split(`
`).slice(2).join(`
`));
  }
}
class Oa extends Error {
  constructor(t, n) {
    super(t), this.name = "ListenerLeakError", this.stack = n;
  }
}
class Wa extends Error {
  constructor(t, n) {
    super(t), this.name = "ListenerRefusalError", this.stack = n;
  }
}
let za = 0;
class _n {
  constructor(t) {
    this.value = t, this.id = za++;
  }
}
const Ha = 2;
class be {
  constructor(t) {
    var n, i, r, s;
    this._size = 0, this._options = t, this._leakageMon = (n = this._options) != null && n.leakWarningThreshold ? new Tn(
      (t == null ? void 0 : t.onListenerError) ?? yt,
      ((i = this._options) == null ? void 0 : i.leakWarningThreshold) ?? $a
    ) : void 0, this._perfMon = (r = this._options) != null && r._profName ? new In(this._options._profName) : void 0, this._deliveryQueue = (s = this._options) == null ? void 0 : s.deliveryQueue;
  }
  dispose() {
    var t, n, i, r;
    this._disposed || (this._disposed = !0, ((t = this._deliveryQueue) == null ? void 0 : t.current) === this && this._deliveryQueue.reset(), this._listeners && (this._listeners = void 0, this._size = 0), (i = (n = this._options) == null ? void 0 : n.onDidRemoveLastListener) == null || i.call(n), (r = this._leakageMon) == null || r.dispose());
  }
  get event() {
    return this._event ?? (this._event = (t, n, i) => {
      var l, u, c, h, f;
      if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
        const m = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
        console.warn(m);
        const d = this._leakageMon.getMostFrequentStack() ?? ["UNKNOWN stack", -1], g = new Wa(
          `${m}. HINT: Stack shows most frequent listener (${d[1]}-times)`,
          d[0]
        );
        return (((l = this._options) == null ? void 0 : l.onListenerError) || yt)(g), mt.None;
      }
      if (this._disposed)
        return mt.None;
      n && (t = t.bind(n));
      const r = new _n(t);
      let s;
      this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2) && (r.stack = gi.create(), s = this._leakageMon.check(r.stack, this._size + 1)), this._listeners ? this._listeners instanceof _n ? (this._deliveryQueue ?? (this._deliveryQueue = new ja()), this._listeners = [this._listeners, r]) : this._listeners.push(r) : ((c = (u = this._options) == null ? void 0 : u.onWillAddFirstListener) == null || c.call(u, this), this._listeners = r, (f = (h = this._options) == null ? void 0 : h.onDidAddFirstListener) == null || f.call(h, this)), this._size++;
      const a = Ct(() => {
        s == null || s(), this._removeListener(r);
      });
      return i instanceof Pt ? i.add(a) : Array.isArray(i) && i.push(a), a;
    }), this._event;
  }
  _removeListener(t) {
    var s, a, l, u;
    if ((a = (s = this._options) == null ? void 0 : s.onWillRemoveListener) == null || a.call(s, this), !this._listeners)
      return;
    if (this._size === 1) {
      this._listeners = void 0, (u = (l = this._options) == null ? void 0 : l.onDidRemoveLastListener) == null || u.call(l, this), this._size = 0;
      return;
    }
    const n = this._listeners, i = n.indexOf(t);
    if (i === -1)
      throw console.log("disposed?", this._disposed), console.log("size?", this._size), console.log("arr?", JSON.stringify(this._listeners)), new Error("Attempted to dispose unknown listener");
    this._size--, n[i] = void 0;
    const r = this._deliveryQueue.current === this;
    if (this._size * Ha <= n.length) {
      let c = 0;
      for (let h = 0; h < n.length; h++)
        n[h] ? n[c++] = n[h] : r && (this._deliveryQueue.end--, c < this._deliveryQueue.i && this._deliveryQueue.i--);
      n.length = c;
    }
  }
  _deliver(t, n) {
    var r;
    if (!t)
      return;
    const i = ((r = this._options) == null ? void 0 : r.onListenerError) || yt;
    if (!i) {
      t.value(n);
      return;
    }
    try {
      t.value(n);
    } catch (s) {
      i(s);
    }
  }
  _deliverQueue(t) {
    const n = t.current._listeners;
    for (; t.i < t.end; )
      this._deliver(n[t.i++], t.value);
    t.reset();
  }
  fire(t) {
    var n, i, r, s;
    if ((n = this._deliveryQueue) != null && n.current && (this._deliverQueue(this._deliveryQueue), (i = this._perfMon) == null || i.stop()), (r = this._perfMon) == null || r.start(this._size), this._listeners) if (this._listeners instanceof _n)
      this._deliver(this._listeners, t);
    else {
      const a = this._deliveryQueue;
      a.enqueue(this, t, this._listeners.length), this._deliverQueue(a);
    }
    (s = this._perfMon) == null || s.stop();
  }
  hasListeners() {
    return this._size > 0;
  }
}
class ja {
  constructor() {
    this.i = -1, this.end = 0;
  }
  enqueue(t, n, i) {
    this.i = 0, this.end = i, this.current = t, this.value = n;
  }
  reset() {
    this.i = this.end, this.current = void 0, this.value = void 0;
  }
}
function Ga() {
  return globalThis._VSCODE_NLS_MESSAGES;
}
function z1() {
  return globalThis._VSCODE_NLS_LANGUAGE;
}
const Xa = z1() === "pseudo" || typeof document < "u" && document.location && typeof document.location.hash == "string" && document.location.hash.indexOf("pseudo=true") >= 0;
function Mi(e, t) {
  let n;
  return t.length === 0 ? n = e : n = e.replace(/\{(\d+)\}/g, (i, r) => {
    const s = r[0], a = t[s];
    let l = i;
    return typeof a == "string" ? l = a : (typeof a == "number" || typeof a == "boolean" || a === void 0 || a === null) && (l = String(a)), l;
  }), Xa && (n = "［" + n.replace(/[aouei]/g, "$&$&") + "］"), n;
}
function Q(e, t, ...n) {
  return Mi(typeof e == "number" ? Qa(e, t) : t, n);
}
function Qa(e, t) {
  var i;
  const n = (i = Ga()) == null ? void 0 : i[e];
  if (typeof n != "string") {
    if (typeof t == "string")
      return t;
    throw new Error(`!!! NLS MISSING: ${e} !!!`);
  }
  return n;
}
const it = "en";
let Fn = !1, Dn = !1, Ln = !1, H1 = !1, bi = !1, qt, zt = it, ki = it, Ja, we;
const Ee = globalThis;
let ae;
var U1;
typeof Ee.vscode < "u" && typeof Ee.vscode.process < "u" ? ae = Ee.vscode.process : typeof process < "u" && typeof ((U1 = process == null ? void 0 : process.versions) == null ? void 0 : U1.node) == "string" && (ae = process);
var V1;
const Ya = typeof ((V1 = ae == null ? void 0 : ae.versions) == null ? void 0 : V1.electron) == "string", Za = Ya && (ae == null ? void 0 : ae.type) === "renderer";
var q1;
if (typeof ae == "object") {
  Fn = ae.platform === "win32", Dn = ae.platform === "darwin", Ln = ae.platform === "linux", Ln && ae.env.SNAP && ae.env.SNAP_REVISION, ae.env.CI || ae.env.BUILD_ARTIFACTSTAGINGDIRECTORY, qt = it, zt = it;
  const e = ae.env.VSCODE_NLS_CONFIG;
  if (e)
    try {
      const t = JSON.parse(e);
      qt = t.userLocale, ki = t.osLocale, zt = t.resolvedLanguage || it, Ja = (q1 = t.languagePack) == null ? void 0 : q1.translationsConfigFile;
    } catch {
    }
  H1 = !0;
} else typeof navigator == "object" && !Za ? (we = navigator.userAgent, Fn = we.indexOf("Windows") >= 0, Dn = we.indexOf("Macintosh") >= 0, (we.indexOf("Macintosh") >= 0 || we.indexOf("iPad") >= 0 || we.indexOf("iPhone") >= 0) && navigator.maxTouchPoints && navigator.maxTouchPoints > 0, Ln = we.indexOf("Linux") >= 0, (we == null ? void 0 : we.indexOf("Mobi")) >= 0, bi = !0, zt = z1() || it, qt = navigator.language.toLowerCase(), ki = qt) : console.error("Unable to resolve platform.");
const gt = Fn, Ka = Dn, eo = H1, to = bi, no = bi && typeof Ee.importScripts == "function", io = no ? Ee.origin : void 0, Ae = we, Pe = zt;
var Ci;
(function(e) {
  function t() {
    return Pe;
  }
  e.value = t;
  function n() {
    return Pe.length === 2 ? Pe === "en" : Pe.length >= 3 ? Pe[0] === "e" && Pe[1] === "n" && Pe[2] === "-" : !1;
  }
  e.isDefaultVariant = n;
  function i() {
    return Pe === "en";
  }
  e.isDefault = i;
})(Ci || (Ci = {}));
const ro = typeof Ee.postMessage == "function" && !Ee.importScripts;
(() => {
  if (ro) {
    const e = [];
    Ee.addEventListener("message", (n) => {
      if (n.data && n.data.vscodeScheduleAsyncWork)
        for (let i = 0, r = e.length; i < r; i++) {
          const s = e[i];
          if (s.id === n.data.vscodeScheduleAsyncWork) {
            e.splice(i, 1), s.callback();
            return;
          }
        }
    });
    let t = 0;
    return (n) => {
      const i = ++t;
      e.push({
        id: i,
        callback: n
      }), Ee.postMessage({ vscodeScheduleAsyncWork: i }, "*");
    };
  }
  return (e) => setTimeout(e);
})();
const so = !!(Ae && Ae.indexOf("Chrome") >= 0);
Ae && Ae.indexOf("Firefox") >= 0;
!so && Ae && Ae.indexOf("Safari") >= 0;
Ae && Ae.indexOf("Edg/") >= 0;
Ae && Ae.indexOf("Android") >= 0;
const j1 = Object.freeze(function(e, t) {
  const n = setTimeout(e.bind(t), 0);
  return { dispose() {
    clearTimeout(n);
  } };
});
var Kt;
(function(e) {
  function t(n) {
    return n === e.None || n === e.Cancelled || n instanceof Ht ? !0 : !n || typeof n != "object" ? !1 : typeof n.isCancellationRequested == "boolean" && typeof n.onCancellationRequested == "function";
  }
  e.isCancellationToken = t, e.None = Object.freeze({
    isCancellationRequested: !1,
    onCancellationRequested: Zt.None
  }), e.Cancelled = Object.freeze({
    isCancellationRequested: !0,
    onCancellationRequested: j1
  });
})(Kt || (Kt = {}));
class Ht {
  constructor() {
    this._isCancelled = !1, this._emitter = null;
  }
  cancel() {
    this._isCancelled || (this._isCancelled = !0, this._emitter && (this._emitter.fire(void 0), this.dispose()));
  }
  get isCancellationRequested() {
    return this._isCancelled;
  }
  get onCancellationRequested() {
    return this._isCancelled ? j1 : (this._emitter || (this._emitter = new be()), this._emitter.event);
  }
  dispose() {
    this._emitter && (this._emitter.dispose(), this._emitter = null);
  }
}
class ao {
  constructor(t) {
    this._token = void 0, this._parentListener = void 0, this._parentListener = t && t.onCancellationRequested(this.cancel, this);
  }
  get token() {
    return this._token || (this._token = new Ht()), this._token;
  }
  cancel() {
    this._token ? this._token instanceof Ht && this._token.cancel() : this._token = Kt.Cancelled;
  }
  dispose(t = !1) {
    var n;
    t && this.cancel(), (n = this._parentListener) == null || n.dispose(), this._token ? this._token instanceof Ht && this._token.dispose() : this._token = Kt.None;
  }
}
function oo(e) {
  return e;
}
class lo {
  constructor(t, n) {
    this.lastCache = void 0, this.lastArgKey = void 0, typeof t == "function" ? (this._fn = t, this._computeKey = oo) : (this._fn = n, this._computeKey = t.getCacheKey);
  }
  get(t) {
    const n = this._computeKey(t);
    return this.lastArgKey !== n && (this.lastArgKey = n, this.lastCache = this._fn(t)), this.lastCache;
  }
}
class Pi {
  constructor(t) {
    this.executor = t, this._didRun = !1;
  }
  get hasValue() {
    return this._didRun;
  }
  get value() {
    if (!this._didRun)
      try {
        this._value = this.executor();
      } catch (t) {
        this._error = t;
      } finally {
        this._didRun = !0;
      }
    if (this._error)
      throw this._error;
    return this._value;
  }
  get rawValue() {
    return this._value;
  }
}
function uo(e) {
  return e.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, "\\$&");
}
function co(e) {
  return e.split(/\r\n|\r|\n/);
}
function ho(e) {
  for (let t = 0, n = e.length; t < n; t++) {
    const i = e.charCodeAt(t);
    if (i !== 32 && i !== 9)
      return t;
  }
  return -1;
}
function fo(e, t = e.length - 1) {
  for (let n = t; n >= 0; n--) {
    const i = e.charCodeAt(n);
    if (i !== 32 && i !== 9)
      return n;
  }
  return -1;
}
function mo(e, t) {
  return e < t ? -1 : e > t ? 1 : 0;
}
function go(e, t, n = 0, i = e.length, r = 0, s = t.length) {
  for (; n < i && r < s; n++, r++) {
    const u = e.charCodeAt(n), c = t.charCodeAt(r);
    if (u < c)
      return -1;
    if (u > c)
      return 1;
  }
  const a = i - n, l = s - r;
  return a < l ? -1 : a > l ? 1 : 0;
}
function G1(e, t, n = 0, i = e.length, r = 0, s = t.length) {
  for (; n < i && r < s; n++, r++) {
    let u = e.charCodeAt(n), c = t.charCodeAt(r);
    if (u === c)
      continue;
    if (u >= 128 || c >= 128)
      return go(e.toLowerCase(), t.toLowerCase(), n, i, r, s);
    Ii(u) && (u -= 32), Ii(c) && (c -= 32);
    const h = u - c;
    if (h !== 0)
      return h;
  }
  const a = i - n, l = s - r;
  return a < l ? -1 : a > l ? 1 : 0;
}
function Ii(e) {
  return e >= 97 && e <= 122;
}
function X1(e) {
  return e >= 65 && e <= 90;
}
function bo(e, t) {
  return e.length === t.length && G1(e, t) === 0;
}
function po(e, t) {
  const n = t.length;
  return t.length > e.length ? !1 : G1(e, t, 0, n) === 0;
}
function Bn(e) {
  return 55296 <= e && e <= 56319;
}
function vo(e) {
  return 56320 <= e && e <= 57343;
}
function xo(e, t) {
  return (e - 55296 << 10) + (t - 56320) + 65536;
}
function wo(e, t, n) {
  const i = e.charCodeAt(n);
  if (Bn(i) && n + 1 < t) {
    const r = e.charCodeAt(n + 1);
    if (vo(r))
      return xo(i, r);
  }
  return i;
}
const _o = /^[\t\n\r\x20-\x7E]*$/;
function Lo(e) {
  return _o.test(e);
}
const ze = class ze {
  static getInstance() {
    return ze._INSTANCE || (ze._INSTANCE = new ze()), ze._INSTANCE;
  }
  constructor() {
    this._data = No();
  }
  getGraphemeBreakType(t) {
    if (t < 32)
      return t === 10 ? 3 : t === 13 ? 2 : 4;
    if (t < 127)
      return 0;
    const n = this._data, i = n.length / 3;
    let r = 1;
    for (; r <= i; )
      if (t < n[3 * r])
        r = 2 * r;
      else if (t > n[3 * r + 1])
        r = 2 * r + 1;
      else
        return n[3 * r + 2];
    return 0;
  }
};
ze._INSTANCE = null;
let Ti = ze;
function No() {
  return JSON.parse("[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]");
}
const Ne = class Ne {
  static getInstance(t) {
    return Ne.cache.get(Array.from(t));
  }
  static getLocales() {
    return Ne._locales.value;
  }
  constructor(t) {
    this.confusableDictionary = t;
  }
  isAmbiguous(t) {
    return this.confusableDictionary.has(t);
  }
  containsAmbiguousCharacter(t) {
    for (let n = 0; n < t.length; n++) {
      const i = t.codePointAt(n);
      if (typeof i == "number" && this.isAmbiguous(i))
        return !0;
    }
    return !1;
  }
  getPrimaryConfusable(t) {
    return this.confusableDictionary.get(t);
  }
  getConfusableCodePoints() {
    return new Set(this.confusableDictionary.keys());
  }
};
Ne.ambiguousCharacterData = new Pi(() => JSON.parse('{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"cs":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"es":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"fr":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"it":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ja":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],"ko":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pt-BR":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ru":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"zh-hans":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],"zh-hant":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}')), Ne.cache = new lo({ getCacheKey: JSON.stringify }, (t) => {
  function n(h) {
    const f = /* @__PURE__ */ new Map();
    for (let m = 0; m < h.length; m += 2)
      f.set(h[m], h[m + 1]);
    return f;
  }
  function i(h, f) {
    const m = new Map(h);
    for (const [d, g] of f)
      m.set(d, g);
    return m;
  }
  function r(h, f) {
    if (!h)
      return f;
    const m = /* @__PURE__ */ new Map();
    for (const [d, g] of h)
      f.has(d) && m.set(d, g);
    return m;
  }
  const s = Ne.ambiguousCharacterData.value;
  let a = t.filter((h) => !h.startsWith("_") && h in s);
  a.length === 0 && (a = ["_default"]);
  let l;
  for (const h of a) {
    const f = n(s[h]);
    l = r(l, f);
  }
  const u = n(s._common), c = i(u, l);
  return new Ne(c);
}), Ne._locales = new Pi(() => Object.keys(Ne.ambiguousCharacterData.value).filter((t) => !t.startsWith("_")));
let It = Ne;
const He = class He {
  static getRawData() {
    return JSON.parse("[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]");
  }
  static getData() {
    return this._data || (this._data = new Set(He.getRawData())), this._data;
  }
  static isInvisibleCharacter(t) {
    return He.getData().has(t);
  }
  static containsInvisibleCharacter(t) {
    for (let n = 0; n < t.length; n++) {
      const i = t.codePointAt(n);
      if (typeof i == "number" && He.isInvisibleCharacter(i))
        return !0;
    }
    return !1;
  }
  static get codePoints() {
    return He.getData();
  }
};
He._data = void 0;
let St = He;
const Nn = "default", yo = "$initialize";
class Ao {
  constructor(t, n, i, r, s) {
    this.vsWorker = t, this.req = n, this.channel = i, this.method = r, this.args = s, this.type = 0;
  }
}
class Fi {
  constructor(t, n, i, r) {
    this.vsWorker = t, this.seq = n, this.res = i, this.err = r, this.type = 1;
  }
}
class Ro {
  constructor(t, n, i, r, s) {
    this.vsWorker = t, this.req = n, this.channel = i, this.eventName = r, this.arg = s, this.type = 2;
  }
}
class So {
  constructor(t, n, i) {
    this.vsWorker = t, this.req = n, this.event = i, this.type = 3;
  }
}
class Eo {
  constructor(t, n) {
    this.vsWorker = t, this.req = n, this.type = 4;
  }
}
class Mo {
  constructor(t) {
    this._workerId = -1, this._handler = t, this._lastSentReq = 0, this._pendingReplies = /* @__PURE__ */ Object.create(null), this._pendingEmitters = /* @__PURE__ */ new Map(), this._pendingEvents = /* @__PURE__ */ new Map();
  }
  setWorkerId(t) {
    this._workerId = t;
  }
  sendMessage(t, n, i) {
    const r = String(++this._lastSentReq);
    return new Promise((s, a) => {
      this._pendingReplies[r] = {
        resolve: s,
        reject: a
      }, this._send(new Ao(this._workerId, r, t, n, i));
    });
  }
  listen(t, n, i) {
    let r = null;
    const s = new be({
      onWillAddFirstListener: () => {
        r = String(++this._lastSentReq), this._pendingEmitters.set(r, s), this._send(new Ro(this._workerId, r, t, n, i));
      },
      onDidRemoveLastListener: () => {
        this._pendingEmitters.delete(r), this._send(new Eo(this._workerId, r)), r = null;
      }
    });
    return s.event;
  }
  handleMessage(t) {
    !t || !t.vsWorker || this._workerId !== -1 && t.vsWorker !== this._workerId || this._handleMessage(t);
  }
  createProxyToRemoteChannel(t, n) {
    const i = {
      get: (r, s) => (typeof s == "string" && !r[s] && (J1(s) ? r[s] = (a) => this.listen(t, s, a) : Q1(s) ? r[s] = this.listen(t, s, void 0) : s.charCodeAt(0) === 36 && (r[s] = async (...a) => (await (n == null ? void 0 : n()), this.sendMessage(t, s, a)))), r[s])
    };
    return new Proxy(/* @__PURE__ */ Object.create(null), i);
  }
  _handleMessage(t) {
    switch (t.type) {
      case 1:
        return this._handleReplyMessage(t);
      case 0:
        return this._handleRequestMessage(t);
      case 2:
        return this._handleSubscribeEventMessage(t);
      case 3:
        return this._handleEventMessage(t);
      case 4:
        return this._handleUnsubscribeEventMessage(t);
    }
  }
  _handleReplyMessage(t) {
    if (!this._pendingReplies[t.seq]) {
      console.warn("Got reply to unknown seq");
      return;
    }
    const n = this._pendingReplies[t.seq];
    if (delete this._pendingReplies[t.seq], t.err) {
      let i = t.err;
      t.err.$isError && (i = new Error(), i.name = t.err.name, i.message = t.err.message, i.stack = t.err.stack), n.reject(i);
      return;
    }
    n.resolve(t.res);
  }
  _handleRequestMessage(t) {
    const n = t.req;
    this._handler.handleMessage(t.channel, t.method, t.args).then((r) => {
      this._send(new Fi(this._workerId, n, r, void 0));
    }, (r) => {
      r.detail instanceof Error && (r.detail = yi(r.detail)), this._send(new Fi(this._workerId, n, void 0, yi(r)));
    });
  }
  _handleSubscribeEventMessage(t) {
    const n = t.req, i = this._handler.handleEvent(t.channel, t.eventName, t.arg)((r) => {
      this._send(new So(this._workerId, n, r));
    });
    this._pendingEvents.set(n, i);
  }
  _handleEventMessage(t) {
    if (!this._pendingEmitters.has(t.req)) {
      console.warn("Got event for unknown req");
      return;
    }
    this._pendingEmitters.get(t.req).fire(t.event);
  }
  _handleUnsubscribeEventMessage(t) {
    if (!this._pendingEvents.has(t.req)) {
      console.warn("Got unsubscribe for unknown req");
      return;
    }
    this._pendingEvents.get(t.req).dispose(), this._pendingEvents.delete(t.req);
  }
  _send(t) {
    const n = [];
    if (t.type === 0)
      for (let i = 0; i < t.args.length; i++)
        t.args[i] instanceof ArrayBuffer && n.push(t.args[i]);
    else t.type === 1 && t.res instanceof ArrayBuffer && n.push(t.res);
    this._handler.sendMessage(t, n);
  }
}
function Q1(e) {
  return e[0] === "o" && e[1] === "n" && X1(e.charCodeAt(2));
}
function J1(e) {
  return /^onDynamic/.test(e) && X1(e.charCodeAt(9));
}
class ko {
  constructor(t, n) {
    this._localChannels = /* @__PURE__ */ new Map(), this._remoteChannels = /* @__PURE__ */ new Map(), this._requestHandlerFactory = n, this._requestHandler = null, this._protocol = new Mo({
      sendMessage: (i, r) => {
        t(i, r);
      },
      handleMessage: (i, r, s) => this._handleMessage(i, r, s),
      handleEvent: (i, r, s) => this._handleEvent(i, r, s)
    });
  }
  onmessage(t) {
    this._protocol.handleMessage(t);
  }
  _handleMessage(t, n, i) {
    if (t === Nn && n === yo)
      return this.initialize(i[0], i[1], i[2]);
    const r = t === Nn ? this._requestHandler : this._localChannels.get(t);
    if (!r)
      return Promise.reject(new Error(`Missing channel ${t} on worker thread`));
    if (typeof r[n] != "function")
      return Promise.reject(new Error(`Missing method ${n} on worker thread channel ${t}`));
    try {
      return Promise.resolve(r[n].apply(r, i));
    } catch (s) {
      return Promise.reject(s);
    }
  }
  _handleEvent(t, n, i) {
    const r = t === Nn ? this._requestHandler : this._localChannels.get(t);
    if (!r)
      throw new Error(`Missing channel ${t} on worker thread`);
    if (J1(n)) {
      const s = r[n].call(r, i);
      if (typeof s != "function")
        throw new Error(`Missing dynamic event ${n} on request handler.`);
      return s;
    }
    if (Q1(n)) {
      const s = r[n];
      if (typeof s != "function")
        throw new Error(`Missing event ${n} on request handler.`);
      return s;
    }
    throw new Error(`Malformed event name ${n}`);
  }
  setChannel(t, n) {
    this._localChannels.set(t, n);
  }
  getChannel(t) {
    if (!this._remoteChannels.has(t)) {
      const n = this._protocol.createProxyToRemoteChannel(t);
      this._remoteChannels.set(t, n);
    }
    return this._remoteChannels.get(t);
  }
  async initialize(t, n, i) {
    if (this._protocol.setWorkerId(t), this._requestHandlerFactory) {
      this._requestHandler = this._requestHandlerFactory(this);
      return;
    }
    return n && (typeof n.baseUrl < "u" && delete n.baseUrl, typeof n.paths < "u" && typeof n.paths.vs < "u" && delete n.paths.vs, typeof n.trustedTypesPolicy < "u" && delete n.trustedTypesPolicy, n.catchError = !0, globalThis.require.config(n)), Promise.reject(new Error("Unexpected usage"));
  }
}
class De {
  constructor(t, n, i, r) {
    this.originalStart = t, this.originalLength = n, this.modifiedStart = i, this.modifiedLength = r;
  }
  getOriginalEnd() {
    return this.originalStart + this.originalLength;
  }
  getModifiedEnd() {
    return this.modifiedStart + this.modifiedLength;
  }
}
function Di(e, t) {
  return (t << 5) - t + e | 0;
}
function Co(e, t) {
  t = Di(149417, t);
  for (let n = 0, i = e.length; n < i; n++)
    t = Di(e.charCodeAt(n), t);
  return t;
}
class Bi {
  constructor(t) {
    this.source = t;
  }
  getElements() {
    const t = this.source, n = new Int32Array(t.length);
    for (let i = 0, r = t.length; i < r; i++)
      n[i] = t.charCodeAt(i);
    return n;
  }
}
function Po(e, t, n) {
  return new Ue(new Bi(e), new Bi(t)).ComputeDiff(n).changes;
}
class Ye {
  static Assert(t, n) {
    if (!t)
      throw new Error(n);
  }
}
class Ze {
  static Copy(t, n, i, r, s) {
    for (let a = 0; a < s; a++)
      i[r + a] = t[n + a];
  }
  static Copy2(t, n, i, r, s) {
    for (let a = 0; a < s; a++)
      i[r + a] = t[n + a];
  }
}
class Ui {
  constructor() {
    this.m_changes = [], this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824, this.m_originalCount = 0, this.m_modifiedCount = 0;
  }
  MarkNextChange() {
    (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.m_changes.push(new De(
      this.m_originalStart,
      this.m_originalCount,
      this.m_modifiedStart,
      this.m_modifiedCount
    )), this.m_originalCount = 0, this.m_modifiedCount = 0, this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824;
  }
  AddOriginalElement(t, n) {
    this.m_originalStart = Math.min(this.m_originalStart, t), this.m_modifiedStart = Math.min(this.m_modifiedStart, n), this.m_originalCount++;
  }
  AddModifiedElement(t, n) {
    this.m_originalStart = Math.min(this.m_originalStart, t), this.m_modifiedStart = Math.min(this.m_modifiedStart, n), this.m_modifiedCount++;
  }
  getChanges() {
    return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes;
  }
  getReverseChanges() {
    return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes.reverse(), this.m_changes;
  }
}
class Ue {
  constructor(t, n, i = null) {
    this.ContinueProcessingPredicate = i, this._originalSequence = t, this._modifiedSequence = n;
    const [r, s, a] = Ue._getElements(t), [l, u, c] = Ue._getElements(n);
    this._hasStrings = a && c, this._originalStringElements = r, this._originalElementsOrHash = s, this._modifiedStringElements = l, this._modifiedElementsOrHash = u, this.m_forwardHistory = [], this.m_reverseHistory = [];
  }
  static _isStringArray(t) {
    return t.length > 0 && typeof t[0] == "string";
  }
  static _getElements(t) {
    const n = t.getElements();
    if (Ue._isStringArray(n)) {
      const i = new Int32Array(n.length);
      for (let r = 0, s = n.length; r < s; r++)
        i[r] = Co(n[r], 0);
      return [n, i, !0];
    }
    return n instanceof Int32Array ? [[], n, !1] : [[], new Int32Array(n), !1];
  }
  ElementsAreEqual(t, n) {
    return this._originalElementsOrHash[t] !== this._modifiedElementsOrHash[n] ? !1 : this._hasStrings ? this._originalStringElements[t] === this._modifiedStringElements[n] : !0;
  }
  ElementsAreStrictEqual(t, n) {
    if (!this.ElementsAreEqual(t, n))
      return !1;
    const i = Ue._getStrictElement(this._originalSequence, t), r = Ue._getStrictElement(this._modifiedSequence, n);
    return i === r;
  }
  static _getStrictElement(t, n) {
    return typeof t.getStrictElement == "function" ? t.getStrictElement(n) : null;
  }
  OriginalElementsAreEqual(t, n) {
    return this._originalElementsOrHash[t] !== this._originalElementsOrHash[n] ? !1 : this._hasStrings ? this._originalStringElements[t] === this._originalStringElements[n] : !0;
  }
  ModifiedElementsAreEqual(t, n) {
    return this._modifiedElementsOrHash[t] !== this._modifiedElementsOrHash[n] ? !1 : this._hasStrings ? this._modifiedStringElements[t] === this._modifiedStringElements[n] : !0;
  }
  ComputeDiff(t) {
    return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, t);
  }
  _ComputeDiff(t, n, i, r, s) {
    const a = [!1];
    let l = this.ComputeDiffRecursive(t, n, i, r, a);
    return s && (l = this.PrettifyChanges(l)), {
      quitEarly: a[0],
      changes: l
    };
  }
  ComputeDiffRecursive(t, n, i, r, s) {
    for (s[0] = !1; t <= n && i <= r && this.ElementsAreEqual(t, i); )
      t++, i++;
    for (; n >= t && r >= i && this.ElementsAreEqual(n, r); )
      n--, r--;
    if (t > n || i > r) {
      let f;
      return i <= r ? (Ye.Assert(t === n + 1, "originalStart should only be one more than originalEnd"), f = [
        new De(t, 0, i, r - i + 1)
      ]) : t <= n ? (Ye.Assert(i === r + 1, "modifiedStart should only be one more than modifiedEnd"), f = [
        new De(t, n - t + 1, i, 0)
      ]) : (Ye.Assert(t === n + 1, "originalStart should only be one more than originalEnd"), Ye.Assert(i === r + 1, "modifiedStart should only be one more than modifiedEnd"), f = []), f;
    }
    const a = [0], l = [0], u = this.ComputeRecursionPoint(t, n, i, r, a, l, s), c = a[0], h = l[0];
    if (u !== null)
      return u;
    if (!s[0]) {
      const f = this.ComputeDiffRecursive(t, c, i, h, s);
      let m = [];
      return s[0] ? m = [
        new De(
          c + 1,
          n - (c + 1) + 1,
          h + 1,
          r - (h + 1) + 1
        )
      ] : m = this.ComputeDiffRecursive(c + 1, n, h + 1, r, s), this.ConcatenateChanges(f, m);
    }
    return [
      new De(
        t,
        n - t + 1,
        i,
        r - i + 1
      )
    ];
  }
  WALKTRACE(t, n, i, r, s, a, l, u, c, h, f, m, d, g, b, _, L, A) {
    let M = null, N = null, y = new Ui(), C = n, P = i, I = d[0] - _[0] - r, O = -1073741824, Z = this.m_forwardHistory.length - 1;
    do {
      const S = I + t;
      S === C || S < P && c[S - 1] < c[S + 1] ? (f = c[S + 1], g = f - I - r, f < O && y.MarkNextChange(), O = f, y.AddModifiedElement(f + 1, g), I = S + 1 - t) : (f = c[S - 1] + 1, g = f - I - r, f < O && y.MarkNextChange(), O = f - 1, y.AddOriginalElement(f, g + 1), I = S - 1 - t), Z >= 0 && (c = this.m_forwardHistory[Z], t = c[0], C = 1, P = c.length - 1);
    } while (--Z >= -1);
    if (M = y.getReverseChanges(), A[0]) {
      let S = d[0] + 1, x = _[0] + 1;
      if (M !== null && M.length > 0) {
        const w = M[M.length - 1];
        S = Math.max(S, w.getOriginalEnd()), x = Math.max(x, w.getModifiedEnd());
      }
      N = [
        new De(
          S,
          m - S + 1,
          x,
          b - x + 1
        )
      ];
    } else {
      y = new Ui(), C = a, P = l, I = d[0] - _[0] - u, O = 1073741824, Z = L ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
      do {
        const S = I + s;
        S === C || S < P && h[S - 1] >= h[S + 1] ? (f = h[S + 1] - 1, g = f - I - u, f > O && y.MarkNextChange(), O = f + 1, y.AddOriginalElement(f + 1, g + 1), I = S + 1 - s) : (f = h[S - 1], g = f - I - u, f > O && y.MarkNextChange(), O = f, y.AddModifiedElement(f + 1, g + 1), I = S - 1 - s), Z >= 0 && (h = this.m_reverseHistory[Z], s = h[0], C = 1, P = h.length - 1);
      } while (--Z >= -1);
      N = y.getChanges();
    }
    return this.ConcatenateChanges(M, N);
  }
  ComputeRecursionPoint(t, n, i, r, s, a, l) {
    let u = 0, c = 0, h = 0, f = 0, m = 0, d = 0;
    t--, i--, s[0] = 0, a[0] = 0, this.m_forwardHistory = [], this.m_reverseHistory = [];
    const g = n - t + (r - i), b = g + 1, _ = new Int32Array(b), L = new Int32Array(b), A = r - i, M = n - t, N = t - i, y = n - r, P = (M - A) % 2 === 0;
    _[A] = t, L[M] = n, l[0] = !1;
    for (let I = 1; I <= g / 2 + 1; I++) {
      let O = 0, Z = 0;
      h = this.ClipDiagonalBound(A - I, I, A, b), f = this.ClipDiagonalBound(A + I, I, A, b);
      for (let x = h; x <= f; x += 2) {
        x === h || x < f && _[x - 1] < _[x + 1] ? u = _[x + 1] : u = _[x - 1] + 1, c = u - (x - A) - N;
        const w = u;
        for (; u < n && c < r && this.ElementsAreEqual(u + 1, c + 1); )
          u++, c++;
        if (_[x] = u, u + c > O + Z && (O = u, Z = c), !P && Math.abs(x - M) <= I - 1 && u >= L[x])
          return s[0] = u, a[0] = c, w <= L[x] && I <= 1448 ? this.WALKTRACE(A, h, f, N, M, m, d, y, _, L, u, n, s, c, r, a, P, l) : null;
      }
      const S = (O - t + (Z - i) - I) / 2;
      if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(O, S))
        return l[0] = !0, s[0] = O, a[0] = Z, S > 0 && I <= 1448 ? this.WALKTRACE(A, h, f, N, M, m, d, y, _, L, u, n, s, c, r, a, P, l) : (t++, i++, [
          new De(
            t,
            n - t + 1,
            i,
            r - i + 1
          )
        ]);
      m = this.ClipDiagonalBound(M - I, I, M, b), d = this.ClipDiagonalBound(M + I, I, M, b);
      for (let x = m; x <= d; x += 2) {
        x === m || x < d && L[x - 1] >= L[x + 1] ? u = L[x + 1] - 1 : u = L[x - 1], c = u - (x - M) - y;
        const w = u;
        for (; u > t && c > i && this.ElementsAreEqual(u, c); )
          u--, c--;
        if (L[x] = u, P && Math.abs(x - A) <= I && u <= _[x])
          return s[0] = u, a[0] = c, w >= _[x] && I <= 1448 ? this.WALKTRACE(A, h, f, N, M, m, d, y, _, L, u, n, s, c, r, a, P, l) : null;
      }
      if (I <= 1447) {
        let x = new Int32Array(f - h + 2);
        x[0] = A - h + 1, Ze.Copy2(_, h, x, 1, f - h + 1), this.m_forwardHistory.push(x), x = new Int32Array(d - m + 2), x[0] = M - m + 1, Ze.Copy2(L, m, x, 1, d - m + 1), this.m_reverseHistory.push(x);
      }
    }
    return this.WALKTRACE(A, h, f, N, M, m, d, y, _, L, u, n, s, c, r, a, P, l);
  }
  PrettifyChanges(t) {
    for (let n = 0; n < t.length; n++) {
      const i = t[n], r = n < t.length - 1 ? t[n + 1].originalStart : this._originalElementsOrHash.length, s = n < t.length - 1 ? t[n + 1].modifiedStart : this._modifiedElementsOrHash.length, a = i.originalLength > 0, l = i.modifiedLength > 0;
      for (; i.originalStart + i.originalLength < r && i.modifiedStart + i.modifiedLength < s && (!a || this.OriginalElementsAreEqual(i.originalStart, i.originalStart + i.originalLength)) && (!l || this.ModifiedElementsAreEqual(i.modifiedStart, i.modifiedStart + i.modifiedLength)); ) {
        const c = this.ElementsAreStrictEqual(i.originalStart, i.modifiedStart);
        if (this.ElementsAreStrictEqual(i.originalStart + i.originalLength, i.modifiedStart + i.modifiedLength) && !c)
          break;
        i.originalStart++, i.modifiedStart++;
      }
      const u = [null];
      if (n < t.length - 1 && this.ChangesOverlap(t[n], t[n + 1], u)) {
        t[n] = u[0], t.splice(n + 1, 1), n--;
        continue;
      }
    }
    for (let n = t.length - 1; n >= 0; n--) {
      const i = t[n];
      let r = 0, s = 0;
      if (n > 0) {
        const f = t[n - 1];
        r = f.originalStart + f.originalLength, s = f.modifiedStart + f.modifiedLength;
      }
      const a = i.originalLength > 0, l = i.modifiedLength > 0;
      let u = 0, c = this._boundaryScore(i.originalStart, i.originalLength, i.modifiedStart, i.modifiedLength);
      for (let f = 1; ; f++) {
        const m = i.originalStart - f, d = i.modifiedStart - f;
        if (m < r || d < s || a && !this.OriginalElementsAreEqual(m, m + i.originalLength) || l && !this.ModifiedElementsAreEqual(d, d + i.modifiedLength))
          break;
        const b = (m === r && d === s ? 5 : 0) + this._boundaryScore(m, i.originalLength, d, i.modifiedLength);
        b > c && (c = b, u = f);
      }
      i.originalStart -= u, i.modifiedStart -= u;
      const h = [null];
      if (n > 0 && this.ChangesOverlap(t[n - 1], t[n], h)) {
        t[n - 1] = h[0], t.splice(n, 1), n++;
        continue;
      }
    }
    if (this._hasStrings)
      for (let n = 1, i = t.length; n < i; n++) {
        const r = t[n - 1], s = t[n], a = s.originalStart - r.originalStart - r.originalLength, l = r.originalStart, u = s.originalStart + s.originalLength, c = u - l, h = r.modifiedStart, f = s.modifiedStart + s.modifiedLength, m = f - h;
        if (a < 5 && c < 20 && m < 20) {
          const d = this._findBetterContiguousSequence(l, c, h, m, a);
          if (d) {
            const [g, b] = d;
            (g !== r.originalStart + r.originalLength || b !== r.modifiedStart + r.modifiedLength) && (r.originalLength = g - r.originalStart, r.modifiedLength = b - r.modifiedStart, s.originalStart = g + a, s.modifiedStart = b + a, s.originalLength = u - s.originalStart, s.modifiedLength = f - s.modifiedStart);
          }
        }
      }
    return t;
  }
  _findBetterContiguousSequence(t, n, i, r, s) {
    if (n < s || r < s)
      return null;
    const a = t + n - s + 1, l = i + r - s + 1;
    let u = 0, c = 0, h = 0;
    for (let f = t; f < a; f++)
      for (let m = i; m < l; m++) {
        const d = this._contiguousSequenceScore(f, m, s);
        d > 0 && d > u && (u = d, c = f, h = m);
      }
    return u > 0 ? [c, h] : null;
  }
  _contiguousSequenceScore(t, n, i) {
    let r = 0;
    for (let s = 0; s < i; s++) {
      if (!this.ElementsAreEqual(t + s, n + s))
        return 0;
      r += this._originalStringElements[t + s].length;
    }
    return r;
  }
  _OriginalIsBoundary(t) {
    return t <= 0 || t >= this._originalElementsOrHash.length - 1 ? !0 : this._hasStrings && /^\s*$/.test(this._originalStringElements[t]);
  }
  _OriginalRegionIsBoundary(t, n) {
    if (this._OriginalIsBoundary(t) || this._OriginalIsBoundary(t - 1))
      return !0;
    if (n > 0) {
      const i = t + n;
      if (this._OriginalIsBoundary(i - 1) || this._OriginalIsBoundary(i))
        return !0;
    }
    return !1;
  }
  _ModifiedIsBoundary(t) {
    return t <= 0 || t >= this._modifiedElementsOrHash.length - 1 ? !0 : this._hasStrings && /^\s*$/.test(this._modifiedStringElements[t]);
  }
  _ModifiedRegionIsBoundary(t, n) {
    if (this._ModifiedIsBoundary(t) || this._ModifiedIsBoundary(t - 1))
      return !0;
    if (n > 0) {
      const i = t + n;
      if (this._ModifiedIsBoundary(i - 1) || this._ModifiedIsBoundary(i))
        return !0;
    }
    return !1;
  }
  _boundaryScore(t, n, i, r) {
    const s = this._OriginalRegionIsBoundary(t, n) ? 1 : 0, a = this._ModifiedRegionIsBoundary(i, r) ? 1 : 0;
    return s + a;
  }
  ConcatenateChanges(t, n) {
    const i = [];
    if (t.length === 0 || n.length === 0)
      return n.length > 0 ? n : t;
    if (this.ChangesOverlap(t[t.length - 1], n[0], i)) {
      const r = new Array(t.length + n.length - 1);
      return Ze.Copy(t, 0, r, 0, t.length - 1), r[t.length - 1] = i[0], Ze.Copy(n, 1, r, t.length, n.length - 1), r;
    } else {
      const r = new Array(t.length + n.length);
      return Ze.Copy(t, 0, r, 0, t.length), Ze.Copy(n, 0, r, t.length, n.length), r;
    }
  }
  ChangesOverlap(t, n, i) {
    if (Ye.Assert(t.originalStart <= n.originalStart, "Left change is not less than or equal to right change"), Ye.Assert(t.modifiedStart <= n.modifiedStart, "Left change is not less than or equal to right change"), t.originalStart + t.originalLength >= n.originalStart || t.modifiedStart + t.modifiedLength >= n.modifiedStart) {
      const r = t.originalStart;
      let s = t.originalLength;
      const a = t.modifiedStart;
      let l = t.modifiedLength;
      return t.originalStart + t.originalLength >= n.originalStart && (s = n.originalStart + n.originalLength - t.originalStart), t.modifiedStart + t.modifiedLength >= n.modifiedStart && (l = n.modifiedStart + n.modifiedLength - t.modifiedStart), i[0] = new De(r, s, a, l), !0;
    } else
      return i[0] = null, !1;
  }
  ClipDiagonalBound(t, n, i, r) {
    if (t >= 0 && t < r)
      return t;
    const s = i, a = r - i - 1, l = n % 2 === 0;
    if (t < 0) {
      const u = s % 2 === 0;
      return l === u ? 0 : 1;
    } else {
      const u = a % 2 === 0;
      return l === u ? r - 1 : r - 2;
    }
  }
}
let j = class Oe {
  constructor(t, n) {
    this.lineNumber = t, this.column = n;
  }
  with(t = this.lineNumber, n = this.column) {
    return t === this.lineNumber && n === this.column ? this : new Oe(t, n);
  }
  delta(t = 0, n = 0) {
    return this.with(this.lineNumber + t, this.column + n);
  }
  equals(t) {
    return Oe.equals(this, t);
  }
  static equals(t, n) {
    return !t && !n ? !0 : !!t && !!n && t.lineNumber === n.lineNumber && t.column === n.column;
  }
  isBefore(t) {
    return Oe.isBefore(this, t);
  }
  static isBefore(t, n) {
    return t.lineNumber < n.lineNumber ? !0 : n.lineNumber < t.lineNumber ? !1 : t.column < n.column;
  }
  isBeforeOrEqual(t) {
    return Oe.isBeforeOrEqual(this, t);
  }
  static isBeforeOrEqual(t, n) {
    return t.lineNumber < n.lineNumber ? !0 : n.lineNumber < t.lineNumber ? !1 : t.column <= n.column;
  }
  static compare(t, n) {
    const i = t.lineNumber | 0, r = n.lineNumber | 0;
    if (i === r) {
      const s = t.column | 0, a = n.column | 0;
      return s - a;
    }
    return i - r;
  }
  clone() {
    return new Oe(this.lineNumber, this.column);
  }
  toString() {
    return "(" + this.lineNumber + "," + this.column + ")";
  }
  static lift(t) {
    return new Oe(t.lineNumber, t.column);
  }
  static isIPosition(t) {
    return t && typeof t.lineNumber == "number" && typeof t.column == "number";
  }
  toJSON() {
    return {
      lineNumber: this.lineNumber,
      column: this.column
    };
  }
}, U = class ne {
  constructor(t, n, i, r) {
    t > i || t === i && n > r ? (this.startLineNumber = i, this.startColumn = r, this.endLineNumber = t, this.endColumn = n) : (this.startLineNumber = t, this.startColumn = n, this.endLineNumber = i, this.endColumn = r);
  }
  isEmpty() {
    return ne.isEmpty(this);
  }
  static isEmpty(t) {
    return t.startLineNumber === t.endLineNumber && t.startColumn === t.endColumn;
  }
  containsPosition(t) {
    return ne.containsPosition(this, t);
  }
  static containsPosition(t, n) {
    return !(n.lineNumber < t.startLineNumber || n.lineNumber > t.endLineNumber || n.lineNumber === t.startLineNumber && n.column < t.startColumn || n.lineNumber === t.endLineNumber && n.column > t.endColumn);
  }
  static strictContainsPosition(t, n) {
    return !(n.lineNumber < t.startLineNumber || n.lineNumber > t.endLineNumber || n.lineNumber === t.startLineNumber && n.column <= t.startColumn || n.lineNumber === t.endLineNumber && n.column >= t.endColumn);
  }
  containsRange(t) {
    return ne.containsRange(this, t);
  }
  static containsRange(t, n) {
    return !(n.startLineNumber < t.startLineNumber || n.endLineNumber < t.startLineNumber || n.startLineNumber > t.endLineNumber || n.endLineNumber > t.endLineNumber || n.startLineNumber === t.startLineNumber && n.startColumn < t.startColumn || n.endLineNumber === t.endLineNumber && n.endColumn > t.endColumn);
  }
  strictContainsRange(t) {
    return ne.strictContainsRange(this, t);
  }
  static strictContainsRange(t, n) {
    return !(n.startLineNumber < t.startLineNumber || n.endLineNumber < t.startLineNumber || n.startLineNumber > t.endLineNumber || n.endLineNumber > t.endLineNumber || n.startLineNumber === t.startLineNumber && n.startColumn <= t.startColumn || n.endLineNumber === t.endLineNumber && n.endColumn >= t.endColumn);
  }
  plusRange(t) {
    return ne.plusRange(this, t);
  }
  static plusRange(t, n) {
    let i, r, s, a;
    return n.startLineNumber < t.startLineNumber ? (i = n.startLineNumber, r = n.startColumn) : n.startLineNumber === t.startLineNumber ? (i = n.startLineNumber, r = Math.min(n.startColumn, t.startColumn)) : (i = t.startLineNumber, r = t.startColumn), n.endLineNumber > t.endLineNumber ? (s = n.endLineNumber, a = n.endColumn) : n.endLineNumber === t.endLineNumber ? (s = n.endLineNumber, a = Math.max(n.endColumn, t.endColumn)) : (s = t.endLineNumber, a = t.endColumn), new ne(i, r, s, a);
  }
  intersectRanges(t) {
    return ne.intersectRanges(this, t);
  }
  static intersectRanges(t, n) {
    let i = t.startLineNumber, r = t.startColumn, s = t.endLineNumber, a = t.endColumn;
    const l = n.startLineNumber, u = n.startColumn, c = n.endLineNumber, h = n.endColumn;
    return i < l ? (i = l, r = u) : i === l && (r = Math.max(r, u)), s > c ? (s = c, a = h) : s === c && (a = Math.min(a, h)), i > s || i === s && r > a ? null : new ne(
      i,
      r,
      s,
      a
    );
  }
  equalsRange(t) {
    return ne.equalsRange(this, t);
  }
  static equalsRange(t, n) {
    return !t && !n ? !0 : !!t && !!n && t.startLineNumber === n.startLineNumber && t.startColumn === n.startColumn && t.endLineNumber === n.endLineNumber && t.endColumn === n.endColumn;
  }
  getEndPosition() {
    return ne.getEndPosition(this);
  }
  static getEndPosition(t) {
    return new j(t.endLineNumber, t.endColumn);
  }
  getStartPosition() {
    return ne.getStartPosition(this);
  }
  static getStartPosition(t) {
    return new j(t.startLineNumber, t.startColumn);
  }
  toString() {
    return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]";
  }
  setEndPosition(t, n) {
    return new ne(this.startLineNumber, this.startColumn, t, n);
  }
  setStartPosition(t, n) {
    return new ne(t, n, this.endLineNumber, this.endColumn);
  }
  collapseToStart() {
    return ne.collapseToStart(this);
  }
  static collapseToStart(t) {
    return new ne(
      t.startLineNumber,
      t.startColumn,
      t.startLineNumber,
      t.startColumn
    );
  }
  collapseToEnd() {
    return ne.collapseToEnd(this);
  }
  static collapseToEnd(t) {
    return new ne(t.endLineNumber, t.endColumn, t.endLineNumber, t.endColumn);
  }
  delta(t) {
    return new ne(
      this.startLineNumber + t,
      this.startColumn,
      this.endLineNumber + t,
      this.endColumn
    );
  }
  static fromPositions(t, n = t) {
    return new ne(t.lineNumber, t.column, n.lineNumber, n.column);
  }
  static lift(t) {
    return t ? new ne(
      t.startLineNumber,
      t.startColumn,
      t.endLineNumber,
      t.endColumn
    ) : null;
  }
  static isIRange(t) {
    return t && typeof t.startLineNumber == "number" && typeof t.startColumn == "number" && typeof t.endLineNumber == "number" && typeof t.endColumn == "number";
  }
  static areIntersectingOrTouching(t, n) {
    return !(t.endLineNumber < n.startLineNumber || t.endLineNumber === n.startLineNumber && t.endColumn < n.startColumn || n.endLineNumber < t.startLineNumber || n.endLineNumber === t.startLineNumber && n.endColumn < t.startColumn);
  }
  static areIntersecting(t, n) {
    return !(t.endLineNumber < n.startLineNumber || t.endLineNumber === n.startLineNumber && t.endColumn <= n.startColumn || n.endLineNumber < t.startLineNumber || n.endLineNumber === t.startLineNumber && n.endColumn <= t.startColumn);
  }
  static compareRangesUsingStarts(t, n) {
    if (t && n) {
      const s = t.startLineNumber | 0, a = n.startLineNumber | 0;
      if (s === a) {
        const l = t.startColumn | 0, u = n.startColumn | 0;
        if (l === u) {
          const c = t.endLineNumber | 0, h = n.endLineNumber | 0;
          if (c === h) {
            const f = t.endColumn | 0, m = n.endColumn | 0;
            return f - m;
          }
          return c - h;
        }
        return l - u;
      }
      return s - a;
    }
    return (t ? 1 : 0) - (n ? 1 : 0);
  }
  static compareRangesUsingEnds(t, n) {
    return t.endLineNumber === n.endLineNumber ? t.endColumn === n.endColumn ? t.startLineNumber === n.startLineNumber ? t.startColumn - n.startColumn : t.startLineNumber - n.startLineNumber : t.endColumn - n.endColumn : t.endLineNumber - n.endLineNumber;
  }
  static spansMultipleLines(t) {
    return t.endLineNumber > t.startLineNumber;
  }
  toJSON() {
    return this;
  }
};
function Vi(e) {
  return e < 0 ? 0 : e > 255 ? 255 : e | 0;
}
function Ke(e) {
  return e < 0 ? 0 : e > 4294967295 ? 4294967295 : e | 0;
}
class pi {
  constructor(t) {
    const n = Vi(t);
    this._defaultValue = n, this._asciiMap = pi._createAsciiMap(n), this._map = /* @__PURE__ */ new Map();
  }
  static _createAsciiMap(t) {
    const n = new Uint8Array(256);
    return n.fill(t), n;
  }
  set(t, n) {
    const i = Vi(n);
    t >= 0 && t < 256 ? this._asciiMap[t] = i : this._map.set(t, i);
  }
  get(t) {
    return t >= 0 && t < 256 ? this._asciiMap[t] : this._map.get(t) || this._defaultValue;
  }
  clear() {
    this._asciiMap.fill(this._defaultValue), this._map.clear();
  }
}
class Io {
  constructor(t, n, i) {
    const r = new Uint8Array(t * n);
    for (let s = 0, a = t * n; s < a; s++)
      r[s] = i;
    this._data = r, this.rows = t, this.cols = n;
  }
  get(t, n) {
    return this._data[t * this.cols + n];
  }
  set(t, n, i) {
    this._data[t * this.cols + n] = i;
  }
}
class To {
  constructor(t) {
    let n = 0, i = 0;
    for (let s = 0, a = t.length; s < a; s++) {
      const [l, u, c] = t[s];
      u > n && (n = u), l > i && (i = l), c > i && (i = c);
    }
    n++, i++;
    const r = new Io(i, n, 0);
    for (let s = 0, a = t.length; s < a; s++) {
      const [l, u, c] = t[s];
      r.set(l, u, c);
    }
    this._states = r, this._maxCharCode = n;
  }
  nextState(t, n) {
    return n < 0 || n >= this._maxCharCode ? 0 : this._states.get(t, n);
  }
}
let yn = null;
function Fo() {
  return yn === null && (yn = new To([
    [1, 104, 2],
    [1, 72, 2],
    [1, 102, 6],
    [1, 70, 6],
    [2, 116, 3],
    [2, 84, 3],
    [3, 116, 4],
    [3, 84, 4],
    [4, 112, 5],
    [4, 80, 5],
    [5, 115, 9],
    [5, 83, 9],
    [5, 58, 10],
    [6, 105, 7],
    [6, 73, 7],
    [7, 108, 8],
    [7, 76, 8],
    [8, 101, 9],
    [8, 69, 9],
    [9, 58, 10],
    [10, 47, 11],
    [11, 47, 12]
  ])), yn;
}
let xt = null;
function Do() {
  if (xt === null) {
    xt = new pi(0);
    const e = ` 	<>'"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…`;
    for (let n = 0; n < e.length; n++)
      xt.set(e.charCodeAt(n), 1);
    const t = ".,;:";
    for (let n = 0; n < t.length; n++)
      xt.set(t.charCodeAt(n), 2);
  }
  return xt;
}
class en {
  static _createLink(t, n, i, r, s) {
    let a = s - 1;
    do {
      const l = n.charCodeAt(a);
      if (t.get(l) !== 2)
        break;
      a--;
    } while (a > r);
    if (r > 0) {
      const l = n.charCodeAt(r - 1), u = n.charCodeAt(a);
      (l === 40 && u === 41 || l === 91 && u === 93 || l === 123 && u === 125) && a--;
    }
    return {
      range: {
        startLineNumber: i,
        startColumn: r + 1,
        endLineNumber: i,
        endColumn: a + 2
      },
      url: n.substring(r, a + 1)
    };
  }
  static computeLinks(t, n = Fo()) {
    const i = Do(), r = [];
    for (let s = 1, a = t.getLineCount(); s <= a; s++) {
      const l = t.getLineContent(s), u = l.length;
      let c = 0, h = 0, f = 0, m = 1, d = !1, g = !1, b = !1, _ = !1;
      for (; c < u; ) {
        let L = !1;
        const A = l.charCodeAt(c);
        if (m === 13) {
          let M;
          switch (A) {
            case 40:
              d = !0, M = 0;
              break;
            case 41:
              M = d ? 0 : 1;
              break;
            case 91:
              b = !0, g = !0, M = 0;
              break;
            case 93:
              b = !1, M = g ? 0 : 1;
              break;
            case 123:
              _ = !0, M = 0;
              break;
            case 125:
              M = _ ? 0 : 1;
              break;
            case 39:
            case 34:
            case 96:
              f === A ? M = 1 : f === 39 || f === 34 || f === 96 ? M = 0 : M = 1;
              break;
            case 42:
              M = f === 42 ? 1 : 0;
              break;
            case 124:
              M = f === 124 ? 1 : 0;
              break;
            case 32:
              M = b ? 0 : 1;
              break;
            default:
              M = i.get(A);
          }
          M === 1 && (r.push(en._createLink(i, l, s, h, c)), L = !0);
        } else if (m === 12) {
          let M;
          A === 91 ? (g = !0, M = 0) : M = i.get(A), M === 1 ? L = !0 : m = 13;
        } else
          m = n.nextState(m, A), m === 0 && (L = !0);
        L && (m = 1, d = !1, g = !1, _ = !1, h = c + 1, f = A), c++;
      }
      m === 13 && r.push(en._createLink(i, l, s, h, u));
    }
    return r;
  }
}
function Bo(e) {
  return !e || typeof e.getLineCount != "function" || typeof e.getLineContent != "function" ? [] : en.computeLinks(e);
}
const pn = class pn {
  constructor() {
    this._defaultValueSet = [
      ["true", "false"],
      ["True", "False"],
      ["Private", "Public", "Friend", "ReadOnly", "Partial", "Protected", "WriteOnly"],
      ["public", "protected", "private"]
    ];
  }
  navigateValueSet(t, n, i, r, s) {
    if (t && n) {
      const a = this.doNavigateValueSet(n, s);
      if (a)
        return {
          range: t,
          value: a
        };
    }
    if (i && r) {
      const a = this.doNavigateValueSet(r, s);
      if (a)
        return {
          range: i,
          value: a
        };
    }
    return null;
  }
  doNavigateValueSet(t, n) {
    const i = this.numberReplace(t, n);
    return i !== null ? i : this.textReplace(t, n);
  }
  numberReplace(t, n) {
    const i = Math.pow(10, t.length - (t.lastIndexOf(".") + 1));
    let r = Number(t);
    const s = parseFloat(t);
    return !isNaN(r) && !isNaN(s) && r === s ? r === 0 && !n ? null : (r = Math.floor(r * i), r += n ? i : -i, String(r / i)) : null;
  }
  textReplace(t, n) {
    return this.valueSetsReplace(this._defaultValueSet, t, n);
  }
  valueSetsReplace(t, n, i) {
    let r = null;
    for (let s = 0, a = t.length; r === null && s < a; s++)
      r = this.valueSetReplace(t[s], n, i);
    return r;
  }
  valueSetReplace(t, n, i) {
    let r = t.indexOf(n);
    return r >= 0 ? (r += i ? 1 : -1, r < 0 ? r = t.length - 1 : r %= t.length, t[r]) : null;
  }
};
pn.INSTANCE = new pn();
let Un = pn;
class vi {
  constructor() {
    this._keyCodeToStr = [], this._strToKeyCode = /* @__PURE__ */ Object.create(null);
  }
  define(t, n) {
    this._keyCodeToStr[t] = n, this._strToKeyCode[n.toLowerCase()] = t;
  }
  keyCodeToStr(t) {
    return this._keyCodeToStr[t];
  }
  strToKeyCode(t) {
    return this._strToKeyCode[t.toLowerCase()] || 0;
  }
}
const jt = new vi(), Vn = new vi(), qn = new vi(), Uo = new Array(230), Vo = /* @__PURE__ */ Object.create(null), qo = /* @__PURE__ */ Object.create(null);
(function() {
  const e = "", t = [
    [1, 0, "None", 0, "unknown", 0, "VK_UNKNOWN", e, e],
    [1, 1, "Hyper", 0, e, 0, e, e, e],
    [1, 2, "Super", 0, e, 0, e, e, e],
    [1, 3, "Fn", 0, e, 0, e, e, e],
    [1, 4, "FnLock", 0, e, 0, e, e, e],
    [1, 5, "Suspend", 0, e, 0, e, e, e],
    [1, 6, "Resume", 0, e, 0, e, e, e],
    [1, 7, "Turbo", 0, e, 0, e, e, e],
    [1, 8, "Sleep", 0, e, 0, "VK_SLEEP", e, e],
    [1, 9, "WakeUp", 0, e, 0, e, e, e],
    [0, 10, "KeyA", 31, "A", 65, "VK_A", e, e],
    [0, 11, "KeyB", 32, "B", 66, "VK_B", e, e],
    [0, 12, "KeyC", 33, "C", 67, "VK_C", e, e],
    [0, 13, "KeyD", 34, "D", 68, "VK_D", e, e],
    [0, 14, "KeyE", 35, "E", 69, "VK_E", e, e],
    [0, 15, "KeyF", 36, "F", 70, "VK_F", e, e],
    [0, 16, "KeyG", 37, "G", 71, "VK_G", e, e],
    [0, 17, "KeyH", 38, "H", 72, "VK_H", e, e],
    [0, 18, "KeyI", 39, "I", 73, "VK_I", e, e],
    [0, 19, "KeyJ", 40, "J", 74, "VK_J", e, e],
    [0, 20, "KeyK", 41, "K", 75, "VK_K", e, e],
    [0, 21, "KeyL", 42, "L", 76, "VK_L", e, e],
    [0, 22, "KeyM", 43, "M", 77, "VK_M", e, e],
    [0, 23, "KeyN", 44, "N", 78, "VK_N", e, e],
    [0, 24, "KeyO", 45, "O", 79, "VK_O", e, e],
    [0, 25, "KeyP", 46, "P", 80, "VK_P", e, e],
    [0, 26, "KeyQ", 47, "Q", 81, "VK_Q", e, e],
    [0, 27, "KeyR", 48, "R", 82, "VK_R", e, e],
    [0, 28, "KeyS", 49, "S", 83, "VK_S", e, e],
    [0, 29, "KeyT", 50, "T", 84, "VK_T", e, e],
    [0, 30, "KeyU", 51, "U", 85, "VK_U", e, e],
    [0, 31, "KeyV", 52, "V", 86, "VK_V", e, e],
    [0, 32, "KeyW", 53, "W", 87, "VK_W", e, e],
    [0, 33, "KeyX", 54, "X", 88, "VK_X", e, e],
    [0, 34, "KeyY", 55, "Y", 89, "VK_Y", e, e],
    [0, 35, "KeyZ", 56, "Z", 90, "VK_Z", e, e],
    [0, 36, "Digit1", 22, "1", 49, "VK_1", e, e],
    [0, 37, "Digit2", 23, "2", 50, "VK_2", e, e],
    [0, 38, "Digit3", 24, "3", 51, "VK_3", e, e],
    [0, 39, "Digit4", 25, "4", 52, "VK_4", e, e],
    [0, 40, "Digit5", 26, "5", 53, "VK_5", e, e],
    [0, 41, "Digit6", 27, "6", 54, "VK_6", e, e],
    [0, 42, "Digit7", 28, "7", 55, "VK_7", e, e],
    [0, 43, "Digit8", 29, "8", 56, "VK_8", e, e],
    [0, 44, "Digit9", 30, "9", 57, "VK_9", e, e],
    [0, 45, "Digit0", 21, "0", 48, "VK_0", e, e],
    [1, 46, "Enter", 3, "Enter", 13, "VK_RETURN", e, e],
    [1, 47, "Escape", 9, "Escape", 27, "VK_ESCAPE", e, e],
    [1, 48, "Backspace", 1, "Backspace", 8, "VK_BACK", e, e],
    [1, 49, "Tab", 2, "Tab", 9, "VK_TAB", e, e],
    [1, 50, "Space", 10, "Space", 32, "VK_SPACE", e, e],
    [0, 51, "Minus", 88, "-", 189, "VK_OEM_MINUS", "-", "OEM_MINUS"],
    [0, 52, "Equal", 86, "=", 187, "VK_OEM_PLUS", "=", "OEM_PLUS"],
    [0, 53, "BracketLeft", 92, "[", 219, "VK_OEM_4", "[", "OEM_4"],
    [0, 54, "BracketRight", 94, "]", 221, "VK_OEM_6", "]", "OEM_6"],
    [0, 55, "Backslash", 93, "\\", 220, "VK_OEM_5", "\\", "OEM_5"],
    [0, 56, "IntlHash", 0, e, 0, e, e, e],
    [0, 57, "Semicolon", 85, ";", 186, "VK_OEM_1", ";", "OEM_1"],
    [0, 58, "Quote", 95, "'", 222, "VK_OEM_7", "'", "OEM_7"],
    [0, 59, "Backquote", 91, "`", 192, "VK_OEM_3", "`", "OEM_3"],
    [0, 60, "Comma", 87, ",", 188, "VK_OEM_COMMA", ",", "OEM_COMMA"],
    [0, 61, "Period", 89, ".", 190, "VK_OEM_PERIOD", ".", "OEM_PERIOD"],
    [0, 62, "Slash", 90, "/", 191, "VK_OEM_2", "/", "OEM_2"],
    [1, 63, "CapsLock", 8, "CapsLock", 20, "VK_CAPITAL", e, e],
    [1, 64, "F1", 59, "F1", 112, "VK_F1", e, e],
    [1, 65, "F2", 60, "F2", 113, "VK_F2", e, e],
    [1, 66, "F3", 61, "F3", 114, "VK_F3", e, e],
    [1, 67, "F4", 62, "F4", 115, "VK_F4", e, e],
    [1, 68, "F5", 63, "F5", 116, "VK_F5", e, e],
    [1, 69, "F6", 64, "F6", 117, "VK_F6", e, e],
    [1, 70, "F7", 65, "F7", 118, "VK_F7", e, e],
    [1, 71, "F8", 66, "F8", 119, "VK_F8", e, e],
    [1, 72, "F9", 67, "F9", 120, "VK_F9", e, e],
    [1, 73, "F10", 68, "F10", 121, "VK_F10", e, e],
    [1, 74, "F11", 69, "F11", 122, "VK_F11", e, e],
    [1, 75, "F12", 70, "F12", 123, "VK_F12", e, e],
    [1, 76, "PrintScreen", 0, e, 0, e, e, e],
    [1, 77, "ScrollLock", 84, "ScrollLock", 145, "VK_SCROLL", e, e],
    [1, 78, "Pause", 7, "PauseBreak", 19, "VK_PAUSE", e, e],
    [1, 79, "Insert", 19, "Insert", 45, "VK_INSERT", e, e],
    [1, 80, "Home", 14, "Home", 36, "VK_HOME", e, e],
    [1, 81, "PageUp", 11, "PageUp", 33, "VK_PRIOR", e, e],
    [1, 82, "Delete", 20, "Delete", 46, "VK_DELETE", e, e],
    [1, 83, "End", 13, "End", 35, "VK_END", e, e],
    [1, 84, "PageDown", 12, "PageDown", 34, "VK_NEXT", e, e],
    [1, 85, "ArrowRight", 17, "RightArrow", 39, "VK_RIGHT", "Right", e],
    [1, 86, "ArrowLeft", 15, "LeftArrow", 37, "VK_LEFT", "Left", e],
    [1, 87, "ArrowDown", 18, "DownArrow", 40, "VK_DOWN", "Down", e],
    [1, 88, "ArrowUp", 16, "UpArrow", 38, "VK_UP", "Up", e],
    [1, 89, "NumLock", 83, "NumLock", 144, "VK_NUMLOCK", e, e],
    [1, 90, "NumpadDivide", 113, "NumPad_Divide", 111, "VK_DIVIDE", e, e],
    [1, 91, "NumpadMultiply", 108, "NumPad_Multiply", 106, "VK_MULTIPLY", e, e],
    [1, 92, "NumpadSubtract", 111, "NumPad_Subtract", 109, "VK_SUBTRACT", e, e],
    [1, 93, "NumpadAdd", 109, "NumPad_Add", 107, "VK_ADD", e, e],
    [1, 94, "NumpadEnter", 3, e, 0, e, e, e],
    [1, 95, "Numpad1", 99, "NumPad1", 97, "VK_NUMPAD1", e, e],
    [1, 96, "Numpad2", 100, "NumPad2", 98, "VK_NUMPAD2", e, e],
    [1, 97, "Numpad3", 101, "NumPad3", 99, "VK_NUMPAD3", e, e],
    [1, 98, "Numpad4", 102, "NumPad4", 100, "VK_NUMPAD4", e, e],
    [1, 99, "Numpad5", 103, "NumPad5", 101, "VK_NUMPAD5", e, e],
    [1, 100, "Numpad6", 104, "NumPad6", 102, "VK_NUMPAD6", e, e],
    [1, 101, "Numpad7", 105, "NumPad7", 103, "VK_NUMPAD7", e, e],
    [1, 102, "Numpad8", 106, "NumPad8", 104, "VK_NUMPAD8", e, e],
    [1, 103, "Numpad9", 107, "NumPad9", 105, "VK_NUMPAD9", e, e],
    [1, 104, "Numpad0", 98, "NumPad0", 96, "VK_NUMPAD0", e, e],
    [1, 105, "NumpadDecimal", 112, "NumPad_Decimal", 110, "VK_DECIMAL", e, e],
    [0, 106, "IntlBackslash", 97, "OEM_102", 226, "VK_OEM_102", e, e],
    [1, 107, "ContextMenu", 58, "ContextMenu", 93, e, e, e],
    [1, 108, "Power", 0, e, 0, e, e, e],
    [1, 109, "NumpadEqual", 0, e, 0, e, e, e],
    [1, 110, "F13", 71, "F13", 124, "VK_F13", e, e],
    [1, 111, "F14", 72, "F14", 125, "VK_F14", e, e],
    [1, 112, "F15", 73, "F15", 126, "VK_F15", e, e],
    [1, 113, "F16", 74, "F16", 127, "VK_F16", e, e],
    [1, 114, "F17", 75, "F17", 128, "VK_F17", e, e],
    [1, 115, "F18", 76, "F18", 129, "VK_F18", e, e],
    [1, 116, "F19", 77, "F19", 130, "VK_F19", e, e],
    [1, 117, "F20", 78, "F20", 131, "VK_F20", e, e],
    [1, 118, "F21", 79, "F21", 132, "VK_F21", e, e],
    [1, 119, "F22", 80, "F22", 133, "VK_F22", e, e],
    [1, 120, "F23", 81, "F23", 134, "VK_F23", e, e],
    [1, 121, "F24", 82, "F24", 135, "VK_F24", e, e],
    [1, 122, "Open", 0, e, 0, e, e, e],
    [1, 123, "Help", 0, e, 0, e, e, e],
    [1, 124, "Select", 0, e, 0, e, e, e],
    [1, 125, "Again", 0, e, 0, e, e, e],
    [1, 126, "Undo", 0, e, 0, e, e, e],
    [1, 127, "Cut", 0, e, 0, e, e, e],
    [1, 128, "Copy", 0, e, 0, e, e, e],
    [1, 129, "Paste", 0, e, 0, e, e, e],
    [1, 130, "Find", 0, e, 0, e, e, e],
    [1, 131, "AudioVolumeMute", 117, "AudioVolumeMute", 173, "VK_VOLUME_MUTE", e, e],
    [1, 132, "AudioVolumeUp", 118, "AudioVolumeUp", 175, "VK_VOLUME_UP", e, e],
    [1, 133, "AudioVolumeDown", 119, "AudioVolumeDown", 174, "VK_VOLUME_DOWN", e, e],
    [1, 134, "NumpadComma", 110, "NumPad_Separator", 108, "VK_SEPARATOR", e, e],
    [0, 135, "IntlRo", 115, "ABNT_C1", 193, "VK_ABNT_C1", e, e],
    [1, 136, "KanaMode", 0, e, 0, e, e, e],
    [0, 137, "IntlYen", 0, e, 0, e, e, e],
    [1, 138, "Convert", 0, e, 0, e, e, e],
    [1, 139, "NonConvert", 0, e, 0, e, e, e],
    [1, 140, "Lang1", 0, e, 0, e, e, e],
    [1, 141, "Lang2", 0, e, 0, e, e, e],
    [1, 142, "Lang3", 0, e, 0, e, e, e],
    [1, 143, "Lang4", 0, e, 0, e, e, e],
    [1, 144, "Lang5", 0, e, 0, e, e, e],
    [1, 145, "Abort", 0, e, 0, e, e, e],
    [1, 146, "Props", 0, e, 0, e, e, e],
    [1, 147, "NumpadParenLeft", 0, e, 0, e, e, e],
    [1, 148, "NumpadParenRight", 0, e, 0, e, e, e],
    [1, 149, "NumpadBackspace", 0, e, 0, e, e, e],
    [1, 150, "NumpadMemoryStore", 0, e, 0, e, e, e],
    [1, 151, "NumpadMemoryRecall", 0, e, 0, e, e, e],
    [1, 152, "NumpadMemoryClear", 0, e, 0, e, e, e],
    [1, 153, "NumpadMemoryAdd", 0, e, 0, e, e, e],
    [1, 154, "NumpadMemorySubtract", 0, e, 0, e, e, e],
    [1, 155, "NumpadClear", 131, "Clear", 12, "VK_CLEAR", e, e],
    [1, 156, "NumpadClearEntry", 0, e, 0, e, e, e],
    [1, 0, e, 5, "Ctrl", 17, "VK_CONTROL", e, e],
    [1, 0, e, 4, "Shift", 16, "VK_SHIFT", e, e],
    [1, 0, e, 6, "Alt", 18, "VK_MENU", e, e],
    [1, 0, e, 57, "Meta", 91, "VK_COMMAND", e, e],
    [1, 157, "ControlLeft", 5, e, 0, "VK_LCONTROL", e, e],
    [1, 158, "ShiftLeft", 4, e, 0, "VK_LSHIFT", e, e],
    [1, 159, "AltLeft", 6, e, 0, "VK_LMENU", e, e],
    [1, 160, "MetaLeft", 57, e, 0, "VK_LWIN", e, e],
    [1, 161, "ControlRight", 5, e, 0, "VK_RCONTROL", e, e],
    [1, 162, "ShiftRight", 4, e, 0, "VK_RSHIFT", e, e],
    [1, 163, "AltRight", 6, e, 0, "VK_RMENU", e, e],
    [1, 164, "MetaRight", 57, e, 0, "VK_RWIN", e, e],
    [1, 165, "BrightnessUp", 0, e, 0, e, e, e],
    [1, 166, "BrightnessDown", 0, e, 0, e, e, e],
    [1, 167, "MediaPlay", 0, e, 0, e, e, e],
    [1, 168, "MediaRecord", 0, e, 0, e, e, e],
    [1, 169, "MediaFastForward", 0, e, 0, e, e, e],
    [1, 170, "MediaRewind", 0, e, 0, e, e, e],
    [1, 171, "MediaTrackNext", 124, "MediaTrackNext", 176, "VK_MEDIA_NEXT_TRACK", e, e],
    [1, 172, "MediaTrackPrevious", 125, "MediaTrackPrevious", 177, "VK_MEDIA_PREV_TRACK", e, e],
    [1, 173, "MediaStop", 126, "MediaStop", 178, "VK_MEDIA_STOP", e, e],
    [1, 174, "Eject", 0, e, 0, e, e, e],
    [1, 175, "MediaPlayPause", 127, "MediaPlayPause", 179, "VK_MEDIA_PLAY_PAUSE", e, e],
    [1, 176, "MediaSelect", 128, "LaunchMediaPlayer", 181, "VK_MEDIA_LAUNCH_MEDIA_SELECT", e, e],
    [1, 177, "LaunchMail", 129, "LaunchMail", 180, "VK_MEDIA_LAUNCH_MAIL", e, e],
    [1, 178, "LaunchApp2", 130, "LaunchApp2", 183, "VK_MEDIA_LAUNCH_APP2", e, e],
    [1, 179, "LaunchApp1", 0, e, 0, "VK_MEDIA_LAUNCH_APP1", e, e],
    [1, 180, "SelectTask", 0, e, 0, e, e, e],
    [1, 181, "LaunchScreenSaver", 0, e, 0, e, e, e],
    [1, 182, "BrowserSearch", 120, "BrowserSearch", 170, "VK_BROWSER_SEARCH", e, e],
    [1, 183, "BrowserHome", 121, "BrowserHome", 172, "VK_BROWSER_HOME", e, e],
    [1, 184, "BrowserBack", 122, "BrowserBack", 166, "VK_BROWSER_BACK", e, e],
    [1, 185, "BrowserForward", 123, "BrowserForward", 167, "VK_BROWSER_FORWARD", e, e],
    [1, 186, "BrowserStop", 0, e, 0, "VK_BROWSER_STOP", e, e],
    [1, 187, "BrowserRefresh", 0, e, 0, "VK_BROWSER_REFRESH", e, e],
    [1, 188, "BrowserFavorites", 0, e, 0, "VK_BROWSER_FAVORITES", e, e],
    [1, 189, "ZoomToggle", 0, e, 0, e, e, e],
    [1, 190, "MailReply", 0, e, 0, e, e, e],
    [1, 191, "MailForward", 0, e, 0, e, e, e],
    [1, 192, "MailSend", 0, e, 0, e, e, e],
    [1, 0, e, 114, "KeyInComposition", 229, e, e, e],
    [1, 0, e, 116, "ABNT_C2", 194, "VK_ABNT_C2", e, e],
    [1, 0, e, 96, "OEM_8", 223, "VK_OEM_8", e, e],
    [1, 0, e, 0, e, 0, "VK_KANA", e, e],
    [1, 0, e, 0, e, 0, "VK_HANGUL", e, e],
    [1, 0, e, 0, e, 0, "VK_JUNJA", e, e],
    [1, 0, e, 0, e, 0, "VK_FINAL", e, e],
    [1, 0, e, 0, e, 0, "VK_HANJA", e, e],
    [1, 0, e, 0, e, 0, "VK_KANJI", e, e],
    [1, 0, e, 0, e, 0, "VK_CONVERT", e, e],
    [1, 0, e, 0, e, 0, "VK_NONCONVERT", e, e],
    [1, 0, e, 0, e, 0, "VK_ACCEPT", e, e],
    [1, 0, e, 0, e, 0, "VK_MODECHANGE", e, e],
    [1, 0, e, 0, e, 0, "VK_SELECT", e, e],
    [1, 0, e, 0, e, 0, "VK_PRINT", e, e],
    [1, 0, e, 0, e, 0, "VK_EXECUTE", e, e],
    [1, 0, e, 0, e, 0, "VK_SNAPSHOT", e, e],
    [1, 0, e, 0, e, 0, "VK_HELP", e, e],
    [1, 0, e, 0, e, 0, "VK_APPS", e, e],
    [1, 0, e, 0, e, 0, "VK_PROCESSKEY", e, e],
    [1, 0, e, 0, e, 0, "VK_PACKET", e, e],
    [1, 0, e, 0, e, 0, "VK_DBE_SBCSCHAR", e, e],
    [1, 0, e, 0, e, 0, "VK_DBE_DBCSCHAR", e, e],
    [1, 0, e, 0, e, 0, "VK_ATTN", e, e],
    [1, 0, e, 0, e, 0, "VK_CRSEL", e, e],
    [1, 0, e, 0, e, 0, "VK_EXSEL", e, e],
    [1, 0, e, 0, e, 0, "VK_EREOF", e, e],
    [1, 0, e, 0, e, 0, "VK_PLAY", e, e],
    [1, 0, e, 0, e, 0, "VK_ZOOM", e, e],
    [1, 0, e, 0, e, 0, "VK_NONAME", e, e],
    [1, 0, e, 0, e, 0, "VK_PA1", e, e],
    [1, 0, e, 0, e, 0, "VK_OEM_CLEAR", e, e]
  ], n = [], i = [];
  for (const r of t) {
    const [s, a, l, u, c, h, f, m, d] = r;
    if (i[a] || (i[a] = !0, Vo[l] = a, qo[l.toLowerCase()] = a), !n[u]) {
      if (n[u] = !0, !c)
        throw new Error(
          `String representation missing for key code ${u} around scan code ${l}`
        );
      jt.define(u, c), Vn.define(u, m || c), qn.define(u, d || m || c);
    }
    h && (Uo[h] = u);
  }
})();
var qi;
(function(e) {
  function t(l) {
    return jt.keyCodeToStr(l);
  }
  e.toString = t;
  function n(l) {
    return jt.strToKeyCode(l);
  }
  e.fromString = n;
  function i(l) {
    return Vn.keyCodeToStr(l);
  }
  e.toUserSettingsUS = i;
  function r(l) {
    return qn.keyCodeToStr(l);
  }
  e.toUserSettingsGeneral = r;
  function s(l) {
    return Vn.strToKeyCode(l) || qn.strToKeyCode(l);
  }
  e.fromUserSettings = s;
  function a(l) {
    if (l >= 98 && l <= 113)
      return null;
    switch (l) {
      case 16:
        return "Up";
      case 18:
        return "Down";
      case 15:
        return "Left";
      case 17:
        return "Right";
    }
    return jt.keyCodeToStr(l);
  }
  e.toElectronAccelerator = a;
})(qi || (qi = {}));
function $o(e, t) {
  const n = (t & 65535) << 16 >>> 0;
  return (e | n) >>> 0;
}
let Xe;
const An = globalThis.vscode;
var $1;
if (typeof An < "u" && typeof An.process < "u") {
  const e = An.process;
  Xe = {
    get platform() {
      return e.platform;
    },
    get arch() {
      return e.arch;
    },
    get env() {
      return e.env;
    },
    cwd() {
      return e.cwd();
    }
  };
} else typeof process < "u" && typeof (($1 = process == null ? void 0 : process.versions) == null ? void 0 : $1.node) == "string" ? Xe = {
  get platform() {
    return process.platform;
  },
  get arch() {
    return process.arch;
  },
  get env() {
    return process.env;
  },
  cwd() {
    return process.env.VSCODE_CWD || process.cwd();
  }
} : Xe = {
  get platform() {
    return gt ? "win32" : Ka ? "darwin" : "linux";
  },
  get arch() {
  },
  get env() {
    return {};
  },
  cwd() {
    return "/";
  }
};
const tn = Xe.cwd, Oo = Xe.env, Wo = Xe.platform;
Xe.arch;
const zo = 65, Ho = 97, jo = 90, Go = 122, Ve = 46, se = 47, fe = 92, Ie = 58, Xo = 63;
class Y1 extends Error {
  constructor(t, n, i) {
    let r;
    typeof n == "string" && n.indexOf("not ") === 0 ? (r = "must not be", n = n.replace(/^not /, "")) : r = "must be";
    const s = t.indexOf(".") !== -1 ? "property" : "argument";
    let a = `The "${t}" ${s} ${r} of type ${n}`;
    a += `. Received type ${typeof i}`, super(a), this.code = "ERR_INVALID_ARG_TYPE";
  }
}
function Qo(e, t) {
  if (e === null || typeof e != "object")
    throw new Y1(t, "Object", e);
}
function ee(e, t) {
  if (typeof e != "string")
    throw new Y1(t, "string", e);
}
const xe = Wo === "win32";
function q(e) {
  return e === se || e === fe;
}
function $n(e) {
  return e === se;
}
function Te(e) {
  return e >= zo && e <= jo || e >= Ho && e <= Go;
}
function nn(e, t, n, i) {
  let r = "", s = 0, a = -1, l = 0, u = 0;
  for (let c = 0; c <= e.length; ++c) {
    if (c < e.length)
      u = e.charCodeAt(c);
    else {
      if (i(u))
        break;
      u = se;
    }
    if (i(u)) {
      if (!(a === c - 1 || l === 1)) if (l === 2) {
        if (r.length < 2 || s !== 2 || r.charCodeAt(r.length - 1) !== Ve || r.charCodeAt(r.length - 2) !== Ve) {
          if (r.length > 2) {
            const h = r.lastIndexOf(n);
            h === -1 ? (r = "", s = 0) : (r = r.slice(0, h), s = r.length - 1 - r.lastIndexOf(n)), a = c, l = 0;
            continue;
          } else if (r.length !== 0) {
            r = "", s = 0, a = c, l = 0;
            continue;
          }
        }
        t && (r += r.length > 0 ? `${n}..` : "..", s = 2);
      } else
        r.length > 0 ? r += `${n}${e.slice(a + 1, c)}` : r = e.slice(a + 1, c), s = c - a - 1;
      a = c, l = 0;
    } else u === Ve && l !== -1 ? ++l : l = -1;
  }
  return r;
}
function Jo(e) {
  return e ? `${e[0] === "." ? "" : "."}${e}` : "";
}
function Z1(e, t) {
  Qo(t, "pathObject");
  const n = t.dir || t.root, i = t.base || `${t.name || ""}${Jo(t.ext)}`;
  return n ? n === t.root ? `${n}${i}` : `${n}${e}${i}` : i;
}
const re = {
  resolve(...e) {
    let t = "", n = "", i = !1;
    for (let r = e.length - 1; r >= -1; r--) {
      let s;
      if (r >= 0) {
        if (s = e[r], ee(s, `paths[${r}]`), s.length === 0)
          continue;
      } else t.length === 0 ? s = tn() : (s = Oo[`=${t}`] || tn(), (s === void 0 || s.slice(0, 2).toLowerCase() !== t.toLowerCase() && s.charCodeAt(2) === fe) && (s = `${t}\\`));
      const a = s.length;
      let l = 0, u = "", c = !1;
      const h = s.charCodeAt(0);
      if (a === 1)
        q(h) && (l = 1, c = !0);
      else if (q(h))
        if (c = !0, q(s.charCodeAt(1))) {
          let f = 2, m = f;
          for (; f < a && !q(s.charCodeAt(f)); )
            f++;
          if (f < a && f !== m) {
            const d = s.slice(m, f);
            for (m = f; f < a && q(s.charCodeAt(f)); )
              f++;
            if (f < a && f !== m) {
              for (m = f; f < a && !q(s.charCodeAt(f)); )
                f++;
              (f === a || f !== m) && (u = `\\\\${d}\\${s.slice(m, f)}`, l = f);
            }
          }
        } else
          l = 1;
      else Te(h) && s.charCodeAt(1) === Ie && (u = s.slice(0, 2), l = 2, a > 2 && q(s.charCodeAt(2)) && (c = !0, l = 3));
      if (u.length > 0)
        if (t.length > 0) {
          if (u.toLowerCase() !== t.toLowerCase())
            continue;
        } else
          t = u;
      if (i) {
        if (t.length > 0)
          break;
      } else if (n = `${s.slice(l)}\\${n}`, i = c, c && t.length > 0)
        break;
    }
    return n = nn(n, !i, "\\", q), i ? `${t}\\${n}` : `${t}${n}` || ".";
  },
  normalize(e) {
    ee(e, "path");
    const t = e.length;
    if (t === 0)
      return ".";
    let n = 0, i, r = !1;
    const s = e.charCodeAt(0);
    if (t === 1)
      return $n(s) ? "\\" : e;
    if (q(s))
      if (r = !0, q(e.charCodeAt(1))) {
        let l = 2, u = l;
        for (; l < t && !q(e.charCodeAt(l)); )
          l++;
        if (l < t && l !== u) {
          const c = e.slice(u, l);
          for (u = l; l < t && q(e.charCodeAt(l)); )
            l++;
          if (l < t && l !== u) {
            for (u = l; l < t && !q(e.charCodeAt(l)); )
              l++;
            if (l === t)
              return `\\\\${c}\\${e.slice(u)}\\`;
            l !== u && (i = `\\\\${c}\\${e.slice(u, l)}`, n = l);
          }
        }
      } else
        n = 1;
    else Te(s) && e.charCodeAt(1) === Ie && (i = e.slice(0, 2), n = 2, t > 2 && q(e.charCodeAt(2)) && (r = !0, n = 3));
    let a = n < t ? nn(e.slice(n), !r, "\\", q) : "";
    return a.length === 0 && !r && (a = "."), a.length > 0 && q(e.charCodeAt(t - 1)) && (a += "\\"), i === void 0 ? r ? `\\${a}` : a : r ? `${i}\\${a}` : `${i}${a}`;
  },
  isAbsolute(e) {
    ee(e, "path");
    const t = e.length;
    if (t === 0)
      return !1;
    const n = e.charCodeAt(0);
    return q(n) || t > 2 && Te(n) && e.charCodeAt(1) === Ie && q(e.charCodeAt(2));
  },
  join(...e) {
    if (e.length === 0)
      return ".";
    let t, n;
    for (let s = 0; s < e.length; ++s) {
      const a = e[s];
      ee(a, "path"), a.length > 0 && (t === void 0 ? t = n = a : t += `\\${a}`);
    }
    if (t === void 0)
      return ".";
    let i = !0, r = 0;
    if (typeof n == "string" && q(n.charCodeAt(0))) {
      ++r;
      const s = n.length;
      s > 1 && q(n.charCodeAt(1)) && (++r, s > 2 && (q(n.charCodeAt(2)) ? ++r : i = !1));
    }
    if (i) {
      for (; r < t.length && q(t.charCodeAt(r)); )
        r++;
      r >= 2 && (t = `\\${t.slice(r)}`);
    }
    return re.normalize(t);
  },
  relative(e, t) {
    if (ee(e, "from"), ee(t, "to"), e === t)
      return "";
    const n = re.resolve(e), i = re.resolve(t);
    if (n === i || (e = n.toLowerCase(), t = i.toLowerCase(), e === t))
      return "";
    let r = 0;
    for (; r < e.length && e.charCodeAt(r) === fe; )
      r++;
    let s = e.length;
    for (; s - 1 > r && e.charCodeAt(s - 1) === fe; )
      s--;
    const a = s - r;
    let l = 0;
    for (; l < t.length && t.charCodeAt(l) === fe; )
      l++;
    let u = t.length;
    for (; u - 1 > l && t.charCodeAt(u - 1) === fe; )
      u--;
    const c = u - l, h = a < c ? a : c;
    let f = -1, m = 0;
    for (; m < h; m++) {
      const g = e.charCodeAt(r + m);
      if (g !== t.charCodeAt(l + m))
        break;
      g === fe && (f = m);
    }
    if (m !== h) {
      if (f === -1)
        return i;
    } else {
      if (c > h) {
        if (t.charCodeAt(l + m) === fe)
          return i.slice(l + m + 1);
        if (m === 2)
          return i.slice(l + m);
      }
      a > h && (e.charCodeAt(r + m) === fe ? f = m : m === 2 && (f = 3)), f === -1 && (f = 0);
    }
    let d = "";
    for (m = r + f + 1; m <= s; ++m)
      (m === s || e.charCodeAt(m) === fe) && (d += d.length === 0 ? ".." : "\\..");
    return l += f, d.length > 0 ? `${d}${i.slice(l, u)}` : (i.charCodeAt(l) === fe && ++l, i.slice(l, u));
  },
  toNamespacedPath(e) {
    if (typeof e != "string" || e.length === 0)
      return e;
    const t = re.resolve(e);
    if (t.length <= 2)
      return e;
    if (t.charCodeAt(0) === fe) {
      if (t.charCodeAt(1) === fe) {
        const n = t.charCodeAt(2);
        if (n !== Xo && n !== Ve)
          return `\\\\?\\UNC\\${t.slice(2)}`;
      }
    } else if (Te(t.charCodeAt(0)) && t.charCodeAt(1) === Ie && t.charCodeAt(2) === fe)
      return `\\\\?\\${t}`;
    return e;
  },
  dirname(e) {
    ee(e, "path");
    const t = e.length;
    if (t === 0)
      return ".";
    let n = -1, i = 0;
    const r = e.charCodeAt(0);
    if (t === 1)
      return q(r) ? e : ".";
    if (q(r)) {
      if (n = i = 1, q(e.charCodeAt(1))) {
        let l = 2, u = l;
        for (; l < t && !q(e.charCodeAt(l)); )
          l++;
        if (l < t && l !== u) {
          for (u = l; l < t && q(e.charCodeAt(l)); )
            l++;
          if (l < t && l !== u) {
            for (u = l; l < t && !q(e.charCodeAt(l)); )
              l++;
            if (l === t)
              return e;
            l !== u && (n = i = l + 1);
          }
        }
      }
    } else Te(r) && e.charCodeAt(1) === Ie && (n = t > 2 && q(e.charCodeAt(2)) ? 3 : 2, i = n);
    let s = -1, a = !0;
    for (let l = t - 1; l >= i; --l)
      if (q(e.charCodeAt(l))) {
        if (!a) {
          s = l;
          break;
        }
      } else
        a = !1;
    if (s === -1) {
      if (n === -1)
        return ".";
      s = n;
    }
    return e.slice(0, s);
  },
  basename(e, t) {
    t !== void 0 && ee(t, "suffix"), ee(e, "path");
    let n = 0, i = -1, r = !0, s;
    if (e.length >= 2 && Te(e.charCodeAt(0)) && e.charCodeAt(1) === Ie && (n = 2), t !== void 0 && t.length > 0 && t.length <= e.length) {
      if (t === e)
        return "";
      let a = t.length - 1, l = -1;
      for (s = e.length - 1; s >= n; --s) {
        const u = e.charCodeAt(s);
        if (q(u)) {
          if (!r) {
            n = s + 1;
            break;
          }
        } else
          l === -1 && (r = !1, l = s + 1), a >= 0 && (u === t.charCodeAt(a) ? --a === -1 && (i = s) : (a = -1, i = l));
      }
      return n === i ? i = l : i === -1 && (i = e.length), e.slice(n, i);
    }
    for (s = e.length - 1; s >= n; --s)
      if (q(e.charCodeAt(s))) {
        if (!r) {
          n = s + 1;
          break;
        }
      } else i === -1 && (r = !1, i = s + 1);
    return i === -1 ? "" : e.slice(n, i);
  },
  extname(e) {
    ee(e, "path");
    let t = 0, n = -1, i = 0, r = -1, s = !0, a = 0;
    e.length >= 2 && e.charCodeAt(1) === Ie && Te(e.charCodeAt(0)) && (t = i = 2);
    for (let l = e.length - 1; l >= t; --l) {
      const u = e.charCodeAt(l);
      if (q(u)) {
        if (!s) {
          i = l + 1;
          break;
        }
        continue;
      }
      r === -1 && (s = !1, r = l + 1), u === Ve ? n === -1 ? n = l : a !== 1 && (a = 1) : n !== -1 && (a = -1);
    }
    return n === -1 || r === -1 || a === 0 || a === 1 && n === r - 1 && n === i + 1 ? "" : e.slice(n, r);
  },
  format: Z1.bind(null, "\\"),
  parse(e) {
    ee(e, "path");
    const t = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return t;
    const n = e.length;
    let i = 0, r = e.charCodeAt(0);
    if (n === 1)
      return q(r) ? (t.root = t.dir = e, t) : (t.base = t.name = e, t);
    if (q(r)) {
      if (i = 1, q(e.charCodeAt(1))) {
        let f = 2, m = f;
        for (; f < n && !q(e.charCodeAt(f)); )
          f++;
        if (f < n && f !== m) {
          for (m = f; f < n && q(e.charCodeAt(f)); )
            f++;
          if (f < n && f !== m) {
            for (m = f; f < n && !q(e.charCodeAt(f)); )
              f++;
            f === n ? i = f : f !== m && (i = f + 1);
          }
        }
      }
    } else if (Te(r) && e.charCodeAt(1) === Ie) {
      if (n <= 2)
        return t.root = t.dir = e, t;
      if (i = 2, q(e.charCodeAt(2))) {
        if (n === 3)
          return t.root = t.dir = e, t;
        i = 3;
      }
    }
    i > 0 && (t.root = e.slice(0, i));
    let s = -1, a = i, l = -1, u = !0, c = e.length - 1, h = 0;
    for (; c >= i; --c) {
      if (r = e.charCodeAt(c), q(r)) {
        if (!u) {
          a = c + 1;
          break;
        }
        continue;
      }
      l === -1 && (u = !1, l = c + 1), r === Ve ? s === -1 ? s = c : h !== 1 && (h = 1) : s !== -1 && (h = -1);
    }
    return l !== -1 && (s === -1 || h === 0 || h === 1 && s === l - 1 && s === a + 1 ? t.base = t.name = e.slice(a, l) : (t.name = e.slice(a, s), t.base = e.slice(a, l), t.ext = e.slice(s, l))), a > 0 && a !== i ? t.dir = e.slice(0, a - 1) : t.dir = t.root, t;
  },
  sep: "\\",
  delimiter: ";",
  win32: null,
  posix: null
}, Yo = (() => {
  if (xe) {
    const e = /\\/g;
    return () => {
      const t = tn().replace(e, "/");
      return t.slice(t.indexOf("/"));
    };
  }
  return () => tn();
})(), G = {
  resolve(...e) {
    let t = "", n = !1;
    for (let i = e.length - 1; i >= -1 && !n; i--) {
      const r = i >= 0 ? e[i] : Yo();
      ee(r, `paths[${i}]`), r.length !== 0 && (t = `${r}/${t}`, n = r.charCodeAt(0) === se);
    }
    return t = nn(t, !n, "/", $n), n ? `/${t}` : t.length > 0 ? t : ".";
  },
  normalize(e) {
    if (ee(e, "path"), e.length === 0)
      return ".";
    const t = e.charCodeAt(0) === se, n = e.charCodeAt(e.length - 1) === se;
    return e = nn(e, !t, "/", $n), e.length === 0 ? t ? "/" : n ? "./" : "." : (n && (e += "/"), t ? `/${e}` : e);
  },
  isAbsolute(e) {
    return ee(e, "path"), e.length > 0 && e.charCodeAt(0) === se;
  },
  join(...e) {
    if (e.length === 0)
      return ".";
    let t;
    for (let n = 0; n < e.length; ++n) {
      const i = e[n];
      ee(i, "path"), i.length > 0 && (t === void 0 ? t = i : t += `/${i}`);
    }
    return t === void 0 ? "." : G.normalize(t);
  },
  relative(e, t) {
    if (ee(e, "from"), ee(t, "to"), e === t || (e = G.resolve(e), t = G.resolve(t), e === t))
      return "";
    const n = 1, i = e.length, r = i - n, s = 1, a = t.length - s, l = r < a ? r : a;
    let u = -1, c = 0;
    for (; c < l; c++) {
      const f = e.charCodeAt(n + c);
      if (f !== t.charCodeAt(s + c))
        break;
      f === se && (u = c);
    }
    if (c === l)
      if (a > l) {
        if (t.charCodeAt(s + c) === se)
          return t.slice(s + c + 1);
        if (c === 0)
          return t.slice(s + c);
      } else r > l && (e.charCodeAt(n + c) === se ? u = c : c === 0 && (u = 0));
    let h = "";
    for (c = n + u + 1; c <= i; ++c)
      (c === i || e.charCodeAt(c) === se) && (h += h.length === 0 ? ".." : "/..");
    return `${h}${t.slice(s + u)}`;
  },
  toNamespacedPath(e) {
    return e;
  },
  dirname(e) {
    if (ee(e, "path"), e.length === 0)
      return ".";
    const t = e.charCodeAt(0) === se;
    let n = -1, i = !0;
    for (let r = e.length - 1; r >= 1; --r)
      if (e.charCodeAt(r) === se) {
        if (!i) {
          n = r;
          break;
        }
      } else
        i = !1;
    return n === -1 ? t ? "/" : "." : t && n === 1 ? "//" : e.slice(0, n);
  },
  basename(e, t) {
    t !== void 0 && ee(t, "ext"), ee(e, "path");
    let n = 0, i = -1, r = !0, s;
    if (t !== void 0 && t.length > 0 && t.length <= e.length) {
      if (t === e)
        return "";
      let a = t.length - 1, l = -1;
      for (s = e.length - 1; s >= 0; --s) {
        const u = e.charCodeAt(s);
        if (u === se) {
          if (!r) {
            n = s + 1;
            break;
          }
        } else
          l === -1 && (r = !1, l = s + 1), a >= 0 && (u === t.charCodeAt(a) ? --a === -1 && (i = s) : (a = -1, i = l));
      }
      return n === i ? i = l : i === -1 && (i = e.length), e.slice(n, i);
    }
    for (s = e.length - 1; s >= 0; --s)
      if (e.charCodeAt(s) === se) {
        if (!r) {
          n = s + 1;
          break;
        }
      } else i === -1 && (r = !1, i = s + 1);
    return i === -1 ? "" : e.slice(n, i);
  },
  extname(e) {
    ee(e, "path");
    let t = -1, n = 0, i = -1, r = !0, s = 0;
    for (let a = e.length - 1; a >= 0; --a) {
      const l = e.charCodeAt(a);
      if (l === se) {
        if (!r) {
          n = a + 1;
          break;
        }
        continue;
      }
      i === -1 && (r = !1, i = a + 1), l === Ve ? t === -1 ? t = a : s !== 1 && (s = 1) : t !== -1 && (s = -1);
    }
    return t === -1 || i === -1 || s === 0 || s === 1 && t === i - 1 && t === n + 1 ? "" : e.slice(t, i);
  },
  format: Z1.bind(null, "/"),
  parse(e) {
    ee(e, "path");
    const t = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return t;
    const n = e.charCodeAt(0) === se;
    let i;
    n ? (t.root = "/", i = 1) : i = 0;
    let r = -1, s = 0, a = -1, l = !0, u = e.length - 1, c = 0;
    for (; u >= i; --u) {
      const h = e.charCodeAt(u);
      if (h === se) {
        if (!l) {
          s = u + 1;
          break;
        }
        continue;
      }
      a === -1 && (l = !1, a = u + 1), h === Ve ? r === -1 ? r = u : c !== 1 && (c = 1) : r !== -1 && (c = -1);
    }
    if (a !== -1) {
      const h = s === 0 && n ? 1 : s;
      r === -1 || c === 0 || c === 1 && r === a - 1 && r === s + 1 ? t.base = t.name = e.slice(h, a) : (t.name = e.slice(h, r), t.base = e.slice(h, a), t.ext = e.slice(r, a));
    }
    return s > 0 ? t.dir = e.slice(0, s - 1) : n && (t.dir = "/"), t;
  },
  sep: "/",
  delimiter: ":",
  win32: null,
  posix: null
};
G.win32 = re.win32 = re;
G.posix = re.posix = G;
const Zo = xe ? re.normalize : G.normalize;
xe ? re.isAbsolute : G.isAbsolute;
const Ko = xe ? re.join : G.join, el = xe ? re.resolve : G.resolve, tl = xe ? re.relative : G.relative, nl = xe ? re.dirname : G.dirname;
xe ? re.basename : G.basename;
xe ? re.extname : G.extname;
xe ? re.parse : G.parse;
const Gt = xe ? re.sep : G.sep;
xe ? re.delimiter : G.delimiter;
const il = /^\w[\w\d+.-]*$/, rl = /^\//, sl = /^\/\//;
function al(e, t) {
  if (!e.scheme && t)
    throw new Error(
      `[UriError]: Scheme is missing: {scheme: "", authority: "${e.authority}", path: "${e.path}", query: "${e.query}", fragment: "${e.fragment}"}`
    );
  if (e.scheme && !il.test(e.scheme))
    throw new Error("[UriError]: Scheme contains illegal characters.");
  if (e.path) {
    if (e.authority) {
      if (!rl.test(e.path))
        throw new Error(
          '[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character'
        );
    } else if (sl.test(e.path))
      throw new Error(
        '[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")'
      );
  }
}
function ol(e, t) {
  return !e && !t ? "file" : e;
}
function ll(e, t) {
  switch (e) {
    case "https":
    case "http":
    case "file":
      t ? t[0] !== _e && (t = _e + t) : t = _e;
      break;
  }
  return t;
}
const X = "", _e = "/", ul = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
let me = class Xt {
  static isUri(t) {
    return t instanceof Xt ? !0 : t ? typeof t.authority == "string" && typeof t.fragment == "string" && typeof t.path == "string" && typeof t.query == "string" && typeof t.scheme == "string" && typeof t.fsPath == "string" && typeof t.with == "function" && typeof t.toString == "function" : !1;
  }
  constructor(t, n, i, r, s, a = !1) {
    typeof t == "object" ? (this.scheme = t.scheme || X, this.authority = t.authority || X, this.path = t.path || X, this.query = t.query || X, this.fragment = t.fragment || X) : (this.scheme = ol(t, a), this.authority = n || X, this.path = ll(this.scheme, i || X), this.query = r || X, this.fragment = s || X, al(this, a));
  }
  get fsPath() {
    return rn(this, !1);
  }
  with(t) {
    if (!t)
      return this;
    let { scheme: n, authority: i, path: r, query: s, fragment: a } = t;
    return n === void 0 ? n = this.scheme : n === null && (n = X), i === void 0 ? i = this.authority : i === null && (i = X), r === void 0 ? r = this.path : r === null && (r = X), s === void 0 ? s = this.query : s === null && (s = X), a === void 0 ? a = this.fragment : a === null && (a = X), n === this.scheme && i === this.authority && r === this.path && s === this.query && a === this.fragment ? this : new et(n, i, r, s, a);
  }
  static parse(t, n = !1) {
    const i = ul.exec(t);
    return i ? new et(
      i[2] || X,
      $t(i[4] || X),
      $t(i[5] || X),
      $t(i[7] || X),
      $t(i[9] || X),
      n
    ) : new et(X, X, X, X, X);
  }
  static file(t) {
    let n = X;
    if (gt && (t = t.replace(/\\/g, _e)), t[0] === _e && t[1] === _e) {
      const i = t.indexOf(_e, 2);
      i === -1 ? (n = t.substring(2), t = _e) : (n = t.substring(2, i), t = t.substring(i) || _e);
    }
    return new et("file", n, t, X, X);
  }
  static from(t, n) {
    return new et(
      t.scheme,
      t.authority,
      t.path,
      t.query,
      t.fragment,
      n
    );
  }
  static joinPath(t, ...n) {
    if (!t.path)
      throw new Error("[UriError]: cannot call joinPath on URI without path");
    let i;
    return gt && t.scheme === "file" ? i = Xt.file(re.join(rn(t, !0), ...n)).path : i = G.join(t.path, ...n), t.with({ path: i });
  }
  toString(t = !1) {
    return On(this, t);
  }
  toJSON() {
    return this;
  }
  static revive(t) {
    if (t) {
      if (t instanceof Xt)
        return t;
      {
        const n = new et(t);
        return n._formatted = t.external ?? null, n._fsPath = t._sep === K1 ? t.fsPath ?? null : null, n;
      }
    } else return t;
  }
  [Symbol.for("debug.description")]() {
    return `URI(${this.toString()})`;
  }
};
const K1 = gt ? 1 : void 0;
class et extends me {
  constructor() {
    super(...arguments), this._formatted = null, this._fsPath = null;
  }
  get fsPath() {
    return this._fsPath || (this._fsPath = rn(this, !1)), this._fsPath;
  }
  toString(t = !1) {
    return t ? On(this, !0) : (this._formatted || (this._formatted = On(this, !1)), this._formatted);
  }
  toJSON() {
    const t = {
      $mid: 1
    };
    return this._fsPath && (t.fsPath = this._fsPath, t._sep = K1), this._formatted && (t.external = this._formatted), this.path && (t.path = this.path), this.scheme && (t.scheme = this.scheme), this.authority && (t.authority = this.authority), this.query && (t.query = this.query), this.fragment && (t.fragment = this.fragment), t;
  }
}
const ea = {
  58: "%3A",
  47: "%2F",
  63: "%3F",
  35: "%23",
  91: "%5B",
  93: "%5D",
  64: "%40",
  33: "%21",
  36: "%24",
  38: "%26",
  39: "%27",
  40: "%28",
  41: "%29",
  42: "%2A",
  43: "%2B",
  44: "%2C",
  59: "%3B",
  61: "%3D",
  32: "%20"
};
function $i(e, t, n) {
  let i, r = -1;
  for (let s = 0; s < e.length; s++) {
    const a = e.charCodeAt(s);
    if (a >= 97 && a <= 122 || a >= 65 && a <= 90 || a >= 48 && a <= 57 || a === 45 || a === 46 || a === 95 || a === 126 || t && a === 47 || n && a === 91 || n && a === 93 || n && a === 58)
      r !== -1 && (i += encodeURIComponent(e.substring(r, s)), r = -1), i !== void 0 && (i += e.charAt(s));
    else {
      i === void 0 && (i = e.substr(0, s));
      const l = ea[a];
      l !== void 0 ? (r !== -1 && (i += encodeURIComponent(e.substring(r, s)), r = -1), i += l) : r === -1 && (r = s);
    }
  }
  return r !== -1 && (i += encodeURIComponent(e.substring(r))), i !== void 0 ? i : e;
}
function cl(e) {
  let t;
  for (let n = 0; n < e.length; n++) {
    const i = e.charCodeAt(n);
    i === 35 || i === 63 ? (t === void 0 && (t = e.substr(0, n)), t += ea[i]) : t !== void 0 && (t += e[n]);
  }
  return t !== void 0 ? t : e;
}
function rn(e, t) {
  let n;
  return e.authority && e.path.length > 1 && e.scheme === "file" ? n = `//${e.authority}${e.path}` : e.path.charCodeAt(0) === 47 && (e.path.charCodeAt(1) >= 65 && e.path.charCodeAt(1) <= 90 || e.path.charCodeAt(1) >= 97 && e.path.charCodeAt(1) <= 122) && e.path.charCodeAt(2) === 58 ? t ? n = e.path.substr(1) : n = e.path[1].toLowerCase() + e.path.substr(2) : n = e.path, gt && (n = n.replace(/\//g, "\\")), n;
}
function On(e, t) {
  const n = t ? cl : $i;
  let i = "", { scheme: r, authority: s, path: a, query: l, fragment: u } = e;
  if (r && (i += r, i += ":"), (s || r === "file") && (i += _e, i += _e), s) {
    let c = s.indexOf("@");
    if (c !== -1) {
      const h = s.substr(0, c);
      s = s.substr(c + 1), c = h.lastIndexOf(":"), c === -1 ? i += n(h, !1, !1) : (i += n(h.substr(0, c), !1, !1), i += ":", i += n(h.substr(c + 1), !1, !0)), i += "@";
    }
    s = s.toLowerCase(), c = s.lastIndexOf(":"), c === -1 ? i += n(s, !1, !0) : (i += n(s.substr(0, c), !1, !0), i += s.substr(c));
  }
  if (a) {
    if (a.length >= 3 && a.charCodeAt(0) === 47 && a.charCodeAt(2) === 58) {
      const c = a.charCodeAt(1);
      c >= 65 && c <= 90 && (a = `/${String.fromCharCode(c + 32)}:${a.substr(3)}`);
    } else if (a.length >= 2 && a.charCodeAt(1) === 58) {
      const c = a.charCodeAt(0);
      c >= 65 && c <= 90 && (a = `${String.fromCharCode(c + 32)}:${a.substr(2)}`);
    }
    i += n(a, !0, !1);
  }
  return l && (i += "?", i += n(l, !1, !1)), u && (i += "#", i += t ? u : $i(u, !1, !1)), i;
}
function ta(e) {
  try {
    return decodeURIComponent(e);
  } catch {
    return e.length > 3 ? e.substr(0, 3) + ta(e.substr(3)) : e;
  }
}
const Oi = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function $t(e) {
  return e.match(Oi) ? e.replace(Oi, (t) => ta(t)) : e;
}
class ge extends U {
  constructor(t, n, i, r) {
    super(t, n, i, r), this.selectionStartLineNumber = t, this.selectionStartColumn = n, this.positionLineNumber = i, this.positionColumn = r;
  }
  toString() {
    return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]";
  }
  equalsSelection(t) {
    return ge.selectionsEqual(this, t);
  }
  static selectionsEqual(t, n) {
    return t.selectionStartLineNumber === n.selectionStartLineNumber && t.selectionStartColumn === n.selectionStartColumn && t.positionLineNumber === n.positionLineNumber && t.positionColumn === n.positionColumn;
  }
  getDirection() {
    return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? 0 : 1;
  }
  setEndPosition(t, n) {
    return this.getDirection() === 0 ? new ge(this.startLineNumber, this.startColumn, t, n) : new ge(t, n, this.startLineNumber, this.startColumn);
  }
  getPosition() {
    return new j(this.positionLineNumber, this.positionColumn);
  }
  getSelectionStart() {
    return new j(this.selectionStartLineNumber, this.selectionStartColumn);
  }
  setStartPosition(t, n) {
    return this.getDirection() === 0 ? new ge(t, n, this.endLineNumber, this.endColumn) : new ge(this.endLineNumber, this.endColumn, t, n);
  }
  static fromPositions(t, n = t) {
    return new ge(t.lineNumber, t.column, n.lineNumber, n.column);
  }
  static fromRange(t, n) {
    return n === 0 ? new ge(
      t.startLineNumber,
      t.startColumn,
      t.endLineNumber,
      t.endColumn
    ) : new ge(
      t.endLineNumber,
      t.endColumn,
      t.startLineNumber,
      t.startColumn
    );
  }
  static liftSelection(t) {
    return new ge(
      t.selectionStartLineNumber,
      t.selectionStartColumn,
      t.positionLineNumber,
      t.positionColumn
    );
  }
  static selectionsArrEqual(t, n) {
    if (t && !n || !t && n)
      return !1;
    if (!t && !n)
      return !0;
    if (t.length !== n.length)
      return !1;
    for (let i = 0, r = t.length; i < r; i++)
      if (!this.selectionsEqual(t[i], n[i]))
        return !1;
    return !0;
  }
  static isISelection(t) {
    return t && typeof t.selectionStartLineNumber == "number" && typeof t.selectionStartColumn == "number" && typeof t.positionLineNumber == "number" && typeof t.positionColumn == "number";
  }
  static createWithDirection(t, n, i, r, s) {
    return s === 0 ? new ge(t, n, i, r) : new ge(i, r, t, n);
  }
}
function hl(e) {
  return typeof e == "string";
}
const Wi = /* @__PURE__ */ Object.create(null);
function o(e, t) {
  if (hl(t)) {
    const n = Wi[t];
    if (n === void 0)
      throw new Error(`${e} references an unknown codicon: ${t}`);
    t = n;
  }
  return Wi[e] = t, { id: e };
}
const fl = {
  add: o("add", 6e4),
  plus: o("plus", 6e4),
  gistNew: o("gist-new", 6e4),
  repoCreate: o("repo-create", 6e4),
  lightbulb: o("lightbulb", 60001),
  lightBulb: o("light-bulb", 60001),
  repo: o("repo", 60002),
  repoDelete: o("repo-delete", 60002),
  gistFork: o("gist-fork", 60003),
  repoForked: o("repo-forked", 60003),
  gitPullRequest: o("git-pull-request", 60004),
  gitPullRequestAbandoned: o("git-pull-request-abandoned", 60004),
  recordKeys: o("record-keys", 60005),
  keyboard: o("keyboard", 60005),
  tag: o("tag", 60006),
  gitPullRequestLabel: o("git-pull-request-label", 60006),
  tagAdd: o("tag-add", 60006),
  tagRemove: o("tag-remove", 60006),
  person: o("person", 60007),
  personFollow: o("person-follow", 60007),
  personOutline: o("person-outline", 60007),
  personFilled: o("person-filled", 60007),
  gitBranch: o("git-branch", 60008),
  gitBranchCreate: o("git-branch-create", 60008),
  gitBranchDelete: o("git-branch-delete", 60008),
  sourceControl: o("source-control", 60008),
  mirror: o("mirror", 60009),
  mirrorPublic: o("mirror-public", 60009),
  star: o("star", 60010),
  starAdd: o("star-add", 60010),
  starDelete: o("star-delete", 60010),
  starEmpty: o("star-empty", 60010),
  comment: o("comment", 60011),
  commentAdd: o("comment-add", 60011),
  alert: o("alert", 60012),
  warning: o("warning", 60012),
  search: o("search", 60013),
  searchSave: o("search-save", 60013),
  logOut: o("log-out", 60014),
  signOut: o("sign-out", 60014),
  logIn: o("log-in", 60015),
  signIn: o("sign-in", 60015),
  eye: o("eye", 60016),
  eyeUnwatch: o("eye-unwatch", 60016),
  eyeWatch: o("eye-watch", 60016),
  circleFilled: o("circle-filled", 60017),
  primitiveDot: o("primitive-dot", 60017),
  closeDirty: o("close-dirty", 60017),
  debugBreakpoint: o("debug-breakpoint", 60017),
  debugBreakpointDisabled: o("debug-breakpoint-disabled", 60017),
  debugHint: o("debug-hint", 60017),
  terminalDecorationSuccess: o("terminal-decoration-success", 60017),
  primitiveSquare: o("primitive-square", 60018),
  edit: o("edit", 60019),
  pencil: o("pencil", 60019),
  info: o("info", 60020),
  issueOpened: o("issue-opened", 60020),
  gistPrivate: o("gist-private", 60021),
  gitForkPrivate: o("git-fork-private", 60021),
  lock: o("lock", 60021),
  mirrorPrivate: o("mirror-private", 60021),
  close: o("close", 60022),
  removeClose: o("remove-close", 60022),
  x: o("x", 60022),
  repoSync: o("repo-sync", 60023),
  sync: o("sync", 60023),
  clone: o("clone", 60024),
  desktopDownload: o("desktop-download", 60024),
  beaker: o("beaker", 60025),
  microscope: o("microscope", 60025),
  vm: o("vm", 60026),
  deviceDesktop: o("device-desktop", 60026),
  file: o("file", 60027),
  fileText: o("file-text", 60027),
  more: o("more", 60028),
  ellipsis: o("ellipsis", 60028),
  kebabHorizontal: o("kebab-horizontal", 60028),
  mailReply: o("mail-reply", 60029),
  reply: o("reply", 60029),
  organization: o("organization", 60030),
  organizationFilled: o("organization-filled", 60030),
  organizationOutline: o("organization-outline", 60030),
  newFile: o("new-file", 60031),
  fileAdd: o("file-add", 60031),
  newFolder: o("new-folder", 60032),
  fileDirectoryCreate: o("file-directory-create", 60032),
  trash: o("trash", 60033),
  trashcan: o("trashcan", 60033),
  history: o("history", 60034),
  clock: o("clock", 60034),
  folder: o("folder", 60035),
  fileDirectory: o("file-directory", 60035),
  symbolFolder: o("symbol-folder", 60035),
  logoGithub: o("logo-github", 60036),
  markGithub: o("mark-github", 60036),
  github: o("github", 60036),
  terminal: o("terminal", 60037),
  console: o("console", 60037),
  repl: o("repl", 60037),
  zap: o("zap", 60038),
  symbolEvent: o("symbol-event", 60038),
  error: o("error", 60039),
  stop: o("stop", 60039),
  variable: o("variable", 60040),
  symbolVariable: o("symbol-variable", 60040),
  array: o("array", 60042),
  symbolArray: o("symbol-array", 60042),
  symbolModule: o("symbol-module", 60043),
  symbolPackage: o("symbol-package", 60043),
  symbolNamespace: o("symbol-namespace", 60043),
  symbolObject: o("symbol-object", 60043),
  symbolMethod: o("symbol-method", 60044),
  symbolFunction: o("symbol-function", 60044),
  symbolConstructor: o("symbol-constructor", 60044),
  symbolBoolean: o("symbol-boolean", 60047),
  symbolNull: o("symbol-null", 60047),
  symbolNumeric: o("symbol-numeric", 60048),
  symbolNumber: o("symbol-number", 60048),
  symbolStructure: o("symbol-structure", 60049),
  symbolStruct: o("symbol-struct", 60049),
  symbolParameter: o("symbol-parameter", 60050),
  symbolTypeParameter: o("symbol-type-parameter", 60050),
  symbolKey: o("symbol-key", 60051),
  symbolText: o("symbol-text", 60051),
  symbolReference: o("symbol-reference", 60052),
  goToFile: o("go-to-file", 60052),
  symbolEnum: o("symbol-enum", 60053),
  symbolValue: o("symbol-value", 60053),
  symbolRuler: o("symbol-ruler", 60054),
  symbolUnit: o("symbol-unit", 60054),
  activateBreakpoints: o("activate-breakpoints", 60055),
  archive: o("archive", 60056),
  arrowBoth: o("arrow-both", 60057),
  arrowDown: o("arrow-down", 60058),
  arrowLeft: o("arrow-left", 60059),
  arrowRight: o("arrow-right", 60060),
  arrowSmallDown: o("arrow-small-down", 60061),
  arrowSmallLeft: o("arrow-small-left", 60062),
  arrowSmallRight: o("arrow-small-right", 60063),
  arrowSmallUp: o("arrow-small-up", 60064),
  arrowUp: o("arrow-up", 60065),
  bell: o("bell", 60066),
  bold: o("bold", 60067),
  book: o("book", 60068),
  bookmark: o("bookmark", 60069),
  debugBreakpointConditionalUnverified: o("debug-breakpoint-conditional-unverified", 60070),
  debugBreakpointConditional: o("debug-breakpoint-conditional", 60071),
  debugBreakpointConditionalDisabled: o("debug-breakpoint-conditional-disabled", 60071),
  debugBreakpointDataUnverified: o("debug-breakpoint-data-unverified", 60072),
  debugBreakpointData: o("debug-breakpoint-data", 60073),
  debugBreakpointDataDisabled: o("debug-breakpoint-data-disabled", 60073),
  debugBreakpointLogUnverified: o("debug-breakpoint-log-unverified", 60074),
  debugBreakpointLog: o("debug-breakpoint-log", 60075),
  debugBreakpointLogDisabled: o("debug-breakpoint-log-disabled", 60075),
  briefcase: o("briefcase", 60076),
  broadcast: o("broadcast", 60077),
  browser: o("browser", 60078),
  bug: o("bug", 60079),
  calendar: o("calendar", 60080),
  caseSensitive: o("case-sensitive", 60081),
  check: o("check", 60082),
  checklist: o("checklist", 60083),
  chevronDown: o("chevron-down", 60084),
  chevronLeft: o("chevron-left", 60085),
  chevronRight: o("chevron-right", 60086),
  chevronUp: o("chevron-up", 60087),
  chromeClose: o("chrome-close", 60088),
  chromeMaximize: o("chrome-maximize", 60089),
  chromeMinimize: o("chrome-minimize", 60090),
  chromeRestore: o("chrome-restore", 60091),
  circleOutline: o("circle-outline", 60092),
  circle: o("circle", 60092),
  debugBreakpointUnverified: o("debug-breakpoint-unverified", 60092),
  terminalDecorationIncomplete: o("terminal-decoration-incomplete", 60092),
  circleSlash: o("circle-slash", 60093),
  circuitBoard: o("circuit-board", 60094),
  clearAll: o("clear-all", 60095),
  clippy: o("clippy", 60096),
  closeAll: o("close-all", 60097),
  cloudDownload: o("cloud-download", 60098),
  cloudUpload: o("cloud-upload", 60099),
  code: o("code", 60100),
  collapseAll: o("collapse-all", 60101),
  colorMode: o("color-mode", 60102),
  commentDiscussion: o("comment-discussion", 60103),
  creditCard: o("credit-card", 60105),
  dash: o("dash", 60108),
  dashboard: o("dashboard", 60109),
  database: o("database", 60110),
  debugContinue: o("debug-continue", 60111),
  debugDisconnect: o("debug-disconnect", 60112),
  debugPause: o("debug-pause", 60113),
  debugRestart: o("debug-restart", 60114),
  debugStart: o("debug-start", 60115),
  debugStepInto: o("debug-step-into", 60116),
  debugStepOut: o("debug-step-out", 60117),
  debugStepOver: o("debug-step-over", 60118),
  debugStop: o("debug-stop", 60119),
  debug: o("debug", 60120),
  deviceCameraVideo: o("device-camera-video", 60121),
  deviceCamera: o("device-camera", 60122),
  deviceMobile: o("device-mobile", 60123),
  diffAdded: o("diff-added", 60124),
  diffIgnored: o("diff-ignored", 60125),
  diffModified: o("diff-modified", 60126),
  diffRemoved: o("diff-removed", 60127),
  diffRenamed: o("diff-renamed", 60128),
  diff: o("diff", 60129),
  diffSidebyside: o("diff-sidebyside", 60129),
  discard: o("discard", 60130),
  editorLayout: o("editor-layout", 60131),
  emptyWindow: o("empty-window", 60132),
  exclude: o("exclude", 60133),
  extensions: o("extensions", 60134),
  eyeClosed: o("eye-closed", 60135),
  fileBinary: o("file-binary", 60136),
  fileCode: o("file-code", 60137),
  fileMedia: o("file-media", 60138),
  filePdf: o("file-pdf", 60139),
  fileSubmodule: o("file-submodule", 60140),
  fileSymlinkDirectory: o("file-symlink-directory", 60141),
  fileSymlinkFile: o("file-symlink-file", 60142),
  fileZip: o("file-zip", 60143),
  files: o("files", 60144),
  filter: o("filter", 60145),
  flame: o("flame", 60146),
  foldDown: o("fold-down", 60147),
  foldUp: o("fold-up", 60148),
  fold: o("fold", 60149),
  folderActive: o("folder-active", 60150),
  folderOpened: o("folder-opened", 60151),
  gear: o("gear", 60152),
  gift: o("gift", 60153),
  gistSecret: o("gist-secret", 60154),
  gist: o("gist", 60155),
  gitCommit: o("git-commit", 60156),
  gitCompare: o("git-compare", 60157),
  compareChanges: o("compare-changes", 60157),
  gitMerge: o("git-merge", 60158),
  githubAction: o("github-action", 60159),
  githubAlt: o("github-alt", 60160),
  globe: o("globe", 60161),
  grabber: o("grabber", 60162),
  graph: o("graph", 60163),
  gripper: o("gripper", 60164),
  heart: o("heart", 60165),
  home: o("home", 60166),
  horizontalRule: o("horizontal-rule", 60167),
  hubot: o("hubot", 60168),
  inbox: o("inbox", 60169),
  issueReopened: o("issue-reopened", 60171),
  issues: o("issues", 60172),
  italic: o("italic", 60173),
  jersey: o("jersey", 60174),
  json: o("json", 60175),
  kebabVertical: o("kebab-vertical", 60176),
  key: o("key", 60177),
  law: o("law", 60178),
  lightbulbAutofix: o("lightbulb-autofix", 60179),
  linkExternal: o("link-external", 60180),
  link: o("link", 60181),
  listOrdered: o("list-ordered", 60182),
  listUnordered: o("list-unordered", 60183),
  liveShare: o("live-share", 60184),
  loading: o("loading", 60185),
  location: o("location", 60186),
  mailRead: o("mail-read", 60187),
  mail: o("mail", 60188),
  markdown: o("markdown", 60189),
  megaphone: o("megaphone", 60190),
  mention: o("mention", 60191),
  milestone: o("milestone", 60192),
  gitPullRequestMilestone: o("git-pull-request-milestone", 60192),
  mortarBoard: o("mortar-board", 60193),
  move: o("move", 60194),
  multipleWindows: o("multiple-windows", 60195),
  mute: o("mute", 60196),
  noNewline: o("no-newline", 60197),
  note: o("note", 60198),
  octoface: o("octoface", 60199),
  openPreview: o("open-preview", 60200),
  package: o("package", 60201),
  paintcan: o("paintcan", 60202),
  pin: o("pin", 60203),
  play: o("play", 60204),
  run: o("run", 60204),
  plug: o("plug", 60205),
  preserveCase: o("preserve-case", 60206),
  preview: o("preview", 60207),
  project: o("project", 60208),
  pulse: o("pulse", 60209),
  question: o("question", 60210),
  quote: o("quote", 60211),
  radioTower: o("radio-tower", 60212),
  reactions: o("reactions", 60213),
  references: o("references", 60214),
  refresh: o("refresh", 60215),
  regex: o("regex", 60216),
  remoteExplorer: o("remote-explorer", 60217),
  remote: o("remote", 60218),
  remove: o("remove", 60219),
  replaceAll: o("replace-all", 60220),
  replace: o("replace", 60221),
  repoClone: o("repo-clone", 60222),
  repoForcePush: o("repo-force-push", 60223),
  repoPull: o("repo-pull", 60224),
  repoPush: o("repo-push", 60225),
  report: o("report", 60226),
  requestChanges: o("request-changes", 60227),
  rocket: o("rocket", 60228),
  rootFolderOpened: o("root-folder-opened", 60229),
  rootFolder: o("root-folder", 60230),
  rss: o("rss", 60231),
  ruby: o("ruby", 60232),
  saveAll: o("save-all", 60233),
  saveAs: o("save-as", 60234),
  save: o("save", 60235),
  screenFull: o("screen-full", 60236),
  screenNormal: o("screen-normal", 60237),
  searchStop: o("search-stop", 60238),
  server: o("server", 60240),
  settingsGear: o("settings-gear", 60241),
  settings: o("settings", 60242),
  shield: o("shield", 60243),
  smiley: o("smiley", 60244),
  sortPrecedence: o("sort-precedence", 60245),
  splitHorizontal: o("split-horizontal", 60246),
  splitVertical: o("split-vertical", 60247),
  squirrel: o("squirrel", 60248),
  starFull: o("star-full", 60249),
  starHalf: o("star-half", 60250),
  symbolClass: o("symbol-class", 60251),
  symbolColor: o("symbol-color", 60252),
  symbolConstant: o("symbol-constant", 60253),
  symbolEnumMember: o("symbol-enum-member", 60254),
  symbolField: o("symbol-field", 60255),
  symbolFile: o("symbol-file", 60256),
  symbolInterface: o("symbol-interface", 60257),
  symbolKeyword: o("symbol-keyword", 60258),
  symbolMisc: o("symbol-misc", 60259),
  symbolOperator: o("symbol-operator", 60260),
  symbolProperty: o("symbol-property", 60261),
  wrench: o("wrench", 60261),
  wrenchSubaction: o("wrench-subaction", 60261),
  symbolSnippet: o("symbol-snippet", 60262),
  tasklist: o("tasklist", 60263),
  telescope: o("telescope", 60264),
  textSize: o("text-size", 60265),
  threeBars: o("three-bars", 60266),
  thumbsdown: o("thumbsdown", 60267),
  thumbsup: o("thumbsup", 60268),
  tools: o("tools", 60269),
  triangleDown: o("triangle-down", 60270),
  triangleLeft: o("triangle-left", 60271),
  triangleRight: o("triangle-right", 60272),
  triangleUp: o("triangle-up", 60273),
  twitter: o("twitter", 60274),
  unfold: o("unfold", 60275),
  unlock: o("unlock", 60276),
  unmute: o("unmute", 60277),
  unverified: o("unverified", 60278),
  verified: o("verified", 60279),
  versions: o("versions", 60280),
  vmActive: o("vm-active", 60281),
  vmOutline: o("vm-outline", 60282),
  vmRunning: o("vm-running", 60283),
  watch: o("watch", 60284),
  whitespace: o("whitespace", 60285),
  wholeWord: o("whole-word", 60286),
  window: o("window", 60287),
  wordWrap: o("word-wrap", 60288),
  zoomIn: o("zoom-in", 60289),
  zoomOut: o("zoom-out", 60290),
  listFilter: o("list-filter", 60291),
  listFlat: o("list-flat", 60292),
  listSelection: o("list-selection", 60293),
  selection: o("selection", 60293),
  listTree: o("list-tree", 60294),
  debugBreakpointFunctionUnverified: o("debug-breakpoint-function-unverified", 60295),
  debugBreakpointFunction: o("debug-breakpoint-function", 60296),
  debugBreakpointFunctionDisabled: o("debug-breakpoint-function-disabled", 60296),
  debugStackframeActive: o("debug-stackframe-active", 60297),
  circleSmallFilled: o("circle-small-filled", 60298),
  debugStackframeDot: o("debug-stackframe-dot", 60298),
  terminalDecorationMark: o("terminal-decoration-mark", 60298),
  debugStackframe: o("debug-stackframe", 60299),
  debugStackframeFocused: o("debug-stackframe-focused", 60299),
  debugBreakpointUnsupported: o("debug-breakpoint-unsupported", 60300),
  symbolString: o("symbol-string", 60301),
  debugReverseContinue: o("debug-reverse-continue", 60302),
  debugStepBack: o("debug-step-back", 60303),
  debugRestartFrame: o("debug-restart-frame", 60304),
  debugAlt: o("debug-alt", 60305),
  callIncoming: o("call-incoming", 60306),
  callOutgoing: o("call-outgoing", 60307),
  menu: o("menu", 60308),
  expandAll: o("expand-all", 60309),
  feedback: o("feedback", 60310),
  gitPullRequestReviewer: o("git-pull-request-reviewer", 60310),
  groupByRefType: o("group-by-ref-type", 60311),
  ungroupByRefType: o("ungroup-by-ref-type", 60312),
  account: o("account", 60313),
  gitPullRequestAssignee: o("git-pull-request-assignee", 60313),
  bellDot: o("bell-dot", 60314),
  debugConsole: o("debug-console", 60315),
  library: o("library", 60316),
  output: o("output", 60317),
  runAll: o("run-all", 60318),
  syncIgnored: o("sync-ignored", 60319),
  pinned: o("pinned", 60320),
  githubInverted: o("github-inverted", 60321),
  serverProcess: o("server-process", 60322),
  serverEnvironment: o("server-environment", 60323),
  pass: o("pass", 60324),
  issueClosed: o("issue-closed", 60324),
  stopCircle: o("stop-circle", 60325),
  playCircle: o("play-circle", 60326),
  record: o("record", 60327),
  debugAltSmall: o("debug-alt-small", 60328),
  vmConnect: o("vm-connect", 60329),
  cloud: o("cloud", 60330),
  merge: o("merge", 60331),
  export: o("export", 60332),
  graphLeft: o("graph-left", 60333),
  magnet: o("magnet", 60334),
  notebook: o("notebook", 60335),
  redo: o("redo", 60336),
  checkAll: o("check-all", 60337),
  pinnedDirty: o("pinned-dirty", 60338),
  passFilled: o("pass-filled", 60339),
  circleLargeFilled: o("circle-large-filled", 60340),
  circleLarge: o("circle-large", 60341),
  circleLargeOutline: o("circle-large-outline", 60341),
  combine: o("combine", 60342),
  gather: o("gather", 60342),
  table: o("table", 60343),
  variableGroup: o("variable-group", 60344),
  typeHierarchy: o("type-hierarchy", 60345),
  typeHierarchySub: o("type-hierarchy-sub", 60346),
  typeHierarchySuper: o("type-hierarchy-super", 60347),
  gitPullRequestCreate: o("git-pull-request-create", 60348),
  runAbove: o("run-above", 60349),
  runBelow: o("run-below", 60350),
  notebookTemplate: o("notebook-template", 60351),
  debugRerun: o("debug-rerun", 60352),
  workspaceTrusted: o("workspace-trusted", 60353),
  workspaceUntrusted: o("workspace-untrusted", 60354),
  workspaceUnknown: o("workspace-unknown", 60355),
  terminalCmd: o("terminal-cmd", 60356),
  terminalDebian: o("terminal-debian", 60357),
  terminalLinux: o("terminal-linux", 60358),
  terminalPowershell: o("terminal-powershell", 60359),
  terminalTmux: o("terminal-tmux", 60360),
  terminalUbuntu: o("terminal-ubuntu", 60361),
  terminalBash: o("terminal-bash", 60362),
  arrowSwap: o("arrow-swap", 60363),
  copy: o("copy", 60364),
  personAdd: o("person-add", 60365),
  filterFilled: o("filter-filled", 60366),
  wand: o("wand", 60367),
  debugLineByLine: o("debug-line-by-line", 60368),
  inspect: o("inspect", 60369),
  layers: o("layers", 60370),
  layersDot: o("layers-dot", 60371),
  layersActive: o("layers-active", 60372),
  compass: o("compass", 60373),
  compassDot: o("compass-dot", 60374),
  compassActive: o("compass-active", 60375),
  azure: o("azure", 60376),
  issueDraft: o("issue-draft", 60377),
  gitPullRequestClosed: o("git-pull-request-closed", 60378),
  gitPullRequestDraft: o("git-pull-request-draft", 60379),
  debugAll: o("debug-all", 60380),
  debugCoverage: o("debug-coverage", 60381),
  runErrors: o("run-errors", 60382),
  folderLibrary: o("folder-library", 60383),
  debugContinueSmall: o("debug-continue-small", 60384),
  beakerStop: o("beaker-stop", 60385),
  graphLine: o("graph-line", 60386),
  graphScatter: o("graph-scatter", 60387),
  pieChart: o("pie-chart", 60388),
  bracket: o("bracket", 60175),
  bracketDot: o("bracket-dot", 60389),
  bracketError: o("bracket-error", 60390),
  lockSmall: o("lock-small", 60391),
  azureDevops: o("azure-devops", 60392),
  verifiedFilled: o("verified-filled", 60393),
  newline: o("newline", 60394),
  layout: o("layout", 60395),
  layoutActivitybarLeft: o("layout-activitybar-left", 60396),
  layoutActivitybarRight: o("layout-activitybar-right", 60397),
  layoutPanelLeft: o("layout-panel-left", 60398),
  layoutPanelCenter: o("layout-panel-center", 60399),
  layoutPanelJustify: o("layout-panel-justify", 60400),
  layoutPanelRight: o("layout-panel-right", 60401),
  layoutPanel: o("layout-panel", 60402),
  layoutSidebarLeft: o("layout-sidebar-left", 60403),
  layoutSidebarRight: o("layout-sidebar-right", 60404),
  layoutStatusbar: o("layout-statusbar", 60405),
  layoutMenubar: o("layout-menubar", 60406),
  layoutCentered: o("layout-centered", 60407),
  target: o("target", 60408),
  indent: o("indent", 60409),
  recordSmall: o("record-small", 60410),
  errorSmall: o("error-small", 60411),
  terminalDecorationError: o("terminal-decoration-error", 60411),
  arrowCircleDown: o("arrow-circle-down", 60412),
  arrowCircleLeft: o("arrow-circle-left", 60413),
  arrowCircleRight: o("arrow-circle-right", 60414),
  arrowCircleUp: o("arrow-circle-up", 60415),
  layoutSidebarRightOff: o("layout-sidebar-right-off", 60416),
  layoutPanelOff: o("layout-panel-off", 60417),
  layoutSidebarLeftOff: o("layout-sidebar-left-off", 60418),
  blank: o("blank", 60419),
  heartFilled: o("heart-filled", 60420),
  map: o("map", 60421),
  mapHorizontal: o("map-horizontal", 60421),
  foldHorizontal: o("fold-horizontal", 60421),
  mapFilled: o("map-filled", 60422),
  mapHorizontalFilled: o("map-horizontal-filled", 60422),
  foldHorizontalFilled: o("fold-horizontal-filled", 60422),
  circleSmall: o("circle-small", 60423),
  bellSlash: o("bell-slash", 60424),
  bellSlashDot: o("bell-slash-dot", 60425),
  commentUnresolved: o("comment-unresolved", 60426),
  gitPullRequestGoToChanges: o("git-pull-request-go-to-changes", 60427),
  gitPullRequestNewChanges: o("git-pull-request-new-changes", 60428),
  searchFuzzy: o("search-fuzzy", 60429),
  commentDraft: o("comment-draft", 60430),
  send: o("send", 60431),
  sparkle: o("sparkle", 60432),
  insert: o("insert", 60433),
  mic: o("mic", 60434),
  thumbsdownFilled: o("thumbsdown-filled", 60435),
  thumbsupFilled: o("thumbsup-filled", 60436),
  coffee: o("coffee", 60437),
  snake: o("snake", 60438),
  game: o("game", 60439),
  vr: o("vr", 60440),
  chip: o("chip", 60441),
  piano: o("piano", 60442),
  music: o("music", 60443),
  micFilled: o("mic-filled", 60444),
  repoFetch: o("repo-fetch", 60445),
  copilot: o("copilot", 60446),
  lightbulbSparkle: o("lightbulb-sparkle", 60447),
  robot: o("robot", 60448),
  sparkleFilled: o("sparkle-filled", 60449),
  diffSingle: o("diff-single", 60450),
  diffMultiple: o("diff-multiple", 60451),
  surroundWith: o("surround-with", 60452),
  share: o("share", 60453),
  gitStash: o("git-stash", 60454),
  gitStashApply: o("git-stash-apply", 60455),
  gitStashPop: o("git-stash-pop", 60456),
  vscode: o("vscode", 60457),
  vscodeInsiders: o("vscode-insiders", 60458),
  codeOss: o("code-oss", 60459),
  runCoverage: o("run-coverage", 60460),
  runAllCoverage: o("run-all-coverage", 60461),
  coverage: o("coverage", 60462),
  githubProject: o("github-project", 60463),
  mapVertical: o("map-vertical", 60464),
  foldVertical: o("fold-vertical", 60464),
  mapVerticalFilled: o("map-vertical-filled", 60465),
  foldVerticalFilled: o("fold-vertical-filled", 60465),
  goToSearch: o("go-to-search", 60466),
  percentage: o("percentage", 60467),
  sortPercentage: o("sort-percentage", 60467),
  attach: o("attach", 60468)
}, dl = {
  dialogError: o("dialog-error", "error"),
  dialogWarning: o("dialog-warning", "warning"),
  dialogInfo: o("dialog-info", "info"),
  dialogClose: o("dialog-close", "close"),
  treeItemExpanded: o("tree-item-expanded", "chevron-down"),
  treeFilterOnTypeOn: o("tree-filter-on-type-on", "list-filter"),
  treeFilterOnTypeOff: o("tree-filter-on-type-off", "list-selection"),
  treeFilterClear: o("tree-filter-clear", "close"),
  treeItemLoading: o("tree-item-loading", "loading"),
  menuSelection: o("menu-selection", "check"),
  menuSubmenu: o("menu-submenu", "chevron-right"),
  menuBarMore: o("menubar-more", "more"),
  scrollbarButtonLeft: o("scrollbar-button-left", "triangle-left"),
  scrollbarButtonRight: o("scrollbar-button-right", "triangle-right"),
  scrollbarButtonUp: o("scrollbar-button-up", "triangle-up"),
  scrollbarButtonDown: o("scrollbar-button-down", "triangle-down"),
  toolBarMore: o("toolbar-more", "more"),
  quickInputBack: o("quick-input-back", "arrow-left"),
  dropDownButton: o("drop-down-button", 60084),
  symbolCustomColor: o("symbol-customcolor", 60252),
  exportIcon: o("export", 60332),
  workspaceUnspecified: o("workspace-unspecified", 60355),
  newLine: o("newline", 60394),
  thumbsDownFilled: o("thumbsdown-filled", 60435),
  thumbsUpFilled: o("thumbsup-filled", 60436),
  gitFetch: o("git-fetch", 60445),
  lightbulbSparkleAutofix: o("lightbulb-sparkle-autofix", 60447),
  debugBreakpointPending: o("debug-breakpoint-pending", 60377)
}, T = {
  ...fl,
  ...dl
};
class na {
  constructor() {
    this._tokenizationSupports = /* @__PURE__ */ new Map(), this._factories = /* @__PURE__ */ new Map(), this._onDidChange = new be(), this.onDidChange = this._onDidChange.event, this._colorMap = null;
  }
  handleChange(t) {
    this._onDidChange.fire({
      changedLanguages: t,
      changedColorMap: !1
    });
  }
  register(t, n) {
    return this._tokenizationSupports.set(t, n), this.handleChange([t]), Ct(() => {
      this._tokenizationSupports.get(t) === n && (this._tokenizationSupports.delete(t), this.handleChange([t]));
    });
  }
  get(t) {
    return this._tokenizationSupports.get(t) || null;
  }
  registerFactory(t, n) {
    var r;
    (r = this._factories.get(t)) == null || r.dispose();
    const i = new ml(this, t, n);
    return this._factories.set(t, i), Ct(() => {
      const s = this._factories.get(t);
      !s || s !== i || (this._factories.delete(t), s.dispose());
    });
  }
  async getOrCreate(t) {
    const n = this.get(t);
    if (n)
      return n;
    const i = this._factories.get(t);
    return !i || i.isResolved ? null : (await i.resolve(), this.get(t));
  }
  isResolved(t) {
    if (this.get(t))
      return !0;
    const i = this._factories.get(t);
    return !!(!i || i.isResolved);
  }
  setColorMap(t) {
    this._colorMap = t, this._onDidChange.fire({
      changedLanguages: Array.from(this._tokenizationSupports.keys()),
      changedColorMap: !0
    });
  }
  getColorMap() {
    return this._colorMap;
  }
  getDefaultBackground() {
    return this._colorMap && this._colorMap.length > 2 ? this._colorMap[2] : null;
  }
}
class ml extends mt {
  get isResolved() {
    return this._isResolved;
  }
  constructor(t, n, i) {
    super(), this._registry = t, this._languageId = n, this._factory = i, this._isDisposed = !1, this._resolvePromise = null, this._isResolved = !1;
  }
  dispose() {
    this._isDisposed = !0, super.dispose();
  }
  async resolve() {
    return this._resolvePromise || (this._resolvePromise = this._create()), this._resolvePromise;
  }
  async _create() {
    const t = await this._factory.tokenizationSupport;
    this._isResolved = !0, t && !this._isDisposed && this._register(this._registry.register(this._languageId, t));
  }
}
class gl {
  constructor(t, n, i) {
    this.offset = t, this.type = n, this.language = i, this._tokenBrand = void 0;
  }
  toString() {
    return "(" + this.offset + ", " + this.type + ")";
  }
}
var zi;
(function(e) {
  e[e.Increase = 0] = "Increase", e[e.Decrease = 1] = "Decrease";
})(zi || (zi = {}));
var Hi;
(function(e) {
  const t = /* @__PURE__ */ new Map();
  t.set(0, T.symbolMethod), t.set(1, T.symbolFunction), t.set(2, T.symbolConstructor), t.set(3, T.symbolField), t.set(4, T.symbolVariable), t.set(5, T.symbolClass), t.set(6, T.symbolStruct), t.set(7, T.symbolInterface), t.set(8, T.symbolModule), t.set(9, T.symbolProperty), t.set(10, T.symbolEvent), t.set(11, T.symbolOperator), t.set(12, T.symbolUnit), t.set(13, T.symbolValue), t.set(15, T.symbolEnum), t.set(14, T.symbolConstant), t.set(15, T.symbolEnum), t.set(16, T.symbolEnumMember), t.set(17, T.symbolKeyword), t.set(27, T.symbolSnippet), t.set(18, T.symbolText), t.set(19, T.symbolColor), t.set(20, T.symbolFile), t.set(21, T.symbolReference), t.set(22, T.symbolCustomColor), t.set(23, T.symbolFolder), t.set(24, T.symbolTypeParameter), t.set(25, T.account), t.set(26, T.issues);
  function n(s) {
    let a = t.get(s);
    return a || (console.info("No codicon found for CompletionItemKind " + s), a = T.symbolProperty), a;
  }
  e.toIcon = n;
  const i = /* @__PURE__ */ new Map();
  i.set("method", 0), i.set("function", 1), i.set("constructor", 2), i.set("field", 3), i.set("variable", 4), i.set("class", 5), i.set("struct", 6), i.set("interface", 7), i.set("module", 8), i.set("property", 9), i.set("event", 10), i.set("operator", 11), i.set("unit", 12), i.set("value", 13), i.set("constant", 14), i.set("enum", 15), i.set("enum-member", 16), i.set("enumMember", 16), i.set("keyword", 17), i.set("snippet", 27), i.set("text", 18), i.set("color", 19), i.set("file", 20), i.set("reference", 21), i.set("customcolor", 22), i.set("folder", 23), i.set("type-parameter", 24), i.set("typeParameter", 24), i.set("account", 25), i.set("issue", 26);
  function r(s, a) {
    let l = i.get(s);
    return typeof l > "u" && !a && (l = 9), l;
  }
  e.fromString = r;
})(Hi || (Hi = {}));
var ji;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.Explicit = 1] = "Explicit";
})(ji || (ji = {}));
var Gi;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.PasteAs = 1] = "PasteAs";
})(Gi || (Gi = {}));
var Xi;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.TriggerCharacter = 2] = "TriggerCharacter", e[e.ContentChange = 3] = "ContentChange";
})(Xi || (Xi = {}));
var Qi;
(function(e) {
  e[e.Text = 0] = "Text", e[e.Read = 1] = "Read", e[e.Write = 2] = "Write";
})(Qi || (Qi = {}));
Q(1678, "array"), Q(1679, "boolean"), Q(1680, "class"), Q(1681, "constant"), Q(1682, "constructor"), Q(1683, "enumeration"), Q(1684, "enumeration member"), Q(1685, "event"), Q(1686, "field"), Q(1687, "file"), Q(1688, "function"), Q(1689, "interface"), Q(1690, "key"), Q(1691, "method"), Q(1692, "module"), Q(1693, "namespace"), Q(1694, "null"), Q(1695, "number"), Q(1696, "object"), Q(1697, "operator"), Q(1698, "package"), Q(1699, "property"), Q(1700, "string"), Q(1701, "struct"), Q(1702, "type parameter"), Q(1703, "variable");
var Ji;
(function(e) {
  const t = /* @__PURE__ */ new Map();
  t.set(0, T.symbolFile), t.set(1, T.symbolModule), t.set(2, T.symbolNamespace), t.set(3, T.symbolPackage), t.set(4, T.symbolClass), t.set(5, T.symbolMethod), t.set(6, T.symbolProperty), t.set(7, T.symbolField), t.set(8, T.symbolConstructor), t.set(9, T.symbolEnum), t.set(10, T.symbolInterface), t.set(11, T.symbolFunction), t.set(12, T.symbolVariable), t.set(13, T.symbolConstant), t.set(14, T.symbolString), t.set(15, T.symbolNumber), t.set(16, T.symbolBoolean), t.set(17, T.symbolArray), t.set(18, T.symbolObject), t.set(19, T.symbolKey), t.set(20, T.symbolNull), t.set(21, T.symbolEnumMember), t.set(22, T.symbolStruct), t.set(23, T.symbolEvent), t.set(24, T.symbolOperator), t.set(25, T.symbolTypeParameter);
  function n(i) {
    let r = t.get(i);
    return r || (console.info("No codicon found for SymbolKind " + i), r = T.symbolProperty), r;
  }
  e.toIcon = n;
})(Ji || (Ji = {}));
var ce;
let Tu = (ce = class {
  static fromValue(t) {
    switch (t) {
      case "comment":
        return ce.Comment;
      case "imports":
        return ce.Imports;
      case "region":
        return ce.Region;
    }
    return new ce(t);
  }
  constructor(t) {
    this.value = t;
  }
}, ce.Comment = new ce("comment"), ce.Imports = new ce("imports"), ce.Region = new ce("region"), ce);
var Yi;
(function(e) {
  e[e.AIGenerated = 1] = "AIGenerated";
})(Yi || (Yi = {}));
var Zi;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(Zi || (Zi = {}));
var Ki;
(function(e) {
  function t(n) {
    return !n || typeof n != "object" ? !1 : typeof n.id == "string" && typeof n.title == "string";
  }
  e.is = t;
})(Ki || (Ki = {}));
var er;
(function(e) {
  e[e.Collapsed = 0] = "Collapsed", e[e.Expanded = 1] = "Expanded";
})(er || (er = {}));
var tr;
(function(e) {
  e[e.Unresolved = 0] = "Unresolved", e[e.Resolved = 1] = "Resolved";
})(tr || (tr = {}));
var nr;
(function(e) {
  e[e.Current = 0] = "Current", e[e.Outdated = 1] = "Outdated";
})(nr || (nr = {}));
var ir;
(function(e) {
  e[e.Editing = 0] = "Editing", e[e.Preview = 1] = "Preview";
})(ir || (ir = {}));
var rr;
(function(e) {
  e[e.Type = 1] = "Type", e[e.Parameter = 2] = "Parameter";
})(rr || (rr = {}));
new na();
new na();
var sr;
(function(e) {
  e[e.None = 0] = "None", e[e.Option = 1] = "Option", e[e.Default = 2] = "Default", e[e.Preferred = 3] = "Preferred";
})(sr || (sr = {}));
var ar;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(ar || (ar = {}));
var or;
(function(e) {
  e[e.Unknown = 0] = "Unknown", e[e.Disabled = 1] = "Disabled", e[e.Enabled = 2] = "Enabled";
})(or || (or = {}));
var lr;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.Auto = 2] = "Auto";
})(lr || (lr = {}));
var ur;
(function(e) {
  e[e.None = 0] = "None", e[e.KeepWhitespace = 1] = "KeepWhitespace", e[e.InsertAsSnippet = 4] = "InsertAsSnippet";
})(ur || (ur = {}));
var cr;
(function(e) {
  e[e.Method = 0] = "Method", e[e.Function = 1] = "Function", e[e.Constructor = 2] = "Constructor", e[e.Field = 3] = "Field", e[e.Variable = 4] = "Variable", e[e.Class = 5] = "Class", e[e.Struct = 6] = "Struct", e[e.Interface = 7] = "Interface", e[e.Module = 8] = "Module", e[e.Property = 9] = "Property", e[e.Event = 10] = "Event", e[e.Operator = 11] = "Operator", e[e.Unit = 12] = "Unit", e[e.Value = 13] = "Value", e[e.Constant = 14] = "Constant", e[e.Enum = 15] = "Enum", e[e.EnumMember = 16] = "EnumMember", e[e.Keyword = 17] = "Keyword", e[e.Text = 18] = "Text", e[e.Color = 19] = "Color", e[e.File = 20] = "File", e[e.Reference = 21] = "Reference", e[e.Customcolor = 22] = "Customcolor", e[e.Folder = 23] = "Folder", e[e.TypeParameter = 24] = "TypeParameter", e[e.User = 25] = "User", e[e.Issue = 26] = "Issue", e[e.Snippet = 27] = "Snippet";
})(cr || (cr = {}));
var hr;
(function(e) {
  e[e.Deprecated = 1] = "Deprecated";
})(hr || (hr = {}));
var fr;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.TriggerCharacter = 1] = "TriggerCharacter", e[e.TriggerForIncompleteCompletions = 2] = "TriggerForIncompleteCompletions";
})(fr || (fr = {}));
var dr;
(function(e) {
  e[e.EXACT = 0] = "EXACT", e[e.ABOVE = 1] = "ABOVE", e[e.BELOW = 2] = "BELOW";
})(dr || (dr = {}));
var mr;
(function(e) {
  e[e.NotSet = 0] = "NotSet", e[e.ContentFlush = 1] = "ContentFlush", e[e.RecoverFromMarkers = 2] = "RecoverFromMarkers", e[e.Explicit = 3] = "Explicit", e[e.Paste = 4] = "Paste", e[e.Undo = 5] = "Undo", e[e.Redo = 6] = "Redo";
})(mr || (mr = {}));
var gr;
(function(e) {
  e[e.LF = 1] = "LF", e[e.CRLF = 2] = "CRLF";
})(gr || (gr = {}));
var br;
(function(e) {
  e[e.Text = 0] = "Text", e[e.Read = 1] = "Read", e[e.Write = 2] = "Write";
})(br || (br = {}));
var pr;
(function(e) {
  e[e.None = 0] = "None", e[e.Keep = 1] = "Keep", e[e.Brackets = 2] = "Brackets", e[e.Advanced = 3] = "Advanced", e[e.Full = 4] = "Full";
})(pr || (pr = {}));
var vr;
(function(e) {
  e[e.acceptSuggestionOnCommitCharacter = 0] = "acceptSuggestionOnCommitCharacter", e[e.acceptSuggestionOnEnter = 1] = "acceptSuggestionOnEnter", e[e.accessibilitySupport = 2] = "accessibilitySupport", e[e.accessibilityPageSize = 3] = "accessibilityPageSize", e[e.ariaLabel = 4] = "ariaLabel", e[e.ariaRequired = 5] = "ariaRequired", e[e.autoClosingBrackets = 6] = "autoClosingBrackets", e[e.autoClosingComments = 7] = "autoClosingComments", e[e.screenReaderAnnounceInlineSuggestion = 8] = "screenReaderAnnounceInlineSuggestion", e[e.autoClosingDelete = 9] = "autoClosingDelete", e[e.autoClosingOvertype = 10] = "autoClosingOvertype", e[e.autoClosingQuotes = 11] = "autoClosingQuotes", e[e.autoIndent = 12] = "autoIndent", e[e.automaticLayout = 13] = "automaticLayout", e[e.autoSurround = 14] = "autoSurround", e[e.bracketPairColorization = 15] = "bracketPairColorization", e[e.guides = 16] = "guides", e[e.codeLens = 17] = "codeLens", e[e.codeLensFontFamily = 18] = "codeLensFontFamily", e[e.codeLensFontSize = 19] = "codeLensFontSize", e[e.colorDecorators = 20] = "colorDecorators", e[e.colorDecoratorsLimit = 21] = "colorDecoratorsLimit", e[e.columnSelection = 22] = "columnSelection", e[e.comments = 23] = "comments", e[e.contextmenu = 24] = "contextmenu", e[e.copyWithSyntaxHighlighting = 25] = "copyWithSyntaxHighlighting", e[e.cursorBlinking = 26] = "cursorBlinking", e[e.cursorSmoothCaretAnimation = 27] = "cursorSmoothCaretAnimation", e[e.cursorStyle = 28] = "cursorStyle", e[e.cursorSurroundingLines = 29] = "cursorSurroundingLines", e[e.cursorSurroundingLinesStyle = 30] = "cursorSurroundingLinesStyle", e[e.cursorWidth = 31] = "cursorWidth", e[e.disableLayerHinting = 32] = "disableLayerHinting", e[e.disableMonospaceOptimizations = 33] = "disableMonospaceOptimizations", e[e.domReadOnly = 34] = "domReadOnly", e[e.dragAndDrop = 35] = "dragAndDrop", e[e.dropIntoEditor = 36] = "dropIntoEditor", e[e.experimentalEditContextEnabled = 37] = "experimentalEditContextEnabled", e[e.emptySelectionClipboard = 38] = "emptySelectionClipboard", e[e.experimentalGpuAcceleration = 39] = "experimentalGpuAcceleration", e[e.experimentalWhitespaceRendering = 40] = "experimentalWhitespaceRendering", e[e.extraEditorClassName = 41] = "extraEditorClassName", e[e.fastScrollSensitivity = 42] = "fastScrollSensitivity", e[e.find = 43] = "find", e[e.fixedOverflowWidgets = 44] = "fixedOverflowWidgets", e[e.folding = 45] = "folding", e[e.foldingStrategy = 46] = "foldingStrategy", e[e.foldingHighlight = 47] = "foldingHighlight", e[e.foldingImportsByDefault = 48] = "foldingImportsByDefault", e[e.foldingMaximumRegions = 49] = "foldingMaximumRegions", e[e.unfoldOnClickAfterEndOfLine = 50] = "unfoldOnClickAfterEndOfLine", e[e.fontFamily = 51] = "fontFamily", e[e.fontInfo = 52] = "fontInfo", e[e.fontLigatures = 53] = "fontLigatures", e[e.fontSize = 54] = "fontSize", e[e.fontWeight = 55] = "fontWeight", e[e.fontVariations = 56] = "fontVariations", e[e.formatOnPaste = 57] = "formatOnPaste", e[e.formatOnType = 58] = "formatOnType", e[e.glyphMargin = 59] = "glyphMargin", e[e.gotoLocation = 60] = "gotoLocation", e[e.hideCursorInOverviewRuler = 61] = "hideCursorInOverviewRuler", e[e.hover = 62] = "hover", e[e.inDiffEditor = 63] = "inDiffEditor", e[e.inlineSuggest = 64] = "inlineSuggest", e[e.inlineEdit = 65] = "inlineEdit", e[e.letterSpacing = 66] = "letterSpacing", e[e.lightbulb = 67] = "lightbulb", e[e.lineDecorationsWidth = 68] = "lineDecorationsWidth", e[e.lineHeight = 69] = "lineHeight", e[e.lineNumbers = 70] = "lineNumbers", e[e.lineNumbersMinChars = 71] = "lineNumbersMinChars", e[e.linkedEditing = 72] = "linkedEditing", e[e.links = 73] = "links", e[e.matchBrackets = 74] = "matchBrackets", e[e.minimap = 75] = "minimap", e[e.mouseStyle = 76] = "mouseStyle", e[e.mouseWheelScrollSensitivity = 77] = "mouseWheelScrollSensitivity", e[e.mouseWheelZoom = 78] = "mouseWheelZoom", e[e.multiCursorMergeOverlapping = 79] = "multiCursorMergeOverlapping", e[e.multiCursorModifier = 80] = "multiCursorModifier", e[e.multiCursorPaste = 81] = "multiCursorPaste", e[e.multiCursorLimit = 82] = "multiCursorLimit", e[e.occurrencesHighlight = 83] = "occurrencesHighlight", e[e.overviewRulerBorder = 84] = "overviewRulerBorder", e[e.overviewRulerLanes = 85] = "overviewRulerLanes", e[e.padding = 86] = "padding", e[e.pasteAs = 87] = "pasteAs", e[e.parameterHints = 88] = "parameterHints", e[e.peekWidgetDefaultFocus = 89] = "peekWidgetDefaultFocus", e[e.placeholder = 90] = "placeholder", e[e.definitionLinkOpensInPeek = 91] = "definitionLinkOpensInPeek", e[e.quickSuggestions = 92] = "quickSuggestions", e[e.quickSuggestionsDelay = 93] = "quickSuggestionsDelay", e[e.readOnly = 94] = "readOnly", e[e.readOnlyMessage = 95] = "readOnlyMessage", e[e.renameOnType = 96] = "renameOnType", e[e.renderControlCharacters = 97] = "renderControlCharacters", e[e.renderFinalNewline = 98] = "renderFinalNewline", e[e.renderLineHighlight = 99] = "renderLineHighlight", e[e.renderLineHighlightOnlyWhenFocus = 100] = "renderLineHighlightOnlyWhenFocus", e[e.renderValidationDecorations = 101] = "renderValidationDecorations", e[e.renderWhitespace = 102] = "renderWhitespace", e[e.revealHorizontalRightPadding = 103] = "revealHorizontalRightPadding", e[e.roundedSelection = 104] = "roundedSelection", e[e.rulers = 105] = "rulers", e[e.scrollbar = 106] = "scrollbar", e[e.scrollBeyondLastColumn = 107] = "scrollBeyondLastColumn", e[e.scrollBeyondLastLine = 108] = "scrollBeyondLastLine", e[e.scrollPredominantAxis = 109] = "scrollPredominantAxis", e[e.selectionClipboard = 110] = "selectionClipboard", e[e.selectionHighlight = 111] = "selectionHighlight", e[e.selectOnLineNumbers = 112] = "selectOnLineNumbers", e[e.showFoldingControls = 113] = "showFoldingControls", e[e.showUnused = 114] = "showUnused", e[e.snippetSuggestions = 115] = "snippetSuggestions", e[e.smartSelect = 116] = "smartSelect", e[e.smoothScrolling = 117] = "smoothScrolling", e[e.stickyScroll = 118] = "stickyScroll", e[e.stickyTabStops = 119] = "stickyTabStops", e[e.stopRenderingLineAfter = 120] = "stopRenderingLineAfter", e[e.suggest = 121] = "suggest", e[e.suggestFontSize = 122] = "suggestFontSize", e[e.suggestLineHeight = 123] = "suggestLineHeight", e[e.suggestOnTriggerCharacters = 124] = "suggestOnTriggerCharacters", e[e.suggestSelection = 125] = "suggestSelection", e[e.tabCompletion = 126] = "tabCompletion", e[e.tabIndex = 127] = "tabIndex", e[e.unicodeHighlighting = 128] = "unicodeHighlighting", e[e.unusualLineTerminators = 129] = "unusualLineTerminators", e[e.useShadowDOM = 130] = "useShadowDOM", e[e.useTabStops = 131] = "useTabStops", e[e.wordBreak = 132] = "wordBreak", e[e.wordSegmenterLocales = 133] = "wordSegmenterLocales", e[e.wordSeparators = 134] = "wordSeparators", e[e.wordWrap = 135] = "wordWrap", e[e.wordWrapBreakAfterCharacters = 136] = "wordWrapBreakAfterCharacters", e[e.wordWrapBreakBeforeCharacters = 137] = "wordWrapBreakBeforeCharacters", e[e.wordWrapColumn = 138] = "wordWrapColumn", e[e.wordWrapOverride1 = 139] = "wordWrapOverride1", e[e.wordWrapOverride2 = 140] = "wordWrapOverride2", e[e.wrappingIndent = 141] = "wrappingIndent", e[e.wrappingStrategy = 142] = "wrappingStrategy", e[e.showDeprecated = 143] = "showDeprecated", e[e.inlayHints = 144] = "inlayHints", e[e.editorClassName = 145] = "editorClassName", e[e.pixelRatio = 146] = "pixelRatio", e[e.tabFocusMode = 147] = "tabFocusMode", e[e.layoutInfo = 148] = "layoutInfo", e[e.wrappingInfo = 149] = "wrappingInfo", e[e.defaultColorDecorators = 150] = "defaultColorDecorators", e[e.colorDecoratorsActivatedOn = 151] = "colorDecoratorsActivatedOn", e[e.inlineCompletionsAccessibilityVerbose = 152] = "inlineCompletionsAccessibilityVerbose";
})(vr || (vr = {}));
var xr;
(function(e) {
  e[e.TextDefined = 0] = "TextDefined", e[e.LF = 1] = "LF", e[e.CRLF = 2] = "CRLF";
})(xr || (xr = {}));
var wr;
(function(e) {
  e[e.LF = 0] = "LF", e[e.CRLF = 1] = "CRLF";
})(wr || (wr = {}));
var _r;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right";
})(_r || (_r = {}));
var Lr;
(function(e) {
  e[e.Increase = 0] = "Increase", e[e.Decrease = 1] = "Decrease";
})(Lr || (Lr = {}));
var Nr;
(function(e) {
  e[e.None = 0] = "None", e[e.Indent = 1] = "Indent", e[e.IndentOutdent = 2] = "IndentOutdent", e[e.Outdent = 3] = "Outdent";
})(Nr || (Nr = {}));
var yr;
(function(e) {
  e[e.Both = 0] = "Both", e[e.Right = 1] = "Right", e[e.Left = 2] = "Left", e[e.None = 3] = "None";
})(yr || (yr = {}));
var Ar;
(function(e) {
  e[e.Type = 1] = "Type", e[e.Parameter = 2] = "Parameter";
})(Ar || (Ar = {}));
var Rr;
(function(e) {
  e[e.Automatic = 0] = "Automatic", e[e.Explicit = 1] = "Explicit";
})(Rr || (Rr = {}));
var Sr;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(Sr || (Sr = {}));
var Wn;
(function(e) {
  e[e.DependsOnKbLayout = -1] = "DependsOnKbLayout", e[e.Unknown = 0] = "Unknown", e[e.Backspace = 1] = "Backspace", e[e.Tab = 2] = "Tab", e[e.Enter = 3] = "Enter", e[e.Shift = 4] = "Shift", e[e.Ctrl = 5] = "Ctrl", e[e.Alt = 6] = "Alt", e[e.PauseBreak = 7] = "PauseBreak", e[e.CapsLock = 8] = "CapsLock", e[e.Escape = 9] = "Escape", e[e.Space = 10] = "Space", e[e.PageUp = 11] = "PageUp", e[e.PageDown = 12] = "PageDown", e[e.End = 13] = "End", e[e.Home = 14] = "Home", e[e.LeftArrow = 15] = "LeftArrow", e[e.UpArrow = 16] = "UpArrow", e[e.RightArrow = 17] = "RightArrow", e[e.DownArrow = 18] = "DownArrow", e[e.Insert = 19] = "Insert", e[e.Delete = 20] = "Delete", e[e.Digit0 = 21] = "Digit0", e[e.Digit1 = 22] = "Digit1", e[e.Digit2 = 23] = "Digit2", e[e.Digit3 = 24] = "Digit3", e[e.Digit4 = 25] = "Digit4", e[e.Digit5 = 26] = "Digit5", e[e.Digit6 = 27] = "Digit6", e[e.Digit7 = 28] = "Digit7", e[e.Digit8 = 29] = "Digit8", e[e.Digit9 = 30] = "Digit9", e[e.KeyA = 31] = "KeyA", e[e.KeyB = 32] = "KeyB", e[e.KeyC = 33] = "KeyC", e[e.KeyD = 34] = "KeyD", e[e.KeyE = 35] = "KeyE", e[e.KeyF = 36] = "KeyF", e[e.KeyG = 37] = "KeyG", e[e.KeyH = 38] = "KeyH", e[e.KeyI = 39] = "KeyI", e[e.KeyJ = 40] = "KeyJ", e[e.KeyK = 41] = "KeyK", e[e.KeyL = 42] = "KeyL", e[e.KeyM = 43] = "KeyM", e[e.KeyN = 44] = "KeyN", e[e.KeyO = 45] = "KeyO", e[e.KeyP = 46] = "KeyP", e[e.KeyQ = 47] = "KeyQ", e[e.KeyR = 48] = "KeyR", e[e.KeyS = 49] = "KeyS", e[e.KeyT = 50] = "KeyT", e[e.KeyU = 51] = "KeyU", e[e.KeyV = 52] = "KeyV", e[e.KeyW = 53] = "KeyW", e[e.KeyX = 54] = "KeyX", e[e.KeyY = 55] = "KeyY", e[e.KeyZ = 56] = "KeyZ", e[e.Meta = 57] = "Meta", e[e.ContextMenu = 58] = "ContextMenu", e[e.F1 = 59] = "F1", e[e.F2 = 60] = "F2", e[e.F3 = 61] = "F3", e[e.F4 = 62] = "F4", e[e.F5 = 63] = "F5", e[e.F6 = 64] = "F6", e[e.F7 = 65] = "F7", e[e.F8 = 66] = "F8", e[e.F9 = 67] = "F9", e[e.F10 = 68] = "F10", e[e.F11 = 69] = "F11", e[e.F12 = 70] = "F12", e[e.F13 = 71] = "F13", e[e.F14 = 72] = "F14", e[e.F15 = 73] = "F15", e[e.F16 = 74] = "F16", e[e.F17 = 75] = "F17", e[e.F18 = 76] = "F18", e[e.F19 = 77] = "F19", e[e.F20 = 78] = "F20", e[e.F21 = 79] = "F21", e[e.F22 = 80] = "F22", e[e.F23 = 81] = "F23", e[e.F24 = 82] = "F24", e[e.NumLock = 83] = "NumLock", e[e.ScrollLock = 84] = "ScrollLock", e[e.Semicolon = 85] = "Semicolon", e[e.Equal = 86] = "Equal", e[e.Comma = 87] = "Comma", e[e.Minus = 88] = "Minus", e[e.Period = 89] = "Period", e[e.Slash = 90] = "Slash", e[e.Backquote = 91] = "Backquote", e[e.BracketLeft = 92] = "BracketLeft", e[e.Backslash = 93] = "Backslash", e[e.BracketRight = 94] = "BracketRight", e[e.Quote = 95] = "Quote", e[e.OEM_8 = 96] = "OEM_8", e[e.IntlBackslash = 97] = "IntlBackslash", e[e.Numpad0 = 98] = "Numpad0", e[e.Numpad1 = 99] = "Numpad1", e[e.Numpad2 = 100] = "Numpad2", e[e.Numpad3 = 101] = "Numpad3", e[e.Numpad4 = 102] = "Numpad4", e[e.Numpad5 = 103] = "Numpad5", e[e.Numpad6 = 104] = "Numpad6", e[e.Numpad7 = 105] = "Numpad7", e[e.Numpad8 = 106] = "Numpad8", e[e.Numpad9 = 107] = "Numpad9", e[e.NumpadMultiply = 108] = "NumpadMultiply", e[e.NumpadAdd = 109] = "NumpadAdd", e[e.NUMPAD_SEPARATOR = 110] = "NUMPAD_SEPARATOR", e[e.NumpadSubtract = 111] = "NumpadSubtract", e[e.NumpadDecimal = 112] = "NumpadDecimal", e[e.NumpadDivide = 113] = "NumpadDivide", e[e.KEY_IN_COMPOSITION = 114] = "KEY_IN_COMPOSITION", e[e.ABNT_C1 = 115] = "ABNT_C1", e[e.ABNT_C2 = 116] = "ABNT_C2", e[e.AudioVolumeMute = 117] = "AudioVolumeMute", e[e.AudioVolumeUp = 118] = "AudioVolumeUp", e[e.AudioVolumeDown = 119] = "AudioVolumeDown", e[e.BrowserSearch = 120] = "BrowserSearch", e[e.BrowserHome = 121] = "BrowserHome", e[e.BrowserBack = 122] = "BrowserBack", e[e.BrowserForward = 123] = "BrowserForward", e[e.MediaTrackNext = 124] = "MediaTrackNext", e[e.MediaTrackPrevious = 125] = "MediaTrackPrevious", e[e.MediaStop = 126] = "MediaStop", e[e.MediaPlayPause = 127] = "MediaPlayPause", e[e.LaunchMediaPlayer = 128] = "LaunchMediaPlayer", e[e.LaunchMail = 129] = "LaunchMail", e[e.LaunchApp2 = 130] = "LaunchApp2", e[e.Clear = 131] = "Clear", e[e.MAX_VALUE = 132] = "MAX_VALUE";
})(Wn || (Wn = {}));
var zn;
(function(e) {
  e[e.Hint = 1] = "Hint", e[e.Info = 2] = "Info", e[e.Warning = 4] = "Warning", e[e.Error = 8] = "Error";
})(zn || (zn = {}));
var Hn;
(function(e) {
  e[e.Unnecessary = 1] = "Unnecessary", e[e.Deprecated = 2] = "Deprecated";
})(Hn || (Hn = {}));
var Er;
(function(e) {
  e[e.Inline = 1] = "Inline", e[e.Gutter = 2] = "Gutter";
})(Er || (Er = {}));
var Mr;
(function(e) {
  e[e.Normal = 1] = "Normal", e[e.Underlined = 2] = "Underlined";
})(Mr || (Mr = {}));
var kr;
(function(e) {
  e[e.UNKNOWN = 0] = "UNKNOWN", e[e.TEXTAREA = 1] = "TEXTAREA", e[e.GUTTER_GLYPH_MARGIN = 2] = "GUTTER_GLYPH_MARGIN", e[e.GUTTER_LINE_NUMBERS = 3] = "GUTTER_LINE_NUMBERS", e[e.GUTTER_LINE_DECORATIONS = 4] = "GUTTER_LINE_DECORATIONS", e[e.GUTTER_VIEW_ZONE = 5] = "GUTTER_VIEW_ZONE", e[e.CONTENT_TEXT = 6] = "CONTENT_TEXT", e[e.CONTENT_EMPTY = 7] = "CONTENT_EMPTY", e[e.CONTENT_VIEW_ZONE = 8] = "CONTENT_VIEW_ZONE", e[e.CONTENT_WIDGET = 9] = "CONTENT_WIDGET", e[e.OVERVIEW_RULER = 10] = "OVERVIEW_RULER", e[e.SCROLLBAR = 11] = "SCROLLBAR", e[e.OVERLAY_WIDGET = 12] = "OVERLAY_WIDGET", e[e.OUTSIDE_EDITOR = 13] = "OUTSIDE_EDITOR";
})(kr || (kr = {}));
var Cr;
(function(e) {
  e[e.AIGenerated = 1] = "AIGenerated";
})(Cr || (Cr = {}));
var Pr;
(function(e) {
  e[e.Invoke = 0] = "Invoke", e[e.Automatic = 1] = "Automatic";
})(Pr || (Pr = {}));
var Ir;
(function(e) {
  e[e.TOP_RIGHT_CORNER = 0] = "TOP_RIGHT_CORNER", e[e.BOTTOM_RIGHT_CORNER = 1] = "BOTTOM_RIGHT_CORNER", e[e.TOP_CENTER = 2] = "TOP_CENTER";
})(Ir || (Ir = {}));
var Tr;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 4] = "Right", e[e.Full = 7] = "Full";
})(Tr || (Tr = {}));
var Fr;
(function(e) {
  e[e.Word = 0] = "Word", e[e.Line = 1] = "Line", e[e.Suggest = 2] = "Suggest";
})(Fr || (Fr = {}));
var Dr;
(function(e) {
  e[e.Left = 0] = "Left", e[e.Right = 1] = "Right", e[e.None = 2] = "None", e[e.LeftOfInjectedText = 3] = "LeftOfInjectedText", e[e.RightOfInjectedText = 4] = "RightOfInjectedText";
})(Dr || (Dr = {}));
var Br;
(function(e) {
  e[e.Off = 0] = "Off", e[e.On = 1] = "On", e[e.Relative = 2] = "Relative", e[e.Interval = 3] = "Interval", e[e.Custom = 4] = "Custom";
})(Br || (Br = {}));
var Ur;
(function(e) {
  e[e.None = 0] = "None", e[e.Text = 1] = "Text", e[e.Blocks = 2] = "Blocks";
})(Ur || (Ur = {}));
var Vr;
(function(e) {
  e[e.Smooth = 0] = "Smooth", e[e.Immediate = 1] = "Immediate";
})(Vr || (Vr = {}));
var qr;
(function(e) {
  e[e.Auto = 1] = "Auto", e[e.Hidden = 2] = "Hidden", e[e.Visible = 3] = "Visible";
})(qr || (qr = {}));
var jn;
(function(e) {
  e[e.LTR = 0] = "LTR", e[e.RTL = 1] = "RTL";
})(jn || (jn = {}));
var $r;
(function(e) {
  e.Off = "off", e.OnCode = "onCode", e.On = "on";
})($r || ($r = {}));
var Or;
(function(e) {
  e[e.Invoke = 1] = "Invoke", e[e.TriggerCharacter = 2] = "TriggerCharacter", e[e.ContentChange = 3] = "ContentChange";
})(Or || (Or = {}));
var Wr;
(function(e) {
  e[e.File = 0] = "File", e[e.Module = 1] = "Module", e[e.Namespace = 2] = "Namespace", e[e.Package = 3] = "Package", e[e.Class = 4] = "Class", e[e.Method = 5] = "Method", e[e.Property = 6] = "Property", e[e.Field = 7] = "Field", e[e.Constructor = 8] = "Constructor", e[e.Enum = 9] = "Enum", e[e.Interface = 10] = "Interface", e[e.Function = 11] = "Function", e[e.Variable = 12] = "Variable", e[e.Constant = 13] = "Constant", e[e.String = 14] = "String", e[e.Number = 15] = "Number", e[e.Boolean = 16] = "Boolean", e[e.Array = 17] = "Array", e[e.Object = 18] = "Object", e[e.Key = 19] = "Key", e[e.Null = 20] = "Null", e[e.EnumMember = 21] = "EnumMember", e[e.Struct = 22] = "Struct", e[e.Event = 23] = "Event", e[e.Operator = 24] = "Operator", e[e.TypeParameter = 25] = "TypeParameter";
})(Wr || (Wr = {}));
var zr;
(function(e) {
  e[e.Deprecated = 1] = "Deprecated";
})(zr || (zr = {}));
var Hr;
(function(e) {
  e[e.Hidden = 0] = "Hidden", e[e.Blink = 1] = "Blink", e[e.Smooth = 2] = "Smooth", e[e.Phase = 3] = "Phase", e[e.Expand = 4] = "Expand", e[e.Solid = 5] = "Solid";
})(Hr || (Hr = {}));
var jr;
(function(e) {
  e[e.Line = 1] = "Line", e[e.Block = 2] = "Block", e[e.Underline = 3] = "Underline", e[e.LineThin = 4] = "LineThin", e[e.BlockOutline = 5] = "BlockOutline", e[e.UnderlineThin = 6] = "UnderlineThin";
})(jr || (jr = {}));
var Gr;
(function(e) {
  e[e.AlwaysGrowsWhenTypingAtEdges = 0] = "AlwaysGrowsWhenTypingAtEdges", e[e.NeverGrowsWhenTypingAtEdges = 1] = "NeverGrowsWhenTypingAtEdges", e[e.GrowsOnlyWhenTypingBefore = 2] = "GrowsOnlyWhenTypingBefore", e[e.GrowsOnlyWhenTypingAfter = 3] = "GrowsOnlyWhenTypingAfter";
})(Gr || (Gr = {}));
var Xr;
(function(e) {
  e[e.None = 0] = "None", e[e.Same = 1] = "Same", e[e.Indent = 2] = "Indent", e[e.DeepIndent = 3] = "DeepIndent";
})(Xr || (Xr = {}));
const lt = class lt {
  static chord(t, n) {
    return $o(t, n);
  }
};
lt.CtrlCmd = 2048, lt.Shift = 1024, lt.Alt = 512, lt.WinCtrl = 256;
let Gn = lt;
function bl() {
  return {
    editor: void 0,
    languages: void 0,
    CancellationTokenSource: ao,
    Emitter: be,
    KeyCode: Wn,
    KeyMod: Gn,
    Position: j,
    Range: U,
    Selection: ge,
    SelectionDirection: jn,
    MarkerSeverity: zn,
    MarkerTag: Hn,
    Uri: me,
    Token: gl
  };
}
const Mt = class Mt {
  static getChannel(t) {
    return t.getChannel(Mt.CHANNEL_NAME);
  }
  static setChannel(t, n) {
    t.setChannel(Mt.CHANNEL_NAME, n);
  }
};
Mt.CHANNEL_NAME = "editorWorkerHost";
let Xn = Mt;
new Ba(10);
function pl(e) {
  let t = [];
  for (; Object.prototype !== e; )
    t = t.concat(Object.getOwnPropertyNames(e)), e = Object.getPrototypeOf(e);
  return t;
}
function vl(e) {
  const t = [];
  for (const n of pl(e))
    typeof e[n] == "function" && t.push(n);
  return t;
}
function xl(e, t) {
  const n = (r) => function() {
    const s = Array.prototype.slice.call(arguments, 0);
    return t(r, s);
  }, i = {};
  for (const r of e)
    i[r] = n(r);
  return i;
}
var Qr;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 4] = "Right", e[e.Full = 7] = "Full";
})(Qr || (Qr = {}));
var Jr;
(function(e) {
  e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right";
})(Jr || (Jr = {}));
var Yr;
(function(e) {
  e[e.Both = 0] = "Both", e[e.Right = 1] = "Right", e[e.Left = 2] = "Left", e[e.None = 3] = "None";
})(Yr || (Yr = {}));
function wl(e, t, n, i, r) {
  if (i === 0)
    return !0;
  const s = t.charCodeAt(i - 1);
  if (e.get(s) !== 0 || s === 13 || s === 10)
    return !0;
  if (r > 0) {
    const a = t.charCodeAt(i);
    if (e.get(a) !== 0)
      return !0;
  }
  return !1;
}
function _l(e, t, n, i, r) {
  if (i + r === n)
    return !0;
  const s = t.charCodeAt(i + r);
  if (e.get(s) !== 0 || s === 13 || s === 10)
    return !0;
  if (r > 0) {
    const a = t.charCodeAt(i + r - 1);
    if (e.get(a) !== 0)
      return !0;
  }
  return !1;
}
function Ll(e, t, n, i, r) {
  return wl(e, t, n, i, r) && _l(e, t, n, i, r);
}
class Nl {
  constructor(t, n) {
    this._wordSeparators = t, this._searchRegex = n, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  reset(t) {
    this._searchRegex.lastIndex = t, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  next(t) {
    const n = t.length;
    let i;
    do {
      if (this._prevMatchStartIndex + this._prevMatchLength === n || (i = this._searchRegex.exec(t), !i))
        return null;
      const r = i.index, s = i[0].length;
      if (r === this._prevMatchStartIndex && s === this._prevMatchLength) {
        if (s === 0) {
          wo(t, n, this._searchRegex.lastIndex) > 65535 ? this._searchRegex.lastIndex += 2 : this._searchRegex.lastIndex += 1;
          continue;
        }
        return null;
      }
      if (this._prevMatchStartIndex = r, this._prevMatchLength = s, !this._wordSeparators || Ll(this._wordSeparators, t, n, r, s))
        return i;
    } while (i);
    return null;
  }
}
function yl(e, t = "Unreachable") {
  throw new Error(t);
}
function Al(e, t = "unexpected state") {
  if (!e)
    throw new le(`Assertion Failed: ${t}`);
}
function Tt(e) {
  if (!e()) {
    debugger;
    e(), yt(new le("Assertion Failed"));
  }
}
function xi(e, t) {
  let n = 0;
  for (; n < e.length - 1; ) {
    const i = e[n], r = e[n + 1];
    if (!t(i, r))
      return !1;
    n++;
  }
  return !0;
}
const Rl = "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";
function Sl(e = "") {
  let t = "(-?\\d*\\.\\d\\w*)|([^";
  for (const n of Rl)
    e.indexOf(n) >= 0 || (t += "\\" + n);
  return t += "\\s]+)", new RegExp(t, "g");
}
const ia = Sl();
function ra(e) {
  let t = ia;
  if (e && e instanceof RegExp)
    if (e.global)
      t = e;
    else {
      let n = "g";
      e.ignoreCase && (n += "i"), e.multiline && (n += "m"), e.unicode && (n += "u"), t = new RegExp(e.source, n);
    }
  return t.lastIndex = 0, t;
}
const sa = new Va();
sa.unshift({
  maxLen: 1e3,
  windowSize: 15,
  timeBudget: 150
});
function wi(e, t, n, i, r) {
  if (t = ra(t), r || (r = Yt.first(sa)), n.length > r.maxLen) {
    let c = e - r.maxLen / 2;
    return c < 0 ? c = 0 : i += c, n = n.substring(c, e + r.maxLen / 2), wi(e, t, n, i, r);
  }
  const s = Date.now(), a = e - 1 - i;
  let l = -1, u = null;
  for (let c = 1; !(Date.now() - s >= r.timeBudget); c++) {
    const h = a - r.windowSize * c;
    t.lastIndex = Math.max(0, h);
    const f = El(t, n, a, l);
    if (!f && u || (u = f, h <= 0))
      break;
    l = h;
  }
  if (u) {
    const c = {
      word: u[0],
      startColumn: i + 1 + u.index,
      endColumn: i + 1 + u.index + u[0].length
    };
    return t.lastIndex = 0, c;
  }
  return null;
}
function El(e, t, n, i) {
  let r;
  for (; r = e.exec(t); ) {
    const s = r.index || 0;
    if (s <= n && e.lastIndex >= n)
      return r;
    if (i > 0 && s > i)
      return null;
  }
  return null;
}
class Ml {
  static computeUnicodeHighlights(t, n, i) {
    const r = i ? i.startLineNumber : 1, s = i ? i.endLineNumber : t.getLineCount(), a = new Zr(n), l = a.getCandidateCodePoints();
    let u;
    l === "allNonBasicAscii" ? u = new RegExp("[^\\t\\n\\r\\x20-\\x7E]", "g") : u = new RegExp(`${kl(Array.from(l))}`, "g");
    const c = new Nl(null, u), h = [];
    let f = !1, m, d = 0, g = 0, b = 0;
    e: for (let _ = r, L = s; _ <= L; _++) {
      const A = t.getLineContent(_), M = A.length;
      c.reset(0);
      do
        if (m = c.next(A), m) {
          let N = m.index, y = m.index + m[0].length;
          if (N > 0) {
            const O = A.charCodeAt(N - 1);
            Bn(O) && N--;
          }
          if (y + 1 < M) {
            const O = A.charCodeAt(y - 1);
            Bn(O) && y++;
          }
          const C = A.substring(N, y);
          let P = wi(N + 1, ia, A, 0);
          P && P.endColumn <= N + 1 && (P = null);
          const I = a.shouldHighlightNonBasicASCII(C, P ? P.word : null);
          if (I !== 0) {
            if (I === 3 ? d++ : I === 2 ? g++ : I === 1 ? b++ : yl(), h.length >= 1e3) {
              f = !0;
              break e;
            }
            h.push(new U(_, N + 1, _, y + 1));
          }
        }
      while (m);
    }
    return {
      ranges: h,
      hasMore: f,
      ambiguousCharacterCount: d,
      invisibleCharacterCount: g,
      nonBasicAsciiCharacterCount: b
    };
  }
  static computeUnicodeHighlightReason(t, n) {
    const i = new Zr(n);
    switch (i.shouldHighlightNonBasicASCII(t, null)) {
      case 0:
        return null;
      case 2:
        return { kind: 1 };
      case 3: {
        const s = t.codePointAt(0), a = i.ambiguousCharacters.getPrimaryConfusable(s), l = It.getLocales().filter((u) => !It.getInstance(/* @__PURE__ */ new Set([...n.allowedLocales, u])).isAmbiguous(s));
        return { kind: 0, confusableWith: String.fromCodePoint(a), notAmbiguousInLocales: l };
      }
      case 1:
        return { kind: 2 };
    }
  }
}
function kl(e, t) {
  return `[${uo(e.map((i) => String.fromCodePoint(i)).join(""))}]`;
}
class Zr {
  constructor(t) {
    this.options = t, this.allowedCodePoints = new Set(t.allowedCodePoints), this.ambiguousCharacters = It.getInstance(new Set(t.allowedLocales));
  }
  getCandidateCodePoints() {
    if (this.options.nonBasicASCII)
      return "allNonBasicAscii";
    const t = /* @__PURE__ */ new Set();
    if (this.options.invisibleCharacters)
      for (const n of St.codePoints)
        Kr(String.fromCodePoint(n)) || t.add(n);
    if (this.options.ambiguousCharacters)
      for (const n of this.ambiguousCharacters.getConfusableCodePoints())
        t.add(n);
    for (const n of this.allowedCodePoints)
      t.delete(n);
    return t;
  }
  shouldHighlightNonBasicASCII(t, n) {
    const i = t.codePointAt(0);
    if (this.allowedCodePoints.has(i))
      return 0;
    if (this.options.nonBasicASCII)
      return 1;
    let r = !1, s = !1;
    if (n)
      for (const a of n) {
        const l = a.codePointAt(0), u = Lo(a);
        r = r || u, !u && !this.ambiguousCharacters.isAmbiguous(l) && !St.isInvisibleCharacter(l) && (s = !0);
      }
    return !r && s ? 0 : this.options.invisibleCharacters && !Kr(t) && St.isInvisibleCharacter(i) ? 2 : this.options.ambiguousCharacters && this.ambiguousCharacters.isAmbiguous(i) ? 3 : 0;
  }
}
function Kr(e) {
  return e === " " || e === `
` || e === "	";
}
class Qt {
  constructor(t, n, i) {
    this.changes = t, this.moves = n, this.hitTimeout = i;
  }
}
class _i {
  constructor(t, n) {
    this.lineRangeMapping = t, this.changes = n;
  }
  flip() {
    return new _i(this.lineRangeMapping.flip(), this.changes.map((t) => t.flip()));
  }
}
class z {
  static addRange(t, n) {
    let i = 0;
    for (; i < n.length && n[i].endExclusive < t.start; )
      i++;
    let r = i;
    for (; r < n.length && n[r].start <= t.endExclusive; )
      r++;
    if (i === r)
      n.splice(i, 0, t);
    else {
      const s = Math.min(t.start, n[i].start), a = Math.max(t.endExclusive, n[r - 1].endExclusive);
      n.splice(i, r - i, new z(s, a));
    }
  }
  static tryCreate(t, n) {
    if (!(t > n))
      return new z(t, n);
  }
  static ofLength(t) {
    return new z(0, t);
  }
  static ofStartAndLength(t, n) {
    return new z(t, t + n);
  }
  static emptyAt(t) {
    return new z(t, t);
  }
  constructor(t, n) {
    if (this.start = t, this.endExclusive = n, t > n)
      throw new le(`Invalid range: ${this.toString()}`);
  }
  get isEmpty() {
    return this.start === this.endExclusive;
  }
  delta(t) {
    return new z(this.start + t, this.endExclusive + t);
  }
  deltaStart(t) {
    return new z(this.start + t, this.endExclusive);
  }
  deltaEnd(t) {
    return new z(this.start, this.endExclusive + t);
  }
  get length() {
    return this.endExclusive - this.start;
  }
  toString() {
    return `[${this.start}, ${this.endExclusive})`;
  }
  equals(t) {
    return this.start === t.start && this.endExclusive === t.endExclusive;
  }
  containsRange(t) {
    return this.start <= t.start && t.endExclusive <= this.endExclusive;
  }
  contains(t) {
    return this.start <= t && t < this.endExclusive;
  }
  join(t) {
    return new z(
      Math.min(this.start, t.start),
      Math.max(this.endExclusive, t.endExclusive)
    );
  }
  intersect(t) {
    const n = Math.max(this.start, t.start), i = Math.min(this.endExclusive, t.endExclusive);
    if (n <= i)
      return new z(n, i);
  }
  intersectionLength(t) {
    const n = Math.max(this.start, t.start), i = Math.min(this.endExclusive, t.endExclusive);
    return Math.max(0, i - n);
  }
  intersects(t) {
    const n = Math.max(this.start, t.start), i = Math.min(this.endExclusive, t.endExclusive);
    return n < i;
  }
  intersectsOrTouches(t) {
    const n = Math.max(this.start, t.start), i = Math.min(this.endExclusive, t.endExclusive);
    return n <= i;
  }
  isBefore(t) {
    return this.endExclusive <= t.start;
  }
  isAfter(t) {
    return this.start >= t.endExclusive;
  }
  slice(t) {
    return t.slice(this.start, this.endExclusive);
  }
  substring(t) {
    return t.substring(this.start, this.endExclusive);
  }
  clip(t) {
    if (this.isEmpty)
      throw new le(`Invalid clipping range: ${this.toString()}`);
    return Math.max(this.start, Math.min(this.endExclusive - 1, t));
  }
  clipCyclic(t) {
    if (this.isEmpty)
      throw new le(`Invalid clipping range: ${this.toString()}`);
    return t < this.start ? this.endExclusive - (this.start - t) % this.length : t >= this.endExclusive ? this.start + (t - this.start) % this.length : t;
  }
  map(t) {
    const n = [];
    for (let i = this.start; i < this.endExclusive; i++)
      n.push(t(i));
    return n;
  }
  forEach(t) {
    for (let n = this.start; n < this.endExclusive; n++)
      t(n);
  }
}
class B {
  static fromRange(t) {
    return new B(t.startLineNumber, t.endLineNumber);
  }
  static fromRangeInclusive(t) {
    return new B(t.startLineNumber, t.endLineNumber + 1);
  }
  static subtract(t, n) {
    return n ? t.startLineNumber < n.startLineNumber && n.endLineNumberExclusive < t.endLineNumberExclusive ? [
      new B(t.startLineNumber, n.startLineNumber),
      new B(n.endLineNumberExclusive, t.endLineNumberExclusive)
    ] : n.startLineNumber <= t.startLineNumber && t.endLineNumberExclusive <= n.endLineNumberExclusive ? [] : n.endLineNumberExclusive < t.endLineNumberExclusive ? [new B(
      Math.max(n.endLineNumberExclusive, t.startLineNumber),
      t.endLineNumberExclusive
    )] : [new B(t.startLineNumber, Math.min(n.startLineNumber, t.endLineNumberExclusive))] : [t];
  }
  static joinMany(t) {
    if (t.length === 0)
      return [];
    let n = new ye(t[0].slice());
    for (let i = 1; i < t.length; i++)
      n = n.getUnion(new ye(t[i].slice()));
    return n.ranges;
  }
  static join(t) {
    if (t.length === 0)
      throw new le("lineRanges cannot be empty");
    let n = t[0].startLineNumber, i = t[0].endLineNumberExclusive;
    for (let r = 1; r < t.length; r++)
      n = Math.min(n, t[r].startLineNumber), i = Math.max(i, t[r].endLineNumberExclusive);
    return new B(n, i);
  }
  static ofLength(t, n) {
    return new B(t, t + n);
  }
  static deserialize(t) {
    return new B(t[0], t[1]);
  }
  constructor(t, n) {
    if (t > n)
      throw new le(
        `startLineNumber ${t} cannot be after endLineNumberExclusive ${n}`
      );
    this.startLineNumber = t, this.endLineNumberExclusive = n;
  }
  contains(t) {
    return this.startLineNumber <= t && t < this.endLineNumberExclusive;
  }
  get isEmpty() {
    return this.startLineNumber === this.endLineNumberExclusive;
  }
  delta(t) {
    return new B(this.startLineNumber + t, this.endLineNumberExclusive + t);
  }
  deltaLength(t) {
    return new B(this.startLineNumber, this.endLineNumberExclusive + t);
  }
  get length() {
    return this.endLineNumberExclusive - this.startLineNumber;
  }
  join(t) {
    return new B(
      Math.min(this.startLineNumber, t.startLineNumber),
      Math.max(this.endLineNumberExclusive, t.endLineNumberExclusive)
    );
  }
  toString() {
    return `[${this.startLineNumber},${this.endLineNumberExclusive})`;
  }
  intersect(t) {
    const n = Math.max(this.startLineNumber, t.startLineNumber), i = Math.min(this.endLineNumberExclusive, t.endLineNumberExclusive);
    if (n <= i)
      return new B(n, i);
  }
  intersectsStrict(t) {
    return this.startLineNumber < t.endLineNumberExclusive && t.startLineNumber < this.endLineNumberExclusive;
  }
  overlapOrTouch(t) {
    return this.startLineNumber <= t.endLineNumberExclusive && t.startLineNumber <= this.endLineNumberExclusive;
  }
  equals(t) {
    return this.startLineNumber === t.startLineNumber && this.endLineNumberExclusive === t.endLineNumberExclusive;
  }
  toInclusiveRange() {
    return this.isEmpty ? null : new U(
      this.startLineNumber,
      1,
      this.endLineNumberExclusive - 1,
      Number.MAX_SAFE_INTEGER
    );
  }
  toExclusiveRange() {
    return new U(this.startLineNumber, 1, this.endLineNumberExclusive, 1);
  }
  mapToLineArray(t) {
    const n = [];
    for (let i = this.startLineNumber; i < this.endLineNumberExclusive; i++)
      n.push(t(i));
    return n;
  }
  forEach(t) {
    for (let n = this.startLineNumber; n < this.endLineNumberExclusive; n++)
      t(n);
  }
  serialize() {
    return [this.startLineNumber, this.endLineNumberExclusive];
  }
  includes(t) {
    return this.startLineNumber <= t && t < this.endLineNumberExclusive;
  }
  toOffsetRange() {
    return new z(this.startLineNumber - 1, this.endLineNumberExclusive - 1);
  }
}
class ye {
  constructor(t = []) {
    this._normalizedRanges = t;
  }
  get ranges() {
    return this._normalizedRanges;
  }
  addRange(t) {
    if (t.length === 0)
      return;
    const n = kn(this._normalizedRanges, (r) => r.endLineNumberExclusive >= t.startLineNumber), i = dt(this._normalizedRanges, (r) => r.startLineNumber <= t.endLineNumberExclusive) + 1;
    if (n === i)
      this._normalizedRanges.splice(n, 0, t);
    else if (n === i - 1) {
      const r = this._normalizedRanges[n];
      this._normalizedRanges[n] = r.join(t);
    } else {
      const r = this._normalizedRanges[n].join(this._normalizedRanges[i - 1]).join(t);
      this._normalizedRanges.splice(n, i - n, r);
    }
  }
  contains(t) {
    const n = ft(this._normalizedRanges, (i) => i.startLineNumber <= t);
    return !!n && n.endLineNumberExclusive > t;
  }
  intersects(t) {
    const n = ft(this._normalizedRanges, (i) => i.startLineNumber < t.endLineNumberExclusive);
    return !!n && n.endLineNumberExclusive > t.startLineNumber;
  }
  getUnion(t) {
    if (this._normalizedRanges.length === 0)
      return t;
    if (t._normalizedRanges.length === 0)
      return this;
    const n = [];
    let i = 0, r = 0, s = null;
    for (; i < this._normalizedRanges.length || r < t._normalizedRanges.length; ) {
      let a = null;
      if (i < this._normalizedRanges.length && r < t._normalizedRanges.length) {
        const l = this._normalizedRanges[i], u = t._normalizedRanges[r];
        l.startLineNumber < u.startLineNumber ? (a = l, i++) : (a = u, r++);
      } else i < this._normalizedRanges.length ? (a = this._normalizedRanges[i], i++) : (a = t._normalizedRanges[r], r++);
      s === null ? s = a : s.endLineNumberExclusive >= a.startLineNumber ? s = new B(
        s.startLineNumber,
        Math.max(s.endLineNumberExclusive, a.endLineNumberExclusive)
      ) : (n.push(s), s = a);
    }
    return s !== null && n.push(s), new ye(n);
  }
  subtractFrom(t) {
    const n = kn(this._normalizedRanges, (a) => a.endLineNumberExclusive >= t.startLineNumber), i = dt(this._normalizedRanges, (a) => a.startLineNumber <= t.endLineNumberExclusive) + 1;
    if (n === i)
      return new ye([t]);
    const r = [];
    let s = t.startLineNumber;
    for (let a = n; a < i; a++) {
      const l = this._normalizedRanges[a];
      l.startLineNumber > s && r.push(new B(s, l.startLineNumber)), s = l.endLineNumberExclusive;
    }
    return s < t.endLineNumberExclusive && r.push(new B(s, t.endLineNumberExclusive)), new ye(r);
  }
  toString() {
    return this._normalizedRanges.map((t) => t.toString()).join(", ");
  }
  getIntersection(t) {
    const n = [];
    let i = 0, r = 0;
    for (; i < this._normalizedRanges.length && r < t._normalizedRanges.length; ) {
      const s = this._normalizedRanges[i], a = t._normalizedRanges[r], l = s.intersect(a);
      l && !l.isEmpty && n.push(l), s.endLineNumberExclusive < a.endLineNumberExclusive ? i++ : r++;
    }
    return new ye(n);
  }
  getWithDelta(t) {
    return new ye(this._normalizedRanges.map((n) => n.delta(t)));
  }
}
const de = class de {
  static lengthDiffNonNegative(t, n) {
    return n.isLessThan(t) ? de.zero : t.lineCount === n.lineCount ? new de(0, n.columnCount - t.columnCount) : new de(n.lineCount - t.lineCount, n.columnCount);
  }
  static betweenPositions(t, n) {
    return t.lineNumber === n.lineNumber ? new de(0, n.column - t.column) : new de(n.lineNumber - t.lineNumber, n.column - 1);
  }
  static fromPosition(t) {
    return new de(t.lineNumber - 1, t.column - 1);
  }
  static ofRange(t) {
    return de.betweenPositions(t.getStartPosition(), t.getEndPosition());
  }
  static ofText(t) {
    let n = 0, i = 0;
    for (const r of t)
      r === `
` ? (n++, i = 0) : i++;
    return new de(n, i);
  }
  constructor(t, n) {
    this.lineCount = t, this.columnCount = n;
  }
  isZero() {
    return this.lineCount === 0 && this.columnCount === 0;
  }
  isLessThan(t) {
    return this.lineCount !== t.lineCount ? this.lineCount < t.lineCount : this.columnCount < t.columnCount;
  }
  isGreaterThan(t) {
    return this.lineCount !== t.lineCount ? this.lineCount > t.lineCount : this.columnCount > t.columnCount;
  }
  isGreaterThanOrEqualTo(t) {
    return this.lineCount !== t.lineCount ? this.lineCount > t.lineCount : this.columnCount >= t.columnCount;
  }
  equals(t) {
    return this.lineCount === t.lineCount && this.columnCount === t.columnCount;
  }
  compare(t) {
    return this.lineCount !== t.lineCount ? this.lineCount - t.lineCount : this.columnCount - t.columnCount;
  }
  add(t) {
    return t.lineCount === 0 ? new de(this.lineCount, this.columnCount + t.columnCount) : new de(this.lineCount + t.lineCount, t.columnCount);
  }
  createRange(t) {
    return this.lineCount === 0 ? new U(
      t.lineNumber,
      t.column,
      t.lineNumber,
      t.column + this.columnCount
    ) : new U(
      t.lineNumber,
      t.column,
      t.lineNumber + this.lineCount,
      this.columnCount + 1
    );
  }
  toRange() {
    return new U(1, 1, this.lineCount + 1, this.columnCount + 1);
  }
  addToPosition(t) {
    return this.lineCount === 0 ? new j(t.lineNumber, t.column + this.columnCount) : new j(t.lineNumber + this.lineCount, this.columnCount + 1);
  }
  addToRange(t) {
    return U.fromPositions(this.addToPosition(t.getStartPosition()), this.addToPosition(t.getEndPosition()));
  }
  toString() {
    return `${this.lineCount},${this.columnCount}`;
  }
};
de.zero = new de(0, 0);
let Qe = de;
class Cl {
  constructor(t) {
    this.text = t, this.lineStartOffsetByLineIdx = [], this.lineStartOffsetByLineIdx.push(0);
    for (let n = 0; n < t.length; n++)
      t.charAt(n) === `
` && this.lineStartOffsetByLineIdx.push(n + 1);
  }
  getOffset(t) {
    return this.lineStartOffsetByLineIdx[t.lineNumber - 1] + t.column - 1;
  }
  getOffsetRange(t) {
    return new z(
      this.getOffset(t.getStartPosition()),
      this.getOffset(t.getEndPosition())
    );
  }
  getPosition(t) {
    const n = dt(this.lineStartOffsetByLineIdx, (s) => s <= t), i = n + 1, r = t - this.lineStartOffsetByLineIdx[n] + 1;
    return new j(i, r);
  }
  getRange(t) {
    return U.fromPositions(this.getPosition(t.start), this.getPosition(t.endExclusive));
  }
  getTextLength(t) {
    return Qe.ofRange(this.getRange(t));
  }
  get textLength() {
    const t = this.lineStartOffsetByLineIdx.length - 1;
    return new Qe(t, this.text.length - this.lineStartOffsetByLineIdx[t]);
  }
}
let Pl = class Lt {
  static single(t, n) {
    return new Lt([new Ge(t, n)]);
  }
  static insert(t, n) {
    return new Lt([new Ge(U.fromPositions(t, t), n)]);
  }
  constructor(t) {
    this.edits = t, Tt(() => xi(t, (n, i) => n.range.getEndPosition().isBeforeOrEqual(i.range.getStartPosition())));
  }
  normalize() {
    const t = [];
    for (const n of this.edits)
      if (t.length > 0 && t[t.length - 1].range.getEndPosition().equals(n.range.getStartPosition())) {
        const i = t[t.length - 1];
        t[t.length - 1] = new Ge(i.range.plusRange(n.range), i.text + n.text);
      } else n.isEmpty || t.push(n);
    return new Lt(t);
  }
  mapPosition(t) {
    let n = 0, i = 0, r = 0;
    for (const s of this.edits) {
      const a = s.range.getStartPosition();
      if (t.isBeforeOrEqual(a))
        break;
      const l = s.range.getEndPosition(), u = Qe.ofText(s.text);
      if (t.isBefore(l)) {
        const c = new j(
          a.lineNumber + n,
          a.column + (a.lineNumber + n === i ? r : 0)
        ), h = u.addToPosition(c);
        return Ot(c, h);
      }
      a.lineNumber + n !== i && (r = 0), n += u.lineCount - (s.range.endLineNumber - s.range.startLineNumber), u.lineCount === 0 ? l.lineNumber !== a.lineNumber ? r += u.columnCount - (l.column - 1) : r += u.columnCount - (l.column - a.column) : r = u.columnCount, i = l.lineNumber + n;
    }
    return new j(
      t.lineNumber + n,
      t.column + (t.lineNumber + n === i ? r : 0)
    );
  }
  mapRange(t) {
    function n(a) {
      return a instanceof j ? a : a.getStartPosition();
    }
    function i(a) {
      return a instanceof j ? a : a.getEndPosition();
    }
    const r = n(this.mapPosition(t.getStartPosition())), s = i(this.mapPosition(t.getEndPosition()));
    return Ot(r, s);
  }
  inverseMapPosition(t, n) {
    return this.inverse(n).mapPosition(t);
  }
  inverseMapRange(t, n) {
    return this.inverse(n).mapRange(t);
  }
  apply(t) {
    let n = "", i = new j(1, 1);
    for (const s of this.edits) {
      const a = s.range, l = a.getStartPosition(), u = a.getEndPosition(), c = Ot(i, l);
      c.isEmpty() || (n += t.getValueOfRange(c)), n += s.text, i = u;
    }
    const r = Ot(i, t.endPositionExclusive);
    return r.isEmpty() || (n += t.getValueOfRange(r)), n;
  }
  applyToString(t) {
    const n = new Tl(t);
    return this.apply(n);
  }
  inverse(t) {
    const n = this.getNewRanges();
    return new Lt(this.edits.map((i, r) => new Ge(n[r], t.getValueOfRange(i.range))));
  }
  getNewRanges() {
    const t = [];
    let n = 0, i = 0, r = 0;
    for (const s of this.edits) {
      const a = Qe.ofText(s.text), l = j.lift({
        lineNumber: s.range.startLineNumber + i,
        column: s.range.startColumn + (s.range.startLineNumber === n ? r : 0)
      }), u = a.createRange(l);
      t.push(u), i = u.endLineNumber - s.range.endLineNumber, r = u.endColumn - s.range.endColumn, n = s.range.endLineNumber;
    }
    return t;
  }
};
class Ge {
  constructor(t, n) {
    this.range = t, this.text = n;
  }
  get isEmpty() {
    return this.range.isEmpty() && this.text.length === 0;
  }
  static equals(t, n) {
    return t.range.equalsRange(n.range) && t.text === n.text;
  }
  toSingleEditOperation() {
    return {
      range: this.range,
      text: this.text
    };
  }
  toEdit() {
    return new Pl([this]);
  }
  equals(t) {
    return Ge.equals(this, t);
  }
}
function Ot(e, t) {
  if (e.lineNumber === t.lineNumber && e.column === Number.MAX_SAFE_INTEGER)
    return U.fromPositions(t, t);
  if (!e.isBeforeOrEqual(t))
    throw new le("start must be before end");
  return new U(e.lineNumber, e.column, t.lineNumber, t.column);
}
class aa {
  get endPositionExclusive() {
    return this.length.addToPosition(new j(1, 1));
  }
  getValue() {
    return this.getValueOfRange(this.length.toRange());
  }
  getLineLength(t) {
    return this.getValueOfRange(new U(t, 1, t, Number.MAX_SAFE_INTEGER)).length;
  }
}
class Il extends aa {
  constructor(t, n) {
    Al(n >= 1), super(), this._getLineContent = t, this._lineCount = n;
  }
  getValueOfRange(t) {
    if (t.startLineNumber === t.endLineNumber)
      return this._getLineContent(t.startLineNumber).substring(t.startColumn - 1, t.endColumn - 1);
    let n = this._getLineContent(t.startLineNumber).substring(t.startColumn - 1);
    for (let i = t.startLineNumber + 1; i < t.endLineNumber; i++)
      n += `
` + this._getLineContent(i);
    return n += `
` + this._getLineContent(t.endLineNumber).substring(0, t.endColumn - 1), n;
  }
  getLineLength(t) {
    return this._getLineContent(t).length;
  }
  get length() {
    const t = this._getLineContent(this._lineCount);
    return new Qe(this._lineCount - 1, t.length);
  }
}
class Wt extends Il {
  constructor(t) {
    super((n) => t[n - 1], t.length);
  }
}
class Tl extends aa {
  constructor(t) {
    super(), this.value = t, this._t = new Cl(this.value);
  }
  getValueOfRange(t) {
    return this._t.getOffsetRange(t).substring(this.value);
  }
  get length() {
    return this._t.textLength;
  }
}
class ve {
  static inverse(t, n, i) {
    const r = [];
    let s = 1, a = 1;
    for (const u of t) {
      const c = new ve(new B(s, u.original.startLineNumber), new B(a, u.modified.startLineNumber));
      c.modified.isEmpty || r.push(c), s = u.original.endLineNumberExclusive, a = u.modified.endLineNumberExclusive;
    }
    const l = new ve(new B(s, n + 1), new B(a, i + 1));
    return l.modified.isEmpty || r.push(l), r;
  }
  static clip(t, n, i) {
    const r = [];
    for (const s of t) {
      const a = s.original.intersect(n), l = s.modified.intersect(i);
      a && !a.isEmpty && l && !l.isEmpty && r.push(new ve(a, l));
    }
    return r;
  }
  constructor(t, n) {
    this.original = t, this.modified = n;
  }
  toString() {
    return `{${this.original.toString()}->${this.modified.toString()}}`;
  }
  flip() {
    return new ve(this.modified, this.original);
  }
  join(t) {
    return new ve(this.original.join(t.original), this.modified.join(t.modified));
  }
  get changedLineCount() {
    return Math.max(this.original.length, this.modified.length);
  }
  toRangeMapping() {
    const t = this.original.toInclusiveRange(), n = this.modified.toInclusiveRange();
    if (t && n)
      return new he(t, n);
    if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {
      if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1))
        throw new le("not a valid diff");
      return new he(new U(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new U(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
    } else
      return new he(new U(
        this.original.startLineNumber - 1,
        Number.MAX_SAFE_INTEGER,
        this.original.endLineNumberExclusive - 1,
        Number.MAX_SAFE_INTEGER
      ), new U(
        this.modified.startLineNumber - 1,
        Number.MAX_SAFE_INTEGER,
        this.modified.endLineNumberExclusive - 1,
        Number.MAX_SAFE_INTEGER
      ));
  }
  toRangeMapping2(t, n) {
    if (es(this.original.endLineNumberExclusive, t) && es(this.modified.endLineNumberExclusive, n))
      return new he(new U(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new U(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
    if (!this.original.isEmpty && !this.modified.isEmpty)
      return new he(U.fromPositions(new j(this.original.startLineNumber, 1), tt(new j(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), t)), U.fromPositions(new j(this.modified.startLineNumber, 1), tt(new j(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), n)));
    if (this.original.startLineNumber > 1 && this.modified.startLineNumber > 1)
      return new he(U.fromPositions(tt(new j(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER), t), tt(new j(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), t)), U.fromPositions(tt(new j(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER), n), tt(new j(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), n)));
    throw new le();
  }
}
function tt(e, t) {
  if (e.lineNumber < 1)
    return new j(1, 1);
  if (e.lineNumber > t.length)
    return new j(t.length, t[t.length - 1].length + 1);
  const n = t[e.lineNumber - 1];
  return e.column > n.length + 1 ? new j(e.lineNumber, n.length + 1) : e;
}
function es(e, t) {
  return e >= 1 && e <= t.length;
}
class Me extends ve {
  static fromRangeMappings(t) {
    const n = B.join(t.map((r) => B.fromRangeInclusive(r.originalRange))), i = B.join(t.map((r) => B.fromRangeInclusive(r.modifiedRange)));
    return new Me(n, i, t);
  }
  constructor(t, n, i) {
    super(t, n), this.innerChanges = i;
  }
  flip() {
    var t;
    return new Me(this.modified, this.original, (t = this.innerChanges) == null ? void 0 : t.map((n) => n.flip()));
  }
  withInnerChangesFromLineRanges() {
    return new Me(this.original, this.modified, [this.toRangeMapping()]);
  }
}
class he {
  static fromEdit(t) {
    const n = t.getNewRanges();
    return t.edits.map((r, s) => new he(r.range, n[s]));
  }
  static fromEditJoin(t) {
    const n = t.getNewRanges(), i = t.edits.map((r, s) => new he(r.range, n[s]));
    return he.join(i);
  }
  static join(t) {
    if (t.length === 0)
      throw new le("Cannot join an empty list of range mappings");
    let n = t[0];
    for (let i = 1; i < t.length; i++)
      n = n.join(t[i]);
    return n;
  }
  static assertSorted(t) {
    for (let n = 1; n < t.length; n++) {
      const i = t[n - 1], r = t[n];
      if (!(i.originalRange.getEndPosition().isBeforeOrEqual(r.originalRange.getStartPosition()) && i.modifiedRange.getEndPosition().isBeforeOrEqual(r.modifiedRange.getStartPosition())))
        throw new le("Range mappings must be sorted");
    }
  }
  constructor(t, n) {
    this.originalRange = t, this.modifiedRange = n;
  }
  toString() {
    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;
  }
  flip() {
    return new he(this.modifiedRange, this.originalRange);
  }
  toTextEdit(t) {
    const n = t.getValueOfRange(this.modifiedRange);
    return new Ge(this.originalRange, n);
  }
  join(t) {
    return new he(
      this.originalRange.plusRange(t.originalRange),
      this.modifiedRange.plusRange(t.modifiedRange)
    );
  }
}
function ts(e, t, n, i = !1) {
  const r = [];
  for (const s of Ea(e.map((a) => Fl(a, t, n)), (a, l) => a.original.overlapOrTouch(l.original) || a.modified.overlapOrTouch(l.modified))) {
    const a = s[0], l = s[s.length - 1];
    r.push(new Me(
      a.original.join(l.original),
      a.modified.join(l.modified),
      s.map((u) => u.innerChanges[0])
    ));
  }
  return Tt(() => !i && r.length > 0 && (r[0].modified.startLineNumber !== r[0].original.startLineNumber || n.length.lineCount - r[r.length - 1].modified.endLineNumberExclusive !== t.length.lineCount - r[r.length - 1].original.endLineNumberExclusive) ? !1 : xi(r, (s, a) => a.original.startLineNumber - s.original.endLineNumberExclusive === a.modified.startLineNumber - s.modified.endLineNumberExclusive && s.original.endLineNumberExclusive < a.original.startLineNumber && s.modified.endLineNumberExclusive < a.modified.startLineNumber)), r;
}
function Fl(e, t, n) {
  let i = 0, r = 0;
  e.modifiedRange.endColumn === 1 && e.originalRange.endColumn === 1 && e.originalRange.startLineNumber + i <= e.originalRange.endLineNumber && e.modifiedRange.startLineNumber + i <= e.modifiedRange.endLineNumber && (r = -1), e.modifiedRange.startColumn - 1 >= n.getLineLength(e.modifiedRange.startLineNumber) && e.originalRange.startColumn - 1 >= t.getLineLength(e.originalRange.startLineNumber) && e.originalRange.startLineNumber <= e.originalRange.endLineNumber + r && e.modifiedRange.startLineNumber <= e.modifiedRange.endLineNumber + r && (i = 1);
  const s = new B(
    e.originalRange.startLineNumber + i,
    e.originalRange.endLineNumber + 1 + r
  ), a = new B(
    e.modifiedRange.startLineNumber + i,
    e.modifiedRange.endLineNumber + 1 + r
  );
  return new Me(s, a, [e]);
}
const Dl = 3;
class Bl {
  computeDiff(t, n, i) {
    var u;
    const s = new la(t, n, {
      maxComputationTime: i.maxComputationTimeMs,
      shouldIgnoreTrimWhitespace: i.ignoreTrimWhitespace,
      shouldComputeCharChanges: !0,
      shouldMakePrettyDiff: !0,
      shouldPostProcessCharChanges: !0
    }).computeDiff(), a = [];
    let l = null;
    for (const c of s.changes) {
      let h;
      c.originalEndLineNumber === 0 ? h = new B(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1) : h = new B(c.originalStartLineNumber, c.originalEndLineNumber + 1);
      let f;
      c.modifiedEndLineNumber === 0 ? f = new B(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1) : f = new B(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);
      let m = new Me(h, f, (u = c.charChanges) == null ? void 0 : u.map((d) => new he(new U(
        d.originalStartLineNumber,
        d.originalStartColumn,
        d.originalEndLineNumber,
        d.originalEndColumn
      ), new U(
        d.modifiedStartLineNumber,
        d.modifiedStartColumn,
        d.modifiedEndLineNumber,
        d.modifiedEndColumn
      ))));
      l && (l.modified.endLineNumberExclusive === m.modified.startLineNumber || l.original.endLineNumberExclusive === m.original.startLineNumber) && (m = new Me(
        l.original.join(m.original),
        l.modified.join(m.modified),
        l.innerChanges && m.innerChanges ? l.innerChanges.concat(m.innerChanges) : void 0
      ), a.pop()), a.push(m), l = m;
    }
    return Tt(() => xi(a, (c, h) => h.original.startLineNumber - c.original.endLineNumberExclusive === h.modified.startLineNumber - c.modified.endLineNumberExclusive && c.original.endLineNumberExclusive < h.original.startLineNumber && c.modified.endLineNumberExclusive < h.modified.startLineNumber)), new Qt(a, [], s.quitEarly);
  }
}
function oa(e, t, n, i) {
  return new Ue(e, t, n).ComputeDiff(i);
}
let ns = class {
  constructor(t) {
    const n = [], i = [];
    for (let r = 0, s = t.length; r < s; r++)
      n[r] = Qn(t[r], 1), i[r] = Jn(t[r], 1);
    this.lines = t, this._startColumns = n, this._endColumns = i;
  }
  getElements() {
    const t = [];
    for (let n = 0, i = this.lines.length; n < i; n++)
      t[n] = this.lines[n].substring(this._startColumns[n] - 1, this._endColumns[n] - 1);
    return t;
  }
  getStrictElement(t) {
    return this.lines[t];
  }
  getStartLineNumber(t) {
    return t + 1;
  }
  getEndLineNumber(t) {
    return t + 1;
  }
  createCharSequence(t, n, i) {
    const r = [], s = [], a = [];
    let l = 0;
    for (let u = n; u <= i; u++) {
      const c = this.lines[u], h = t ? this._startColumns[u] : 1, f = t ? this._endColumns[u] : c.length + 1;
      for (let m = h; m < f; m++)
        r[l] = c.charCodeAt(m - 1), s[l] = u + 1, a[l] = m, l++;
      !t && u < i && (r[l] = 10, s[l] = u + 1, a[l] = c.length + 1, l++);
    }
    return new Ul(r, s, a);
  }
};
class Ul {
  constructor(t, n, i) {
    this._charCodes = t, this._lineNumbers = n, this._columns = i;
  }
  toString() {
    return "[" + this._charCodes.map(
      (t, n) => (t === 10 ? "\\n" : String.fromCharCode(t)) + `-(${this._lineNumbers[n]},${this._columns[n]})`
    ).join(", ") + "]";
  }
  _assertIndex(t, n) {
    if (t < 0 || t >= n.length)
      throw new Error("Illegal index");
  }
  getElements() {
    return this._charCodes;
  }
  getStartLineNumber(t) {
    return t > 0 && t === this._lineNumbers.length ? this.getEndLineNumber(t - 1) : (this._assertIndex(t, this._lineNumbers), this._lineNumbers[t]);
  }
  getEndLineNumber(t) {
    return t === -1 ? this.getStartLineNumber(t + 1) : (this._assertIndex(t, this._lineNumbers), this._charCodes[t] === 10 ? this._lineNumbers[t] + 1 : this._lineNumbers[t]);
  }
  getStartColumn(t) {
    return t > 0 && t === this._columns.length ? this.getEndColumn(t - 1) : (this._assertIndex(t, this._columns), this._columns[t]);
  }
  getEndColumn(t) {
    return t === -1 ? this.getStartColumn(t + 1) : (this._assertIndex(t, this._columns), this._charCodes[t] === 10 ? 1 : this._columns[t] + 1);
  }
}
class ct {
  constructor(t, n, i, r, s, a, l, u) {
    this.originalStartLineNumber = t, this.originalStartColumn = n, this.originalEndLineNumber = i, this.originalEndColumn = r, this.modifiedStartLineNumber = s, this.modifiedStartColumn = a, this.modifiedEndLineNumber = l, this.modifiedEndColumn = u;
  }
  static createFromDiffChange(t, n, i) {
    const r = n.getStartLineNumber(t.originalStart), s = n.getStartColumn(t.originalStart), a = n.getEndLineNumber(t.originalStart + t.originalLength - 1), l = n.getEndColumn(t.originalStart + t.originalLength - 1), u = i.getStartLineNumber(t.modifiedStart), c = i.getStartColumn(t.modifiedStart), h = i.getEndLineNumber(t.modifiedStart + t.modifiedLength - 1), f = i.getEndColumn(t.modifiedStart + t.modifiedLength - 1);
    return new ct(
      r,
      s,
      a,
      l,
      u,
      c,
      h,
      f
    );
  }
}
function Vl(e) {
  if (e.length <= 1)
    return e;
  const t = [e[0]];
  let n = t[0];
  for (let i = 1, r = e.length; i < r; i++) {
    const s = e[i], a = s.originalStart - (n.originalStart + n.originalLength), l = s.modifiedStart - (n.modifiedStart + n.modifiedLength);
    Math.min(a, l) < Dl ? (n.originalLength = s.originalStart + s.originalLength - n.originalStart, n.modifiedLength = s.modifiedStart + s.modifiedLength - n.modifiedStart) : (t.push(s), n = s);
  }
  return t;
}
class Et {
  constructor(t, n, i, r, s) {
    this.originalStartLineNumber = t, this.originalEndLineNumber = n, this.modifiedStartLineNumber = i, this.modifiedEndLineNumber = r, this.charChanges = s;
  }
  static createFromDiffResult(t, n, i, r, s, a, l) {
    let u, c, h, f, m;
    if (n.originalLength === 0 ? (u = i.getStartLineNumber(n.originalStart) - 1, c = 0) : (u = i.getStartLineNumber(n.originalStart), c = i.getEndLineNumber(n.originalStart + n.originalLength - 1)), n.modifiedLength === 0 ? (h = r.getStartLineNumber(n.modifiedStart) - 1, f = 0) : (h = r.getStartLineNumber(n.modifiedStart), f = r.getEndLineNumber(n.modifiedStart + n.modifiedLength - 1)), a && n.originalLength > 0 && n.originalLength < 20 && n.modifiedLength > 0 && n.modifiedLength < 20 && s()) {
      const d = i.createCharSequence(t, n.originalStart, n.originalStart + n.originalLength - 1), g = r.createCharSequence(t, n.modifiedStart, n.modifiedStart + n.modifiedLength - 1);
      if (d.getElements().length > 0 && g.getElements().length > 0) {
        let b = oa(d, g, s, !0).changes;
        l && (b = Vl(b)), m = [];
        for (let _ = 0, L = b.length; _ < L; _++)
          m.push(ct.createFromDiffChange(b[_], d, g));
      }
    }
    return new Et(
      u,
      c,
      h,
      f,
      m
    );
  }
}
class la {
  constructor(t, n, i) {
    this.shouldComputeCharChanges = i.shouldComputeCharChanges, this.shouldPostProcessCharChanges = i.shouldPostProcessCharChanges, this.shouldIgnoreTrimWhitespace = i.shouldIgnoreTrimWhitespace, this.shouldMakePrettyDiff = i.shouldMakePrettyDiff, this.originalLines = t, this.modifiedLines = n, this.original = new ns(t), this.modified = new ns(n), this.continueLineDiff = is(i.maxComputationTime), this.continueCharDiff = is(i.maxComputationTime === 0 ? 0 : Math.min(i.maxComputationTime, 5e3));
  }
  computeDiff() {
    if (this.original.lines.length === 1 && this.original.lines[0].length === 0)
      return this.modified.lines.length === 1 && this.modified.lines[0].length === 0 ? {
        quitEarly: !1,
        changes: []
      } : {
        quitEarly: !1,
        changes: [{
          originalStartLineNumber: 1,
          originalEndLineNumber: 1,
          modifiedStartLineNumber: 1,
          modifiedEndLineNumber: this.modified.lines.length,
          charChanges: void 0
        }]
      };
    if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0)
      return {
        quitEarly: !1,
        changes: [{
          originalStartLineNumber: 1,
          originalEndLineNumber: this.original.lines.length,
          modifiedStartLineNumber: 1,
          modifiedEndLineNumber: 1,
          charChanges: void 0
        }]
      };
    const t = oa(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff), n = t.changes, i = t.quitEarly;
    if (this.shouldIgnoreTrimWhitespace) {
      const l = [];
      for (let u = 0, c = n.length; u < c; u++)
        l.push(Et.createFromDiffResult(this.shouldIgnoreTrimWhitespace, n[u], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
      return {
        quitEarly: i,
        changes: l
      };
    }
    const r = [];
    let s = 0, a = 0;
    for (let l = -1, u = n.length; l < u; l++) {
      const c = l + 1 < u ? n[l + 1] : null, h = c ? c.originalStart : this.originalLines.length, f = c ? c.modifiedStart : this.modifiedLines.length;
      for (; s < h && a < f; ) {
        const m = this.originalLines[s], d = this.modifiedLines[a];
        if (m !== d) {
          {
            let g = Qn(m, 1), b = Qn(d, 1);
            for (; g > 1 && b > 1; ) {
              const _ = m.charCodeAt(g - 2), L = d.charCodeAt(b - 2);
              if (_ !== L)
                break;
              g--, b--;
            }
            (g > 1 || b > 1) && this._pushTrimWhitespaceCharChange(r, s + 1, 1, g, a + 1, 1, b);
          }
          {
            let g = Jn(m, 1), b = Jn(d, 1);
            const _ = m.length + 1, L = d.length + 1;
            for (; g < _ && b < L; ) {
              const A = m.charCodeAt(g - 1), M = m.charCodeAt(b - 1);
              if (A !== M)
                break;
              g++, b++;
            }
            (g < _ || b < L) && this._pushTrimWhitespaceCharChange(r, s + 1, g, _, a + 1, b, L);
          }
        }
        s++, a++;
      }
      c && (r.push(Et.createFromDiffResult(this.shouldIgnoreTrimWhitespace, c, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges)), s += c.originalLength, a += c.modifiedLength);
    }
    return {
      quitEarly: i,
      changes: r
    };
  }
  _pushTrimWhitespaceCharChange(t, n, i, r, s, a, l) {
    if (this._mergeTrimWhitespaceCharChange(t, n, i, r, s, a, l))
      return;
    let u;
    this.shouldComputeCharChanges && (u = [new ct(
      n,
      i,
      n,
      r,
      s,
      a,
      s,
      l
    )]), t.push(new Et(
      n,
      n,
      s,
      s,
      u
    ));
  }
  _mergeTrimWhitespaceCharChange(t, n, i, r, s, a, l) {
    const u = t.length;
    if (u === 0)
      return !1;
    const c = t[u - 1];
    return c.originalEndLineNumber === 0 || c.modifiedEndLineNumber === 0 ? !1 : c.originalEndLineNumber === n && c.modifiedEndLineNumber === s ? (this.shouldComputeCharChanges && c.charChanges && c.charChanges.push(new ct(
      n,
      i,
      n,
      r,
      s,
      a,
      s,
      l
    )), !0) : c.originalEndLineNumber + 1 === n && c.modifiedEndLineNumber + 1 === s ? (c.originalEndLineNumber = n, c.modifiedEndLineNumber = s, this.shouldComputeCharChanges && c.charChanges && c.charChanges.push(new ct(
      n,
      i,
      n,
      r,
      s,
      a,
      s,
      l
    )), !0) : !1;
  }
}
function Qn(e, t) {
  const n = ho(e);
  return n === -1 ? t : n + 1;
}
function Jn(e, t) {
  const n = fo(e);
  return n === -1 ? t : n + 2;
}
function is(e) {
  if (e === 0)
    return () => !0;
  const t = Date.now();
  return () => Date.now() - t < e;
}
class ke {
  static trivial(t, n) {
    return new ke([new K(z.ofLength(t.length), z.ofLength(n.length))], !1);
  }
  static trivialTimedOut(t, n) {
    return new ke([new K(z.ofLength(t.length), z.ofLength(n.length))], !0);
  }
  constructor(t, n) {
    this.diffs = t, this.hitTimeout = n;
  }
}
class K {
  static invert(t, n) {
    const i = [];
    return Ma(t, (r, s) => {
      i.push(K.fromOffsetPairs(r ? r.getEndExclusives() : Se.zero, s ? s.getStarts() : new Se(
        n,
        (r ? r.seq2Range.endExclusive - r.seq1Range.endExclusive : 0) + n
      )));
    }), i;
  }
  static fromOffsetPairs(t, n) {
    return new K(new z(t.offset1, n.offset1), new z(t.offset2, n.offset2));
  }
  static assertSorted(t) {
    let n;
    for (const i of t) {
      if (n && !(n.seq1Range.endExclusive <= i.seq1Range.start && n.seq2Range.endExclusive <= i.seq2Range.start))
        throw new le("Sequence diffs must be sorted");
      n = i;
    }
  }
  constructor(t, n) {
    this.seq1Range = t, this.seq2Range = n;
  }
  swap() {
    return new K(this.seq2Range, this.seq1Range);
  }
  toString() {
    return `${this.seq1Range} <-> ${this.seq2Range}`;
  }
  join(t) {
    return new K(this.seq1Range.join(t.seq1Range), this.seq2Range.join(t.seq2Range));
  }
  delta(t) {
    return t === 0 ? this : new K(this.seq1Range.delta(t), this.seq2Range.delta(t));
  }
  deltaStart(t) {
    return t === 0 ? this : new K(this.seq1Range.deltaStart(t), this.seq2Range.deltaStart(t));
  }
  deltaEnd(t) {
    return t === 0 ? this : new K(this.seq1Range.deltaEnd(t), this.seq2Range.deltaEnd(t));
  }
  intersectsOrTouches(t) {
    return this.seq1Range.intersectsOrTouches(t.seq1Range) || this.seq2Range.intersectsOrTouches(t.seq2Range);
  }
  intersect(t) {
    const n = this.seq1Range.intersect(t.seq1Range), i = this.seq2Range.intersect(t.seq2Range);
    if (!(!n || !i))
      return new K(n, i);
  }
  getStarts() {
    return new Se(this.seq1Range.start, this.seq2Range.start);
  }
  getEndExclusives() {
    return new Se(this.seq1Range.endExclusive, this.seq2Range.endExclusive);
  }
}
const je = class je {
  constructor(t, n) {
    this.offset1 = t, this.offset2 = n;
  }
  toString() {
    return `${this.offset1} <-> ${this.offset2}`;
  }
  delta(t) {
    return t === 0 ? this : new je(this.offset1 + t, this.offset2 + t);
  }
  equals(t) {
    return this.offset1 === t.offset1 && this.offset2 === t.offset2;
  }
};
je.zero = new je(0, 0), je.max = new je(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
let Se = je;
const vn = class vn {
  isValid() {
    return !0;
  }
};
vn.instance = new vn();
let Ft = vn;
class ql {
  constructor(t) {
    if (this.timeout = t, this.startTime = Date.now(), this.valid = !0, t <= 0)
      throw new le("timeout must be positive");
  }
  isValid() {
    return !(Date.now() - this.startTime < this.timeout) && this.valid && (this.valid = !1), this.valid;
  }
  disable() {
    this.timeout = Number.MAX_SAFE_INTEGER, this.isValid = () => !0, this.valid = !0;
  }
}
class Rn {
  constructor(t, n) {
    this.width = t, this.height = n, this.array = [], this.array = new Array(t * n);
  }
  get(t, n) {
    return this.array[t + n * this.width];
  }
  set(t, n, i) {
    this.array[t + n * this.width] = i;
  }
}
function Yn(e) {
  return e === 32 || e === 9;
}
const kt = class kt {
  static getKey(t) {
    let n = this.chrKeys.get(t);
    return n === void 0 && (n = this.chrKeys.size, this.chrKeys.set(t, n)), n;
  }
  constructor(t, n, i) {
    this.range = t, this.lines = n, this.source = i, this.histogram = [];
    let r = 0;
    for (let s = t.startLineNumber - 1; s < t.endLineNumberExclusive - 1; s++) {
      const a = n[s];
      for (let u = 0; u < a.length; u++) {
        r++;
        const c = a[u], h = kt.getKey(c);
        this.histogram[h] = (this.histogram[h] || 0) + 1;
      }
      r++;
      const l = kt.getKey(`
`);
      this.histogram[l] = (this.histogram[l] || 0) + 1;
    }
    this.totalCount = r;
  }
  computeSimilarity(t) {
    let n = 0;
    const i = Math.max(this.histogram.length, t.histogram.length);
    for (let r = 0; r < i; r++)
      n += Math.abs((this.histogram[r] ?? 0) - (t.histogram[r] ?? 0));
    return 1 - n / (this.totalCount + t.totalCount);
  }
};
kt.chrKeys = /* @__PURE__ */ new Map();
let sn = kt;
class $l {
  compute(t, n, i = Ft.instance, r) {
    if (t.length === 0 || n.length === 0)
      return ke.trivial(t, n);
    const s = new Rn(t.length, n.length), a = new Rn(t.length, n.length), l = new Rn(t.length, n.length);
    for (let g = 0; g < t.length; g++)
      for (let b = 0; b < n.length; b++) {
        if (!i.isValid())
          return ke.trivialTimedOut(t, n);
        const _ = g === 0 ? 0 : s.get(g - 1, b), L = b === 0 ? 0 : s.get(g, b - 1);
        let A;
        t.getElement(g) === n.getElement(b) ? (g === 0 || b === 0 ? A = 0 : A = s.get(g - 1, b - 1), g > 0 && b > 0 && a.get(g - 1, b - 1) === 3 && (A += l.get(g - 1, b - 1)), A += r ? r(g, b) : 1) : A = -1;
        const M = Math.max(_, L, A);
        if (M === A) {
          const N = g > 0 && b > 0 ? l.get(g - 1, b - 1) : 0;
          l.set(g, b, N + 1), a.set(g, b, 3);
        } else M === _ ? (l.set(g, b, 0), a.set(g, b, 1)) : M === L && (l.set(g, b, 0), a.set(g, b, 2));
        s.set(g, b, M);
      }
    const u = [];
    let c = t.length, h = n.length;
    function f(g, b) {
      (g + 1 !== c || b + 1 !== h) && u.push(new K(new z(g + 1, c), new z(b + 1, h))), c = g, h = b;
    }
    let m = t.length - 1, d = n.length - 1;
    for (; m >= 0 && d >= 0; )
      a.get(m, d) === 3 ? (f(m, d), m--, d--) : a.get(m, d) === 1 ? m-- : d--;
    return f(-1, -1), u.reverse(), new ke(u, !1);
  }
}
class ua {
  compute(t, n, i = Ft.instance) {
    if (t.length === 0 || n.length === 0)
      return ke.trivial(t, n);
    const r = t, s = n;
    function a(b, _) {
      for (; b < r.length && _ < s.length && r.getElement(b) === s.getElement(_); )
        b++, _++;
      return b;
    }
    let l = 0;
    const u = new Ol();
    u.set(0, a(0, 0));
    const c = new Wl();
    c.set(0, u.get(0) === 0 ? null : new rs(null, 0, 0, u.get(0)));
    let h = 0;
    e: for (; ; ) {
      if (l++, !i.isValid())
        return ke.trivialTimedOut(r, s);
      const b = -Math.min(l, s.length + l % 2), _ = Math.min(l, r.length + l % 2);
      for (h = b; h <= _; h += 2) {
        const L = h === _ ? -1 : u.get(h + 1), A = h === b ? -1 : u.get(h - 1) + 1, M = Math.min(Math.max(L, A), r.length), N = M - h;
        if (M > r.length || N > s.length)
          continue;
        const y = a(M, N);
        u.set(h, y);
        const C = M === L ? c.get(h + 1) : c.get(h - 1);
        if (c.set(h, y !== M ? new rs(C, M, N, y - M) : C), u.get(h) === r.length && u.get(h) - h === s.length)
          break e;
      }
    }
    let f = c.get(h);
    const m = [];
    let d = r.length, g = s.length;
    for (; ; ) {
      const b = f ? f.x + f.length : 0, _ = f ? f.y + f.length : 0;
      if ((b !== d || _ !== g) && m.push(new K(new z(b, d), new z(_, g))), !f)
        break;
      d = f.x, g = f.y, f = f.prev;
    }
    return m.reverse(), new ke(m, !1);
  }
}
class rs {
  constructor(t, n, i, r) {
    this.prev = t, this.x = n, this.y = i, this.length = r;
  }
}
class Ol {
  constructor() {
    this.positiveArr = new Int32Array(10), this.negativeArr = new Int32Array(10);
  }
  get(t) {
    return t < 0 ? (t = -t - 1, this.negativeArr[t]) : this.positiveArr[t];
  }
  set(t, n) {
    if (t < 0) {
      if (t = -t - 1, t >= this.negativeArr.length) {
        const i = this.negativeArr;
        this.negativeArr = new Int32Array(i.length * 2), this.negativeArr.set(i);
      }
      this.negativeArr[t] = n;
    } else {
      if (t >= this.positiveArr.length) {
        const i = this.positiveArr;
        this.positiveArr = new Int32Array(i.length * 2), this.positiveArr.set(i);
      }
      this.positiveArr[t] = n;
    }
  }
}
class Wl {
  constructor() {
    this.positiveArr = [], this.negativeArr = [];
  }
  get(t) {
    return t < 0 ? (t = -t - 1, this.negativeArr[t]) : this.positiveArr[t];
  }
  set(t, n) {
    t < 0 ? (t = -t - 1, this.negativeArr[t] = n) : this.positiveArr[t] = n;
  }
}
class an {
  constructor(t, n, i) {
    this.lines = t, this.range = n, this.considerWhitespaceChanges = i, this.elements = [], this.firstElementOffsetByLineIdx = [], this.lineStartOffsets = [], this.trimmedWsLengthsByLineIdx = [], this.firstElementOffsetByLineIdx.push(0);
    for (let r = this.range.startLineNumber; r <= this.range.endLineNumber; r++) {
      let s = t[r - 1], a = 0;
      r === this.range.startLineNumber && this.range.startColumn > 1 && (a = this.range.startColumn - 1, s = s.substring(a)), this.lineStartOffsets.push(a);
      let l = 0;
      if (!i) {
        const c = s.trimStart();
        l = s.length - c.length, s = c.trimEnd();
      }
      this.trimmedWsLengthsByLineIdx.push(l);
      const u = r === this.range.endLineNumber ? Math.min(this.range.endColumn - 1 - a - l, s.length) : s.length;
      for (let c = 0; c < u; c++)
        this.elements.push(s.charCodeAt(c));
      r < this.range.endLineNumber && (this.elements.push(10), this.firstElementOffsetByLineIdx.push(this.elements.length));
    }
  }
  toString() {
    return `Slice: "${this.text}"`;
  }
  get text() {
    return this.getText(new z(0, this.length));
  }
  getText(t) {
    return this.elements.slice(t.start, t.endExclusive).map((n) => String.fromCharCode(n)).join("");
  }
  getElement(t) {
    return this.elements[t];
  }
  get length() {
    return this.elements.length;
  }
  getBoundaryScore(t) {
    const n = as(t > 0 ? this.elements[t - 1] : -1), i = as(t < this.elements.length ? this.elements[t] : -1);
    if (n === 7 && i === 8)
      return 0;
    if (n === 8)
      return 150;
    let r = 0;
    return n !== i && (r += 10, n === 0 && i === 1 && (r += 1)), r += ss(n), r += ss(i), r;
  }
  translateOffset(t, n = "right") {
    const i = dt(this.firstElementOffsetByLineIdx, (s) => s <= t), r = t - this.firstElementOffsetByLineIdx[i];
    return new j(
      this.range.startLineNumber + i,
      1 + this.lineStartOffsets[i] + r + (r === 0 && n === "left" ? 0 : this.trimmedWsLengthsByLineIdx[i])
    );
  }
  translateRange(t) {
    const n = this.translateOffset(t.start, "right"), i = this.translateOffset(t.endExclusive, "left");
    return i.isBefore(n) ? U.fromPositions(i, i) : U.fromPositions(n, i);
  }
  findWordContaining(t) {
    if (t < 0 || t >= this.elements.length || !Sn(this.elements[t]))
      return;
    let n = t;
    for (; n > 0 && Sn(this.elements[n - 1]); )
      n--;
    let i = t;
    for (; i < this.elements.length && Sn(this.elements[i]); )
      i++;
    return new z(n, i);
  }
  countLinesIn(t) {
    return this.translateOffset(t.endExclusive).lineNumber - this.translateOffset(t.start).lineNumber;
  }
  isStronglyEqual(t, n) {
    return this.elements[t] === this.elements[n];
  }
  extendToFullLines(t) {
    const n = ft(this.firstElementOffsetByLineIdx, (r) => r <= t.start) ?? 0, i = Ra(this.firstElementOffsetByLineIdx, (r) => t.endExclusive <= r) ?? this.elements.length;
    return new z(n, i);
  }
}
function Sn(e) {
  return e >= 97 && e <= 122 || e >= 65 && e <= 90 || e >= 48 && e <= 57;
}
const zl = {
  0: 0,
  1: 0,
  2: 0,
  3: 10,
  4: 2,
  5: 30,
  6: 3,
  7: 10,
  8: 10
};
function ss(e) {
  return zl[e];
}
function as(e) {
  return e === 10 ? 8 : e === 13 ? 7 : Yn(e) ? 6 : e >= 97 && e <= 122 ? 0 : e >= 65 && e <= 90 ? 1 : e >= 48 && e <= 57 ? 2 : e === -1 ? 3 : e === 44 || e === 59 ? 5 : 4;
}
function Hl(e, t, n, i, r, s) {
  let { moves: a, excludedChanges: l } = Gl(e, t, n, s);
  if (!s.isValid())
    return [];
  const u = e.filter((h) => !l.has(h)), c = Xl(u, i, r, t, n, s);
  return Ca(a, c), a = Ql(a), a = a.filter((h) => {
    const f = h.original.toOffsetRange().slice(t).map((d) => d.trim());
    return f.join(`
`).length >= 15 && jl(f, (d) => d.length >= 2) >= 2;
  }), a = Jl(e, a), a;
}
function jl(e, t) {
  let n = 0;
  for (const i of e)
    t(i) && n++;
  return n;
}
function Gl(e, t, n, i) {
  const r = [], s = e.filter((u) => u.modified.isEmpty && u.original.length >= 3).map((u) => new sn(u.original, t, u)), a = new Set(e.filter((u) => u.original.isEmpty && u.modified.length >= 3).map((u) => new sn(u.modified, n, u))), l = /* @__PURE__ */ new Set();
  for (const u of s) {
    let c = -1, h;
    for (const f of a) {
      const m = u.computeSimilarity(f);
      m > c && (c = m, h = f);
    }
    if (c > 0.9 && h && (a.delete(h), r.push(new ve(u.range, h.range)), l.add(u.source), l.add(h.source)), !i.isValid())
      return { moves: r, excludedChanges: l };
  }
  return { moves: r, excludedChanges: l };
}
function Xl(e, t, n, i, r, s) {
  const a = [], l = new O1();
  for (const m of e)
    for (let d = m.original.startLineNumber; d < m.original.endLineNumberExclusive - 2; d++) {
      const g = `${t[d - 1]}:${t[d + 1 - 1]}:${t[d + 2 - 1]}`;
      l.add(g, { range: new B(d, d + 3) });
    }
  const u = [];
  e.sort(At((m) => m.modified.startLineNumber, Rt));
  for (const m of e) {
    let d = [];
    for (let g = m.modified.startLineNumber; g < m.modified.endLineNumberExclusive - 2; g++) {
      const b = `${n[g - 1]}:${n[g + 1 - 1]}:${n[g + 2 - 1]}`, _ = new B(g, g + 3), L = [];
      l.forEach(b, ({ range: A }) => {
        for (const N of d)
          if (N.originalLineRange.endLineNumberExclusive + 1 === A.endLineNumberExclusive && N.modifiedLineRange.endLineNumberExclusive + 1 === _.endLineNumberExclusive) {
            N.originalLineRange = new B(
              N.originalLineRange.startLineNumber,
              A.endLineNumberExclusive
            ), N.modifiedLineRange = new B(
              N.modifiedLineRange.startLineNumber,
              _.endLineNumberExclusive
            ), L.push(N);
            return;
          }
        const M = {
          modifiedLineRange: _,
          originalLineRange: A
        };
        u.push(M), L.push(M);
      }), d = L;
    }
    if (!s.isValid())
      return [];
  }
  u.sort(Pa(At((m) => m.modifiedLineRange.length, Rt)));
  const c = new ye(), h = new ye();
  for (const m of u) {
    const d = m.modifiedLineRange.startLineNumber - m.originalLineRange.startLineNumber, g = c.subtractFrom(m.modifiedLineRange), b = h.subtractFrom(m.originalLineRange).getWithDelta(d), _ = g.getIntersection(b);
    for (const L of _.ranges) {
      if (L.length < 3)
        continue;
      const A = L, M = L.delta(-d);
      a.push(new ve(M, A)), c.addRange(A), h.addRange(M);
    }
  }
  a.sort(At((m) => m.original.startLineNumber, Rt));
  const f = new Jt(e);
  for (let m = 0; m < a.length; m++) {
    const d = a[m], g = f.findLastMonotonous((C) => C.original.startLineNumber <= d.original.startLineNumber), b = ft(e, (C) => C.modified.startLineNumber <= d.modified.startLineNumber), _ = Math.max(d.original.startLineNumber - g.original.startLineNumber, d.modified.startLineNumber - b.modified.startLineNumber), L = f.findLastMonotonous((C) => C.original.startLineNumber < d.original.endLineNumberExclusive), A = ft(e, (C) => C.modified.startLineNumber < d.modified.endLineNumberExclusive), M = Math.max(L.original.endLineNumberExclusive - d.original.endLineNumberExclusive, A.modified.endLineNumberExclusive - d.modified.endLineNumberExclusive);
    let N;
    for (N = 0; N < _; N++) {
      const C = d.original.startLineNumber - N - 1, P = d.modified.startLineNumber - N - 1;
      if (C > i.length || P > r.length || c.contains(P) || h.contains(C) || !os(i[C - 1], r[P - 1], s))
        break;
    }
    N > 0 && (h.addRange(new B(d.original.startLineNumber - N, d.original.startLineNumber)), c.addRange(new B(d.modified.startLineNumber - N, d.modified.startLineNumber)));
    let y;
    for (y = 0; y < M; y++) {
      const C = d.original.endLineNumberExclusive + y, P = d.modified.endLineNumberExclusive + y;
      if (C > i.length || P > r.length || c.contains(P) || h.contains(C) || !os(i[C - 1], r[P - 1], s))
        break;
    }
    y > 0 && (h.addRange(new B(
      d.original.endLineNumberExclusive,
      d.original.endLineNumberExclusive + y
    )), c.addRange(new B(
      d.modified.endLineNumberExclusive,
      d.modified.endLineNumberExclusive + y
    ))), (N > 0 || y > 0) && (a[m] = new ve(new B(
      d.original.startLineNumber - N,
      d.original.endLineNumberExclusive + y
    ), new B(
      d.modified.startLineNumber - N,
      d.modified.endLineNumberExclusive + y
    )));
  }
  return a;
}
function os(e, t, n) {
  if (e.trim() === t.trim())
    return !0;
  if (e.length > 300 && t.length > 300)
    return !1;
  const r = new ua().compute(new an([e], new U(1, 1, 1, e.length), !1), new an([t], new U(1, 1, 1, t.length), !1), n);
  let s = 0;
  const a = K.invert(r.diffs, e.length);
  for (const h of a)
    h.seq1Range.forEach((f) => {
      Yn(e.charCodeAt(f)) || s++;
    });
  function l(h) {
    let f = 0;
    for (let m = 0; m < e.length; m++)
      Yn(h.charCodeAt(m)) || f++;
    return f;
  }
  const u = l(e.length > t.length ? e : t);
  return s / u > 0.6 && u > 10;
}
function Ql(e) {
  if (e.length === 0)
    return e;
  e.sort(At((n) => n.original.startLineNumber, Rt));
  const t = [e[0]];
  for (let n = 1; n < e.length; n++) {
    const i = t[t.length - 1], r = e[n], s = r.original.startLineNumber - i.original.endLineNumberExclusive, a = r.modified.startLineNumber - i.modified.endLineNumberExclusive;
    if (s >= 0 && a >= 0 && s + a <= 2) {
      t[t.length - 1] = i.join(r);
      continue;
    }
    t.push(r);
  }
  return t;
}
function Jl(e, t) {
  const n = new Jt(e);
  return t = t.filter((i) => {
    const r = n.findLastMonotonous((l) => l.original.startLineNumber < i.original.endLineNumberExclusive) || new ve(new B(1, 1), new B(1, 1)), s = ft(e, (l) => l.modified.startLineNumber < i.modified.endLineNumberExclusive);
    return r !== s;
  }), t;
}
function ls(e, t, n) {
  let i = n;
  return i = us(e, t, i), i = us(e, t, i), i = Yl(e, t, i), i;
}
function us(e, t, n) {
  if (n.length === 0)
    return n;
  const i = [];
  i.push(n[0]);
  for (let s = 1; s < n.length; s++) {
    const a = i[i.length - 1];
    let l = n[s];
    if (l.seq1Range.isEmpty || l.seq2Range.isEmpty) {
      const u = l.seq1Range.start - a.seq1Range.endExclusive;
      let c;
      for (c = 1; c <= u && !(e.getElement(l.seq1Range.start - c) !== e.getElement(l.seq1Range.endExclusive - c) || t.getElement(l.seq2Range.start - c) !== t.getElement(l.seq2Range.endExclusive - c)); c++)
        ;
      if (c--, c === u) {
        i[i.length - 1] = new K(new z(a.seq1Range.start, l.seq1Range.endExclusive - u), new z(a.seq2Range.start, l.seq2Range.endExclusive - u));
        continue;
      }
      l = l.delta(-c);
    }
    i.push(l);
  }
  const r = [];
  for (let s = 0; s < i.length - 1; s++) {
    const a = i[s + 1];
    let l = i[s];
    if (l.seq1Range.isEmpty || l.seq2Range.isEmpty) {
      const u = a.seq1Range.start - l.seq1Range.endExclusive;
      let c;
      for (c = 0; c < u && !(!e.isStronglyEqual(l.seq1Range.start + c, l.seq1Range.endExclusive + c) || !t.isStronglyEqual(l.seq2Range.start + c, l.seq2Range.endExclusive + c)); c++)
        ;
      if (c === u) {
        i[s + 1] = new K(new z(l.seq1Range.start + u, a.seq1Range.endExclusive), new z(l.seq2Range.start + u, a.seq2Range.endExclusive));
        continue;
      }
      c > 0 && (l = l.delta(c));
    }
    r.push(l);
  }
  return i.length > 0 && r.push(i[i.length - 1]), r;
}
function Yl(e, t, n) {
  if (!e.getBoundaryScore || !t.getBoundaryScore)
    return n;
  for (let i = 0; i < n.length; i++) {
    const r = i > 0 ? n[i - 1] : void 0, s = n[i], a = i + 1 < n.length ? n[i + 1] : void 0, l = new z(
      r ? r.seq1Range.endExclusive + 1 : 0,
      a ? a.seq1Range.start - 1 : e.length
    ), u = new z(
      r ? r.seq2Range.endExclusive + 1 : 0,
      a ? a.seq2Range.start - 1 : t.length
    );
    s.seq1Range.isEmpty ? n[i] = cs(s, e, t, l, u) : s.seq2Range.isEmpty && (n[i] = cs(s.swap(), t, e, u, l).swap());
  }
  return n;
}
function cs(e, t, n, i, r) {
  let a = 1;
  for (; e.seq1Range.start - a >= i.start && e.seq2Range.start - a >= r.start && n.isStronglyEqual(e.seq2Range.start - a, e.seq2Range.endExclusive - a) && a < 100; )
    a++;
  a--;
  let l = 0;
  for (; e.seq1Range.start + l < i.endExclusive && e.seq2Range.endExclusive + l < r.endExclusive && n.isStronglyEqual(e.seq2Range.start + l, e.seq2Range.endExclusive + l) && l < 100; )
    l++;
  if (a === 0 && l === 0)
    return e;
  let u = 0, c = -1;
  for (let h = -a; h <= l; h++) {
    const f = e.seq2Range.start + h, m = e.seq2Range.endExclusive + h, d = e.seq1Range.start + h, g = t.getBoundaryScore(d) + n.getBoundaryScore(f) + n.getBoundaryScore(m);
    g > c && (c = g, u = h);
  }
  return e.delta(u);
}
function Zl(e, t, n) {
  const i = [];
  for (const r of n) {
    const s = i[i.length - 1];
    if (!s) {
      i.push(r);
      continue;
    }
    r.seq1Range.start - s.seq1Range.endExclusive <= 2 || r.seq2Range.start - s.seq2Range.endExclusive <= 2 ? i[i.length - 1] = new K(s.seq1Range.join(r.seq1Range), s.seq2Range.join(r.seq2Range)) : i.push(r);
  }
  return i;
}
function Kl(e, t, n) {
  const i = K.invert(n, e.length), r = [];
  let s = new Se(0, 0);
  function a(u, c) {
    if (u.offset1 < s.offset1 || u.offset2 < s.offset2)
      return;
    const h = e.findWordContaining(u.offset1), f = t.findWordContaining(u.offset2);
    if (!h || !f)
      return;
    let m = new K(h, f);
    const d = m.intersect(c);
    let g = d.seq1Range.length, b = d.seq2Range.length;
    for (; i.length > 0; ) {
      const _ = i[0];
      if (!(_.seq1Range.intersects(m.seq1Range) || _.seq2Range.intersects(m.seq2Range)))
        break;
      const A = e.findWordContaining(_.seq1Range.start), M = t.findWordContaining(_.seq2Range.start), N = new K(A, M), y = N.intersect(_);
      if (g += y.seq1Range.length, b += y.seq2Range.length, m = m.join(N), m.seq1Range.endExclusive >= _.seq1Range.endExclusive)
        i.shift();
      else
        break;
    }
    g + b < (m.seq1Range.length + m.seq2Range.length) * 2 / 3 && r.push(m), s = m.getEndExclusives();
  }
  for (; i.length > 0; ) {
    const u = i.shift();
    u.seq1Range.isEmpty || (a(u.getStarts(), u), a(u.getEndExclusives().delta(-1), u));
  }
  return eu(n, r);
}
function eu(e, t) {
  const n = [];
  for (; e.length > 0 || t.length > 0; ) {
    const i = e[0], r = t[0];
    let s;
    i && (!r || i.seq1Range.start < r.seq1Range.start) ? s = e.shift() : s = t.shift(), n.length > 0 && n[n.length - 1].seq1Range.endExclusive >= s.seq1Range.start ? n[n.length - 1] = n[n.length - 1].join(s) : n.push(s);
  }
  return n;
}
function tu(e, t, n) {
  let i = n;
  if (i.length === 0)
    return i;
  let r = 0, s;
  do {
    s = !1;
    const a = [
      i[0]
    ];
    for (let l = 1; l < i.length; l++) {
      let h = function(m, d) {
        const g = new z(c.seq1Range.endExclusive, u.seq1Range.start);
        return e.getText(g).replace(/\s/g, "").length <= 4 && (m.seq1Range.length + m.seq2Range.length > 5 || d.seq1Range.length + d.seq2Range.length > 5);
      };
      const u = i[l], c = a[a.length - 1];
      h(c, u) ? (s = !0, a[a.length - 1] = a[a.length - 1].join(u)) : a.push(u);
    }
    i = a;
  } while (r++ < 10 && s);
  return i;
}
function nu(e, t, n) {
  let i = n;
  if (i.length === 0)
    return i;
  let r = 0, s;
  do {
    s = !1;
    const l = [
      i[0]
    ];
    for (let u = 1; u < i.length; u++) {
      let f = function(d, g) {
        const b = new z(h.seq1Range.endExclusive, c.seq1Range.start);
        if (e.countLinesIn(b) > 5 || b.length > 500)
          return !1;
        const L = e.getText(b).trim();
        if (L.length > 20 || L.split(/\r\n|\r|\n/).length > 1)
          return !1;
        const A = e.countLinesIn(d.seq1Range), M = d.seq1Range.length, N = t.countLinesIn(d.seq2Range), y = d.seq2Range.length, C = e.countLinesIn(g.seq1Range), P = g.seq1Range.length, I = t.countLinesIn(g.seq2Range), O = g.seq2Range.length, Z = 2 * 40 + 50;
        function S(x) {
          return Math.min(x, Z);
        }
        return Math.pow(Math.pow(S(A * 40 + M), 1.5) + Math.pow(S(N * 40 + y), 1.5), 1.5) + Math.pow(Math.pow(S(C * 40 + P), 1.5) + Math.pow(S(I * 40 + O), 1.5), 1.5) > (Z ** 1.5) ** 1.5 * 1.3;
      };
      const c = i[u], h = l[l.length - 1];
      f(h, c) ? (s = !0, l[l.length - 1] = l[l.length - 1].join(c)) : l.push(c);
    }
    i = l;
  } while (r++ < 10 && s);
  const a = [];
  return ka(i, (l, u, c) => {
    let h = u;
    function f(L) {
      return L.length > 0 && L.trim().length <= 3 && u.seq1Range.length + u.seq2Range.length > 100;
    }
    const m = e.extendToFullLines(u.seq1Range), d = e.getText(new z(m.start, u.seq1Range.start));
    f(d) && (h = h.deltaStart(-d.length));
    const g = e.getText(new z(u.seq1Range.endExclusive, m.endExclusive));
    f(g) && (h = h.deltaEnd(g.length));
    const b = K.fromOffsetPairs(l ? l.getEndExclusives() : Se.zero, c ? c.getStarts() : Se.max), _ = h.intersect(b);
    a.length > 0 && _.getStarts().equals(a[a.length - 1].getEndExclusives()) ? a[a.length - 1] = a[a.length - 1].join(_) : a.push(_);
  }), a;
}
class hs {
  constructor(t, n) {
    this.trimmedHash = t, this.lines = n;
  }
  getElement(t) {
    return this.trimmedHash[t];
  }
  get length() {
    return this.trimmedHash.length;
  }
  getBoundaryScore(t) {
    const n = t === 0 ? 0 : fs(this.lines[t - 1]), i = t === this.lines.length ? 0 : fs(this.lines[t]);
    return 1e3 - (n + i);
  }
  getText(t) {
    return this.lines.slice(t.start, t.endExclusive).join(`
`);
  }
  isStronglyEqual(t, n) {
    return this.lines[t] === this.lines[n];
  }
}
function fs(e) {
  let t = 0;
  for (; t < e.length && (e.charCodeAt(t) === 32 || e.charCodeAt(t) === 9); )
    t++;
  return t;
}
class iu {
  constructor() {
    this.dynamicProgrammingDiffing = new $l(), this.myersDiffingAlgorithm = new ua();
  }
  computeDiff(t, n, i) {
    if (t.length <= 1 && Sa(t, n, (y, C) => y === C))
      return new Qt([], [], !1);
    if (t.length === 1 && t[0].length === 0 || n.length === 1 && n[0].length === 0)
      return new Qt([
        new Me(new B(1, t.length + 1), new B(1, n.length + 1), [
          new he(new U(
            1,
            1,
            t.length,
            t[t.length - 1].length + 1
          ), new U(
            1,
            1,
            n.length,
            n[n.length - 1].length + 1
          ))
        ])
      ], [], !1);
    const r = i.maxComputationTimeMs === 0 ? Ft.instance : new ql(i.maxComputationTimeMs), s = !i.ignoreTrimWhitespace, a = /* @__PURE__ */ new Map();
    function l(y) {
      let C = a.get(y);
      return C === void 0 && (C = a.size, a.set(y, C)), C;
    }
    const u = t.map((y) => l(y.trim())), c = n.map((y) => l(y.trim())), h = new hs(u, t), f = new hs(c, n), m = h.length + f.length < 1700 ? this.dynamicProgrammingDiffing.compute(h, f, r, (y, C) => t[y] === n[C] ? n[C].length === 0 ? 0.1 : 1 + Math.log(1 + n[C].length) : 0.99) : this.myersDiffingAlgorithm.compute(h, f, r);
    let d = m.diffs, g = m.hitTimeout;
    d = ls(h, f, d), d = tu(h, f, d);
    const b = [], _ = (y) => {
      if (s)
        for (let C = 0; C < y; C++) {
          const P = L + C, I = A + C;
          if (t[P] !== n[I]) {
            const O = this.refineDiff(t, n, new K(new z(P, P + 1), new z(I, I + 1)), r, s);
            for (const Z of O.mappings)
              b.push(Z);
            O.hitTimeout && (g = !0);
          }
        }
    };
    let L = 0, A = 0;
    for (const y of d) {
      Tt(() => y.seq1Range.start - L === y.seq2Range.start - A);
      const C = y.seq1Range.start - L;
      _(C), L = y.seq1Range.endExclusive, A = y.seq2Range.endExclusive;
      const P = this.refineDiff(t, n, y, r, s);
      P.hitTimeout && (g = !0);
      for (const I of P.mappings)
        b.push(I);
    }
    _(t.length - L);
    const M = ts(b, new Wt(t), new Wt(n));
    let N = [];
    return i.computeMoves && (N = this.computeMoves(M, t, n, u, c, r, s)), Tt(() => {
      function y(P, I) {
        if (P.lineNumber < 1 || P.lineNumber > I.length)
          return !1;
        const O = I[P.lineNumber - 1];
        return !(P.column < 1 || P.column > O.length + 1);
      }
      function C(P, I) {
        return !(P.startLineNumber < 1 || P.startLineNumber > I.length + 1 || P.endLineNumberExclusive < 1 || P.endLineNumberExclusive > I.length + 1);
      }
      for (const P of M) {
        if (!P.innerChanges)
          return !1;
        for (const I of P.innerChanges)
          if (!(y(I.modifiedRange.getStartPosition(), n) && y(I.modifiedRange.getEndPosition(), n) && y(I.originalRange.getStartPosition(), t) && y(I.originalRange.getEndPosition(), t)))
            return !1;
        if (!C(P.modified, n) || !C(P.original, t))
          return !1;
      }
      return !0;
    }), new Qt(M, N, g);
  }
  computeMoves(t, n, i, r, s, a, l) {
    return Hl(t, n, i, r, s, a).map((h) => {
      const f = this.refineDiff(n, i, new K(h.original.toOffsetRange(), h.modified.toOffsetRange()), a, l), m = ts(f.mappings, new Wt(n), new Wt(i), !0);
      return new _i(h, m);
    });
  }
  refineDiff(t, n, i, r, s) {
    const l = ru(i).toRangeMapping2(t, n), u = new an(t, l.originalRange, s), c = new an(n, l.modifiedRange, s), h = u.length + c.length < 500 ? this.dynamicProgrammingDiffing.compute(u, c, r) : this.myersDiffingAlgorithm.compute(u, c, r);
    let f = h.diffs;
    return f = ls(u, c, f), f = Kl(u, c, f), f = Zl(u, c, f), f = nu(u, c, f), {
      mappings: f.map((d) => new he(u.translateRange(d.seq1Range), c.translateRange(d.seq2Range))),
      hitTimeout: h.hitTimeout
    };
  }
}
function ru(e) {
  return new ve(new B(e.seq1Range.start + 1, e.seq1Range.endExclusive + 1), new B(e.seq2Range.start + 1, e.seq2Range.endExclusive + 1));
}
const En = {
  getLegacy: () => new Bl(),
  getDefault: () => new iu()
};
function qe(e, t) {
  const n = Math.pow(10, t);
  return Math.round(e * n) / n;
}
class Y {
  constructor(t, n, i, r = 1) {
    this._rgbaBrand = void 0, this.r = Math.min(255, Math.max(0, t)) | 0, this.g = Math.min(255, Math.max(0, n)) | 0, this.b = Math.min(255, Math.max(0, i)) | 0, this.a = qe(Math.max(Math.min(1, r), 0), 3);
  }
  static equals(t, n) {
    return t.r === n.r && t.g === n.g && t.b === n.b && t.a === n.a;
  }
}
class pe {
  constructor(t, n, i, r) {
    this._hslaBrand = void 0, this.h = Math.max(Math.min(360, t), 0) | 0, this.s = qe(Math.max(Math.min(1, n), 0), 3), this.l = qe(Math.max(Math.min(1, i), 0), 3), this.a = qe(Math.max(Math.min(1, r), 0), 3);
  }
  static equals(t, n) {
    return t.h === n.h && t.s === n.s && t.l === n.l && t.a === n.a;
  }
  static fromRGBA(t) {
    const n = t.r / 255, i = t.g / 255, r = t.b / 255, s = t.a, a = Math.max(n, i, r), l = Math.min(n, i, r);
    let u = 0, c = 0;
    const h = (l + a) / 2, f = a - l;
    if (f > 0) {
      switch (c = Math.min(h <= 0.5 ? f / (2 * h) : f / (2 - 2 * h), 1), a) {
        case n:
          u = (i - r) / f + (i < r ? 6 : 0);
          break;
        case i:
          u = (r - n) / f + 2;
          break;
        case r:
          u = (n - i) / f + 4;
          break;
      }
      u *= 60, u = Math.round(u);
    }
    return new pe(u, c, h, s);
  }
  static _hue2rgb(t, n, i) {
    return i < 0 && (i += 1), i > 1 && (i -= 1), i < 1 / 6 ? t + (n - t) * 6 * i : i < 1 / 2 ? n : i < 2 / 3 ? t + (n - t) * (2 / 3 - i) * 6 : t;
  }
  static toRGBA(t) {
    const n = t.h / 360, { s: i, l: r, a: s } = t;
    let a, l, u;
    if (i === 0)
      a = l = u = r;
    else {
      const c = r < 0.5 ? r * (1 + i) : r + i - r * i, h = 2 * r - c;
      a = pe._hue2rgb(h, c, n + 1 / 3), l = pe._hue2rgb(h, c, n), u = pe._hue2rgb(h, c, n - 1 / 3);
    }
    return new Y(Math.round(a * 255), Math.round(l * 255), Math.round(u * 255), s);
  }
}
class rt {
  constructor(t, n, i, r) {
    this._hsvaBrand = void 0, this.h = Math.max(Math.min(360, t), 0) | 0, this.s = qe(Math.max(Math.min(1, n), 0), 3), this.v = qe(Math.max(Math.min(1, i), 0), 3), this.a = qe(Math.max(Math.min(1, r), 0), 3);
  }
  static equals(t, n) {
    return t.h === n.h && t.s === n.s && t.v === n.v && t.a === n.a;
  }
  static fromRGBA(t) {
    const n = t.r / 255, i = t.g / 255, r = t.b / 255, s = Math.max(n, i, r), a = Math.min(n, i, r), l = s - a, u = s === 0 ? 0 : l / s;
    let c;
    return l === 0 ? c = 0 : s === n ? c = ((i - r) / l % 6 + 6) % 6 : s === i ? c = (r - n) / l + 2 : c = (n - i) / l + 4, new rt(Math.round(c * 60), u, s, t.a);
  }
  static toRGBA(t) {
    const { h: n, s: i, v: r, a: s } = t, a = r * i, l = a * (1 - Math.abs(n / 60 % 2 - 1)), u = r - a;
    let [c, h, f] = [0, 0, 0];
    return n < 60 ? (c = a, h = l) : n < 120 ? (c = l, h = a) : n < 180 ? (h = a, f = l) : n < 240 ? (h = l, f = a) : n < 300 ? (c = l, f = a) : n <= 360 && (c = a, f = l), c = Math.round((c + u) * 255), h = Math.round((h + u) * 255), f = Math.round((f + u) * 255), new Y(c, h, f, s);
  }
}
var $;
let on = ($ = class {
  static fromHex(t) {
    return $.Format.CSS.parseHex(t) || $.red;
  }
  static equals(t, n) {
    return !t && !n ? !0 : !t || !n ? !1 : t.equals(n);
  }
  get hsla() {
    return this._hsla ? this._hsla : pe.fromRGBA(this.rgba);
  }
  get hsva() {
    return this._hsva ? this._hsva : rt.fromRGBA(this.rgba);
  }
  constructor(t) {
    if (t)
      if (t instanceof Y)
        this.rgba = t;
      else if (t instanceof pe)
        this._hsla = t, this.rgba = pe.toRGBA(t);
      else if (t instanceof rt)
        this._hsva = t, this.rgba = rt.toRGBA(t);
      else
        throw new Error("Invalid color ctor argument");
    else throw new Error("Color needs a value");
  }
  equals(t) {
    return !!t && Y.equals(this.rgba, t.rgba) && pe.equals(this.hsla, t.hsla) && rt.equals(this.hsva, t.hsva);
  }
  getRelativeLuminance() {
    const t = $._relativeLuminanceForComponent(this.rgba.r), n = $._relativeLuminanceForComponent(this.rgba.g), i = $._relativeLuminanceForComponent(this.rgba.b), r = 0.2126 * t + 0.7152 * n + 0.0722 * i;
    return qe(r, 4);
  }
  reduceRelativeLuminace(t, n) {
    let { r: i, g: r, b: s } = t.rgba, a = this.getContrastRatio(t);
    for (; a < n && (i > 0 || r > 0 || s > 0); )
      i -= Math.max(0, Math.ceil(i * 0.1)), r -= Math.max(0, Math.ceil(r * 0.1)), s -= Math.max(0, Math.ceil(s * 0.1)), a = this.getContrastRatio(new $(new Y(i, r, s)));
    return new $(new Y(i, r, s));
  }
  increaseRelativeLuminace(t, n) {
    let { r: i, g: r, b: s } = t.rgba, a = this.getContrastRatio(t);
    for (; a < n && (i < 255 || r < 255 || s < 255); )
      i = Math.min(255, i + Math.ceil((255 - i) * 0.1)), r = Math.min(255, r + Math.ceil((255 - r) * 0.1)), s = Math.min(255, s + Math.ceil((255 - s) * 0.1)), a = this.getContrastRatio(new $(new Y(i, r, s)));
    return new $(new Y(i, r, s));
  }
  static _relativeLuminanceForComponent(t) {
    const n = t / 255;
    return n <= 0.03928 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4);
  }
  getContrastRatio(t) {
    const n = this.getRelativeLuminance(), i = t.getRelativeLuminance();
    return n > i ? (n + 0.05) / (i + 0.05) : (i + 0.05) / (n + 0.05);
  }
  isDarker() {
    return (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3 < 128;
  }
  isLighter() {
    return (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3 >= 128;
  }
  isLighterThan(t) {
    const n = this.getRelativeLuminance(), i = t.getRelativeLuminance();
    return n > i;
  }
  isDarkerThan(t) {
    const n = this.getRelativeLuminance(), i = t.getRelativeLuminance();
    return n < i;
  }
  ensureConstrast(t, n) {
    const i = this.getRelativeLuminance(), r = t.getRelativeLuminance();
    if (this.getContrastRatio(t) < n) {
      if (r < i) {
        const u = this.reduceRelativeLuminace(t, n), c = this.getContrastRatio(u);
        if (c < n) {
          const h = this.increaseRelativeLuminace(t, n), f = this.getContrastRatio(h);
          return c > f ? u : h;
        }
        return u;
      }
      const a = this.increaseRelativeLuminace(t, n), l = this.getContrastRatio(a);
      if (l < n) {
        const u = this.reduceRelativeLuminace(t, n), c = this.getContrastRatio(u);
        return l > c ? a : u;
      }
      return a;
    }
    return t;
  }
  lighten(t) {
    return new $(new pe(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * t, this.hsla.a));
  }
  darken(t) {
    return new $(new pe(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * t, this.hsla.a));
  }
  transparent(t) {
    const { r: n, g: i, b: r, a: s } = this.rgba;
    return new $(new Y(n, i, r, s * t));
  }
  isTransparent() {
    return this.rgba.a === 0;
  }
  isOpaque() {
    return this.rgba.a === 1;
  }
  opposite() {
    return new $(new Y(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
  }
  blend(t) {
    const n = t.rgba, i = this.rgba.a, r = n.a, s = i + r * (1 - i);
    if (s < 1e-6)
      return $.transparent;
    const a = this.rgba.r * i / s + n.r * r * (1 - i) / s, l = this.rgba.g * i / s + n.g * r * (1 - i) / s, u = this.rgba.b * i / s + n.b * r * (1 - i) / s;
    return new $(new Y(a, l, u, s));
  }
  makeOpaque(t) {
    if (this.isOpaque() || t.rgba.a !== 1)
      return this;
    const { r: n, g: i, b: r, a: s } = this.rgba;
    return new $(new Y(
      t.rgba.r - s * (t.rgba.r - n),
      t.rgba.g - s * (t.rgba.g - i),
      t.rgba.b - s * (t.rgba.b - r),
      1
    ));
  }
  flatten(...t) {
    const n = t.reduceRight((i, r) => $._flatten(r, i));
    return $._flatten(this, n);
  }
  static _flatten(t, n) {
    const i = 1 - t.rgba.a;
    return new $(new Y(
      i * n.rgba.r + t.rgba.a * t.rgba.r,
      i * n.rgba.g + t.rgba.a * t.rgba.g,
      i * n.rgba.b + t.rgba.a * t.rgba.b
    ));
  }
  toString() {
    return this._toString || (this._toString = $.Format.CSS.format(this)), this._toString;
  }
  static getLighterColor(t, n, i) {
    if (t.isLighterThan(n))
      return t;
    i = i || 0.5;
    const r = t.getRelativeLuminance(), s = n.getRelativeLuminance();
    return i = i * (s - r) / s, t.lighten(i);
  }
  static getDarkerColor(t, n, i) {
    if (t.isDarkerThan(n))
      return t;
    i = i || 0.5;
    const r = t.getRelativeLuminance(), s = n.getRelativeLuminance();
    return i = i * (r - s) / r, t.darken(i);
  }
}, $.white = new $(new Y(255, 255, 255, 1)), $.black = new $(new Y(0, 0, 0, 1)), $.red = new $(new Y(255, 0, 0, 1)), $.blue = new $(new Y(0, 0, 255, 1)), $.green = new $(new Y(0, 255, 0, 1)), $.cyan = new $(new Y(0, 255, 255, 1)), $.lightgrey = new $(new Y(211, 211, 211, 1)), $.transparent = new $(new Y(0, 0, 0, 0)), $);
(function(e) {
  (function(t) {
    (function(n) {
      function i(d) {
        return d.rgba.a === 1 ? `rgb(${d.rgba.r}, ${d.rgba.g}, ${d.rgba.b})` : e.Format.CSS.formatRGBA(d);
      }
      n.formatRGB = i;
      function r(d) {
        return `rgba(${d.rgba.r}, ${d.rgba.g}, ${d.rgba.b}, ${+d.rgba.a.toFixed(2)})`;
      }
      n.formatRGBA = r;
      function s(d) {
        return d.hsla.a === 1 ? `hsl(${d.hsla.h}, ${(d.hsla.s * 100).toFixed(2)}%, ${(d.hsla.l * 100).toFixed(2)}%)` : e.Format.CSS.formatHSLA(d);
      }
      n.formatHSL = s;
      function a(d) {
        return `hsla(${d.hsla.h}, ${(d.hsla.s * 100).toFixed(2)}%, ${(d.hsla.l * 100).toFixed(2)}%, ${d.hsla.a.toFixed(2)})`;
      }
      n.formatHSLA = a;
      function l(d) {
        const g = d.toString(16);
        return g.length !== 2 ? "0" + g : g;
      }
      function u(d) {
        return `#${l(d.rgba.r)}${l(d.rgba.g)}${l(d.rgba.b)}`;
      }
      n.formatHex = u;
      function c(d, g = !1) {
        return g && d.rgba.a === 1 ? e.Format.CSS.formatHex(d) : `#${l(d.rgba.r)}${l(d.rgba.g)}${l(d.rgba.b)}${l(Math.round(d.rgba.a * 255))}`;
      }
      n.formatHexA = c;
      function h(d) {
        return d.isOpaque() ? e.Format.CSS.formatHex(d) : e.Format.CSS.formatRGBA(d);
      }
      n.format = h;
      function f(d) {
        const g = d.length;
        if (g === 0 || d.charCodeAt(0) !== 35)
          return null;
        if (g === 7) {
          const b = 16 * m(d.charCodeAt(1)) + m(d.charCodeAt(2)), _ = 16 * m(d.charCodeAt(3)) + m(d.charCodeAt(4)), L = 16 * m(d.charCodeAt(5)) + m(d.charCodeAt(6));
          return new e(new Y(b, _, L, 1));
        }
        if (g === 9) {
          const b = 16 * m(d.charCodeAt(1)) + m(d.charCodeAt(2)), _ = 16 * m(d.charCodeAt(3)) + m(d.charCodeAt(4)), L = 16 * m(d.charCodeAt(5)) + m(d.charCodeAt(6)), A = 16 * m(d.charCodeAt(7)) + m(d.charCodeAt(8));
          return new e(new Y(b, _, L, A / 255));
        }
        if (g === 4) {
          const b = m(d.charCodeAt(1)), _ = m(d.charCodeAt(2)), L = m(d.charCodeAt(3));
          return new e(new Y(16 * b + b, 16 * _ + _, 16 * L + L));
        }
        if (g === 5) {
          const b = m(d.charCodeAt(1)), _ = m(d.charCodeAt(2)), L = m(d.charCodeAt(3)), A = m(d.charCodeAt(4));
          return new e(new Y(16 * b + b, 16 * _ + _, 16 * L + L, (16 * A + A) / 255));
        }
        return null;
      }
      n.parseHex = f;
      function m(d) {
        switch (d) {
          case 48:
            return 0;
          case 49:
            return 1;
          case 50:
            return 2;
          case 51:
            return 3;
          case 52:
            return 4;
          case 53:
            return 5;
          case 54:
            return 6;
          case 55:
            return 7;
          case 56:
            return 8;
          case 57:
            return 9;
          case 97:
            return 10;
          case 65:
            return 10;
          case 98:
            return 11;
          case 66:
            return 11;
          case 99:
            return 12;
          case 67:
            return 12;
          case 100:
            return 13;
          case 68:
            return 13;
          case 101:
            return 14;
          case 69:
            return 14;
          case 102:
            return 15;
          case 70:
            return 15;
        }
        return 0;
      }
    })(t.CSS || (t.CSS = {}));
  })(e.Format || (e.Format = {}));
})(on || (on = {}));
function ca(e) {
  const t = [];
  for (const n of e) {
    const i = Number(n);
    (i || i === 0 && n.replace(/\s/g, "") !== "") && t.push(i);
  }
  return t;
}
function Li(e, t, n, i) {
  return {
    red: e / 255,
    blue: n / 255,
    green: t / 255,
    alpha: i
  };
}
function wt(e, t) {
  const n = t.index, i = t[0].length;
  if (!n)
    return;
  const r = e.positionAt(n);
  return {
    startLineNumber: r.lineNumber,
    startColumn: r.column,
    endLineNumber: r.lineNumber,
    endColumn: r.column + i
  };
}
function su(e, t) {
  if (!e)
    return;
  const n = on.Format.CSS.parseHex(t);
  if (n)
    return {
      range: e,
      color: Li(n.rgba.r, n.rgba.g, n.rgba.b, n.rgba.a)
    };
}
function ds(e, t, n) {
  if (!e || t.length !== 1)
    return;
  const r = t[0].values(), s = ca(r);
  return {
    range: e,
    color: Li(s[0], s[1], s[2], n ? s[3] : 1)
  };
}
function ms(e, t, n) {
  if (!e || t.length !== 1)
    return;
  const r = t[0].values(), s = ca(r), a = new on(new pe(
    s[0],
    s[1] / 100,
    s[2] / 100,
    n ? s[3] : 1
  ));
  return {
    range: e,
    color: Li(a.rgba.r, a.rgba.g, a.rgba.b, a.rgba.a)
  };
}
function _t(e, t) {
  return typeof e == "string" ? [...e.matchAll(t)] : e.findMatches(t);
}
function au(e) {
  const t = [], i = _t(e, /\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm);
  if (i.length > 0)
    for (const r of i) {
      const s = r.filter((c) => c !== void 0), a = s[1], l = s[2];
      if (!l)
        continue;
      let u;
      if (a === "rgb") {
        const c = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;
        u = ds(wt(e, r), _t(l, c), !1);
      } else if (a === "rgba") {
        const c = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        u = ds(wt(e, r), _t(l, c), !0);
      } else if (a === "hsl") {
        const c = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;
        u = ms(wt(e, r), _t(l, c), !1);
      } else if (a === "hsla") {
        const c = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        u = ms(wt(e, r), _t(l, c), !0);
      } else a === "#" && (u = su(wt(e, r), a + l));
      u && t.push(u);
    }
  return t;
}
function ou(e) {
  return !e || typeof e.getValue != "function" || typeof e.positionAt != "function" ? [] : au(e);
}
const gs = new RegExp("\\bMARK:\\s*(.*)$", "d"), lu = /^-+|-+$/g;
function uu(e, t) {
  var i;
  let n = [];
  if (t.findRegionSectionHeaders && ((i = t.foldingRules) != null && i.markers)) {
    const r = cu(e, t);
    n = n.concat(r);
  }
  if (t.findMarkSectionHeaders) {
    const r = hu(e);
    n = n.concat(r);
  }
  return n;
}
function cu(e, t) {
  const n = [], i = e.getLineCount();
  for (let r = 1; r <= i; r++) {
    const s = e.getLineContent(r), a = s.match(t.foldingRules.markers.start);
    if (a) {
      const l = { startLineNumber: r, startColumn: a[0].length + 1, endLineNumber: r, endColumn: s.length + 1 };
      if (l.endColumn > l.startColumn) {
        const u = {
          range: l,
          ...ha(s.substring(a[0].length)),
          shouldBeInComments: !1
        };
        (u.text || u.hasSeparatorLine) && n.push(u);
      }
    }
  }
  return n;
}
function hu(e) {
  const t = [], n = e.getLineCount();
  for (let i = 1; i <= n; i++) {
    const r = e.getLineContent(i);
    fu(r, i, t);
  }
  return t;
}
function fu(e, t, n) {
  gs.lastIndex = 0;
  const i = gs.exec(e);
  if (i) {
    const r = i.indices[1][0] + 1, s = i.indices[1][1] + 1, a = { startLineNumber: t, startColumn: r, endLineNumber: t, endColumn: s };
    if (a.endColumn > a.startColumn) {
      const l = {
        range: a,
        ...ha(i[1]),
        shouldBeInComments: !0
      };
      (l.text || l.hasSeparatorLine) && n.push(l);
    }
  }
}
function ha(e) {
  e = e.trim();
  const t = e.startsWith("-");
  return e = e.replace(lu, ""), { text: e, hasSeparatorLine: t };
}
function Fe(e) {
  return e === 47 || e === 92;
}
function fa(e) {
  return e.replace(/[\\/]/g, G.sep);
}
function du(e) {
  return e.indexOf("/") === -1 && (e = fa(e)), /^[a-zA-Z]:(\/|$)/.test(e) && (e = "/" + e), e;
}
function bs(e, t = G.sep) {
  if (!e)
    return "";
  const n = e.length, i = e.charCodeAt(0);
  if (Fe(i)) {
    if (Fe(e.charCodeAt(1)) && !Fe(e.charCodeAt(2))) {
      let s = 3;
      const a = s;
      for (; s < n && !Fe(e.charCodeAt(s)); s++)
        ;
      if (a !== s && !Fe(e.charCodeAt(s + 1))) {
        for (s += 1; s < n; s++)
          if (Fe(e.charCodeAt(s)))
            return e.slice(0, s + 1).replace(/[\\/]/g, t);
      }
    }
    return t;
  } else if (mu(i) && e.charCodeAt(1) === 58)
    return Fe(e.charCodeAt(2)) ? e.slice(0, 2) + t : e.slice(0, 2);
  let r = e.indexOf("://");
  if (r !== -1) {
    for (r += 3; r < n; r++)
      if (Fe(e.charCodeAt(r)))
        return e.slice(0, r + 1);
  }
  return "";
}
function ps(e, t, n, i = Gt) {
  if (e === t)
    return !0;
  if (!e || !t || t.length > e.length)
    return !1;
  if (n) {
    if (!po(e, t))
      return !1;
    if (t.length === e.length)
      return !0;
    let s = t.length;
    return t.charAt(t.length - 1) === i && s--, e.charAt(s) === i;
  }
  return t.charAt(t.length - 1) !== i && (t += i), e.indexOf(t) === 0;
}
function mu(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
var oe;
(function(e) {
  e.inMemory = "inmemory", e.vscode = "vscode", e.internal = "private", e.walkThrough = "walkThrough", e.walkThroughSnippet = "walkThroughSnippet", e.http = "http", e.https = "https", e.file = "file", e.mailto = "mailto", e.untitled = "untitled", e.data = "data", e.command = "command", e.vscodeRemote = "vscode-remote", e.vscodeRemoteResource = "vscode-remote-resource", e.vscodeManagedRemoteResource = "vscode-managed-remote-resource", e.vscodeUserData = "vscode-userdata", e.vscodeCustomEditor = "vscode-custom-editor", e.vscodeNotebookCell = "vscode-notebook-cell", e.vscodeNotebookCellMetadata = "vscode-notebook-cell-metadata", e.vscodeNotebookCellMetadataDiff = "vscode-notebook-cell-metadata-diff", e.vscodeNotebookCellOutput = "vscode-notebook-cell-output", e.vscodeNotebookCellOutputDiff = "vscode-notebook-cell-output-diff", e.vscodeNotebookMetadata = "vscode-notebook-metadata", e.vscodeInteractiveInput = "vscode-interactive-input", e.vscodeSettings = "vscode-settings", e.vscodeWorkspaceTrust = "vscode-workspace-trust", e.vscodeTerminal = "vscode-terminal", e.vscodeChatCodeBlock = "vscode-chat-code-block", e.vscodeChatCodeCompareBlock = "vscode-chat-code-compare-block", e.vscodeChatSesssion = "vscode-chat-editor", e.webviewPanel = "webview-panel", e.vscodeWebview = "vscode-webview", e.extension = "extension", e.vscodeFileResource = "vscode-file", e.tmp = "tmp", e.vsls = "vsls", e.vscodeSourceControl = "vscode-scm", e.commentsInput = "comment", e.codeSetting = "code-setting", e.outputChannel = "output";
})(oe || (oe = {}));
const gu = "tkn";
class bu {
  constructor() {
    this._hosts = /* @__PURE__ */ Object.create(null), this._ports = /* @__PURE__ */ Object.create(null), this._connectionTokens = /* @__PURE__ */ Object.create(null), this._preferredWebSchema = "http", this._delegate = null, this._serverRootPath = "/";
  }
  setPreferredWebSchema(t) {
    this._preferredWebSchema = t;
  }
  setDelegate(t) {
    this._delegate = t;
  }
  setServerRootPath(t, n) {
    this._serverRootPath = vu(t, n);
  }
  getServerRootPath() {
    return this._serverRootPath;
  }
  get _remoteResourcesPath() {
    return G.join(this._serverRootPath, oe.vscodeRemoteResource);
  }
  set(t, n, i) {
    this._hosts[t] = n, this._ports[t] = i;
  }
  setConnectionToken(t, n) {
    this._connectionTokens[t] = n;
  }
  getPreferredWebSchema() {
    return this._preferredWebSchema;
  }
  rewrite(t) {
    if (this._delegate)
      try {
        return this._delegate(t);
      } catch (l) {
        return yt(l), t;
      }
    const n = t.authority;
    let i = this._hosts[n];
    i && i.indexOf(":") !== -1 && i.indexOf("[") === -1 && (i = `[${i}]`);
    const r = this._ports[n], s = this._connectionTokens[n];
    let a = `path=${encodeURIComponent(t.path)}`;
    return typeof s == "string" && (a += `&${gu}=${encodeURIComponent(s)}`), me.from({
      scheme: to ? this._preferredWebSchema : oe.vscodeRemoteResource,
      authority: `${i}:${r}`,
      path: this._remoteResourcesPath,
      query: a
    });
  }
}
const pu = new bu();
function vu(e, t) {
  return G.join(t ?? "/", `${e.quality ?? "oss"}-${e.commit ?? "dev"}`);
}
const xu = "vscode-app", ut = class ut {
  constructor() {
    this.staticBrowserUris = new Pn(), this.appResourcePathUrls = /* @__PURE__ */ new Map();
  }
  registerAppResourcePathUrl(t, n) {
    this.appResourcePathUrls.set(t, n);
  }
  toUrl(t) {
    var i;
    let n = this.appResourcePathUrls.get(t);
    return typeof n == "function" && (n = n()), new URL(n ?? t, ((i = globalThis.location) == null ? void 0 : i.href) ?? "file:///home/jazzpirate/work/Software/sTeX/iMMT/source/ts/editor/node_modules/monaco-editor-wrapper/dist/workers/jsonWorker-es.js").toString();
  }
  asBrowserUri(t) {
    const n = this.toUri(t, { toUrl: this.toUrl.bind(this) });
    return this.uriToBrowserUri(n);
  }
  uriToBrowserUri(t) {
    return t.scheme === oe.vscodeRemote ? pu.rewrite(t) : t.scheme === oe.file && (eo || io === `${oe.vscodeFileResource}://${ut.FALLBACK_AUTHORITY}`) ? t.with({
      scheme: oe.vscodeFileResource,
      authority: t.authority || ut.FALLBACK_AUTHORITY,
      query: null,
      fragment: null
    }) : this.staticBrowserUris.get(t) ?? t;
  }
  asFileUri(t) {
    const n = this.toUri(t, { toUrl: this.toUrl.bind(this) });
    return this.uriToFileUri(n);
  }
  uriToFileUri(t) {
    return t.scheme === oe.vscodeFileResource ? t.with({
      scheme: oe.file,
      authority: t.authority !== ut.FALLBACK_AUTHORITY ? t.authority : null,
      query: null,
      fragment: null
    }) : t;
  }
  toUri(t, n) {
    if (me.isUri(t))
      return t;
    if (globalThis._VSCODE_FILE_ROOT) {
      const i = globalThis._VSCODE_FILE_ROOT;
      if (/^\w[\w\d+.-]*:\/\//.test(i))
        return me.joinPath(me.parse(i, !0), t);
      const r = Ko(i, t);
      return me.file(r);
    }
    return me.parse(n.toUrl(t));
  }
  registerStaticBrowserUri(t, n) {
    return this.staticBrowserUris.set(t, n), Ct(() => {
      this.staticBrowserUris.get(t) === n && this.staticBrowserUris.delete(t);
    });
  }
  getRegisteredBrowserUris() {
    return this.staticBrowserUris.keys();
  }
};
ut.FALLBACK_AUTHORITY = xu;
let Zn = ut;
new Zn();
var vs;
(function(e) {
  const t = /* @__PURE__ */ new Map([
    ["1", { "Cross-Origin-Opener-Policy": "same-origin" }],
    ["2", { "Cross-Origin-Embedder-Policy": "require-corp" }],
    ["3", { "Cross-Origin-Opener-Policy": "same-origin", "Cross-Origin-Embedder-Policy": "require-corp" }]
  ]);
  e.CoopAndCoep = Object.freeze(t.get("3"));
  const n = "vscode-coi";
  function i(s) {
    let a;
    typeof s == "string" ? a = new URL(s).searchParams : s instanceof URL ? a = s.searchParams : me.isUri(s) && (a = new URL(s.toString(!0)).searchParams);
    const l = a == null ? void 0 : a.get(n);
    if (l)
      return t.get(l);
  }
  e.getHeadersFromQuery = i;
  function r(s, a, l) {
    if (!globalThis.crossOriginIsolated)
      return;
    const u = a && l ? "3" : l ? "2" : "1";
    s instanceof URLSearchParams ? s.set(n, u) : s[n] = u;
  }
  e.addSearchParam = r;
})(vs || (vs = {}));
function Re(e) {
  return rn(e, !0);
}
class wu {
  constructor(t) {
    this._ignorePathCasing = t;
  }
  compare(t, n, i = !1) {
    return t === n ? 0 : mo(this.getComparisonKey(t, i), this.getComparisonKey(n, i));
  }
  isEqual(t, n, i = !1) {
    return t === n ? !0 : !t || !n ? !1 : this.getComparisonKey(t, i) === this.getComparisonKey(n, i);
  }
  getComparisonKey(t, n = !1) {
    return t.with({
      path: this._ignorePathCasing(t) ? t.path.toLowerCase() : void 0,
      fragment: n ? null : void 0
    }).toString();
  }
  ignorePathCasing(t) {
    return this._ignorePathCasing(t);
  }
  isEqualOrParent(t, n, i = !1) {
    if (t.scheme === n.scheme) {
      if (t.scheme === oe.file)
        return ps(Re(t), Re(n), this._ignorePathCasing(t)) && t.query === n.query && (i || t.fragment === n.fragment);
      if (xs(t.authority, n.authority))
        return ps(t.path, n.path, this._ignorePathCasing(t), "/") && t.query === n.query && (i || t.fragment === n.fragment);
    }
    return !1;
  }
  joinPath(t, ...n) {
    return me.joinPath(t, ...n);
  }
  basenameOrAuthority(t) {
    return _u(t) || t.authority;
  }
  basename(t) {
    return G.basename(t.path);
  }
  extname(t) {
    return G.extname(t.path);
  }
  dirname(t) {
    if (t.path.length === 0)
      return t;
    let n;
    return t.scheme === oe.file ? n = me.file(nl(Re(t))).path : (n = G.dirname(t.path), t.authority && n.length && n.charCodeAt(0) !== 47 && (console.error(`dirname("${t.toString})) resulted in a relative path`), n = "/")), t.with({
      path: n
    });
  }
  normalizePath(t) {
    if (!t.path.length)
      return t;
    let n;
    return t.scheme === oe.file ? n = me.file(Zo(Re(t))).path : n = G.normalize(t.path), t.with({
      path: n
    });
  }
  relativePath(t, n) {
    if (t.scheme !== n.scheme || !xs(t.authority, n.authority))
      return;
    if (t.scheme === oe.file) {
      const s = tl(Re(t), Re(n));
      return gt ? fa(s) : s;
    }
    let i = t.path || "/";
    const r = n.path || "/";
    if (this._ignorePathCasing(t)) {
      let s = 0;
      for (const a = Math.min(i.length, r.length); s < a && !(i.charCodeAt(s) !== r.charCodeAt(s) && i.charAt(s).toLowerCase() !== r.charAt(s).toLowerCase()); s++)
        ;
      i = r.substr(0, s) + i.substr(s);
    }
    return G.relative(i, r);
  }
  resolvePath(t, n) {
    if (t.scheme === oe.file) {
      const i = me.file(el(Re(t), n));
      return t.with({
        authority: i.authority,
        path: i.path
      });
    }
    return n = du(n), t.with({
      path: G.resolve(t.path, n)
    });
  }
  isAbsolutePath(t) {
    return !!t.path && t.path[0] === "/";
  }
  isEqualAuthority(t, n) {
    return t === n || t !== void 0 && n !== void 0 && bo(t, n);
  }
  hasTrailingPathSeparator(t, n = Gt) {
    if (t.scheme === oe.file) {
      const i = Re(t);
      return i.length > bs(i).length && i[i.length - 1] === n;
    } else {
      const i = t.path;
      return i.length > 1 && i.charCodeAt(i.length - 1) === 47 && !/^[a-zA-Z]:(\/$|\\$)/.test(t.fsPath);
    }
  }
  removeTrailingPathSeparator(t, n = Gt) {
    return ws(t, n) ? t.with({ path: t.path.substr(0, t.path.length - 1) }) : t;
  }
  addTrailingPathSeparator(t, n = Gt) {
    let i = !1;
    if (t.scheme === oe.file) {
      const r = Re(t);
      i = r !== void 0 && r.length === bs(r).length && r[r.length - 1] === n;
    } else {
      n = "/";
      const r = t.path;
      i = r.length === 1 && r.charCodeAt(r.length - 1) === 47;
    }
    return !i && !ws(t, n) ? t.with({ path: t.path + "/" }) : t;
  }
}
const H = new wu(() => !1);
H.isEqual.bind(H);
H.isEqualOrParent.bind(H);
H.getComparisonKey.bind(H);
H.basenameOrAuthority.bind(H);
const _u = H.basename.bind(H);
H.extname.bind(H);
H.dirname.bind(H);
H.joinPath.bind(H);
H.normalizePath.bind(H);
H.relativePath.bind(H);
H.resolvePath.bind(H);
H.isAbsolutePath.bind(H);
const xs = H.isEqualAuthority.bind(H), ws = H.hasTrailingPathSeparator.bind(H);
H.removeTrailingPathSeparator.bind(H);
H.addTrailingPathSeparator.bind(H);
var _s;
(function(e) {
  e.META_DATA_LABEL = "label", e.META_DATA_DESCRIPTION = "description", e.META_DATA_SIZE = "size", e.META_DATA_MIME = "mime";
  function t(n) {
    const i = /* @__PURE__ */ new Map();
    n.path.substring(n.path.indexOf(";") + 1, n.path.lastIndexOf(";")).split(";").forEach((a) => {
      const [l, u] = a.split(":");
      l && u && i.set(l, u);
    });
    const s = n.path.substring(0, n.path.indexOf(";"));
    return s && i.set(e.META_DATA_MIME, s), i;
  }
  e.parseMetaData = t;
})(_s || (_s = {}));
var Ls;
(function(e) {
  async function t(i) {
    let r;
    const s = await Promise.all(i.map((a) => a.then((l) => l, (l) => {
      r || (r = l);
    })));
    if (typeof r < "u")
      throw r;
    return s;
  }
  e.settled = t;
  function n(i) {
    return new Promise(async (r, s) => {
      try {
        await i(r, s);
      } catch (a) {
        s(a);
      }
    });
  }
  e.withAsyncBody = n;
})(Ls || (Ls = {}));
const ue = class ue {
  static fromArray(t) {
    return new ue((n) => {
      n.emitMany(t);
    });
  }
  static fromPromise(t) {
    return new ue(async (n) => {
      n.emitMany(await t);
    });
  }
  static fromPromises(t) {
    return new ue(async (n) => {
      await Promise.all(t.map(async (i) => n.emitOne(await i)));
    });
  }
  static merge(t) {
    return new ue(async (n) => {
      await Promise.all(t.map(async (i) => {
        for await (const r of i)
          n.emitOne(r);
      }));
    });
  }
  constructor(t, n) {
    this._state = 0, this._results = [], this._error = null, this._onReturn = n, this._onStateChanged = new be(), queueMicrotask(async () => {
      const i = {
        emitOne: (r) => this.emitOne(r),
        emitMany: (r) => this.emitMany(r),
        reject: (r) => this.reject(r)
      };
      try {
        await Promise.resolve(t(i)), this.resolve();
      } catch (r) {
        this.reject(r);
      } finally {
        i.emitOne = void 0, i.emitMany = void 0, i.reject = void 0;
      }
    });
  }
  [Symbol.asyncIterator]() {
    let t = 0;
    return {
      next: async () => {
        do {
          if (this._state === 2)
            throw this._error;
          if (t < this._results.length)
            return { done: !1, value: this._results[t++] };
          if (this._state === 1)
            return { done: !0, value: void 0 };
          await Zt.toPromise(this._onStateChanged.event);
        } while (!0);
      },
      return: async () => {
        var n;
        return (n = this._onReturn) == null || n.call(this), { done: !0, value: void 0 };
      }
    };
  }
  static map(t, n) {
    return new ue(async (i) => {
      for await (const r of t)
        i.emitOne(n(r));
    });
  }
  map(t) {
    return ue.map(this, t);
  }
  static filter(t, n) {
    return new ue(async (i) => {
      for await (const r of t)
        n(r) && i.emitOne(r);
    });
  }
  filter(t) {
    return ue.filter(this, t);
  }
  static coalesce(t) {
    return ue.filter(t, (n) => !!n);
  }
  coalesce() {
    return ue.coalesce(this);
  }
  static async toPromise(t) {
    const n = [];
    for await (const i of t)
      n.push(i);
    return n;
  }
  toPromise() {
    return ue.toPromise(this);
  }
  emitOne(t) {
    this._state === 0 && (this._results.push(t), this._onStateChanged.fire());
  }
  emitMany(t) {
    this._state === 0 && (this._results = this._results.concat(t), this._onStateChanged.fire());
  }
  resolve() {
    this._state === 0 && (this._state = 1, this._onStateChanged.fire());
  }
  reject(t) {
    this._state === 0 && (this._state = 2, this._error = t, this._onStateChanged.fire());
  }
};
ue.EMPTY = ue.fromArray([]);
let Ns = ue;
class Lu {
  constructor(t) {
    this.values = t, this.prefixSum = new Uint32Array(t.length), this.prefixSumValidIndex = new Int32Array(1), this.prefixSumValidIndex[0] = -1;
  }
  getCount() {
    return this.values.length;
  }
  insertValues(t, n) {
    t = Ke(t);
    const i = this.values, r = this.prefixSum, s = n.length;
    return s === 0 ? !1 : (this.values = new Uint32Array(i.length + s), this.values.set(i.subarray(0, t), 0), this.values.set(i.subarray(t), t + s), this.values.set(n, t), t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), this.prefixSum = new Uint32Array(this.values.length), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  setValue(t, n) {
    return t = Ke(t), n = Ke(n), this.values[t] === n ? !1 : (this.values[t] = n, t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), !0);
  }
  removeValues(t, n) {
    t = Ke(t), n = Ke(n);
    const i = this.values, r = this.prefixSum;
    if (t >= i.length)
      return !1;
    const s = i.length - t;
    return n >= s && (n = s), n === 0 ? !1 : (this.values = new Uint32Array(i.length - n), this.values.set(i.subarray(0, t), 0), this.values.set(i.subarray(t + n), t), this.prefixSum = new Uint32Array(this.values.length), t - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = t - 1), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  getTotalSum() {
    return this.values.length === 0 ? 0 : this._getPrefixSum(this.values.length - 1);
  }
  getPrefixSum(t) {
    return t < 0 ? 0 : (t = Ke(t), this._getPrefixSum(t));
  }
  _getPrefixSum(t) {
    if (t <= this.prefixSumValidIndex[0])
      return this.prefixSum[t];
    let n = this.prefixSumValidIndex[0] + 1;
    n === 0 && (this.prefixSum[0] = this.values[0], n++), t >= this.values.length && (t = this.values.length - 1);
    for (let i = n; i <= t; i++)
      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];
    return this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], t), this.prefixSum[t];
  }
  getIndexOf(t) {
    t = Math.floor(t), this.getTotalSum();
    let n = 0, i = this.values.length - 1, r = 0, s = 0, a = 0;
    for (; n <= i; )
      if (r = n + (i - n) / 2 | 0, s = this.prefixSum[r], a = s - this.values[r], t < a)
        i = r - 1;
      else if (t >= s)
        n = r + 1;
      else
        break;
    return new Nu(r, t - a);
  }
}
class Nu {
  constructor(t, n) {
    this.index = t, this.remainder = n, this._prefixSumIndexOfResultBrand = void 0, this.index = t, this.remainder = n;
  }
}
class yu {
  constructor(t, n, i, r) {
    this._uri = t, this._lines = n, this._eol = i, this._versionId = r, this._lineStarts = null, this._cachedTextValue = null;
  }
  dispose() {
    this._lines.length = 0;
  }
  get version() {
    return this._versionId;
  }
  getText() {
    return this._cachedTextValue === null && (this._cachedTextValue = this._lines.join(this._eol)), this._cachedTextValue;
  }
  onEvents(t) {
    t.eol && t.eol !== this._eol && (this._eol = t.eol, this._lineStarts = null);
    const n = t.changes;
    for (const i of n)
      this._acceptDeleteRange(i.range), this._acceptInsertText(new j(i.range.startLineNumber, i.range.startColumn), i.text);
    this._versionId = t.versionId, this._cachedTextValue = null;
  }
  _ensureLineStarts() {
    if (!this._lineStarts) {
      const t = this._eol.length, n = this._lines.length, i = new Uint32Array(n);
      for (let r = 0; r < n; r++)
        i[r] = this._lines[r].length + t;
      this._lineStarts = new Lu(i);
    }
  }
  _setLineText(t, n) {
    this._lines[t] = n, this._lineStarts && this._lineStarts.setValue(t, this._lines[t].length + this._eol.length);
  }
  _acceptDeleteRange(t) {
    if (t.startLineNumber === t.endLineNumber) {
      if (t.startColumn === t.endColumn)
        return;
      this._setLineText(t.startLineNumber - 1, this._lines[t.startLineNumber - 1].substring(0, t.startColumn - 1) + this._lines[t.startLineNumber - 1].substring(t.endColumn - 1));
      return;
    }
    this._setLineText(t.startLineNumber - 1, this._lines[t.startLineNumber - 1].substring(0, t.startColumn - 1) + this._lines[t.endLineNumber - 1].substring(t.endColumn - 1)), this._lines.splice(t.startLineNumber, t.endLineNumber - t.startLineNumber), this._lineStarts && this._lineStarts.removeValues(t.startLineNumber, t.endLineNumber - t.startLineNumber);
  }
  _acceptInsertText(t, n) {
    if (n.length === 0)
      return;
    const i = co(n);
    if (i.length === 1) {
      this._setLineText(t.lineNumber - 1, this._lines[t.lineNumber - 1].substring(0, t.column - 1) + i[0] + this._lines[t.lineNumber - 1].substring(t.column - 1));
      return;
    }
    i[i.length - 1] += this._lines[t.lineNumber - 1].substring(t.column - 1), this._setLineText(t.lineNumber - 1, this._lines[t.lineNumber - 1].substring(0, t.column - 1) + i[0]);
    const r = new Uint32Array(i.length - 1);
    for (let s = 1; s < i.length; s++)
      this._lines.splice(t.lineNumber + s - 1, 0, i[s]), r[s - 1] = i[s].length + this._eol.length;
    this._lineStarts && this._lineStarts.insertValues(t.lineNumber, r);
  }
}
const Au = "workerTextModelSync";
class Ru {
  constructor() {
    this._models = /* @__PURE__ */ Object.create(null);
  }
  bindToServer(t) {
    t.setChannel(Au, this);
  }
  getModel(t) {
    return this._models[t];
  }
  getModels() {
    const t = [];
    return Object.keys(this._models).forEach((n) => t.push(this._models[n])), t;
  }
  $acceptNewModel(t) {
    this._models[t.url] = new Su(me.parse(t.url), t.lines, t.EOL, t.versionId);
  }
  $acceptModelChanged(t, n) {
    if (!this._models[t])
      return;
    this._models[t].onEvents(n);
  }
  $acceptRemovedModel(t) {
    this._models[t] && delete this._models[t];
  }
}
class Su extends yu {
  get uri() {
    return this._uri;
  }
  get eol() {
    return this._eol;
  }
  getValue() {
    return this.getText();
  }
  findMatches(t) {
    const n = [];
    for (let i = 0; i < this._lines.length; i++) {
      const r = this._lines[i], s = this.offsetAt(new j(i + 1, 1)), a = r.matchAll(t);
      for (const l of a)
        (l.index || l.index === 0) && (l.index = l.index + s), n.push(l);
    }
    return n;
  }
  getLinesContent() {
    return this._lines.slice(0);
  }
  getLineCount() {
    return this._lines.length;
  }
  getLineContent(t) {
    return this._lines[t - 1];
  }
  getWordAtPosition(t, n) {
    const i = wi(t.column, ra(n), this._lines[t.lineNumber - 1], 0);
    return i ? new U(
      t.lineNumber,
      i.startColumn,
      t.lineNumber,
      i.endColumn
    ) : null;
  }
  getWordUntilPosition(t, n) {
    const i = this.getWordAtPosition(t, n);
    return i ? {
      word: this._lines[t.lineNumber - 1].substring(i.startColumn - 1, t.column - 1),
      startColumn: i.startColumn,
      endColumn: t.column
    } : {
      word: "",
      startColumn: t.column,
      endColumn: t.column
    };
  }
  words(t) {
    const n = this._lines, i = this._wordenize.bind(this);
    let r = 0, s = "", a = 0, l = [];
    return {
      *[Symbol.iterator]() {
        for (; ; )
          if (a < l.length) {
            const u = s.substring(l[a].start, l[a].end);
            a += 1, yield u;
          } else if (r < n.length)
            s = n[r], l = i(s, t), a = 0, r += 1;
          else
            break;
      }
    };
  }
  getLineWords(t, n) {
    const i = this._lines[t - 1], r = this._wordenize(i, n), s = [];
    for (const a of r)
      s.push({
        word: i.substring(a.start, a.end),
        startColumn: a.start + 1,
        endColumn: a.end + 1
      });
    return s;
  }
  _wordenize(t, n) {
    const i = [];
    let r;
    for (n.lastIndex = 0; (r = n.exec(t)) && r[0].length !== 0; )
      i.push({ start: r.index, end: r.index + r[0].length });
    return i;
  }
  getValueInRange(t) {
    if (t = this._validateRange(t), t.startLineNumber === t.endLineNumber)
      return this._lines[t.startLineNumber - 1].substring(t.startColumn - 1, t.endColumn - 1);
    const n = this._eol, i = t.startLineNumber - 1, r = t.endLineNumber - 1, s = [];
    s.push(this._lines[i].substring(t.startColumn - 1));
    for (let a = i + 1; a < r; a++)
      s.push(this._lines[a]);
    return s.push(this._lines[r].substring(0, t.endColumn - 1)), s.join(n);
  }
  offsetAt(t) {
    return t = this._validatePosition(t), this._ensureLineStarts(), this._lineStarts.getPrefixSum(t.lineNumber - 2) + (t.column - 1);
  }
  positionAt(t) {
    t = Math.floor(t), t = Math.max(0, t), this._ensureLineStarts();
    const n = this._lineStarts.getIndexOf(t), i = this._lines[n.index].length;
    return {
      lineNumber: 1 + n.index,
      column: 1 + Math.min(n.remainder, i)
    };
  }
  _validateRange(t) {
    const n = this._validatePosition({ lineNumber: t.startLineNumber, column: t.startColumn }), i = this._validatePosition({ lineNumber: t.endLineNumber, column: t.endColumn });
    return n.lineNumber !== t.startLineNumber || n.column !== t.startColumn || i.lineNumber !== t.endLineNumber || i.column !== t.endColumn ? {
      startLineNumber: n.lineNumber,
      startColumn: n.column,
      endLineNumber: i.lineNumber,
      endColumn: i.column
    } : t;
  }
  _validatePosition(t) {
    if (!j.isIPosition(t))
      throw new Error("bad position");
    let { lineNumber: n, column: i } = t, r = !1;
    if (n < 1)
      n = 1, i = 1, r = !0;
    else if (n > this._lines.length)
      n = this._lines.length, i = this._lines[n - 1].length + 1, r = !0;
    else {
      const s = this._lines[n - 1].length + 1;
      i < 1 ? (i = 1, r = !0) : i > s && (i = s, r = !0);
    }
    return r ? { lineNumber: n, column: i } : t;
  }
}
const xn = class xn {
  constructor() {
    this._workerTextModelSyncServer = new Ru();
  }
  dispose() {
  }
  _getModel(t) {
    return this._workerTextModelSyncServer.getModel(t);
  }
  _getModels() {
    return this._workerTextModelSyncServer.getModels();
  }
  $acceptNewModel(t) {
    this._workerTextModelSyncServer.$acceptNewModel(t);
  }
  $acceptModelChanged(t, n) {
    this._workerTextModelSyncServer.$acceptModelChanged(t, n);
  }
  $acceptRemovedModel(t) {
    this._workerTextModelSyncServer.$acceptRemovedModel(t);
  }
  async $computeUnicodeHighlights(t, n, i) {
    const r = this._getModel(t);
    return r ? Ml.computeUnicodeHighlights(r, n, i) : { ranges: [], hasMore: !1, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };
  }
  async $findSectionHeaders(t, n) {
    const i = this._getModel(t);
    return i ? uu(i, n) : [];
  }
  async $computeDiff(t, n, i, r) {
    const s = this._getModel(t), a = this._getModel(n);
    return !s || !a ? null : Nt.computeDiff(s, a, i, r);
  }
  static computeDiff(t, n, i, r) {
    const s = r === "advanced" ? En.getDefault() : En.getLegacy(), a = t.getLinesContent(), l = n.getLinesContent(), u = s.computeDiff(a, l, i), c = u.changes.length > 0 ? !1 : this._modelsAreIdentical(t, n);
    function h(f) {
      return f.map(
        (m) => {
          var d;
          return [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (d = m.innerChanges) == null ? void 0 : d.map((g) => [
            g.originalRange.startLineNumber,
            g.originalRange.startColumn,
            g.originalRange.endLineNumber,
            g.originalRange.endColumn,
            g.modifiedRange.startLineNumber,
            g.modifiedRange.startColumn,
            g.modifiedRange.endLineNumber,
            g.modifiedRange.endColumn
          ])];
        }
      );
    }
    return {
      identical: c,
      quitEarly: u.hitTimeout,
      changes: h(u.changes),
      moves: u.moves.map((f) => [
        f.lineRangeMapping.original.startLineNumber,
        f.lineRangeMapping.original.endLineNumberExclusive,
        f.lineRangeMapping.modified.startLineNumber,
        f.lineRangeMapping.modified.endLineNumberExclusive,
        h(f.changes)
      ])
    };
  }
  static _modelsAreIdentical(t, n) {
    const i = t.getLineCount(), r = n.getLineCount();
    if (i !== r)
      return !1;
    for (let s = 1; s <= i; s++) {
      const a = t.getLineContent(s), l = n.getLineContent(s);
      if (a !== l)
        return !1;
    }
    return !0;
  }
  async $computeDirtyDiff(t, n, i) {
    const r = this._getModel(t), s = this._getModel(n);
    if (!r || !s)
      return null;
    const a = r.getLinesContent(), l = s.getLinesContent();
    return new la(a, l, {
      shouldComputeCharChanges: !1,
      shouldPostProcessCharChanges: !1,
      shouldIgnoreTrimWhitespace: i,
      shouldMakePrettyDiff: !0,
      maxComputationTime: 1e3
    }).computeDiff().changes;
  }
  async $computeMoreMinimalEdits(t, n, i) {
    const r = this._getModel(t);
    if (!r)
      return n;
    const s = [];
    let a;
    n = n.slice(0).sort((u, c) => {
      if (u.range && c.range)
        return U.compareRangesUsingStarts(u.range, c.range);
      const h = u.range ? 0 : 1, f = c.range ? 0 : 1;
      return h - f;
    });
    let l = 0;
    for (let u = 1; u < n.length; u++)
      U.getEndPosition(n[l].range).equals(U.getStartPosition(n[u].range)) ? (n[l].range = U.fromPositions(U.getStartPosition(n[l].range), U.getEndPosition(n[u].range)), n[l].text += n[u].text) : (l++, n[l] = n[u]);
    n.length = l + 1;
    for (let { range: u, text: c, eol: h } of n) {
      if (typeof h == "number" && (a = h), U.isEmpty(u) && !c)
        continue;
      const f = r.getValueInRange(u);
      if (c = c.replace(/\r\n|\n|\r/g, r.eol), f === c)
        continue;
      if (Math.max(c.length, f.length) > Nt._diffLimit) {
        s.push({ range: u, text: c });
        continue;
      }
      const m = Po(f, c, i), d = r.offsetAt(U.lift(u).getStartPosition());
      for (const g of m) {
        const b = r.positionAt(d + g.originalStart), _ = r.positionAt(d + g.originalStart + g.originalLength), L = {
          text: c.substr(g.modifiedStart, g.modifiedLength),
          range: { startLineNumber: b.lineNumber, startColumn: b.column, endLineNumber: _.lineNumber, endColumn: _.column }
        };
        r.getValueInRange(L.range) !== L.text && s.push(L);
      }
    }
    return typeof a == "number" && s.push({ eol: a, text: "", range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } }), s;
  }
  $computeHumanReadableDiff(t, n, i) {
    const r = this._getModel(t);
    if (!r)
      return n;
    const s = [];
    let a;
    n = n.slice(0).sort((l, u) => {
      if (l.range && u.range)
        return U.compareRangesUsingStarts(l.range, u.range);
      const c = l.range ? 0 : 1, h = u.range ? 0 : 1;
      return c - h;
    });
    for (let { range: l, text: u, eol: c } of n) {
      let b = function(L, A) {
        return new j(
          L.lineNumber + A.lineNumber - 1,
          A.lineNumber === 1 ? L.column + A.column - 1 : A.column
        );
      }, _ = function(L, A) {
        const M = [];
        for (let N = A.startLineNumber; N <= A.endLineNumber; N++) {
          const y = L[N - 1];
          N === A.startLineNumber && N === A.endLineNumber ? M.push(y.substring(A.startColumn - 1, A.endColumn - 1)) : N === A.startLineNumber ? M.push(y.substring(A.startColumn - 1)) : N === A.endLineNumber ? M.push(y.substring(0, A.endColumn - 1)) : M.push(y);
        }
        return M;
      };
      if (typeof c == "number" && (a = c), U.isEmpty(l) && !u)
        continue;
      const h = r.getValueInRange(l);
      if (u = u.replace(/\r\n|\n|\r/g, r.eol), h === u)
        continue;
      if (Math.max(u.length, h.length) > Nt._diffLimit) {
        s.push({ range: l, text: u });
        continue;
      }
      const f = h.split(/\r\n|\n|\r/), m = u.split(/\r\n|\n|\r/), d = En.getDefault().computeDiff(f, m, i), g = U.lift(l).getStartPosition();
      for (const L of d.changes)
        if (L.innerChanges)
          for (const A of L.innerChanges)
            s.push({
              range: U.fromPositions(b(g, A.originalRange.getStartPosition()), b(g, A.originalRange.getEndPosition())),
              text: _(m, A.modifiedRange).join(r.eol)
            });
        else
          throw new le("The experimental diff algorithm always produces inner changes");
    }
    return typeof a == "number" && s.push({ eol: a, text: "", range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } }), s;
  }
  async $computeLinks(t) {
    const n = this._getModel(t);
    return n ? Bo(n) : null;
  }
  async $computeDefaultDocumentColors(t) {
    const n = this._getModel(t);
    return n ? ou(n) : null;
  }
  async $textualSuggest(t, n, i, r) {
    const s = new wn(), a = new RegExp(i, r), l = /* @__PURE__ */ new Set();
    e: for (const u of t) {
      const c = this._getModel(u);
      if (c) {
        for (const h of c.words(a))
          if (!(h === n || !isNaN(Number(h))) && (l.add(h), l.size > Nt._suggestionsLimit))
            break e;
      }
    }
    return { words: Array.from(l), duration: s.elapsed() };
  }
  async $computeWordRanges(t, n, i, r) {
    const s = this._getModel(t);
    if (!s)
      return /* @__PURE__ */ Object.create(null);
    const a = new RegExp(i, r), l = /* @__PURE__ */ Object.create(null);
    for (let u = n.startLineNumber; u < n.endLineNumber; u++) {
      const c = s.getLineWords(u, a);
      for (const h of c) {
        if (!isNaN(Number(h.word)))
          continue;
        let f = l[h.word];
        f || (f = [], l[h.word] = f), f.push({
          startLineNumber: u,
          startColumn: h.startColumn,
          endLineNumber: u,
          endColumn: h.endColumn
        });
      }
    }
    return l;
  }
  async $navigateValueSet(t, n, i, r, s) {
    const a = this._getModel(t);
    if (!a)
      return null;
    const l = new RegExp(r, s);
    n.startColumn === n.endColumn && (n = {
      startLineNumber: n.startLineNumber,
      startColumn: n.startColumn,
      endLineNumber: n.endLineNumber,
      endColumn: n.endColumn + 1
    });
    const u = a.getValueInRange(n), c = a.getWordAtPosition({ lineNumber: n.startLineNumber, column: n.startColumn }, l);
    if (!c)
      return null;
    const h = a.getValueInRange(c);
    return Un.INSTANCE.navigateValueSet(n, u, c, h, i);
  }
};
xn._diffLimit = 1e5, xn._suggestionsLimit = 1e4;
let Kn = xn;
class Nt extends Kn {
  constructor(t, n) {
    super(), this._host = t, this._foreignModuleFactory = n, this._foreignModule = null;
  }
  async $ping() {
    return "pong";
  }
  $loadForeignModule(t, n, i) {
    const a = {
      host: xl(i, (l, u) => this._host.$fhr(l, u)),
      getMirrorModels: () => this._getModels()
    };
    return this._foreignModuleFactory ? (this._foreignModule = this._foreignModuleFactory(a, n), Promise.resolve(vl(this._foreignModule))) : Promise.reject(new Error("Unexpected usage"));
  }
  $fmr(t, n) {
    if (!this._foreignModule || typeof this._foreignModule[t] != "function")
      return Promise.reject(new Error("Missing requestHandler or method: " + t));
    try {
      return Promise.resolve(this._foreignModule[t].apply(this._foreignModule, n));
    } catch (i) {
      return Promise.reject(i);
    }
  }
}
typeof importScripts == "function" && (globalThis.monaco = bl());
let ei = !1;
function da(e) {
  if (ei)
    return;
  ei = !0;
  const t = new ko((n) => {
    globalThis.postMessage(n);
  }, (n) => new Nt(Xn.getChannel(n), null));
  globalThis.onmessage = (n) => {
    t.onmessage(n.data);
  };
}
globalThis.onmessage = (e) => {
  ei || da();
};
var ys;
(function(e) {
  e[e.lineFeed = 10] = "lineFeed", e[e.carriageReturn = 13] = "carriageReturn", e[e.space = 32] = "space", e[e._0 = 48] = "_0", e[e._1 = 49] = "_1", e[e._2 = 50] = "_2", e[e._3 = 51] = "_3", e[e._4 = 52] = "_4", e[e._5 = 53] = "_5", e[e._6 = 54] = "_6", e[e._7 = 55] = "_7", e[e._8 = 56] = "_8", e[e._9 = 57] = "_9", e[e.a = 97] = "a", e[e.b = 98] = "b", e[e.c = 99] = "c", e[e.d = 100] = "d", e[e.e = 101] = "e", e[e.f = 102] = "f", e[e.g = 103] = "g", e[e.h = 104] = "h", e[e.i = 105] = "i", e[e.j = 106] = "j", e[e.k = 107] = "k", e[e.l = 108] = "l", e[e.m = 109] = "m", e[e.n = 110] = "n", e[e.o = 111] = "o", e[e.p = 112] = "p", e[e.q = 113] = "q", e[e.r = 114] = "r", e[e.s = 115] = "s", e[e.t = 116] = "t", e[e.u = 117] = "u", e[e.v = 118] = "v", e[e.w = 119] = "w", e[e.x = 120] = "x", e[e.y = 121] = "y", e[e.z = 122] = "z", e[e.A = 65] = "A", e[e.B = 66] = "B", e[e.C = 67] = "C", e[e.D = 68] = "D", e[e.E = 69] = "E", e[e.F = 70] = "F", e[e.G = 71] = "G", e[e.H = 72] = "H", e[e.I = 73] = "I", e[e.J = 74] = "J", e[e.K = 75] = "K", e[e.L = 76] = "L", e[e.M = 77] = "M", e[e.N = 78] = "N", e[e.O = 79] = "O", e[e.P = 80] = "P", e[e.Q = 81] = "Q", e[e.R = 82] = "R", e[e.S = 83] = "S", e[e.T = 84] = "T", e[e.U = 85] = "U", e[e.V = 86] = "V", e[e.W = 87] = "W", e[e.X = 88] = "X", e[e.Y = 89] = "Y", e[e.Z = 90] = "Z", e[e.asterisk = 42] = "asterisk", e[e.backslash = 92] = "backslash", e[e.closeBrace = 125] = "closeBrace", e[e.closeBracket = 93] = "closeBracket", e[e.colon = 58] = "colon", e[e.comma = 44] = "comma", e[e.dot = 46] = "dot", e[e.doubleQuote = 34] = "doubleQuote", e[e.minus = 45] = "minus", e[e.openBrace = 123] = "openBrace", e[e.openBracket = 91] = "openBracket", e[e.plus = 43] = "plus", e[e.slash = 47] = "slash", e[e.formFeed = 12] = "formFeed", e[e.tab = 9] = "tab";
})(ys || (ys = {}));
new Array(20).fill(0).map((e, t) => " ".repeat(t));
var nt = 200;
new Array(nt).fill(0).map((e, t) => `
` + " ".repeat(t)), new Array(nt).fill(0).map((e, t) => "\r" + " ".repeat(t)), new Array(nt).fill(0).map((e, t) => `\r
` + " ".repeat(t)), new Array(nt).fill(0).map((e, t) => `
` + "	".repeat(t)), new Array(nt).fill(0).map((e, t) => "\r" + "	".repeat(t)), new Array(nt).fill(0).map((e, t) => `\r
` + "	".repeat(t));
var As;
(function(e) {
  e.DEFAULT = {
    allowTrailingComma: !1
  };
})(As || (As = {}));
var Rs;
(function(e) {
  e[e.None = 0] = "None", e[e.UnexpectedEndOfComment = 1] = "UnexpectedEndOfComment", e[e.UnexpectedEndOfString = 2] = "UnexpectedEndOfString", e[e.UnexpectedEndOfNumber = 3] = "UnexpectedEndOfNumber", e[e.InvalidUnicode = 4] = "InvalidUnicode", e[e.InvalidEscapeCharacter = 5] = "InvalidEscapeCharacter", e[e.InvalidCharacter = 6] = "InvalidCharacter";
})(Rs || (Rs = {}));
var Ss;
(function(e) {
  e[e.OpenBraceToken = 1] = "OpenBraceToken", e[e.CloseBraceToken = 2] = "CloseBraceToken", e[e.OpenBracketToken = 3] = "OpenBracketToken", e[e.CloseBracketToken = 4] = "CloseBracketToken", e[e.CommaToken = 5] = "CommaToken", e[e.ColonToken = 6] = "ColonToken", e[e.NullKeyword = 7] = "NullKeyword", e[e.TrueKeyword = 8] = "TrueKeyword", e[e.FalseKeyword = 9] = "FalseKeyword", e[e.StringLiteral = 10] = "StringLiteral", e[e.NumericLiteral = 11] = "NumericLiteral", e[e.LineCommentTrivia = 12] = "LineCommentTrivia", e[e.BlockCommentTrivia = 13] = "BlockCommentTrivia", e[e.LineBreakTrivia = 14] = "LineBreakTrivia", e[e.Trivia = 15] = "Trivia", e[e.Unknown = 16] = "Unknown", e[e.EOF = 17] = "EOF";
})(Ss || (Ss = {}));
var Es;
(function(e) {
  e[e.InvalidSymbol = 1] = "InvalidSymbol", e[e.InvalidNumberFormat = 2] = "InvalidNumberFormat", e[e.PropertyNameExpected = 3] = "PropertyNameExpected", e[e.ValueExpected = 4] = "ValueExpected", e[e.ColonExpected = 5] = "ColonExpected", e[e.CommaExpected = 6] = "CommaExpected", e[e.CloseBraceExpected = 7] = "CloseBraceExpected", e[e.CloseBracketExpected = 8] = "CloseBracketExpected", e[e.EndOfFileExpected = 9] = "EndOfFileExpected", e[e.InvalidCommentToken = 10] = "InvalidCommentToken", e[e.UnexpectedEndOfComment = 11] = "UnexpectedEndOfComment", e[e.UnexpectedEndOfString = 12] = "UnexpectedEndOfString", e[e.UnexpectedEndOfNumber = 13] = "UnexpectedEndOfNumber", e[e.InvalidUnicode = 14] = "InvalidUnicode", e[e.InvalidEscapeCharacter = 15] = "InvalidEscapeCharacter", e[e.InvalidCharacter = 16] = "InvalidCharacter";
})(Es || (Es = {}));
var Ms;
(function(e) {
  function t(n) {
    return typeof n == "string";
  }
  e.is = t;
})(Ms || (Ms = {}));
var ti;
(function(e) {
  function t(n) {
    return typeof n == "string";
  }
  e.is = t;
})(ti || (ti = {}));
var ks;
(function(e) {
  e.MIN_VALUE = -2147483648, e.MAX_VALUE = 2147483647;
  function t(n) {
    return typeof n == "number" && e.MIN_VALUE <= n && n <= e.MAX_VALUE;
  }
  e.is = t;
})(ks || (ks = {}));
var ln;
(function(e) {
  e.MIN_VALUE = 0, e.MAX_VALUE = 2147483647;
  function t(n) {
    return typeof n == "number" && e.MIN_VALUE <= n && n <= e.MAX_VALUE;
  }
  e.is = t;
})(ln || (ln = {}));
var Le;
(function(e) {
  function t(i, r) {
    return i === Number.MAX_VALUE && (i = ln.MAX_VALUE), r === Number.MAX_VALUE && (r = ln.MAX_VALUE), { line: i, character: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.objectLiteral(r) && p.uinteger(r.line) && p.uinteger(r.character);
  }
  e.is = n;
})(Le || (Le = {}));
var ie;
(function(e) {
  function t(i, r, s, a) {
    if (p.uinteger(i) && p.uinteger(r) && p.uinteger(s) && p.uinteger(a))
      return { start: Le.create(i, r), end: Le.create(s, a) };
    if (Le.is(i) && Le.is(r))
      return { start: i, end: r };
    throw new Error(`Range#create called with invalid arguments[${i}, ${r}, ${s}, ${a}]`);
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.objectLiteral(r) && Le.is(r.start) && Le.is(r.end);
  }
  e.is = n;
})(ie || (ie = {}));
var un;
(function(e) {
  function t(i, r) {
    return { uri: i, range: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.objectLiteral(r) && ie.is(r.range) && (p.string(r.uri) || p.undefined(r.uri));
  }
  e.is = n;
})(un || (un = {}));
var Cs;
(function(e) {
  function t(i, r, s, a) {
    return { targetUri: i, targetRange: r, targetSelectionRange: s, originSelectionRange: a };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.objectLiteral(r) && ie.is(r.targetRange) && p.string(r.targetUri) && ie.is(r.targetSelectionRange) && (ie.is(r.originSelectionRange) || p.undefined(r.originSelectionRange));
  }
  e.is = n;
})(Cs || (Cs = {}));
var ni;
(function(e) {
  function t(i, r, s, a) {
    return {
      red: i,
      green: r,
      blue: s,
      alpha: a
    };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && p.numberRange(r.red, 0, 1) && p.numberRange(r.green, 0, 1) && p.numberRange(r.blue, 0, 1) && p.numberRange(r.alpha, 0, 1);
  }
  e.is = n;
})(ni || (ni = {}));
var Ps;
(function(e) {
  function t(i, r) {
    return {
      range: i,
      color: r
    };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && ie.is(r.range) && ni.is(r.color);
  }
  e.is = n;
})(Ps || (Ps = {}));
var Is;
(function(e) {
  function t(i, r, s) {
    return {
      label: i,
      textEdit: r,
      additionalTextEdits: s
    };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && p.string(r.label) && (p.undefined(r.textEdit) || pt.is(r)) && (p.undefined(r.additionalTextEdits) || p.typedArray(r.additionalTextEdits, pt.is));
  }
  e.is = n;
})(Is || (Is = {}));
var Ts;
(function(e) {
  e.Comment = "comment", e.Imports = "imports", e.Region = "region";
})(Ts || (Ts = {}));
var Fs;
(function(e) {
  function t(i, r, s, a, l, u) {
    const c = {
      startLine: i,
      endLine: r
    };
    return p.defined(s) && (c.startCharacter = s), p.defined(a) && (c.endCharacter = a), p.defined(l) && (c.kind = l), p.defined(u) && (c.collapsedText = u), c;
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && p.uinteger(r.startLine) && p.uinteger(r.startLine) && (p.undefined(r.startCharacter) || p.uinteger(r.startCharacter)) && (p.undefined(r.endCharacter) || p.uinteger(r.endCharacter)) && (p.undefined(r.kind) || p.string(r.kind));
  }
  e.is = n;
})(Fs || (Fs = {}));
var ii;
(function(e) {
  function t(i, r) {
    return {
      location: i,
      message: r
    };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && un.is(r.location) && p.string(r.message);
  }
  e.is = n;
})(ii || (ii = {}));
var Ds;
(function(e) {
  e.Error = 1, e.Warning = 2, e.Information = 3, e.Hint = 4;
})(Ds || (Ds = {}));
var Bs;
(function(e) {
  e.Unnecessary = 1, e.Deprecated = 2;
})(Bs || (Bs = {}));
var Us;
(function(e) {
  function t(n) {
    const i = n;
    return p.objectLiteral(i) && p.string(i.href);
  }
  e.is = t;
})(Us || (Us = {}));
var cn;
(function(e) {
  function t(i, r, s, a, l, u) {
    let c = { range: i, message: r };
    return p.defined(s) && (c.severity = s), p.defined(a) && (c.code = a), p.defined(l) && (c.source = l), p.defined(u) && (c.relatedInformation = u), c;
  }
  e.create = t;
  function n(i) {
    var r;
    let s = i;
    return p.defined(s) && ie.is(s.range) && p.string(s.message) && (p.number(s.severity) || p.undefined(s.severity)) && (p.integer(s.code) || p.string(s.code) || p.undefined(s.code)) && (p.undefined(s.codeDescription) || p.string((r = s.codeDescription) === null || r === void 0 ? void 0 : r.href)) && (p.string(s.source) || p.undefined(s.source)) && (p.undefined(s.relatedInformation) || p.typedArray(s.relatedInformation, ii.is));
  }
  e.is = n;
})(cn || (cn = {}));
var bt;
(function(e) {
  function t(i, r, ...s) {
    let a = { title: i, command: r };
    return p.defined(s) && s.length > 0 && (a.arguments = s), a;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.string(r.title) && p.string(r.command);
  }
  e.is = n;
})(bt || (bt = {}));
var pt;
(function(e) {
  function t(s, a) {
    return { range: s, newText: a };
  }
  e.replace = t;
  function n(s, a) {
    return { range: { start: s, end: s }, newText: a };
  }
  e.insert = n;
  function i(s) {
    return { range: s, newText: "" };
  }
  e.del = i;
  function r(s) {
    const a = s;
    return p.objectLiteral(a) && p.string(a.newText) && ie.is(a.range);
  }
  e.is = r;
})(pt || (pt = {}));
var ri;
(function(e) {
  function t(i, r, s) {
    const a = { label: i };
    return r !== void 0 && (a.needsConfirmation = r), s !== void 0 && (a.description = s), a;
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && p.string(r.label) && (p.boolean(r.needsConfirmation) || r.needsConfirmation === void 0) && (p.string(r.description) || r.description === void 0);
  }
  e.is = n;
})(ri || (ri = {}));
var vt;
(function(e) {
  function t(n) {
    const i = n;
    return p.string(i);
  }
  e.is = t;
})(vt || (vt = {}));
var Vs;
(function(e) {
  function t(s, a, l) {
    return { range: s, newText: a, annotationId: l };
  }
  e.replace = t;
  function n(s, a, l) {
    return { range: { start: s, end: s }, newText: a, annotationId: l };
  }
  e.insert = n;
  function i(s, a) {
    return { range: s, newText: "", annotationId: a };
  }
  e.del = i;
  function r(s) {
    const a = s;
    return pt.is(a) && (ri.is(a.annotationId) || vt.is(a.annotationId));
  }
  e.is = r;
})(Vs || (Vs = {}));
var si;
(function(e) {
  function t(i, r) {
    return { textDocument: i, edits: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && ci.is(r.textDocument) && Array.isArray(r.edits);
  }
  e.is = n;
})(si || (si = {}));
var ai;
(function(e) {
  function t(i, r, s) {
    let a = {
      kind: "create",
      uri: i
    };
    return r !== void 0 && (r.overwrite !== void 0 || r.ignoreIfExists !== void 0) && (a.options = r), s !== void 0 && (a.annotationId = s), a;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return r && r.kind === "create" && p.string(r.uri) && (r.options === void 0 || (r.options.overwrite === void 0 || p.boolean(r.options.overwrite)) && (r.options.ignoreIfExists === void 0 || p.boolean(r.options.ignoreIfExists))) && (r.annotationId === void 0 || vt.is(r.annotationId));
  }
  e.is = n;
})(ai || (ai = {}));
var oi;
(function(e) {
  function t(i, r, s, a) {
    let l = {
      kind: "rename",
      oldUri: i,
      newUri: r
    };
    return s !== void 0 && (s.overwrite !== void 0 || s.ignoreIfExists !== void 0) && (l.options = s), a !== void 0 && (l.annotationId = a), l;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return r && r.kind === "rename" && p.string(r.oldUri) && p.string(r.newUri) && (r.options === void 0 || (r.options.overwrite === void 0 || p.boolean(r.options.overwrite)) && (r.options.ignoreIfExists === void 0 || p.boolean(r.options.ignoreIfExists))) && (r.annotationId === void 0 || vt.is(r.annotationId));
  }
  e.is = n;
})(oi || (oi = {}));
var li;
(function(e) {
  function t(i, r, s) {
    let a = {
      kind: "delete",
      uri: i
    };
    return r !== void 0 && (r.recursive !== void 0 || r.ignoreIfNotExists !== void 0) && (a.options = r), s !== void 0 && (a.annotationId = s), a;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return r && r.kind === "delete" && p.string(r.uri) && (r.options === void 0 || (r.options.recursive === void 0 || p.boolean(r.options.recursive)) && (r.options.ignoreIfNotExists === void 0 || p.boolean(r.options.ignoreIfNotExists))) && (r.annotationId === void 0 || vt.is(r.annotationId));
  }
  e.is = n;
})(li || (li = {}));
var ui;
(function(e) {
  function t(n) {
    let i = n;
    return i && (i.changes !== void 0 || i.documentChanges !== void 0) && (i.documentChanges === void 0 || i.documentChanges.every((r) => p.string(r.kind) ? ai.is(r) || oi.is(r) || li.is(r) : si.is(r)));
  }
  e.is = t;
})(ui || (ui = {}));
var qs;
(function(e) {
  function t(i) {
    return { uri: i };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.string(r.uri);
  }
  e.is = n;
})(qs || (qs = {}));
var $s;
(function(e) {
  function t(i, r) {
    return { uri: i, version: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.string(r.uri) && p.integer(r.version);
  }
  e.is = n;
})($s || ($s = {}));
var ci;
(function(e) {
  function t(i, r) {
    return { uri: i, version: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.string(r.uri) && (r.version === null || p.integer(r.version));
  }
  e.is = n;
})(ci || (ci = {}));
var Os;
(function(e) {
  function t(i, r, s, a) {
    return { uri: i, languageId: r, version: s, text: a };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.string(r.uri) && p.string(r.languageId) && p.integer(r.version) && p.string(r.text);
  }
  e.is = n;
})(Os || (Os = {}));
var Dt;
(function(e) {
  e.PlainText = "plaintext", e.Markdown = "markdown";
  function t(n) {
    const i = n;
    return i === e.PlainText || i === e.Markdown;
  }
  e.is = t;
})(Dt || (Dt = {}));
var Bt;
(function(e) {
  function t(n) {
    const i = n;
    return p.objectLiteral(n) && Dt.is(i.kind) && p.string(i.value);
  }
  e.is = t;
})(Bt || (Bt = {}));
var Ws;
(function(e) {
  e.Text = 1, e.Method = 2, e.Function = 3, e.Constructor = 4, e.Field = 5, e.Variable = 6, e.Class = 7, e.Interface = 8, e.Module = 9, e.Property = 10, e.Unit = 11, e.Value = 12, e.Enum = 13, e.Keyword = 14, e.Snippet = 15, e.Color = 16, e.File = 17, e.Reference = 18, e.Folder = 19, e.EnumMember = 20, e.Constant = 21, e.Struct = 22, e.Event = 23, e.Operator = 24, e.TypeParameter = 25;
})(Ws || (Ws = {}));
var zs;
(function(e) {
  e.PlainText = 1, e.Snippet = 2;
})(zs || (zs = {}));
var Hs;
(function(e) {
  e.Deprecated = 1;
})(Hs || (Hs = {}));
var js;
(function(e) {
  function t(i, r, s) {
    return { newText: i, insert: r, replace: s };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return r && p.string(r.newText) && ie.is(r.insert) && ie.is(r.replace);
  }
  e.is = n;
})(js || (js = {}));
var Gs;
(function(e) {
  e.asIs = 1, e.adjustIndentation = 2;
})(Gs || (Gs = {}));
var Xs;
(function(e) {
  function t(n) {
    const i = n;
    return i && (p.string(i.detail) || i.detail === void 0) && (p.string(i.description) || i.description === void 0);
  }
  e.is = t;
})(Xs || (Xs = {}));
var Qs;
(function(e) {
  function t(n) {
    return { label: n };
  }
  e.create = t;
})(Qs || (Qs = {}));
var Js;
(function(e) {
  function t(n, i) {
    return { items: n || [], isIncomplete: !!i };
  }
  e.create = t;
})(Js || (Js = {}));
var hn;
(function(e) {
  function t(i) {
    return i.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
  }
  e.fromPlainText = t;
  function n(i) {
    const r = i;
    return p.string(r) || p.objectLiteral(r) && p.string(r.language) && p.string(r.value);
  }
  e.is = n;
})(hn || (hn = {}));
var Ys;
(function(e) {
  function t(n) {
    let i = n;
    return !!i && p.objectLiteral(i) && (Bt.is(i.contents) || hn.is(i.contents) || p.typedArray(i.contents, hn.is)) && (n.range === void 0 || ie.is(n.range));
  }
  e.is = t;
})(Ys || (Ys = {}));
var Zs;
(function(e) {
  function t(n, i) {
    return i ? { label: n, documentation: i } : { label: n };
  }
  e.create = t;
})(Zs || (Zs = {}));
var Ks;
(function(e) {
  function t(n, i, ...r) {
    let s = { label: n };
    return p.defined(i) && (s.documentation = i), p.defined(r) ? s.parameters = r : s.parameters = [], s;
  }
  e.create = t;
})(Ks || (Ks = {}));
var e1;
(function(e) {
  e.Text = 1, e.Read = 2, e.Write = 3;
})(e1 || (e1 = {}));
var t1;
(function(e) {
  function t(n, i) {
    let r = { range: n };
    return p.number(i) && (r.kind = i), r;
  }
  e.create = t;
})(t1 || (t1 = {}));
var n1;
(function(e) {
  e.File = 1, e.Module = 2, e.Namespace = 3, e.Package = 4, e.Class = 5, e.Method = 6, e.Property = 7, e.Field = 8, e.Constructor = 9, e.Enum = 10, e.Interface = 11, e.Function = 12, e.Variable = 13, e.Constant = 14, e.String = 15, e.Number = 16, e.Boolean = 17, e.Array = 18, e.Object = 19, e.Key = 20, e.Null = 21, e.EnumMember = 22, e.Struct = 23, e.Event = 24, e.Operator = 25, e.TypeParameter = 26;
})(n1 || (n1 = {}));
var i1;
(function(e) {
  e.Deprecated = 1;
})(i1 || (i1 = {}));
var r1;
(function(e) {
  function t(n, i, r, s, a) {
    let l = {
      name: n,
      kind: i,
      location: { uri: s, range: r }
    };
    return a && (l.containerName = a), l;
  }
  e.create = t;
})(r1 || (r1 = {}));
var s1;
(function(e) {
  function t(n, i, r, s) {
    return s !== void 0 ? { name: n, kind: i, location: { uri: r, range: s } } : { name: n, kind: i, location: { uri: r } };
  }
  e.create = t;
})(s1 || (s1 = {}));
var a1;
(function(e) {
  function t(i, r, s, a, l, u) {
    let c = {
      name: i,
      detail: r,
      kind: s,
      range: a,
      selectionRange: l
    };
    return u !== void 0 && (c.children = u), c;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return r && p.string(r.name) && p.number(r.kind) && ie.is(r.range) && ie.is(r.selectionRange) && (r.detail === void 0 || p.string(r.detail)) && (r.deprecated === void 0 || p.boolean(r.deprecated)) && (r.children === void 0 || Array.isArray(r.children)) && (r.tags === void 0 || Array.isArray(r.tags));
  }
  e.is = n;
})(a1 || (a1 = {}));
var o1;
(function(e) {
  e.Empty = "", e.QuickFix = "quickfix", e.Refactor = "refactor", e.RefactorExtract = "refactor.extract", e.RefactorInline = "refactor.inline", e.RefactorRewrite = "refactor.rewrite", e.Source = "source", e.SourceOrganizeImports = "source.organizeImports", e.SourceFixAll = "source.fixAll";
})(o1 || (o1 = {}));
var fn;
(function(e) {
  e.Invoked = 1, e.Automatic = 2;
})(fn || (fn = {}));
var l1;
(function(e) {
  function t(i, r, s) {
    let a = { diagnostics: i };
    return r != null && (a.only = r), s != null && (a.triggerKind = s), a;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.typedArray(r.diagnostics, cn.is) && (r.only === void 0 || p.typedArray(r.only, p.string)) && (r.triggerKind === void 0 || r.triggerKind === fn.Invoked || r.triggerKind === fn.Automatic);
  }
  e.is = n;
})(l1 || (l1 = {}));
var u1;
(function(e) {
  function t(i, r, s) {
    let a = { title: i }, l = !0;
    return typeof r == "string" ? (l = !1, a.kind = r) : bt.is(r) ? a.command = r : a.edit = r, l && s !== void 0 && (a.kind = s), a;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return r && p.string(r.title) && (r.diagnostics === void 0 || p.typedArray(r.diagnostics, cn.is)) && (r.kind === void 0 || p.string(r.kind)) && (r.edit !== void 0 || r.command !== void 0) && (r.command === void 0 || bt.is(r.command)) && (r.isPreferred === void 0 || p.boolean(r.isPreferred)) && (r.edit === void 0 || ui.is(r.edit));
  }
  e.is = n;
})(u1 || (u1 = {}));
var c1;
(function(e) {
  function t(i, r) {
    let s = { range: i };
    return p.defined(r) && (s.data = r), s;
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && ie.is(r.range) && (p.undefined(r.command) || bt.is(r.command));
  }
  e.is = n;
})(c1 || (c1 = {}));
var h1;
(function(e) {
  function t(i, r) {
    return { tabSize: i, insertSpaces: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && p.uinteger(r.tabSize) && p.boolean(r.insertSpaces);
  }
  e.is = n;
})(h1 || (h1 = {}));
var f1;
(function(e) {
  function t(i, r, s) {
    return { range: i, target: r, data: s };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.defined(r) && ie.is(r.range) && (p.undefined(r.target) || p.string(r.target));
  }
  e.is = n;
})(f1 || (f1 = {}));
var d1;
(function(e) {
  function t(i, r) {
    return { range: i, parent: r };
  }
  e.create = t;
  function n(i) {
    let r = i;
    return p.objectLiteral(r) && ie.is(r.range) && (r.parent === void 0 || e.is(r.parent));
  }
  e.is = n;
})(d1 || (d1 = {}));
var m1;
(function(e) {
  e.namespace = "namespace", e.type = "type", e.class = "class", e.enum = "enum", e.interface = "interface", e.struct = "struct", e.typeParameter = "typeParameter", e.parameter = "parameter", e.variable = "variable", e.property = "property", e.enumMember = "enumMember", e.event = "event", e.function = "function", e.method = "method", e.macro = "macro", e.keyword = "keyword", e.modifier = "modifier", e.comment = "comment", e.string = "string", e.number = "number", e.regexp = "regexp", e.operator = "operator", e.decorator = "decorator";
})(m1 || (m1 = {}));
var g1;
(function(e) {
  e.declaration = "declaration", e.definition = "definition", e.readonly = "readonly", e.static = "static", e.deprecated = "deprecated", e.abstract = "abstract", e.async = "async", e.modification = "modification", e.documentation = "documentation", e.defaultLibrary = "defaultLibrary";
})(g1 || (g1 = {}));
var b1;
(function(e) {
  function t(n) {
    const i = n;
    return p.objectLiteral(i) && (i.resultId === void 0 || typeof i.resultId == "string") && Array.isArray(i.data) && (i.data.length === 0 || typeof i.data[0] == "number");
  }
  e.is = t;
})(b1 || (b1 = {}));
var p1;
(function(e) {
  function t(i, r) {
    return { range: i, text: r };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return r != null && ie.is(r.range) && p.string(r.text);
  }
  e.is = n;
})(p1 || (p1 = {}));
var v1;
(function(e) {
  function t(i, r, s) {
    return { range: i, variableName: r, caseSensitiveLookup: s };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return r != null && ie.is(r.range) && p.boolean(r.caseSensitiveLookup) && (p.string(r.variableName) || r.variableName === void 0);
  }
  e.is = n;
})(v1 || (v1 = {}));
var x1;
(function(e) {
  function t(i, r) {
    return { range: i, expression: r };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return r != null && ie.is(r.range) && (p.string(r.expression) || r.expression === void 0);
  }
  e.is = n;
})(x1 || (x1 = {}));
var w1;
(function(e) {
  function t(i, r) {
    return { frameId: i, stoppedLocation: r };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.defined(r) && ie.is(i.stoppedLocation);
  }
  e.is = n;
})(w1 || (w1 = {}));
var hi;
(function(e) {
  e.Type = 1, e.Parameter = 2;
  function t(n) {
    return n === 1 || n === 2;
  }
  e.is = t;
})(hi || (hi = {}));
var fi;
(function(e) {
  function t(i) {
    return { value: i };
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && (r.tooltip === void 0 || p.string(r.tooltip) || Bt.is(r.tooltip)) && (r.location === void 0 || un.is(r.location)) && (r.command === void 0 || bt.is(r.command));
  }
  e.is = n;
})(fi || (fi = {}));
var _1;
(function(e) {
  function t(i, r, s) {
    const a = { position: i, label: r };
    return s !== void 0 && (a.kind = s), a;
  }
  e.create = t;
  function n(i) {
    const r = i;
    return p.objectLiteral(r) && Le.is(r.position) && (p.string(r.label) || p.typedArray(r.label, fi.is)) && (r.kind === void 0 || hi.is(r.kind)) && r.textEdits === void 0 || p.typedArray(r.textEdits, pt.is) && (r.tooltip === void 0 || p.string(r.tooltip) || Bt.is(r.tooltip)) && (r.paddingLeft === void 0 || p.boolean(r.paddingLeft)) && (r.paddingRight === void 0 || p.boolean(r.paddingRight));
  }
  e.is = n;
})(_1 || (_1 = {}));
var L1;
(function(e) {
  function t(n) {
    return { kind: "snippet", value: n };
  }
  e.createSnippet = t;
})(L1 || (L1 = {}));
var N1;
(function(e) {
  function t(n, i, r, s) {
    return { insertText: n, filterText: i, range: r, command: s };
  }
  e.create = t;
})(N1 || (N1 = {}));
var y1;
(function(e) {
  function t(n) {
    return { items: n };
  }
  e.create = t;
})(y1 || (y1 = {}));
var A1;
(function(e) {
  e.Invoked = 0, e.Automatic = 1;
})(A1 || (A1 = {}));
var R1;
(function(e) {
  function t(n, i) {
    return { range: n, text: i };
  }
  e.create = t;
})(R1 || (R1 = {}));
var S1;
(function(e) {
  function t(n, i) {
    return { triggerKind: n, selectedCompletionInfo: i };
  }
  e.create = t;
})(S1 || (S1 = {}));
var E1;
(function(e) {
  function t(n) {
    const i = n;
    return p.objectLiteral(i) && ti.is(i.uri) && p.string(i.name);
  }
  e.is = t;
})(E1 || (E1 = {}));
var M1;
(function(e) {
  function t(s, a, l, u) {
    return new Eu(s, a, l, u);
  }
  e.create = t;
  function n(s) {
    let a = s;
    return !!(p.defined(a) && p.string(a.uri) && (p.undefined(a.languageId) || p.string(a.languageId)) && p.uinteger(a.lineCount) && p.func(a.getText) && p.func(a.positionAt) && p.func(a.offsetAt));
  }
  e.is = n;
  function i(s, a) {
    let l = s.getText(), u = r(a, (h, f) => {
      let m = h.range.start.line - f.range.start.line;
      return m === 0 ? h.range.start.character - f.range.start.character : m;
    }), c = l.length;
    for (let h = u.length - 1; h >= 0; h--) {
      let f = u[h], m = s.offsetAt(f.range.start), d = s.offsetAt(f.range.end);
      if (d <= c)
        l = l.substring(0, m) + f.newText + l.substring(d, l.length);
      else
        throw new Error("Overlapping edit");
      c = m;
    }
    return l;
  }
  e.applyEdits = i;
  function r(s, a) {
    if (s.length <= 1)
      return s;
    const l = s.length / 2 | 0, u = s.slice(0, l), c = s.slice(l);
    r(u, a), r(c, a);
    let h = 0, f = 0, m = 0;
    for (; h < u.length && f < c.length; )
      a(u[h], c[f]) <= 0 ? s[m++] = u[h++] : s[m++] = c[f++];
    for (; h < u.length; )
      s[m++] = u[h++];
    for (; f < c.length; )
      s[m++] = c[f++];
    return s;
  }
})(M1 || (M1 = {}));
var Eu = class {
  constructor(e, t, n, i) {
    this._uri = e, this._languageId = t, this._version = n, this._content = i, this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(e) {
    if (e) {
      let t = this.offsetAt(e.start), n = this.offsetAt(e.end);
      return this._content.substring(t, n);
    }
    return this._content;
  }
  update(e, t) {
    this._content = e.text, this._version = t, this._lineOffsets = void 0;
  }
  getLineOffsets() {
    if (this._lineOffsets === void 0) {
      let e = [], t = this._content, n = !0;
      for (let i = 0; i < t.length; i++) {
        n && (e.push(i), n = !1);
        let r = t.charAt(i);
        n = r === "\r" || r === `
`, r === "\r" && i + 1 < t.length && t.charAt(i + 1) === `
` && i++;
      }
      n && t.length > 0 && e.push(t.length), this._lineOffsets = e;
    }
    return this._lineOffsets;
  }
  positionAt(e) {
    e = Math.max(Math.min(e, this._content.length), 0);
    let t = this.getLineOffsets(), n = 0, i = t.length;
    if (i === 0)
      return Le.create(0, e);
    for (; n < i; ) {
      let s = Math.floor((n + i) / 2);
      t[s] > e ? i = s : n = s + 1;
    }
    let r = n - 1;
    return Le.create(r, e - t[r]);
  }
  offsetAt(e) {
    let t = this.getLineOffsets();
    if (e.line >= t.length)
      return this._content.length;
    if (e.line < 0)
      return 0;
    let n = t[e.line], i = e.line + 1 < t.length ? t[e.line + 1] : this._content.length;
    return Math.max(Math.min(n + e.character, i), n);
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
}, p;
(function(e) {
  const t = Object.prototype.toString;
  function n(d) {
    return typeof d < "u";
  }
  e.defined = n;
  function i(d) {
    return typeof d > "u";
  }
  e.undefined = i;
  function r(d) {
    return d === !0 || d === !1;
  }
  e.boolean = r;
  function s(d) {
    return t.call(d) === "[object String]";
  }
  e.string = s;
  function a(d) {
    return t.call(d) === "[object Number]";
  }
  e.number = a;
  function l(d, g, b) {
    return t.call(d) === "[object Number]" && g <= d && d <= b;
  }
  e.numberRange = l;
  function u(d) {
    return t.call(d) === "[object Number]" && -2147483648 <= d && d <= 2147483647;
  }
  e.integer = u;
  function c(d) {
    return t.call(d) === "[object Number]" && 0 <= d && d <= 2147483647;
  }
  e.uinteger = c;
  function h(d) {
    return t.call(d) === "[object Function]";
  }
  e.func = h;
  function f(d) {
    return d !== null && typeof d == "object";
  }
  e.objectLiteral = f;
  function m(d, g) {
    return Array.isArray(d) && d.every(g);
  }
  e.typedArray = m;
})(p || (p = {}));
var k1 = class di {
  constructor(t, n, i, r) {
    this._uri = t, this._languageId = n, this._version = i, this._content = r, this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(t) {
    if (t) {
      const n = this.offsetAt(t.start), i = this.offsetAt(t.end);
      return this._content.substring(n, i);
    }
    return this._content;
  }
  update(t, n) {
    for (let i of t)
      if (di.isIncremental(i)) {
        const r = ma(i.range), s = this.offsetAt(r.start), a = this.offsetAt(r.end);
        this._content = this._content.substring(0, s) + i.text + this._content.substring(a, this._content.length);
        const l = Math.max(r.start.line, 0), u = Math.max(r.end.line, 0);
        let c = this._lineOffsets;
        const h = P1(i.text, !1, s);
        if (u - l === h.length)
          for (let m = 0, d = h.length; m < d; m++)
            c[m + l + 1] = h[m];
        else
          h.length < 1e4 ? c.splice(l + 1, u - l, ...h) : this._lineOffsets = c = c.slice(0, l + 1).concat(h, c.slice(u + 1));
        const f = i.text.length - (a - s);
        if (f !== 0)
          for (let m = l + 1 + h.length, d = c.length; m < d; m++)
            c[m] = c[m] + f;
      } else if (di.isFull(i))
        this._content = i.text, this._lineOffsets = void 0;
      else
        throw new Error("Unknown change event received");
    this._version = n;
  }
  getLineOffsets() {
    return this._lineOffsets === void 0 && (this._lineOffsets = P1(this._content, !0)), this._lineOffsets;
  }
  positionAt(t) {
    t = Math.max(Math.min(t, this._content.length), 0);
    let n = this.getLineOffsets(), i = 0, r = n.length;
    if (r === 0)
      return { line: 0, character: t };
    for (; i < r; ) {
      let a = Math.floor((i + r) / 2);
      n[a] > t ? r = a : i = a + 1;
    }
    let s = i - 1;
    return { line: s, character: t - n[s] };
  }
  offsetAt(t) {
    let n = this.getLineOffsets();
    if (t.line >= n.length)
      return this._content.length;
    if (t.line < 0)
      return 0;
    let i = n[t.line], r = t.line + 1 < n.length ? n[t.line + 1] : this._content.length;
    return Math.max(Math.min(i + t.character, r), i);
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
  static isIncremental(t) {
    let n = t;
    return n != null && typeof n.text == "string" && n.range !== void 0 && (n.rangeLength === void 0 || typeof n.rangeLength == "number");
  }
  static isFull(t) {
    let n = t;
    return n != null && typeof n.text == "string" && n.range === void 0 && n.rangeLength === void 0;
  }
}, C1;
(function(e) {
  function t(r, s, a, l) {
    return new k1(r, s, a, l);
  }
  e.create = t;
  function n(r, s, a) {
    if (r instanceof k1)
      return r.update(s, a), r;
    throw new Error("TextDocument.update: document must be created by TextDocument.create");
  }
  e.update = n;
  function i(r, s) {
    let a = r.getText(), l = mi(s.map(Mu), (h, f) => {
      let m = h.range.start.line - f.range.start.line;
      return m === 0 ? h.range.start.character - f.range.start.character : m;
    }), u = 0;
    const c = [];
    for (const h of l) {
      let f = r.offsetAt(h.range.start);
      if (f < u)
        throw new Error("Overlapping edit");
      f > u && c.push(a.substring(u, f)), h.newText.length && c.push(h.newText), u = r.offsetAt(h.range.end);
    }
    return c.push(a.substr(u)), c.join("");
  }
  e.applyEdits = i;
})(C1 || (C1 = {}));
function mi(e, t) {
  if (e.length <= 1)
    return e;
  const n = e.length / 2 | 0, i = e.slice(0, n), r = e.slice(n);
  mi(i, t), mi(r, t);
  let s = 0, a = 0, l = 0;
  for (; s < i.length && a < r.length; )
    t(i[s], r[a]) <= 0 ? e[l++] = i[s++] : e[l++] = r[a++];
  for (; s < i.length; )
    e[l++] = i[s++];
  for (; a < r.length; )
    e[l++] = r[a++];
  return e;
}
function P1(e, t, n = 0) {
  const i = t ? [n] : [];
  for (let r = 0; r < e.length; r++) {
    let s = e.charCodeAt(r);
    (s === 13 || s === 10) && (s === 13 && r + 1 < e.length && e.charCodeAt(r + 1) === 10 && r++, i.push(n + r + 1));
  }
  return i;
}
function ma(e) {
  const t = e.start, n = e.end;
  return t.line > n.line || t.line === n.line && t.character > n.character ? { start: n, end: t } : e;
}
function Mu(e) {
  const t = ma(e.range);
  return t !== e.range ? { newText: e.newText, range: t } : e;
}
var I1;
(function(e) {
  e[e.Undefined = 0] = "Undefined", e[e.EnumValueMismatch = 1] = "EnumValueMismatch", e[e.Deprecated = 2] = "Deprecated", e[e.UnexpectedEndOfComment = 257] = "UnexpectedEndOfComment", e[e.UnexpectedEndOfString = 258] = "UnexpectedEndOfString", e[e.UnexpectedEndOfNumber = 259] = "UnexpectedEndOfNumber", e[e.InvalidUnicode = 260] = "InvalidUnicode", e[e.InvalidEscapeCharacter = 261] = "InvalidEscapeCharacter", e[e.InvalidCharacter = 262] = "InvalidCharacter", e[e.PropertyExpected = 513] = "PropertyExpected", e[e.CommaExpected = 514] = "CommaExpected", e[e.ColonExpected = 515] = "ColonExpected", e[e.ValueExpected = 516] = "ValueExpected", e[e.CommaOrCloseBacketExpected = 517] = "CommaOrCloseBacketExpected", e[e.CommaOrCloseBraceExpected = 518] = "CommaOrCloseBraceExpected", e[e.TrailingComma = 519] = "TrailingComma", e[e.DuplicateKey = 520] = "DuplicateKey", e[e.CommentNotPermitted = 521] = "CommentNotPermitted", e[e.PropertyKeysMustBeDoublequoted = 528] = "PropertyKeysMustBeDoublequoted", e[e.SchemaResolveError = 768] = "SchemaResolveError", e[e.SchemaUnsupportedFeature = 769] = "SchemaUnsupportedFeature";
})(I1 || (I1 = {}));
var Be;
(function(e) {
  e[e.v3 = 3] = "v3", e[e.v4 = 4] = "v4", e[e.v6 = 6] = "v6", e[e.v7 = 7] = "v7", e[e.v2019_09 = 19] = "v2019_09", e[e.v2020_12 = 20] = "v2020_12";
})(Be || (Be = {}));
var T1;
(function(e) {
  e.LATEST = {
    textDocument: {
      completion: {
        completionItem: {
          documentationFormat: [Dt.Markdown, Dt.PlainText],
          commitCharactersSupport: !0,
          labelDetailsSupport: !0
        }
      }
    }
  };
})(T1 || (T1 = {}));
function F(...e) {
  const t = e[0];
  let n, i, r;
  if (typeof t == "string")
    n = t, i = t, e.splice(0, 1), r = !e || typeof e[0] != "object" ? e : e[0];
  else if (t instanceof Array) {
    const s = e.slice(1);
    if (t.length !== s.length + 1)
      throw new Error("expected a string as the first argument to l10n.t");
    let a = t[0];
    for (let l = 1; l < t.length; l++)
      a += `{${l - 1}}` + t[l];
    return F(a, ...s);
  } else
    i = t.message, n = i, t.comment && t.comment.length > 0 && (n += `/${Array.isArray(t.comment) ? t.comment.join("") : t.comment}`), r = t.args ?? {};
  return Cu(i, r);
}
var ku = /{([^}]+)}/g;
function Cu(e, t) {
  return Object.keys(t).length === 0 ? e : e.replace(ku, (n, i) => t[i] ?? n);
}
F("Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."), F("String is not a RFC3339 date-time."), F("String is not a RFC3339 date."), F("String is not a RFC3339 time."), F("String is not an e-mail address."), F("String is not a hostname."), F("String is not an IPv4 address."), F("String is not an IPv6 address.");
var F1;
(function(e) {
  e[e.Key = 0] = "Key", e[e.Enum = 1] = "Enum";
})(F1 || (F1 = {}));
Be.v3, Be.v4, Be.v6, Be.v7, Be.v2019_09, Be.v2020_12;
var D1 = {
  schemaAssociations: [],
  schemas: {
    // bundle the schema-schema to include (localized) descriptions
    "http://json-schema.org/draft-04/schema#": {
      $schema: "http://json-schema.org/draft-04/schema#",
      definitions: {
        schemaArray: {
          type: "array",
          minItems: 1,
          items: {
            $ref: "#"
          }
        },
        positiveInteger: {
          type: "integer",
          minimum: 0
        },
        positiveIntegerDefault0: {
          allOf: [
            {
              $ref: "#/definitions/positiveInteger"
            },
            {
              default: 0
            }
          ]
        },
        simpleTypes: {
          type: "string",
          enum: [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        stringArray: {
          type: "array",
          items: {
            type: "string"
          },
          minItems: 1,
          uniqueItems: !0
        }
      },
      type: "object",
      properties: {
        id: {
          type: "string",
          format: "uri"
        },
        $schema: {
          type: "string",
          format: "uri"
        },
        title: {
          type: "string"
        },
        description: {
          type: "string"
        },
        default: {},
        multipleOf: {
          type: "number",
          minimum: 0,
          exclusiveMinimum: !0
        },
        maximum: {
          type: "number"
        },
        exclusiveMaximum: {
          type: "boolean",
          default: !1
        },
        minimum: {
          type: "number"
        },
        exclusiveMinimum: {
          type: "boolean",
          default: !1
        },
        maxLength: {
          allOf: [
            {
              $ref: "#/definitions/positiveInteger"
            }
          ]
        },
        minLength: {
          allOf: [
            {
              $ref: "#/definitions/positiveIntegerDefault0"
            }
          ]
        },
        pattern: {
          type: "string",
          format: "regex"
        },
        additionalItems: {
          anyOf: [
            {
              type: "boolean"
            },
            {
              $ref: "#"
            }
          ],
          default: {}
        },
        items: {
          anyOf: [
            {
              $ref: "#"
            },
            {
              $ref: "#/definitions/schemaArray"
            }
          ],
          default: {}
        },
        maxItems: {
          allOf: [
            {
              $ref: "#/definitions/positiveInteger"
            }
          ]
        },
        minItems: {
          allOf: [
            {
              $ref: "#/definitions/positiveIntegerDefault0"
            }
          ]
        },
        uniqueItems: {
          type: "boolean",
          default: !1
        },
        maxProperties: {
          allOf: [
            {
              $ref: "#/definitions/positiveInteger"
            }
          ]
        },
        minProperties: {
          allOf: [
            {
              $ref: "#/definitions/positiveIntegerDefault0"
            }
          ]
        },
        required: {
          allOf: [
            {
              $ref: "#/definitions/stringArray"
            }
          ]
        },
        additionalProperties: {
          anyOf: [
            {
              type: "boolean"
            },
            {
              $ref: "#"
            }
          ],
          default: {}
        },
        definitions: {
          type: "object",
          additionalProperties: {
            $ref: "#"
          },
          default: {}
        },
        properties: {
          type: "object",
          additionalProperties: {
            $ref: "#"
          },
          default: {}
        },
        patternProperties: {
          type: "object",
          additionalProperties: {
            $ref: "#"
          },
          default: {}
        },
        dependencies: {
          type: "object",
          additionalProperties: {
            anyOf: [
              {
                $ref: "#"
              },
              {
                $ref: "#/definitions/stringArray"
              }
            ]
          }
        },
        enum: {
          type: "array",
          minItems: 1,
          uniqueItems: !0
        },
        type: {
          anyOf: [
            {
              $ref: "#/definitions/simpleTypes"
            },
            {
              type: "array",
              items: {
                $ref: "#/definitions/simpleTypes"
              },
              minItems: 1,
              uniqueItems: !0
            }
          ]
        },
        format: {
          anyOf: [
            {
              type: "string",
              enum: [
                "date-time",
                "uri",
                "email",
                "hostname",
                "ipv4",
                "ipv6",
                "regex"
              ]
            },
            {
              type: "string"
            }
          ]
        },
        allOf: {
          allOf: [
            {
              $ref: "#/definitions/schemaArray"
            }
          ]
        },
        anyOf: {
          allOf: [
            {
              $ref: "#/definitions/schemaArray"
            }
          ]
        },
        oneOf: {
          allOf: [
            {
              $ref: "#/definitions/schemaArray"
            }
          ]
        },
        not: {
          allOf: [
            {
              $ref: "#"
            }
          ]
        }
      },
      dependencies: {
        exclusiveMaximum: [
          "maximum"
        ],
        exclusiveMinimum: [
          "minimum"
        ]
      },
      default: {}
    },
    "http://json-schema.org/draft-07/schema#": {
      definitions: {
        schemaArray: {
          type: "array",
          minItems: 1,
          items: { $ref: "#" }
        },
        nonNegativeInteger: {
          type: "integer",
          minimum: 0
        },
        nonNegativeIntegerDefault0: {
          allOf: [
            { $ref: "#/definitions/nonNegativeInteger" },
            { default: 0 }
          ]
        },
        simpleTypes: {
          enum: [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        stringArray: {
          type: "array",
          items: { type: "string" },
          uniqueItems: !0,
          default: []
        }
      },
      type: ["object", "boolean"],
      properties: {
        $id: {
          type: "string",
          format: "uri-reference"
        },
        $schema: {
          type: "string",
          format: "uri"
        },
        $ref: {
          type: "string",
          format: "uri-reference"
        },
        $comment: {
          type: "string"
        },
        title: {
          type: "string"
        },
        description: {
          type: "string"
        },
        default: !0,
        readOnly: {
          type: "boolean",
          default: !1
        },
        examples: {
          type: "array",
          items: !0
        },
        multipleOf: {
          type: "number",
          exclusiveMinimum: 0
        },
        maximum: {
          type: "number"
        },
        exclusiveMaximum: {
          type: "number"
        },
        minimum: {
          type: "number"
        },
        exclusiveMinimum: {
          type: "number"
        },
        maxLength: { $ref: "#/definitions/nonNegativeInteger" },
        minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        pattern: {
          type: "string",
          format: "regex"
        },
        additionalItems: { $ref: "#" },
        items: {
          anyOf: [
            { $ref: "#" },
            { $ref: "#/definitions/schemaArray" }
          ],
          default: !0
        },
        maxItems: { $ref: "#/definitions/nonNegativeInteger" },
        minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        uniqueItems: {
          type: "boolean",
          default: !1
        },
        contains: { $ref: "#" },
        maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
        minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        required: { $ref: "#/definitions/stringArray" },
        additionalProperties: { $ref: "#" },
        definitions: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        properties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        patternProperties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          propertyNames: { format: "regex" },
          default: {}
        },
        dependencies: {
          type: "object",
          additionalProperties: {
            anyOf: [
              { $ref: "#" },
              { $ref: "#/definitions/stringArray" }
            ]
          }
        },
        propertyNames: { $ref: "#" },
        const: !0,
        enum: {
          type: "array",
          items: !0,
          minItems: 1,
          uniqueItems: !0
        },
        type: {
          anyOf: [
            { $ref: "#/definitions/simpleTypes" },
            {
              type: "array",
              items: { $ref: "#/definitions/simpleTypes" },
              minItems: 1,
              uniqueItems: !0
            }
          ]
        },
        format: { type: "string" },
        contentMediaType: { type: "string" },
        contentEncoding: { type: "string" },
        if: { $ref: "#" },
        then: { $ref: "#" },
        else: { $ref: "#" },
        allOf: { $ref: "#/definitions/schemaArray" },
        anyOf: { $ref: "#/definitions/schemaArray" },
        oneOf: { $ref: "#/definitions/schemaArray" },
        not: { $ref: "#" }
      },
      default: !0
    }
  }
}, Pu = {
  id: F("A unique identifier for the schema."),
  $schema: F("The schema to verify this document against."),
  title: F("A descriptive title of the element."),
  description: F("A long description of the element. Used in hover menus and suggestions."),
  default: F("A default value. Used by suggestions."),
  multipleOf: F("A number that should cleanly divide the current value (i.e. have no remainder)."),
  maximum: F("The maximum numerical value, inclusive by default."),
  exclusiveMaximum: F("Makes the maximum property exclusive."),
  minimum: F("The minimum numerical value, inclusive by default."),
  exclusiveMinimum: F("Makes the minimum property exclusive."),
  maxLength: F("The maximum length of a string."),
  minLength: F("The minimum length of a string."),
  pattern: F("A regular expression to match the string against. It is not implicitly anchored."),
  additionalItems: F("For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
  items: F("For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
  maxItems: F("The maximum number of items that can be inside an array. Inclusive."),
  minItems: F("The minimum number of items that can be inside an array. Inclusive."),
  uniqueItems: F("If all of the items in the array must be unique. Defaults to false."),
  maxProperties: F("The maximum number of properties an object can have. Inclusive."),
  minProperties: F("The minimum number of properties an object can have. Inclusive."),
  required: F("An array of strings that lists the names of all properties required on this object."),
  additionalProperties: F("Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
  definitions: F("Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
  properties: F("A map of property names to schemas for each property."),
  patternProperties: F("A map of regular expressions on property names to schemas for matching properties."),
  dependencies: F("A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
  enum: F("The set of literal values that are valid."),
  type: F("Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
  format: F("Describes the format expected for the value."),
  allOf: F("An array of schemas, all of which must match."),
  anyOf: F("An array of schemas, where at least one must match."),
  oneOf: F("An array of schemas, exactly one of which must match."),
  not: F("A schema which must not match."),
  $id: F("A unique identifier for the schema."),
  $ref: F("Reference a definition hosted on any location."),
  $comment: F("Comments from schema authors to readers or maintainers of the schema."),
  readOnly: F("Indicates that the value of the instance is managed exclusively by the owning authority."),
  examples: F("Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
  contains: F('An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),
  propertyNames: F("If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
  const: F("An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
  contentMediaType: F("Describes the media type of a string property."),
  contentEncoding: F("Describes the content encoding of a string property."),
  if: F('The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),
  then: F('The "if" subschema is used for validation when the "if" subschema succeeds.'),
  else: F('The "else" subschema is used for validation when the "if" subschema fails.')
};
for (const e in D1.schemas) {
  const t = D1.schemas[e];
  for (const n in t.properties) {
    let i = t.properties[n];
    typeof i == "boolean" && (i = t.properties[n] = {});
    const r = Pu[n];
    r && (i.description = r);
  }
}
(() => {
  var e = { 470: (r) => {
    function s(u) {
      if (typeof u != "string")
        throw new TypeError("Path must be a string. Received " + JSON.stringify(u));
    }
    function a(u, c) {
      for (var h, f = "", m = 0, d = -1, g = 0, b = 0; b <= u.length; ++b) {
        if (b < u.length)
          h = u.charCodeAt(b);
        else {
          if (h === 47)
            break;
          h = 47;
        }
        if (h === 47) {
          if (!(d === b - 1 || g === 1))
            if (d !== b - 1 && g === 2) {
              if (f.length < 2 || m !== 2 || f.charCodeAt(f.length - 1) !== 46 || f.charCodeAt(f.length - 2) !== 46) {
                if (f.length > 2) {
                  var _ = f.lastIndexOf("/");
                  if (_ !== f.length - 1) {
                    _ === -1 ? (f = "", m = 0) : m = (f = f.slice(0, _)).length - 1 - f.lastIndexOf("/"), d = b, g = 0;
                    continue;
                  }
                } else if (f.length === 2 || f.length === 1) {
                  f = "", m = 0, d = b, g = 0;
                  continue;
                }
              }
              c && (f.length > 0 ? f += "/.." : f = "..", m = 2);
            } else
              f.length > 0 ? f += "/" + u.slice(d + 1, b) : f = u.slice(d + 1, b), m = b - d - 1;
          d = b, g = 0;
        } else
          h === 46 && g !== -1 ? ++g : g = -1;
      }
      return f;
    }
    var l = { resolve: function() {
      for (var u, c = "", h = !1, f = arguments.length - 1; f >= -1 && !h; f--) {
        var m;
        f >= 0 ? m = arguments[f] : (u === void 0 && (u = process.cwd()), m = u), s(m), m.length !== 0 && (c = m + "/" + c, h = m.charCodeAt(0) === 47);
      }
      return c = a(c, !h), h ? c.length > 0 ? "/" + c : "/" : c.length > 0 ? c : ".";
    }, normalize: function(u) {
      if (s(u), u.length === 0)
        return ".";
      var c = u.charCodeAt(0) === 47, h = u.charCodeAt(u.length - 1) === 47;
      return (u = a(u, !c)).length !== 0 || c || (u = "."), u.length > 0 && h && (u += "/"), c ? "/" + u : u;
    }, isAbsolute: function(u) {
      return s(u), u.length > 0 && u.charCodeAt(0) === 47;
    }, join: function() {
      if (arguments.length === 0)
        return ".";
      for (var u, c = 0; c < arguments.length; ++c) {
        var h = arguments[c];
        s(h), h.length > 0 && (u === void 0 ? u = h : u += "/" + h);
      }
      return u === void 0 ? "." : l.normalize(u);
    }, relative: function(u, c) {
      if (s(u), s(c), u === c || (u = l.resolve(u)) === (c = l.resolve(c)))
        return "";
      for (var h = 1; h < u.length && u.charCodeAt(h) === 47; ++h)
        ;
      for (var f = u.length, m = f - h, d = 1; d < c.length && c.charCodeAt(d) === 47; ++d)
        ;
      for (var g = c.length - d, b = m < g ? m : g, _ = -1, L = 0; L <= b; ++L) {
        if (L === b) {
          if (g > b) {
            if (c.charCodeAt(d + L) === 47)
              return c.slice(d + L + 1);
            if (L === 0)
              return c.slice(d + L);
          } else
            m > b && (u.charCodeAt(h + L) === 47 ? _ = L : L === 0 && (_ = 0));
          break;
        }
        var A = u.charCodeAt(h + L);
        if (A !== c.charCodeAt(d + L))
          break;
        A === 47 && (_ = L);
      }
      var M = "";
      for (L = h + _ + 1; L <= f; ++L)
        L !== f && u.charCodeAt(L) !== 47 || (M.length === 0 ? M += ".." : M += "/..");
      return M.length > 0 ? M + c.slice(d + _) : (d += _, c.charCodeAt(d) === 47 && ++d, c.slice(d));
    }, _makeLong: function(u) {
      return u;
    }, dirname: function(u) {
      if (s(u), u.length === 0)
        return ".";
      for (var c = u.charCodeAt(0), h = c === 47, f = -1, m = !0, d = u.length - 1; d >= 1; --d)
        if ((c = u.charCodeAt(d)) === 47) {
          if (!m) {
            f = d;
            break;
          }
        } else
          m = !1;
      return f === -1 ? h ? "/" : "." : h && f === 1 ? "//" : u.slice(0, f);
    }, basename: function(u, c) {
      if (c !== void 0 && typeof c != "string")
        throw new TypeError('"ext" argument must be a string');
      s(u);
      var h, f = 0, m = -1, d = !0;
      if (c !== void 0 && c.length > 0 && c.length <= u.length) {
        if (c.length === u.length && c === u)
          return "";
        var g = c.length - 1, b = -1;
        for (h = u.length - 1; h >= 0; --h) {
          var _ = u.charCodeAt(h);
          if (_ === 47) {
            if (!d) {
              f = h + 1;
              break;
            }
          } else
            b === -1 && (d = !1, b = h + 1), g >= 0 && (_ === c.charCodeAt(g) ? --g == -1 && (m = h) : (g = -1, m = b));
        }
        return f === m ? m = b : m === -1 && (m = u.length), u.slice(f, m);
      }
      for (h = u.length - 1; h >= 0; --h)
        if (u.charCodeAt(h) === 47) {
          if (!d) {
            f = h + 1;
            break;
          }
        } else
          m === -1 && (d = !1, m = h + 1);
      return m === -1 ? "" : u.slice(f, m);
    }, extname: function(u) {
      s(u);
      for (var c = -1, h = 0, f = -1, m = !0, d = 0, g = u.length - 1; g >= 0; --g) {
        var b = u.charCodeAt(g);
        if (b !== 47)
          f === -1 && (m = !1, f = g + 1), b === 46 ? c === -1 ? c = g : d !== 1 && (d = 1) : c !== -1 && (d = -1);
        else if (!m) {
          h = g + 1;
          break;
        }
      }
      return c === -1 || f === -1 || d === 0 || d === 1 && c === f - 1 && c === h + 1 ? "" : u.slice(c, f);
    }, format: function(u) {
      if (u === null || typeof u != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof u);
      return function(c, h) {
        var f = h.dir || h.root, m = h.base || (h.name || "") + (h.ext || "");
        return f ? f === h.root ? f + m : f + "/" + m : m;
      }(0, u);
    }, parse: function(u) {
      s(u);
      var c = { root: "", dir: "", base: "", ext: "", name: "" };
      if (u.length === 0)
        return c;
      var h, f = u.charCodeAt(0), m = f === 47;
      m ? (c.root = "/", h = 1) : h = 0;
      for (var d = -1, g = 0, b = -1, _ = !0, L = u.length - 1, A = 0; L >= h; --L)
        if ((f = u.charCodeAt(L)) !== 47)
          b === -1 && (_ = !1, b = L + 1), f === 46 ? d === -1 ? d = L : A !== 1 && (A = 1) : d !== -1 && (A = -1);
        else if (!_) {
          g = L + 1;
          break;
        }
      return d === -1 || b === -1 || A === 0 || A === 1 && d === b - 1 && d === g + 1 ? b !== -1 && (c.base = c.name = g === 0 && m ? u.slice(1, b) : u.slice(g, b)) : (g === 0 && m ? (c.name = u.slice(1, d), c.base = u.slice(1, b)) : (c.name = u.slice(g, d), c.base = u.slice(g, b)), c.ext = u.slice(d, b)), g > 0 ? c.dir = u.slice(0, g - 1) : m && (c.dir = "/"), c;
    }, sep: "/", delimiter: ":", win32: null, posix: null };
    l.posix = l, r.exports = l;
  } }, t = {};
  function n(r) {
    var s = t[r];
    if (s !== void 0)
      return s.exports;
    var a = t[r] = { exports: {} };
    return e[r](a, a.exports, n), a.exports;
  }
  n.d = (r, s) => {
    for (var a in s)
      n.o(s, a) && !n.o(r, a) && Object.defineProperty(r, a, { enumerable: !0, get: s[a] });
  }, n.o = (r, s) => Object.prototype.hasOwnProperty.call(r, s), n.r = (r) => {
    typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(r, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(r, "__esModule", { value: !0 });
  };
  var i = {};
  (() => {
    let r;
    n.r(i), n.d(i, { URI: () => m, Utils: () => Z }), typeof process == "object" ? r = process.platform === "win32" : typeof navigator == "object" && (r = navigator.userAgent.indexOf("Windows") >= 0);
    const s = /^\w[\w\d+.-]*$/, a = /^\//, l = /^\/\//;
    function u(S, x) {
      if (!S.scheme && x)
        throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${S.authority}", path: "${S.path}", query: "${S.query}", fragment: "${S.fragment}"}`);
      if (S.scheme && !s.test(S.scheme))
        throw new Error("[UriError]: Scheme contains illegal characters.");
      if (S.path) {
        if (S.authority) {
          if (!a.test(S.path))
            throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
        } else if (l.test(S.path))
          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
      }
    }
    const c = "", h = "/", f = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
    class m {
      constructor(x, w, v, k, R, E = !1) {
        Ce(this, "scheme");
        Ce(this, "authority");
        Ce(this, "path");
        Ce(this, "query");
        Ce(this, "fragment");
        typeof x == "object" ? (this.scheme = x.scheme || c, this.authority = x.authority || c, this.path = x.path || c, this.query = x.query || c, this.fragment = x.fragment || c) : (this.scheme = /* @__PURE__ */ function(D, V) {
          return D || V ? D : "file";
        }(x, E), this.authority = w || c, this.path = function(D, V) {
          switch (D) {
            case "https":
            case "http":
            case "file":
              V ? V[0] !== h && (V = h + V) : V = h;
          }
          return V;
        }(this.scheme, v || c), this.query = k || c, this.fragment = R || c, u(this, E));
      }
      static isUri(x) {
        return x instanceof m || !!x && typeof x.authority == "string" && typeof x.fragment == "string" && typeof x.path == "string" && typeof x.query == "string" && typeof x.scheme == "string" && typeof x.fsPath == "string" && typeof x.with == "function" && typeof x.toString == "function";
      }
      get fsPath() {
        return A(this);
      }
      with(x) {
        if (!x)
          return this;
        let { scheme: w, authority: v, path: k, query: R, fragment: E } = x;
        return w === void 0 ? w = this.scheme : w === null && (w = c), v === void 0 ? v = this.authority : v === null && (v = c), k === void 0 ? k = this.path : k === null && (k = c), R === void 0 ? R = this.query : R === null && (R = c), E === void 0 ? E = this.fragment : E === null && (E = c), w === this.scheme && v === this.authority && k === this.path && R === this.query && E === this.fragment ? this : new g(w, v, k, R, E);
      }
      static parse(x, w = !1) {
        const v = f.exec(x);
        return v ? new g(v[2] || c, C(v[4] || c), C(v[5] || c), C(v[7] || c), C(v[9] || c), w) : new g(c, c, c, c, c);
      }
      static file(x) {
        let w = c;
        if (r && (x = x.replace(/\\/g, h)), x[0] === h && x[1] === h) {
          const v = x.indexOf(h, 2);
          v === -1 ? (w = x.substring(2), x = h) : (w = x.substring(2, v), x = x.substring(v) || h);
        }
        return new g("file", w, x, c, c);
      }
      static from(x) {
        const w = new g(x.scheme, x.authority, x.path, x.query, x.fragment);
        return u(w, !0), w;
      }
      toString(x = !1) {
        return M(this, x);
      }
      toJSON() {
        return this;
      }
      static revive(x) {
        if (x) {
          if (x instanceof m)
            return x;
          {
            const w = new g(x);
            return w._formatted = x.external, w._fsPath = x._sep === d ? x.fsPath : null, w;
          }
        }
        return x;
      }
    }
    const d = r ? 1 : void 0;
    class g extends m {
      constructor() {
        super(...arguments);
        Ce(this, "_formatted", null);
        Ce(this, "_fsPath", null);
      }
      get fsPath() {
        return this._fsPath || (this._fsPath = A(this)), this._fsPath;
      }
      toString(w = !1) {
        return w ? M(this, !0) : (this._formatted || (this._formatted = M(this, !1)), this._formatted);
      }
      toJSON() {
        const w = { $mid: 1 };
        return this._fsPath && (w.fsPath = this._fsPath, w._sep = d), this._formatted && (w.external = this._formatted), this.path && (w.path = this.path), this.scheme && (w.scheme = this.scheme), this.authority && (w.authority = this.authority), this.query && (w.query = this.query), this.fragment && (w.fragment = this.fragment), w;
      }
    }
    const b = { 58: "%3A", 47: "%2F", 63: "%3F", 35: "%23", 91: "%5B", 93: "%5D", 64: "%40", 33: "%21", 36: "%24", 38: "%26", 39: "%27", 40: "%28", 41: "%29", 42: "%2A", 43: "%2B", 44: "%2C", 59: "%3B", 61: "%3D", 32: "%20" };
    function _(S, x, w) {
      let v, k = -1;
      for (let R = 0; R < S.length; R++) {
        const E = S.charCodeAt(R);
        if (E >= 97 && E <= 122 || E >= 65 && E <= 90 || E >= 48 && E <= 57 || E === 45 || E === 46 || E === 95 || E === 126 || x && E === 47 || w && E === 91 || w && E === 93 || w && E === 58)
          k !== -1 && (v += encodeURIComponent(S.substring(k, R)), k = -1), v !== void 0 && (v += S.charAt(R));
        else {
          v === void 0 && (v = S.substr(0, R));
          const D = b[E];
          D !== void 0 ? (k !== -1 && (v += encodeURIComponent(S.substring(k, R)), k = -1), v += D) : k === -1 && (k = R);
        }
      }
      return k !== -1 && (v += encodeURIComponent(S.substring(k))), v !== void 0 ? v : S;
    }
    function L(S) {
      let x;
      for (let w = 0; w < S.length; w++) {
        const v = S.charCodeAt(w);
        v === 35 || v === 63 ? (x === void 0 && (x = S.substr(0, w)), x += b[v]) : x !== void 0 && (x += S[w]);
      }
      return x !== void 0 ? x : S;
    }
    function A(S, x) {
      let w;
      return w = S.authority && S.path.length > 1 && S.scheme === "file" ? `//${S.authority}${S.path}` : S.path.charCodeAt(0) === 47 && (S.path.charCodeAt(1) >= 65 && S.path.charCodeAt(1) <= 90 || S.path.charCodeAt(1) >= 97 && S.path.charCodeAt(1) <= 122) && S.path.charCodeAt(2) === 58 ? S.path[1].toLowerCase() + S.path.substr(2) : S.path, r && (w = w.replace(/\//g, "\\")), w;
    }
    function M(S, x) {
      const w = x ? L : _;
      let v = "", { scheme: k, authority: R, path: E, query: D, fragment: V } = S;
      if (k && (v += k, v += ":"), (R || k === "file") && (v += h, v += h), R) {
        let W = R.indexOf("@");
        if (W !== -1) {
          const te = R.substr(0, W);
          R = R.substr(W + 1), W = te.lastIndexOf(":"), W === -1 ? v += w(te, !1, !1) : (v += w(te.substr(0, W), !1, !1), v += ":", v += w(te.substr(W + 1), !1, !0)), v += "@";
        }
        R = R.toLowerCase(), W = R.lastIndexOf(":"), W === -1 ? v += w(R, !1, !0) : (v += w(R.substr(0, W), !1, !0), v += R.substr(W));
      }
      if (E) {
        if (E.length >= 3 && E.charCodeAt(0) === 47 && E.charCodeAt(2) === 58) {
          const W = E.charCodeAt(1);
          W >= 65 && W <= 90 && (E = `/${String.fromCharCode(W + 32)}:${E.substr(3)}`);
        } else if (E.length >= 2 && E.charCodeAt(1) === 58) {
          const W = E.charCodeAt(0);
          W >= 65 && W <= 90 && (E = `${String.fromCharCode(W + 32)}:${E.substr(2)}`);
        }
        v += w(E, !0, !1);
      }
      return D && (v += "?", v += w(D, !1, !1)), V && (v += "#", v += x ? V : _(V, !1, !1)), v;
    }
    function N(S) {
      try {
        return decodeURIComponent(S);
      } catch {
        return S.length > 3 ? S.substr(0, 3) + N(S.substr(3)) : S;
      }
    }
    const y = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
    function C(S) {
      return S.match(y) ? S.replace(y, (x) => N(x)) : S;
    }
    var P = n(470);
    const I = P.posix || P, O = "/";
    var Z;
    (function(S) {
      S.joinPath = function(x, ...w) {
        return x.with({ path: I.join(x.path, ...w) });
      }, S.resolvePath = function(x, ...w) {
        let v = x.path, k = !1;
        v[0] !== O && (v = O + v, k = !0);
        let R = I.resolve(v, ...w);
        return k && R[0] === O && !x.authority && (R = R.substring(1)), x.with({ path: R });
      }, S.dirname = function(x) {
        if (x.path.length === 0 || x.path === O)
          return x;
        let w = I.dirname(x.path);
        return w.length === 1 && w.charCodeAt(0) === 46 && (w = ""), x.with({ path: w });
      }, S.basename = function(x) {
        return I.basename(x.path);
      }, S.extname = function(x) {
        return I.extname(x.path);
      };
    })(Z || (Z = {}));
  })();
})();
var B1;
(function(e) {
  e[e.Object = 0] = "Object", e[e.Array = 1] = "Array";
})(B1 || (B1 = {}));
self.onmessage = () => {
  da();
};


//# sourceMappingURL=vendors-node_modules_monaco-editor-wrapper_dist_workers_jsonWorker-es_js.immt_editor.js.map