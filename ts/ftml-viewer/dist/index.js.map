{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as FTML from \"@kwarc/ftml-viewer-base\"; // \"./ftml-viewer-base\"; //\nimport * as FLAMS from \"@kwarc/flams\";\n\nconst Window: { FLAMS_SERVER_URL: string } =\n  typeof window !== \"undefined\"\n    ? (window as unknown as { FLAMS_SERVER_URL: string })\n    : { FLAMS_SERVER_URL: \"\" };\n\n/**\n * Turns on debugging messages on the console\n */\nexport function setDebugLog() {\n  FTML.set_debug_log();\n}\n\n/**\n * Injects the given CSS rule into the header of the DOM (if adequate and not duplicate)\n */\nexport function injectCss(css:FTML.CSS) {\n  FTML.injectCss(css);\n}\n\n/**\n * Get the FLAMS server used globally\n */\nexport function getFlamsServer(): FLAMS.FLAMSServer {\n  return new FLAMS.FLAMSServer(Window.FLAMS_SERVER_URL);\n}\n\n/**\n * Set the FLAMS server used globally\n */\nexport function setServerUrl(s: string) {\n  Window.FLAMS_SERVER_URL = s;\n  FTML.set_server_url(s);\n}\n\n/**\n * Get the FLAMS server URL used globally\n */\nexport function getServerUrl(): string {\n  return Window.FLAMS_SERVER_URL;\n}\n\n/**\n * Configuration for rendering FTML content\n */\nexport interface FTMLConfig {\n\n  /**\n   * whether to allow hovers\n   */\n  allowHovers?: boolean;\n\n  /**\n   * callback for *inserting* elements immediately after a section's title\n   */\n  onSectionTitle?: (\n    uri: FTML.DocumentElementURI,\n    lvl: FTML.SectionLevel,\n  ) => FTML.LeptosContinuation | undefined;\n\n  /**\n   * callback for wrapping fragments (sections, paragraphs, problems, etc.)\n   */\n  onFragment?: (\n    uri: FTML.DocumentElementURI,\n    kind: FTML.FragmentKind,\n  ) => FTML.LeptosContinuation | undefined;\n  /**\n   * callback for wrapping inputreferences (i.e. lazily loaded document fragments)\n   */\n  onInputref?: (uri: FTML.DocumentURI) => FTML.LeptosContinuation | undefined;\n  \n  problemStates?: FTML.ProblemStates | undefined,\n  onProblem?: ((response: FTML.ProblemResponse) => void) | undefined,\n}\n\n\n/**\n * sets up a leptos context for rendering FTML documents or fragments.\n * If a context already exists, does nothing, so is cheap to call\n * {@link renderDocument} and {@link renderFragment} also inject a context\n * iff none already exists, so this is optional in every case.\n *\n * @param {HTMLElement} to The element to render into\n * @param {FTML.LeptosContinuation} then The code to execute *within* the leptos context (e.g. various calls to\n *        {@link renderDocument} or {@link renderFragment})\n * @param {FTMLConfig?} cfg Optional configuration\n * @returns {FTML.FTMLMountHandle}; its {@link FTML.FTMLMountHandle.unmount} method removes the context. Not calling\n *          this is a memory leak.\n */\nexport function ftmlSetup(\n  to: HTMLElement,\n  then: FTML.LeptosContinuation,\n  cfg?: FTMLConfig,\n): FTML.FTMLMountHandle {\n  return FTML.ftml_setup(\n    to,\n    then,\n    cfg?.allowHovers,\n    cfg?.onSectionTitle,\n    cfg?.onFragment,\n    cfg?.onInputref,\n    cfg?.onProblem,\n    cfg?.problemStates\n  );\n}\n\n/**\n * render an FTML document to the provided element\n * @param {HTMLElement} to The element to render into\n * @param {FTML.DocumentOptions} document The document to render\n * @param {FTML.LeptosContext?} context The leptos context to use (if any)\n * @param {FTMLConfig?} cfg Optional configuration\n * @returns {FTML.FTMLMountHandle}; its {@link FTML.FTMLMountHandle.unmount} method removes the context. Not calling\n *          this is a memory leak.\n */\nexport function renderDocument(\n  to: HTMLElement,\n  document: FTML.DocumentOptions,\n  context?: FTML.LeptosContext,\n  cfg?: FTMLConfig,\n): FTML.FTMLMountHandle {\n  return FTML.render_document(\n    to,\n    document,\n    context,\n    cfg?.allowHovers,\n    cfg?.onSectionTitle,\n    cfg?.onFragment,\n    cfg?.onInputref,\n    cfg?.onProblem,\n    cfg?.problemStates\n  );\n}\n\n/**\n * render an FTML document fragment to the provided element\n * @param {HTMLElement} to The element to render into\n * @param {FTML.FragmentOptions} fragment The fragment to render\n * @param {FTML.LeptosContext?} context The leptos context to use (if any)\n * @param {FTMLConfig?} cfg Optional configuration\n * @returns {FTML.FTMLMountHandle}; its {@link FTML.FTMLMountHandle.unmount} method removes the context. Not calling\n *          this is a memory leak.\n */\nexport function renderFragment(\n  to: HTMLElement,\n  fragment: FTML.FragmentOptions,\n  context?: FTML.LeptosContext,\n  cfg?: FTMLConfig,\n): FTML.FTMLMountHandle {\n  return FTML.render_fragment(\n    to,\n    fragment,\n    context,\n    cfg?.allowHovers,\n    cfg?.onSectionTitle,\n    cfg?.onFragment,\n    cfg?.onInputref,\n    cfg?.onProblem,\n    cfg?.problemStates\n  );\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AACtB,YAAuB;AAEvB,IAAM,SACJ,OAAO,WAAW,cACb,SACD,EAAE,kBAAkB,GAAG;AAKtB,SAAS,cAAc;AAC5B,EAAK,mBAAc;AACrB;AAKO,SAASA,WAAU,KAAc;AACtC,EAAK,eAAU,GAAG;AACpB;AAKO,SAAS,iBAAoC;AAClD,SAAO,IAAU,kBAAY,OAAO,gBAAgB;AACtD;AAKO,SAAS,aAAa,GAAW;AACtC,SAAO,mBAAmB;AAC1B,EAAK,oBAAe,CAAC;AACvB;AAKO,SAAS,eAAuB;AACrC,SAAO,OAAO;AAChB;AAkDO,SAAS,UACd,IACA,MACA,KACsB;AACtB,SAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,EACP;AACF;AAWO,SAAS,eACd,IACA,UACA,SACA,KACsB;AACtB,SAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,EACP;AACF;AAWO,SAAS,eACd,IACA,UACA,SACA,KACsB;AACtB,SAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,IACL,2BAAK;AAAA,EACP;AACF;","names":["injectCss"]}