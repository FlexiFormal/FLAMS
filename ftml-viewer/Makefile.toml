[env]
LEPTOS_SASS_VERSION = "1.89.2"

#[env]
#RUSTFLAGS = "-Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext"

[tasks.wasm-pack]
env = { "RUSTFLAGS" = "--cfg getrandom_backend=\"wasm_js\" -Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext" }
install_crate = "wasm-pack"
command = "wasm-pack"
args = [
    "build",
    "--target",
    "no-modules",
    "--out-name",
    "ftml",
    "--",
    "--target",
    "wasm32-unknown-unknown",
    "-Z",
    "build-std=std,panic_abort,core,alloc",
    "-Z",
    "build-std-features=optimize_for_size", #,panic_immediate_abort",
]

[tasks.update-package-json]
script_runner = "@shell"
script = '''
cp ./package.json-real ./ts/package.json
'''

[tasks.wasm-pack-ts]
env = { "RUSTFLAGS" = "--cfg getrandom_backend=\"wasm_js\" -Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext" }
install_crate = "wasm-pack"
command = "wasm-pack"
args = [
    "build",
    "--out-dir",
    "ts",
    "--out-name",
    "ftml-viewer-base",                     #"--target","web",
    "--",
    "--features",
    "ts,omdoc",
    "--target",
    "wasm32-unknown-unknown",
    "-Z",
    "build-std=std,panic_abort,core,alloc",
    "-Z",
    "build-std-features=optimize_for_size", #,panic_immediate_abort",
]

[tasks.wasm-pack-ts-dev]
env = { "RUSTFLAGS" = "--cfg getrandom_backend=\"wasm_js\" -Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext" }
install_crate = "wasm-pack"
command = "wasm-pack"
args = [
    "build",
    "--out-dir",
    "ts",
    "--dev",
    "--out-name",
    "ftml-viewer-base",
    "--",
    "--features",
    "ts,omdoc",
]

[tasks.ts-dev]
dependencies = ["wasm-pack-ts-dev", "update-package-json"] #,"copy-flams-to-ts"]

[tasks.wasm-pack-dev]
env = { "RUSTFLAGS" = "--cfg getrandom_backend=\"wasm_js\" -Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext" }
install_crate = "wasm-pack"
command = "wasm-pack"
args = ["build", "--target", "no-modules", "--dev"]

[tasks.update-js]
env = { "RUSTFLAGS" = "" }
#env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "cargo-script" }
script_runner = "@rust"
script = '''
use std::{io::Write, path::PathBuf};
fn main() {
    let old_js_file = PathBuf::from(".").join("pkg").join("ftml.js");
    let js_file = old_js_file.clone(); //PathBuf::from(".").join("pkg").join("ftml.js");
    let jv = std::fs::read_to_string(&old_js_file).unwrap();
    std::fs::File::create(js_file).unwrap().write_all(format!(r#"{jv}
const {{ run, set_server_url }} = wasm_bindgen;

{}

window.FLAMS_SERVER_URL = "https://mathhub.info";

var PRIVATE__do_ftml_on_start = () => {{}};
function ftml_on_start(f) {{
    let old = PRIVATE__do_ftml_on_start;
    PRIVATE__do_ftml_on_start = () => {{
        old();
        f();
    }};
}}

async function ftml_start() {{
    await wasm_bindgen();
    PRIVATE__do_ftml_on_start();
}}
ftml_start();
    "#,
    include_str!("../../../source/ftml/viewer-components/ftml-top.js")
        .replace("export function","function")
    ).as_bytes()).unwrap();
}
'''

[tasks.copy-flams-to-ts]
env = { "RUSTFLAGS" = "" }
workspace = false
script_runner = "@rust"
script = '''
use std::path::Path;
fn copy_dir_all(src: &Path, dst: &Path) -> std::io::Result<()> {
    std::fs::create_dir_all(dst)?;
    for entry in std::fs::read_dir(src)? {
        let entry = entry?;
        let ty = entry.file_type()?;
        if ty.is_dir() {
            copy_dir_all(&entry.path(), &dst.join(entry.file_name()))?;
        } else {
            std::fs::copy(&entry.path(), &dst.join(entry.file_name()))?;
        }
    }
    Ok(())
}
fn main() {
  let _ = std::fs::remove_dir_all(Path::new("./ts/flams"));
  std::fs::create_dir_all(Path::new("./ts/flams")).unwrap();
  copy_dir_all(&Path::new("../ts/vscode/src/ts/flams"),&Path::new("./ts/flams")).unwrap();
}
'''

[tasks.copy-d-ts]
script_runner = "@shell"
script = '''
cp ./ts/ftml-viewer-base.d.ts ../ts/flams/src/ftml-viewer-base.d.ts
'''

#[tasks.ts]
#dependencies = [
#    "wasm-pack-ts",
#    "update-package-json",
#    "copy-d-ts",
#] #,"copy-flams-to-ts"]

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.build]
dependencies = ["wasm-pack", "update-js"]

[tasks.build-dev]
dependencies = ["wasm-pack-dev", "update-js"]

[tasks.default]
alias = "build"


# -----------------------------------------------------------------------

[tasks.ts-build]
env = { "RUSTFLAGS" = "--cfg getrandom_backend=\"wasm_js\" -Ctarget-cpu=mvp -Ctarget-feature=+multivalue,+mutable-globals,+reference-types,+sign-ext" }
install_crate = "wasm-pack"
command = "wasm-pack"
args = [
    "build",
    "--out-dir",
    "../ts/ftml-viewer/src/base",
    "--out-name",
    "ftml-viewer-base",
    "--target",
    "web",
    "--",
    "--features",
    "ts,omdoc",
    "--target",
    "wasm32-unknown-unknown",
    "-Z",
    "build-std=std,panic_abort,core,alloc",
    "-Z",
    "build-std-features=optimize_for_size", #,panic_immediate_abort",
]

[tasks.ts-update-js]
env = { "RUSTFLAGS" = "" }
#env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "cargo-script" }
script_runner = "@rust"
script = '''
use std::{io::Write, path::Path};
fn main() {
    let js_file = Path::new(
        "../ts/ftml-viewer/src/base/ftml-viewer-base.js",
    );
    let ts_file = Path::new(
        "../ts/ftml-viewer/src/base/ftml-viewer-base.d.ts",
    );

    const TOP_JS: &str =
        include_str!("../../../source/ftml/viewer-components/ftml-top.js");
    let js_str = std::fs::read_to_string(js_file).unwrap();
    let js_str = js_str.split('\n').skip(1).collect::<Vec<_>>().join("\n");

    let ts_str = std::fs::read_to_string(ts_file).unwrap();

    std::fs::File::create(js_file)
        .unwrap()
        .write_all(
            format!(
                "{js_str}\n{}",
                TOP_JS.replace("export function", "function")
            )
            .as_bytes(),
        )
        .unwrap();

    std::fs::File::create(ts_file)
            .unwrap()
            .write_all(
                format!(
                    "{ts_str}\nexport function init(): Promise<void>;"
                )
                .as_bytes(),
            )
            .unwrap();
}
'''

[tasks.ts-clean]
script_runner = "@shell"
script = '''
cd ../ts/ftml-viewer/src/base
rm .gitignore
rm -rf snippets
rm package.json
'''

[tasks.ts-patch]
script_runner = "@shell"
script = '''
./ts-patch.sh -i ../ts/ftml-viewer/src/base/ftml-viewer-base_bg.wasm -js ../ts/ftml-viewer/src/base/ftml-viewer-base.js -o ../ts/ftml-viewer/src/base/ftml-viewer-base.js
cd ../ts/ftml-viewer/src/base
rm ftml-viewer-base_bg.wasm
rm ftml-viewer-base_bg.wasm.d.ts
cp ftml-viewer-base.d.ts ../../../flams/src/ftml-viewer-base.d.ts
'''

[tasks.ts]
dependencies = ["ts-build", "ts-update-js", "ts-clean", "ts-patch"]
