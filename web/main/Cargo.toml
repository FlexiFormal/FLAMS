[package]
name = "immt-web"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[lints]
workspace = true

[dependencies]
# util
tokio = { version="1.38",features = ["full"], optional=true }
serde = { version="1",features = ["derive"] }
chrono = "0.4"
lazy_static = { version="1.4",optional=true }

gloo-timers = { version="0.3",optional = false }
wasm-bindgen-futures = { version="0.4",optional = false }

# leptos
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
actix-web-actors = { version= "4",optional = true }
actix = {version="0.13",optional=true}
console_error_panic_hook = "0.1"
leptos = { version = "0.6", features=["experimental-islands"] }
leptos_meta = { version = "0.6" }
leptos_actix = { version = "0.6", optional = true, features=["experimental-islands"] }
leptos_router = { version = "0.6" }
wasm-bindgen = "=0.2.92"

# components
#leptonic = { version = "0.5.0", features = [] }
thaw = "0.3"
stylance = "0.5"

#immt
immt-api = { path="../../api",features=["rayon","serde","tokio","oxigraph"],optional=true }
immt-core = { path="../../core",features=["serde"] }
immt-controller = { path = "../../controller", optional = true }
immt-graphs = { path = "../graphs" }

#experiments
sea-orm = {version="0.12",optional=true, features=["sqlx-sqlite","macros","with-json","with-chrono","with-uuid"]}
sqlx = {version="0.7",optional=true, features=["sqlite","runtime-tokio-rustls","macros"]}
libsqlite3-sys = { version="0", optional=true, features = ["bundled"] }
immt-web-orm = {path= "../orm", optional=true}
actix-session = { version="0.9",optional=true,features = ["redis", "redis-rs-session"] }
actix-identity = { version="0.7",optional=true }
anyhow = { version="1",optional=true }
md5 = {version="0.7",optional=true}
argon2 = { version="0.5",optional = true }

[features]
csr = [
  "leptos/csr",
  "leptos_router/csr",
  "leptos_meta/csr"
]
client = [
  "leptos/hydrate",
  "leptos_meta/hydrate",
  "leptos_router/hydrate",
  #"leptonic/hydrate"
  "thaw/hydrate",
]
accounts = ["server",
  "dep:sea-orm",
  "dep:sqlx",
  "dep:libsqlite3-sys",
  "dep:immt-web-orm",
  "dep:actix-session",
  "dep:anyhow",
  "dep:md5",
  "dep:actix-identity",
  "dep:argon2"
]
server = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:immt-controller",
  "dep:immt-api",
  "dep:tokio",
  "thaw/ssr",
  "dep:actix-web-actors",
  "dep:actix",
  #"leptonic/ssr"
  "dep:lazy_static"
]
async = ["server","immt-controller/async"]

[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"
strip = "symbols"

#[package.metadata.leptonic]
#style-dir = "style"
#js-dir = "assets"

#[package.metadata.leptos]
## The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
#output-name = "immt"
## The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
#site-root = "target/web"
## The site-root relative folder where all compiled output (JS, WASM and CSS) is written
## Defaults to pkg
#site-pkg-dir = "pkg"
## [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
#style-file = "style/main.scss"
## Assets source dir. All files found here will be copied and synchronized to site-root.
## The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
##
## Optional. Env: LEPTOS_ASSETS_DIR.
#assets-dir = "assets"
## The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
##site-addr = "127.0.0.1:3000"
## The port to use for automatic reload monitoring
##reload-port = 3001
## [Optional] Command to use when running end2end tests. It will run in the end2end dir.
##   [Windows] for non-WSL use "npx.cmd playwright test"
##   This binary name can be checked in Powershell with Get-Command npx
##end2end-cmd = "npx playwright test"
##end2end-dir = "end2end"
##  The browserlist query used for optimizing the CSS.
#browserquery = "defaults"
## The environment Leptos will run in, usually either "DEV" or "PROD"
##env = "DEV"
## The features to use when compiling the bin target
##
## Optional. Can be over-ridden with the command line parameter --bin-features
#bin-features = ["server"]

## If the --no-default-features flag should be used when compiling the bin target
##
## Optional. Defaults to false.
#bin-default-features = false

## The features to use when compiling the lib target
##
## Optional. Can be over-ridden with the command line parameter --lib-features
#lib-features = ["client"]

## If the --no-default-features flag should be used when compiling the lib target
##
## Optional. Defaults to false.
#lib-default-features = false

## The profile to use for the lib target when compiling for release
##
## Optional. Defaults to "release".
#lib-profile-release = "wasm-release"