[env]
DATABASE_URL = "sqlite:./resources/migrations/users.sqlite?mode=rwc"
LEPTOS_SASS_VERSION = "1.87.0"
RUSTDOCFLAGS = "--enable-index-page -Zunstable-options --generate-link-to-definition --cfg docsrs"

[tasks.db-create]
workspace = false
install_crate = "sqlx-cli"
command = "cargo"
args = ["sqlx", "database", "create"]

[tasks.db-migrate]
workspace = false
install_crate = "sqlx-cli"
command = "cargo"
args = ["sqlx", "migrate", "run", "--source", "resources/migrations"]

[tasks.db-setup]
workspace = false
install_crate = "sqlx-cli"
command = "cargo"
args = [
    "sqlx",
    "prepare",
    "--workspace",
    "--",
    "--features=backend",
    "--package=flams-database",
]

[tasks.db]
workspace = false
dependencies = ["db-create", "db-migrate", "db-setup"]

[tasks.leptos-release]
workspace = false
install_crate = "cargo-leptos"
command = "cargo"
args = ["leptos", "build", "--release"]

[tasks.doc]
workspace = false
install_crate = false
command = "cargo"
args = [
    "+nightly",
    "doc",
    "--workspace",
    "--no-deps",
    "--all-features",
    "--release",
    "--document-private-items",
]


[tasks.docs]
alias = "doc"

[tasks.copy-to-bin]
workspace = false
script_runner = "@rust"
script = '''
use std::path::Path;
fn copy_dir_all(src: &Path, dst: &Path) -> std::io::Result<()> {
    std::fs::create_dir_all(dst)?;
    for entry in std::fs::read_dir(src)? {
        let entry = entry?;
        let ty = entry.file_type()?;
        if ty.is_dir() {
            copy_dir_all(&entry.path(), &dst.join(entry.file_name()))?;
        } else {
            std::fs::copy(&entry.path(), &dst.join(entry.file_name()))?;
        }
    }
    Ok(())
}
fn main() {
  let _ = std::fs::remove_dir_all(Path::new("./bin"));
  std::fs::create_dir_all(Path::new("./bin")).unwrap();
  copy_dir_all(&Path::new("./target/web"),&Path::new("./bin/web")).unwrap();
  std::fs::copy(Path::new("./resources/settings.toml"),Path::new("./bin/settings.toml")).unwrap();
  #[cfg(target_os="windows")]
  {
    let main_file = Path::new("./target/x86_64-pc-windows-msvc/release/flams.exe");
    if main_file.exists() {
      std::fs::copy(main_file,Path::new("./bin/flams.exe")).unwrap();
    } else {
      std::fs::copy(Path::new("./target/release/flams.exe"),Path::new("./bin/flams.exe")).unwrap();
    }
  }
  #[cfg(not(target_os="windows"))]
  {std::fs::copy(Path::new("./target/release/flams"),Path::new("./bin/flams")).unwrap();}
}
'''

[tasks.build-viewer]
workspace = false
cwd = "./ftml-viewer"
command = "cargo"
args = ["make"]

[tasks.vscode-npm-install]
workspace = false
cwd = "./source/ts/vscode"
command = "npm"
args = ["install"]

[tasks.vscode-build]
workspace = false
cwd = "./source/ts/vscode"
command = "npm"
args = ["run", "build"]
dependencies = ["vscode-npm-install"]

[tasks.vscode]
workspace = false
cwd = "./source/ts/vscode"
command = "vsce"
args = ["package", "--out", "./flams.vsix"]
dependencies = ["vscode-build"]

[tasks.copy-viewer]
workspace = false
dependencies = ["build-viewer"]
script_runner = "@shell"
script = '''
cp ./ftml-viewer/pkg/ftml.js ./resources/assets/ftml.js
cp ./ftml-viewer/pkg/ftml_bg.wasm ./resources/assets/ftml_bg.wasm
'''

[tasks.all-release]
workspace = false
dependencies = [
    "build-viewer",
    "copy-viewer",
    "db",
    "leptos-release",
    "copy-to-bin",
]

[tasks.dev]
workspace = false
install_crate = "cargo-leptos"
command = "cargo"
args = ["leptos", "build"]
# dependencies = ["db"]
# dependencies = ["build-viewer","copy-viewer","db"]

[tasks.watch]
workspace = false
install_crate = "cargo-leptos"
command = "cargo"
args = [
    "leptos",
    "watch",
    "--",
    "--port",
    "3000",
    "-c",
    "/home/jazzpirate/work/Software/sTeX/FLAMS/settings.toml",
]

[tasks.default]
workspace = false
alias = "all-release"
