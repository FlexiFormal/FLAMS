[workspace]
members = [
  #"api", "controller", "core", "main", "shtml", "stex", "web/main", "web/orm", 
  "source/main","source/utils", "source/ontology", "source/system", "source/web-utils",
  "source/lsp",
  "source/stex","source/shtml/system",
  "source/shtml/viewer", 
  "source/shtml/viewer-components", "source/shtml/extraction",
  #"source/vscode"
  ]
resolver = "2"
exclude = ["old"#"web/graphs","test-plugin","tests","thaw",
  #"api", "controller", "core", "main", "shtml", "stex", "web/main", "web/orm"
]

[profile.release]
opt-level = 2
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true

[profile.wasm-dev]
inherits = "dev"
opt-level = 2
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = 'unwind'
incremental = true
codegen-units = 256
rpath = false

[workspace.metadata.wasm-pack.profile.dev.wasm-bindgen]
debug-js-glue = true
demangle-name-section = true
dwarf-debug-info = true

[workspace.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[workspace.lints.rust]
#unsafe_code = "deny"

[workspace.lints.clippy]
pedantic = "deny"
nursery = "deny"
unwrap_used = "deny"
module_name_repetitions = {level="allow",priority=1}
enum_glob_use = {level="allow",priority=1}

[workspace.dependencies]
# immt
immt-shtml = { path = "source/shtml/system",version="0.0.1"}
immt-stex = {path = "source/stex",version="0.0.1"}
immt-utils = { path = "source/utils",version="0.0.1" }
immt-ontology = { path = "source/ontology",version="0.0.1" }
immt-system = { path = "source/system",version="0.0.1" }
immt-lsp = { path = "source/lsp",version="0.0.1" }
immt-web-utils = { path = "source/web-utils",version="0.0.1" }
# shtml-viewer = { path = "shtml/viewer",version="0.0.1" }
shtml-extraction = { path = "source/shtml/extraction",version="0.0.1" }
shtml-viewer-components = { path = "source/shtml/viewer-components",version="0.0.1" }

# utils
const-str = "0.5"
triomphe = "0.1"
parking_lot = "0.12"
serde = { version = "1", features = ["derive"] }
serde_json = { version="1",features = ["unbounded_depth"] }
rustc-hash = "2"
chrono = "0.4"
oxrdf = "0.2.3"
smallvec = { version="2.0.0-alpha.7",features = ["specialization"] }
lazy_static = "1.5"
url = "2"
either = "1"
const_format = "0.2"
paste = "1"
urlencoding = "2.1"
send_wrapper = "0.6.0"
inventory = "0.3"
rayon = "1.10"
spliter="0.1"
walkdir = "2.5"
regex = "1.10"
async-broadcast = "0.7"
simple-home-dir = "0.4"
async-trait = "0.1"
bincode = { version="2.0.0-rc.3",features = ["derive","serde"] }
# cfg-if = "1"
tokio = { version = "1"}#, features = ["fs","io-util","sync","test-util","macros","rt"] }
tokio-util = { version="0.7", features = ["compat"] }

password-hash = {version="0.5"}
argon2 = {version="0.5"}

tracing = "0.1"
tracing-subscriber = { version="0.3",features = ["smallvec","parking_lot","json"] }
tracing-appender = "0.2"
tracing-error = "0.2"

toml = "0.8"
color-eyre = "0.6"
clap = { version="4.5",features=["derive"] }

oxigraph = { version = "0.4",default-features = false }
spargebra = "0.3"
sparesults = "0.2"
oxrdfio = { version = "0.1"}#, features = ["async-tokio"] }

sqlx = {version="0.8", features=["sqlite","macros","runtime-tokio"]}
libsqlite3-sys = {version="*",features=["bundled"]}
rstest = "0.23"
html5ever = "0.29.0"

async-lsp = {version="0.2",features=["tokio","async-io"]}
futures = {version="0.3"}

image = { version = "0.25"}
webp = { version= "0.3"}
dashmap = { version = "6" }

# leptos
leptos = { version = "=0.7.0-rc3", features=["nightly"]}
leptos_axum = "=0.7.0-rc3"
leptos_meta= "=0.7.0-rc3"
leptos_router = { version = "=0.7.0-rc3", features=["nightly"]}

#thaw = { features=["nightly"],git = "https://github.com/thaw-ui/thaw", rev = "cc4f87091b6e8973ed31899e1bbe8988c48d00ed"}
thaw = { version="0.4.0-beta5",features=["nightly"] }
#thaw_components = { git = "https://github.com/thaw-ui/thaw", rev = "cc4f87091b6e8973ed31899e1bbe8988c48d00ed"}
thaw_components = "0.2.0-beta5"
#thaw_utils = { features=["nightly"], git = "https://github.com/thaw-ui/thaw", rev = "cc4f87091b6e8973ed31899e1bbe8988c48d00ed"}
thaw_utils = {features=["nightly"],version="0.1.0-beta5"}

icondata_bi = "0"
icondata_ai = "0"
icondata_ch = "0"

axum = {version="0.7",features=["ws"]}
axum-macros = {version="0.4.2"}
# leptos_axum requires 0.4:
tower = {version="0.5",features=["util"]}
tower-http = {version="0.6",features=["fs","trace","cors"]}
tower-sessions = { version="0.13"}
axum-login = {version = "0.16"}
http = {version="1"}

# wasm
tracing-wasm = "0.2"
wasm-bindgen = "=0.2.95"
console_error_panic_hook = "0.1.7"
reqwasm = "0.5"
#reqwest = {version="0.12",features=["json"]}
gloo-storage = "0.3"
web-sys = { version = "0.3" }
tsify-next = {version="0.5", features = ["js"]}
js-sys = "0.3"

leptos-dyn-dom = {git = "https://github.com/Jazzpirate/leptos-dyn-dom"}
#leptos-dyn-dom = { path="../leptos_dyn_dom"}
RusTeX = {git = "https://github.com/Jazzpirate/RusTeX",features = ["multithreaded"]}
#RusTeX = {path= "../RusTeXNew/rustex",features = ["multithreaded"]}
tex_engine = {git = "https://github.com/Jazzpirate/RusTeX",features = ["multithreaded"]}
#tex_engine = {path= "../RusTeXNew/tex_engine",features = ["multithreaded"]}

#leptos_config = {version="=0.7.0-rc0"}
#leptos_dom = {version="=0.7.0-rc0"}
#leptos_hot_reload = {version="=0.7.0-rc0"}
#leptos_router_macro = {version="=0.7.0-beta5"}
#leptos_server = {version="=0.7.0-beta5"}
#hydration_context = {version="=0.2.0-beta5"}
#reactive_graph = {version="=0.1.0-beta5"}
leptos_macro = {version="=0.7.0-rc3"}
tachys = {version="=0.1.0-rc3"}
server_fn = {version="=0.7.0-rc3"}
server_fn_macro = {version="=0.7.0-rc3"}
server_fn_macro_default = {version="=0.7.0-rc3"}


[[workspace.metadata.leptos]]
# project name
name = "iMMT"
bin-package = "immt"
lib-package = "immt"
bin-features = ["ssr"]
lib-features = ["hydrate"]
lib-default-features = false
lib-profile-release = "wasm-release"
lib-profile-dev = "wasm-dev"
bin-default-features = false
site-root = "target/web"
output-name = "immt"
assets-dir = "resources/assets"
site-pkg-dir = "pkg"
style-file = "resources/main.scss"
browserquery = "defaults"
# lib-cargo-args = ["--target","wasm32-unknown-unknown","-Z","build-std=std,panic_abort,core,alloc","-Z","build-std-features=optimize_for_size,panic_immediate_abort"]

# dafuq:
# https://higherorderco.com/
# https://github.com/HigherOrderCO/kind
# https://cse.sc.edu/~pfu/document/papers/rta-tlca.pdf


# utils:
# https://docs.rs/inventory/latest/inventory/ <- cross-project collecting of things
# https://crates.io/crates/lol_html <- HTML parsing/rewriting
# https://docs.rs/memchr/2.7.4/memchr/ <- fast string search
# https://docs.rs/icondata/latest/icondata/ <- icons
# https://crates.io/crates/flume channels?

# search:
# https://docs.rs/crate/tantivy/latest

#dbs:
# https://github.com/async-graphql/async-graphql?tab=readme-ov-file
# https://github.com/surrealdb/surrealdb/pull/3797
# https://github.com/graphql-rust/juniper
# https://docs.rs/tokio-rusqlite
# https://bonsaidb.io/

# interesting: https://github.com/rodrimati1992/abi_stable_crates

# https://nullderef.com/series/rust-plugins/
# https://github.com/marioortizmanero/pdk-experiments/tree/master/abi-stable-connectors

# https://fasterthanli.me/articles/so-you-want-to-live-reload-rust
# https://www.michaelfbryan.com/rust-ffi-guide/dynamic_loading.html
# https://zicklag.github.io/rust-tutorials/rust-plugins.html

# cglue?
# https://github.com/h33p/cglue/tree/main/examples

# https://crisal.io/words/2020/02/28/C++-rust-ffi-patterns-1-complex-data-structures.html


# prolly not:
# https://gitlab.com/zack-emmert/abi_trait