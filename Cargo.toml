[workspace]
members = ["api", "controller", "core", "main", "shtml", "stex", "web/main", "web/orm"]
resolver = "2"
exclude = ["web/graphs","test-plugin","tests","thaw"]

[profile.release]
opt-level = 2
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.wasm-dev]
inherits = "dev"
opt-level = 2
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = 'unwind'
incremental = true
codegen-units = 256
rpath = false

[workspace.metadata.wasm-pack.profile.dev.wasm-bindgen]
debug-js-glue = true
demangle-name-section = true
dwarf-debug-info = true

[workspace.lints.rust]
#unsafe_code = "deny"

[workspace.lints.clippy]
enum_glob_use = "deny"
pedantic = "deny"
nursery = "deny"
unwrap_used = "deny"

[workspace.dependencies]
immt-core = { path = "core",version="0.0.1" }
immt-api = { path = "api",version="0.0.1" }
immt-controller = { path = "controller",version="0.0.1" }
immt-shtml = { path = "shtml",version="0.0.1" }
immt-stex = { path = "stex",version="0.0.1" }
immt-web = { path = "web/main",version="0.0.1" }
immt-web-orm = { path = "web/orm",version="0.0.1" }
RusTeX = {git = "https://github.com/Jazzpirate/RusTeX",features = ["multithreaded"]}
#RusTeX = {path= "../RusTeXNew/rustex",features = ["multithreaded"]}
tex_engine = {git = "https://github.com/Jazzpirate/RusTeX",features = ["multithreaded"]}
#tex_engine = {path= "../RusTeXNew/tex_engine",features = ["multithreaded"]}

[[workspace.metadata.leptos]]
# project name
name = "iMMT"
bin-package = "immt"
lib-package = "immt-web"
bin-features = ["server"]
lib-features = ["client"]
lib-default-features = false
lib-profile-release = "wasm-release"
lib-profile-dev = "wasm-dev"
bin-default-features = false
site-root = "target/web"
output-name = "immt"
assets-dir = "web/main/assets"
site-pkg-dir = "pkg"
style-file = "web/main/style/main.scss"
browserquery = "defaults"
lib-cargo-args = ["--target","wasm32-unknown-unknown"]#,"-Z","build-std=std,panic_abort,core,alloc","-Z","build-std-features=optimize_for_size,panic_immediate_abort"]

# dafuq:
# https://higherorderco.com/
# https://github.com/HigherOrderCO/kind
# https://cse.sc.edu/~pfu/document/papers/rta-tlca.pdf


# utils:
# https://crates.io/crates/lol_html <- HTML parsing/rewriting
# https://docs.rs/memchr/2.7.4/memchr/ <- fast string search
# https://docs.rs/icondata/latest/icondata/ <- icons
# https://docs.rs/smallvec/latest/smallvec/
# https://docs.rs/arrayvec/latest/arrayvec/
# https://crates.io/crates/flume channels?

# search:
# https://docs.rs/crate/tantivy/latest

#dbs:
# https://github.com/async-graphql/async-graphql?tab=readme-ov-file
# https://github.com/surrealdb/surrealdb/pull/3797
# https://github.com/graphql-rust/juniper
# https://docs.rs/tokio-rusqlite
# https://bonsaidb.io/

# interesting: https://github.com/rodrimati1992/abi_stable_crates

# https://nullderef.com/series/rust-plugins/
# https://github.com/marioortizmanero/pdk-experiments/tree/master/abi-stable-connectors

# https://fasterthanli.me/articles/so-you-want-to-live-reload-rust
# https://www.michaelfbryan.com/rust-ffi-guide/dynamic_loading.html
# https://zicklag.github.io/rust-tutorials/rust-plugins.html

# cglue?
# https://github.com/h33p/cglue/tree/main/examples

# https://crisal.io/words/2020/02/28/C++-rust-ffi-patterns-1-complex-data-structures.html


# nais: https://crates.io/crates/triomphe


# prolly not:
# https://gitlab.com/zack-emmert/abi_trait