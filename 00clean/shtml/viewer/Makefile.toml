[tasks.wasm-pack]
install_crate = "wasm-pack"
command = "wasm-pack"
args = ["build","--target","no-modules"]# -Z build-std-features=optimize_for_size,panic_immediate_abort",#"-Z","-Clto","-Z","-Cstrip=debuginfo",
   # "-Z","build-std=std,panic_abort,core,alloc","-Z","build-std-features=optimize_for_size,panic_immediate_abort"]

[tasks.wasm-pack-dev]
install_crate = "wasm-pack"
command = "wasm-pack"
args = ["build","--target","no-modules","--dev"]


[tasks.update-js]
script_runner = "@rust"
script = '''
use std::{io::Write, path::PathBuf};
fn main() {
    let old_js_file = PathBuf::from(".").join("pkg").join("shtml_viewer.js");
    let js_file = old_js_file.clone(); //PathBuf::from(".").join("pkg").join("shtml.js");
    let jv = std::fs::read_to_string(&old_js_file).unwrap();
    std::fs::File::create(js_file).unwrap().write_all(format!(r#"{jv}
const {{ run, set_server_url }} = wasm_bindgen;

var PRIVATE__do_shtml_on_start = () => {{}};
function shtml_on_start(f) {{
    let old = PRIVATE__do_shtml_on_start;
    PRIVATE__do_shtml_on_start = () => {{
        old();
        f();
    }};
}}

async function shtml_start() {{
    await wasm_bindgen();
    PRIVATE__do_shtml_on_start();
}}
shtml_start();
    "#).as_bytes()).unwrap();
}
'''

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.build]
dependencies = ["wasm-pack","update-js"]

[tasks.build-dev]
dependencies = ["wasm-pack-dev","update-js"]